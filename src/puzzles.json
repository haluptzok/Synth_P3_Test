[
  {
    "name": "Study_1:0",
    "sat": "def sat(s: str):\n    return s.count('o') == 1000 and s.count('oo') == 0",
    "ans_type": "str",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"Find a string with 1000 'o's but no two adjacent 'o's.\"\"\"",
    "sol_bodies": [
      "    return ('h' + 'o') * 1000"
    ],
    "module": "study.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "Study_2:0",
    "sat": "def sat(s: str):\n    return s.count('o') == 1000 and s.count('oo') == 100 and s.count('ho') == 801",
    "ans_type": "str",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"Find a string with 1000 'o's, 100 pairs of adjacent 'o's and 801 copies of 'ho'.\"\"\"",
    "sol_bodies": [
      "    return 'ho' * (800 + 1) + 'o' * (100 * 2 - 1)"
    ],
    "module": "study.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "Study_3:0",
    "sat": "def sat(li: List[int]):\n    return sorted(li) == list(range(999)) and all(li[i] != i for i in range(len(li)))",
    "ans_type": "List[int]",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"Find a permutation of [0, 1, ..., 998] such that the ith element is *not* i, for all i=0, 1, ..., 998.\"\"\"",
    "sol_bodies": [
      "    return [((i + 1) % 999) for i in range(999)]"
    ],
    "module": "study.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "Study_4:0",
    "sat": "def sat(li: List[int]):\n    return len(li) == 10 and li.count(li[3]) == 2",
    "ans_type": "List[int]",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"Find a list of length 10 where the fourth element occurs exactly twice.\"\"\"",
    "sol_bodies": [
      "    return list(range(10 // 2)) * 2"
    ],
    "module": "study.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "Study_5:0",
    "sat": "def sat(li: List[int]):\n    return all([li.count(i) == i for i in range(10)])",
    "ans_type": "List[int]",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"Find a list integers such that the integer i occurs i times, for i = 0, 1, 2, ..., 9.\"\"\"",
    "sol_bodies": [
      "    return [i for i in range(10) for j in range(i)]"
    ],
    "module": "study.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "Study_6:0",
    "sat": "def sat(i: int):\n    return i % 123 == 4 and i > 10 ** 10",
    "ans_type": "int",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"Find an integer greater than 10^10 which is 4 mod 123.\"\"\"",
    "sol_bodies": [
      "    return 4 + 10 ** 10 + 123 - 10 ** 10 % 123"
    ],
    "module": "study.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "Study_7:0",
    "sat": "def sat(s: str):\n    return str(8 ** 2888).count(s) > 8 and len(s) == 3",
    "ans_type": "str",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"Find a three-digit pattern  that occurs more than 8 times in the decimal representation of 8^2888.\"\"\"",
    "sol_bodies": [
      "    s = str(8 ** 2888)\n    return max({s[i: i + 3] for i in range(len(s) - 2)}, key=lambda t: s.count(t))"
    ],
    "module": "study.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "Study_8:0",
    "sat": "def sat(ls: List[str]):\n    return ls[1234] in ls[1235] and ls[1234] != ls[1235]",
    "ans_type": "List[str]",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"Find a list of more than 1235 strings such that the 1234th string is a proper substring of the 1235th.\"\"\"",
    "sol_bodies": [
      "    return [''] * 1235 + ['a']"
    ],
    "module": "study.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "Study_9:0",
    "sat": "def sat(li: List[int]):\n    return [\"The quick brown fox jumps over the lazy dog\"[i] for i in li] == list(\n        \"The five boxing wizards jump quickly\")",
    "ans_type": "List[int]",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"\n    Find a way to rearrange the letters in the pangram \"The quick brown fox jumps over the lazy dog\" to get\n    the pangram \"The five boxing wizards jump quickly\". The answer should be represented as a list of index\n    mappings.\n    \"\"\"",
    "sol_bodies": [
      "    return ['The quick brown fox jumps over the lazy dog'.index(t)\n            for t in 'The five boxing wizards jump quickly']"
    ],
    "module": "study.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "Study_10:0",
    "sat": "def sat(s: str):\n    return s in str(8 ** 1818) and s == s[::-1] and len(s) > 11",
    "ans_type": "str",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"Find a palindrome of length greater than 11 in the decimal representation of 8^1818.\"\"\"",
    "sol_bodies": [
      "    s = str(8 ** 1818)\n    return next(s[i: i + le]\n                for le in range(12, len(s) + 1)\n                for i in range(len(s) - le + 1)\n                if s[i: i + le] == s[i: i + le][::-1]\n                )"
    ],
    "module": "study.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "Study_11:0",
    "sat": "def sat(ls: List[str]):\n    return min(ls) == max(ls) == str(len(ls))",
    "ans_type": "List[str]",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"\n    Find a list of strings whose length (viewed as a string) is equal to the lexicographically largest element\n    and is equal to the lexicographically smallest element.\n    \"\"\"",
    "sol_bodies": [
      "    return ['1']"
    ],
    "module": "study.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "Study_12:0",
    "sat": "def sat(li: List[int]):\n    return all(i + j == 9 for i, j in zip([4] + li, li)) and len(li) == 1000",
    "ans_type": "List[int]",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"Find a list of 1,000 integers where every two adjacent integers sum to 9, and where the first\n    integer plus 4 is 9.\"\"\"",
    "sol_bodies": [
      "    return [9 - 4, 4] * (1000 // 2)"
    ],
    "module": "study.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "Study_13:0",
    "sat": "def sat(x: float):\n    return str(x - 3.1415).startswith(\"123.456\")",
    "ans_type": "float",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"Find a real number which, when you subtract 3.1415, has a decimal representation starting with 123.456.\"\"\"",
    "sol_bodies": [
      "    return 123.456 + 3.1415"
    ],
    "module": "study.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "Study_14:0",
    "sat": "def sat(li: List[int]):\n    return all([sum(li[:i]) == i for i in range(20)])",
    "ans_type": "List[int]",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"Find a list of integers such that the sum of the first i integers is i, for i=0, 1, 2, ..., 19.\"\"\"",
    "sol_bodies": [
      "    return [1] * 20"
    ],
    "module": "study.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "Study_15:0",
    "sat": "def sat(li: List[int]):\n    return all(sum(li[:i]) == 2 ** i - 1 for i in range(20))",
    "ans_type": "List[int]",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"Find a list of integers such that the sum of the first i integers is 2^i -1, for i = 0, 1, 2, ..., 19.\"\"\"",
    "sol_bodies": [
      "    return [(2 ** i) for i in range(20)]"
    ],
    "module": "study.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "Study_16:0",
    "sat": "def sat(s: str):\n    return float(s) + len(s) == 4.5",
    "ans_type": "str",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"Find a real number such that when you add the length of its decimal representation to it, you get 4.5.\n    Your answer should be the string form of the number in its decimal representation.\"\"\"",
    "sol_bodies": [
      "    return str(4.5 - len(str(4.5)))"
    ],
    "module": "study.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "Study_17:0",
    "sat": "def sat(i: int):\n    return len(str(i + 1000)) > len(str(i + 1001))",
    "ans_type": "int",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"Find a number whose decimal representation is *a longer string* when you add 1,000 to it than when you add 1,001.\"\"\"",
    "sol_bodies": [
      "    return -1001"
    ],
    "module": "study.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "Study_18:0",
    "sat": "def sat(ls: List[str]):\n    return [s + t for s in ls for t in ls if s != t] == 'berlin berger linber linger gerber gerlin'.split()",
    "ans_type": "List[str]",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"\n    Find a list of strings that when you combine them in all pairwise combinations gives the six strings:\n    'berlin', 'berger', 'linber', 'linger', 'gerber', 'gerlin'\n    \"\"\"",
    "sol_bodies": [
      "    seen = set()\n    ans = []\n    for s in 'berlin berger linber linger gerber gerlin'.split():\n        t = s[:3]\n        if t not in seen:\n            ans.append(t)\n            seen.add(t)\n    return ans"
    ],
    "module": "study.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "Study_19:0",
    "sat": "def sat(li: List[int]):\n    return {i + j for i in li for j in li} == {0, 1, 2, 3, 4, 5, 6, 17, 18, 19, 20, 34}",
    "ans_type": "List[int]",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"\n    Find a list of integers whose pairwise sums make the set {0, 1, 2, 3, 4, 5, 6, 17, 18, 19, 20, 34}.\n    That is find L such that, { i + j | i, j in L } = {0, 1, 2, 3, 4, 5, 6, 17, 18, 19, 20, 34}.\n    \"\"\"",
    "sol_bodies": [
      "    return [0, 1, 2, 3, 17]"
    ],
    "module": "study.py",
    "notes": "9/15/2021 Updated to take a list rather than a set because it was the only puzzle in the repo with Set argument.",
    "weight": 1.0
  },
  {
    "name": "Study_20:0",
    "sat": "def sat(li: List[int]):\n    return all(j in {i - 1, i + 1, 3 * i} for i, j in zip([0] + li, li + [128]))",
    "ans_type": "List[int]",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"\n    Find a list of integers, starting with 0 and ending with 128, such that each integer either differs from\n    the previous one by one or is thrice the previous one.\n    \"\"\"",
    "sol_bodies": [
      "    return [1, 3, 4, 12, 13, 14, 42, 126, 127]"
    ],
    "module": "study.py",
    "notes": "A more interesting version of this puzzle with a length constraint is ShortIntegerPath in graphs.py",
    "weight": 1.0
  },
  {
    "name": "Study_21:0",
    "sat": "def sat(li: List[int]):\n    return all([li[i] != li[i + 1] for i in range(10)]) and len(set(li)) == 3",
    "ans_type": "List[int]",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"\n    Find a list integers containing exactly three distinct values, such that no integer repeats\n    twice consecutively among the first eleven entries. (So the list needs to have length greater than ten.)\n    \"\"\"",
    "sol_bodies": [
      "    return list(range(3)) * 10"
    ],
    "module": "study.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "Study_22:0",
    "sat": "def sat(s: str):\n    return s[::2] in s and len(set(s)) == 5",
    "ans_type": "str",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"\n    Find a string s containing exactly five distinct characters which also contains as a substring every other\n    character of s (e.g., if the string s were 'parrotfish' every other character would be 'profs').\n    \"\"\"",
    "sol_bodies": [
      "    return \"\"\"abacadaeaaaaaaaaaa\"\"\""
    ],
    "module": "study.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "Study_23:0",
    "sat": "def sat(ls: List[str]):\n    return tuple(ls) in zip('dee', 'doo', 'dah!')",
    "ans_type": "List[str]",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"\n    Find a list of characters which are aligned at the same indices of the three strings 'dee', 'doo', and 'dah!'.\n    \"\"\"",
    "sol_bodies": [
      "    return list(next(zip('dee', 'doo', 'dah!')))"
    ],
    "module": "study.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "Study_24:0",
    "sat": "def sat(li: List[int]):\n    return li.count(17) == 3 and li.count(3) >= 2",
    "ans_type": "List[int]",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"Find a list of integers with exactly three occurrences of seventeen and at least two occurrences of three.\"\"\"",
    "sol_bodies": [
      "    return [17] * 3 + [3] * 2"
    ],
    "module": "study.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "Study_25:0",
    "sat": "def sat(s: str):\n    return sorted(s) == sorted('Permute me true') and s == s[::-1]",
    "ans_type": "str",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"Find a permutation of the string 'Permute me true' which is a palindrome.\"\"\"",
    "sol_bodies": [
      "    s = sorted('Permute me true'[1:])[::2]\n    return \"\".join(s + ['P'] + s[::-1])"
    ],
    "module": "study.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "Study_26:0",
    "sat": "def sat(ls: List[str]):\n    return \"\".join(ls) == str(8 ** 88) and all(len(s) == 8 for s in ls)",
    "ans_type": "List[str]",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"Divide the decimal representation of 8^88 up into strings of length eight.\"\"\"",
    "sol_bodies": [
      "    return [str(8 ** 88)[i:i + 8] for i in range(0, len(str(8 ** 88)), 8)]"
    ],
    "module": "study.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "Study_27:0",
    "sat": "def sat(li: List[int]):\n    return li[li[0]] != li[li[1]] and li[li[li[0]]] == li[li[li[1]]]",
    "ans_type": "List[int]",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"\n    Consider a digraph where each node has exactly one outgoing edge. For each edge (u, v), call u the parent and\n    v the child. Then find such a digraph where the grandchildren of the first and second nodes differ but they\n    share the same great-grandchildren. Represented this digraph by the list of children indices.\n    \"\"\"",
    "sol_bodies": [
      "    return [1, 2, 3, 3]"
    ],
    "module": "study.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "Study_28:0",
    "sat": "def sat(li: List[int]):\n    return all(i in range(1000) and abs(i - j) >= 10 for i in li for j in li if i != j) and len(set(li)) == 100",
    "ans_type": "List[int]",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"Find a list of one hundred integers between 0 and 999 which all differ by at least ten from one another.\"\"\"",
    "sol_bodies": [
      "    return list(range(0, 1000, 10))"
    ],
    "module": "study.py",
    "notes": "9/15/2021: updated to a list since sets were removed from puzzle formats",
    "weight": 1.0
  },
  {
    "name": "Study_29:0",
    "sat": "def sat(l: List[int]):\n    return all(i in range(1000) and abs(i * i - j * j) >= 10 for i in l for j in l if i != j) and len(set(l)) > 995",
    "ans_type": "List[int]",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"\n    Find a list of more than 995 distinct integers between 0 and 999, inclusive, such that each pair of integers\n    have squares that differ by at least 10.\n    \"\"\"",
    "sol_bodies": [
      "    return [0, 4] + list(range(6, 1000))"
    ],
    "module": "study.py",
    "notes": "9/15/2021: updated to a list since sets were removed from puzzle formats",
    "weight": 1.0
  },
  {
    "name": "Study_30:0",
    "sat": "def sat(li: List[int]):\n    return all([123 * li[i] % 1000 < 123 * li[i + 1] % 1000 and li[i] in range(1000) for i in range(20)])",
    "ans_type": "List[int]",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"\n    Define f(n) to be the residue of 123 times n mod 1000. Find a list of integers such that the first twenty one\n    are between 0 and 999, inclusive, and are strictly increasing in terms of f(n).\n    \"\"\"",
    "sol_bodies": [
      "    return sorted(range(1000), key=lambda n: 123 * n % 1000)[:21]",
      "    return list(range(1000))[::8][::-1]"
    ],
    "module": "study.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "TowersOfHanoi:0",
    "sat": "def sat(moves: List[List[int]]):\n    rods = ([8, 7, 6, 5, 4, 3, 2, 1], [], [])\n    for [i, j] in moves:\n        rods[j].append(rods[i].pop())\n        assert rods[j][-1] == min(rods[j]), \"larger disk on top of smaller disk\"\n    return rods[0] == rods[1] == []",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"\n    Eight disks of sizes 1-8 are stacked on three towers, with each tower having disks in order of largest to\n    smallest. Move [i, j] corresponds to taking the smallest disk off tower i and putting it on tower j, and it\n    is legal as long as the towers remain in sorted order. Find a sequence of moves that moves all the disks\n    from the first to last towers.\n    \"\"\"",
    "sol_bodies": [
      "    def helper(m, i, j):\n        if m == 0:\n            return []\n        k = 3 - i - j\n        return helper(m - 1, i, k) + [[i, j]] + helper(m - 1, k, j)\n\n    return helper(8, 0, 2)"
    ],
    "module": "classic_puzzles.py",
    "notes": "[Towers of Hanoi](https://en.wikipedia.org/w/index.php?title=Tower_of_Hanoi)\n\nIn this classic version one must move all 8 disks from the first to third peg.",
    "weight": 1.0
  },
  {
    "name": "TowersOfHanoiArbitrary:0",
    "sat": "def sat(moves: List[List[int]], source=[[0, 7], [4, 5, 6], [1, 2, 3, 8]], target=[[0, 1, 2, 3, 8], [4, 5], [6, 7]]):\n    state = [s[:] for s in source]\n\n    for [i, j] in moves:\n        state[j].append(state[i].pop())\n        assert state[j] == sorted(state[j])\n\n    return state == target",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(source=[[0, 7], [4, 5, 6], [1, 2, 3, 8]], target=[[0, 1, 2, 3, 8], [4, 5], [6, 7]]):",
    "sol_docstring": "    \"\"\"\n    A state is a partition of the integers 0-8 into three increasing lists. A move is pair of integers i, j in\n    {0, 1, 2} corresponding to moving the largest number from the end of list i to list j, while preserving the\n    order of list j. Find a sequence of moves that transform the given source to target states.\n    \"\"\"",
    "sol_bodies": [
      "    state = {d: i for i, tower in enumerate(source) for d in tower}\n    final = {d: i for i, tower in enumerate(target) for d in tower}\n    disks = set(state)\n    assert disks == set(final) and all(isinstance(i, int) for i in state) and len(source) == len(target) >= 3\n    ans = []\n\n    def move(d, i):  # move disk d to tower i\n        if state[d] == i:\n            return\n        for t in range(3):  # first tower besides i, state[d]\n            if t != i and t != state[d]:\n                break\n        for d2 in range(d + 1, max(disks) + 1):\n            if d2 in disks:\n                move(d2, t)\n        ans.append([state[d], i])\n        state[d] = i\n\n    for d in range(min(disks), max(disks) + 1):\n        if d in disks:\n            move(d, final[d])\n\n    return ans"
    ],
    "module": "classic_puzzles.py",
    "notes": "[Towers of Hanoi](https://en.wikipedia.org/w/index.php?title=Tower_of_Hanoi)\n\nIn this version one must transform a given source state to a target state.",
    "weight": 1.0
  },
  {
    "name": "TowersOfHanoiArbitrary:1",
    "sat": "def sat(moves: List[List[int]], source=[[1, 3, 5], [2, 8, 14], [0, 4, 6, 7, 9, 10, 11, 12, 13]], target=[[5, 12], [0, 3, 4, 7, 10, 11], [1, 2, 6, 8, 9, 13, 14]]):\n    state = [s[:] for s in source]\n\n    for [i, j] in moves:\n        state[j].append(state[i].pop())\n        assert state[j] == sorted(state[j])\n\n    return state == target",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(source=[[1, 3, 5], [2, 8, 14], [0, 4, 6, 7, 9, 10, 11, 12, 13]], target=[[5, 12], [0, 3, 4, 7, 10, 11], [1, 2, 6, 8, 9, 13, 14]]):",
    "sol_docstring": "    \"\"\"\n    A state is a partition of the integers 0-8 into three increasing lists. A move is pair of integers i, j in\n    {0, 1, 2} corresponding to moving the largest number from the end of list i to list j, while preserving the\n    order of list j. Find a sequence of moves that transform the given source to target states.\n    \"\"\"",
    "sol_bodies": [
      "    state = {d: i for i, tower in enumerate(source) for d in tower}\n    final = {d: i for i, tower in enumerate(target) for d in tower}\n    disks = set(state)\n    assert disks == set(final) and all(isinstance(i, int) for i in state) and len(source) == len(target) >= 3\n    ans = []\n\n    def move(d, i):  # move disk d to tower i\n        if state[d] == i:\n            return\n        for t in range(3):  # first tower besides i, state[d]\n            if t != i and t != state[d]:\n                break\n        for d2 in range(d + 1, max(disks) + 1):\n            if d2 in disks:\n                move(d2, t)\n        ans.append([state[d], i])\n        state[d] = i\n\n    for d in range(min(disks), max(disks) + 1):\n        if d in disks:\n            move(d, final[d])\n\n    return ans"
    ],
    "module": "classic_puzzles.py",
    "notes": "[Towers of Hanoi](https://en.wikipedia.org/w/index.php?title=Tower_of_Hanoi)\n\nIn this version one must transform a given source state to a target state.",
    "weight": 1.0
  },
  {
    "name": "TowersOfHanoiArbitrary:2",
    "sat": "def sat(moves: List[List[int]], source=[[0, 1, 6, 7, 8, 9, 14, 16], [5, 15], [2, 3, 4, 10, 11, 12, 13]], target=[[1, 2, 4, 5, 13], [3, 6, 11, 12, 14], [0, 7, 8, 9, 10, 15, 16]]):\n    state = [s[:] for s in source]\n\n    for [i, j] in moves:\n        state[j].append(state[i].pop())\n        assert state[j] == sorted(state[j])\n\n    return state == target",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(source=[[0, 1, 6, 7, 8, 9, 14, 16], [5, 15], [2, 3, 4, 10, 11, 12, 13]], target=[[1, 2, 4, 5, 13], [3, 6, 11, 12, 14], [0, 7, 8, 9, 10, 15, 16]]):",
    "sol_docstring": "    \"\"\"\n    A state is a partition of the integers 0-8 into three increasing lists. A move is pair of integers i, j in\n    {0, 1, 2} corresponding to moving the largest number from the end of list i to list j, while preserving the\n    order of list j. Find a sequence of moves that transform the given source to target states.\n    \"\"\"",
    "sol_bodies": [
      "    state = {d: i for i, tower in enumerate(source) for d in tower}\n    final = {d: i for i, tower in enumerate(target) for d in tower}\n    disks = set(state)\n    assert disks == set(final) and all(isinstance(i, int) for i in state) and len(source) == len(target) >= 3\n    ans = []\n\n    def move(d, i):  # move disk d to tower i\n        if state[d] == i:\n            return\n        for t in range(3):  # first tower besides i, state[d]\n            if t != i and t != state[d]:\n                break\n        for d2 in range(d + 1, max(disks) + 1):\n            if d2 in disks:\n                move(d2, t)\n        ans.append([state[d], i])\n        state[d] = i\n\n    for d in range(min(disks), max(disks) + 1):\n        if d in disks:\n            move(d, final[d])\n\n    return ans"
    ],
    "module": "classic_puzzles.py",
    "notes": "[Towers of Hanoi](https://en.wikipedia.org/w/index.php?title=Tower_of_Hanoi)\n\nIn this version one must transform a given source state to a target state.",
    "weight": 1.0
  },
  {
    "name": "TowersOfHanoiArbitrary:3",
    "sat": "def sat(moves: List[List[int]], source=[[2, 11, 12, 16], [1, 3, 6, 8, 9, 10, 13], [0, 4, 5, 7, 14, 15]], target=[[0, 2, 3, 5, 7, 8, 14, 16], [9, 11, 12, 13, 15], [1, 4, 6, 10]]):\n    state = [s[:] for s in source]\n\n    for [i, j] in moves:\n        state[j].append(state[i].pop())\n        assert state[j] == sorted(state[j])\n\n    return state == target",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(source=[[2, 11, 12, 16], [1, 3, 6, 8, 9, 10, 13], [0, 4, 5, 7, 14, 15]], target=[[0, 2, 3, 5, 7, 8, 14, 16], [9, 11, 12, 13, 15], [1, 4, 6, 10]]):",
    "sol_docstring": "    \"\"\"\n    A state is a partition of the integers 0-8 into three increasing lists. A move is pair of integers i, j in\n    {0, 1, 2} corresponding to moving the largest number from the end of list i to list j, while preserving the\n    order of list j. Find a sequence of moves that transform the given source to target states.\n    \"\"\"",
    "sol_bodies": [
      "    state = {d: i for i, tower in enumerate(source) for d in tower}\n    final = {d: i for i, tower in enumerate(target) for d in tower}\n    disks = set(state)\n    assert disks == set(final) and all(isinstance(i, int) for i in state) and len(source) == len(target) >= 3\n    ans = []\n\n    def move(d, i):  # move disk d to tower i\n        if state[d] == i:\n            return\n        for t in range(3):  # first tower besides i, state[d]\n            if t != i and t != state[d]:\n                break\n        for d2 in range(d + 1, max(disks) + 1):\n            if d2 in disks:\n                move(d2, t)\n        ans.append([state[d], i])\n        state[d] = i\n\n    for d in range(min(disks), max(disks) + 1):\n        if d in disks:\n            move(d, final[d])\n\n    return ans"
    ],
    "module": "classic_puzzles.py",
    "notes": "[Towers of Hanoi](https://en.wikipedia.org/w/index.php?title=Tower_of_Hanoi)\n\nIn this version one must transform a given source state to a target state.",
    "weight": 1.0
  },
  {
    "name": "TowersOfHanoiArbitrary:4",
    "sat": "def sat(moves: List[List[int]], source=[[5, 6], [1, 2, 4], [0, 3]], target=[[2, 3, 4, 6], [0, 1], [5]]):\n    state = [s[:] for s in source]\n\n    for [i, j] in moves:\n        state[j].append(state[i].pop())\n        assert state[j] == sorted(state[j])\n\n    return state == target",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(source=[[5, 6], [1, 2, 4], [0, 3]], target=[[2, 3, 4, 6], [0, 1], [5]]):",
    "sol_docstring": "    \"\"\"\n    A state is a partition of the integers 0-8 into three increasing lists. A move is pair of integers i, j in\n    {0, 1, 2} corresponding to moving the largest number from the end of list i to list j, while preserving the\n    order of list j. Find a sequence of moves that transform the given source to target states.\n    \"\"\"",
    "sol_bodies": [
      "    state = {d: i for i, tower in enumerate(source) for d in tower}\n    final = {d: i for i, tower in enumerate(target) for d in tower}\n    disks = set(state)\n    assert disks == set(final) and all(isinstance(i, int) for i in state) and len(source) == len(target) >= 3\n    ans = []\n\n    def move(d, i):  # move disk d to tower i\n        if state[d] == i:\n            return\n        for t in range(3):  # first tower besides i, state[d]\n            if t != i and t != state[d]:\n                break\n        for d2 in range(d + 1, max(disks) + 1):\n            if d2 in disks:\n                move(d2, t)\n        ans.append([state[d], i])\n        state[d] = i\n\n    for d in range(min(disks), max(disks) + 1):\n        if d in disks:\n            move(d, final[d])\n\n    return ans"
    ],
    "module": "classic_puzzles.py",
    "notes": "[Towers of Hanoi](https://en.wikipedia.org/w/index.php?title=Tower_of_Hanoi)\n\nIn this version one must transform a given source state to a target state.",
    "weight": 1.0
  },
  {
    "name": "LongestMonotonicSubstring:0",
    "sat": "def sat(x: List[int], length=13, s=\"Dynamic programming solves this puzzle!!!\"):\n    return all(s[x[i]] <= s[x[i + 1]] and x[i + 1] > x[i] >= 0 for i in range(length - 1))",
    "ans_type": "List[int]",
    "sol_header": "def sol(length=13, s=\"Dynamic programming solves this puzzle!!!\"):",
    "sol_docstring": "    \"\"\"\n    Remove as few characters as possible from s so that the characters of the remaining string are alphebetical.\n    Here x is the list of string indices that have not been deleted.\n    \"\"\"",
    "sol_bodies": [
      "    # O(N^2) method. Todo: add binary search solution which is O(n log n)\n    if s == \"\":\n        return []\n    n = len(s)\n    dyn = []  # list of (seq length, seq end, prev index)\n    for i in range(n):\n        try:\n            dyn.append(max((length + 1, i, e) for length, e, _ in dyn if s[e] <= s[i]))\n        except ValueError:\n            dyn.append((1, i, -1))  # sequence ends at i\n    _length, i, _ = max(dyn)\n    backwards = [i]\n    while dyn[i][2] != -1:\n        i = dyn[i][2]\n        backwards.append(i)\n    return backwards[::-1]"
    ],
    "module": "classic_puzzles.py",
    "notes": "This is a form of the classic\n[Longest increasing subsequence](https://en.wikipedia.org/wiki/Longest_increasing_subsequence) problem\nwhere the goal is to find a substring with characters in sorted order.",
    "weight": 1.0
  },
  {
    "name": "LongestMonotonicSubstring:1",
    "sat": "def sat(x: List[int], length=193, s=\"    !!\\\"\\\"\\\"#$$%&&')''((()!))****X**++,,,,---...///0111114445556888::::;s;;<<==,=>>>>ABBBBBCDEEEEEEEFGHIIKKKKLMNOOPPPQQQRRRRASUUUVVVWWXXZZZ[]]]!``aEaabbbccccPcdeeeeefghjjjjkkkllmmooooKpppppqsttwt'$ww=wLwwyyyyzz{\"):\n    return all(s[x[i]] <= s[x[i + 1]] and x[i + 1] > x[i] >= 0 for i in range(length - 1))",
    "ans_type": "List[int]",
    "sol_header": "def sol(length=193, s=\"    !!\\\"\\\"\\\"#$$%&&')''((()!))****X**++,,,,---...///0111114445556888::::;s;;<<==,=>>>>ABBBBBCDEEEEEEEFGHIIKKKKLMNOOPPPQQQRRRRASUUUVVVWWXXZZZ[]]]!``aEaabbbccccPcdeeeeefghjjjjkkkllmmooooKpppppqsttwt'$ww=wLwwyyyyzz{\"):",
    "sol_docstring": "    \"\"\"\n    Remove as few characters as possible from s so that the characters of the remaining string are alphebetical.\n    Here x is the list of string indices that have not been deleted.\n    \"\"\"",
    "sol_bodies": [
      "    # O(N^2) method. Todo: add binary search solution which is O(n log n)\n    if s == \"\":\n        return []\n    n = len(s)\n    dyn = []  # list of (seq length, seq end, prev index)\n    for i in range(n):\n        try:\n            dyn.append(max((length + 1, i, e) for length, e, _ in dyn if s[e] <= s[i]))\n        except ValueError:\n            dyn.append((1, i, -1))  # sequence ends at i\n    _length, i, _ = max(dyn)\n    backwards = [i]\n    while dyn[i][2] != -1:\n        i = dyn[i][2]\n        backwards.append(i)\n    return backwards[::-1]"
    ],
    "module": "classic_puzzles.py",
    "notes": "This is a form of the classic\n[Longest increasing subsequence](https://en.wikipedia.org/wiki/Longest_increasing_subsequence) problem\nwhere the goal is to find a substring with characters in sorted order.",
    "weight": 1.0
  },
  {
    "name": "LongestMonotonicSubstring:2",
    "sat": "def sat(x: List[int], length=737, s=\"    _   !m!!!!!!!!!!!V!\\\"=\\\"\\\"\\\"\\\"\\\"l#####$$r$$$$$$$$$%%%%%&&&&&&y&''''''@'''''<(((())))))******+++++++p,,,,,!,-----w-----o-....,.......//////D000000000000111111111222222,23h33c33334444444'4455555555566666R6@9777777T7888888-8994999999999::::::::::;;;;;;;P;;;<<<:<<^<)<<sn<<<====u=*=>>>>>>>>>???A?j??8??.?@@O@@@@@@ArAA&ABBBBBBBBBCCCCCDDDEEEEEEEEE%E(EEEEEFF!FFG-GGGGGGGGHHCHHHIGIsIIIInIIIIJJJRJFJJKKKKKKa0K<KKLL.LLLLLLMMMnMMM_MMMNNNONNOOOOOPPPP4LPPPPQQ\\\\QQQbQQQ7QQRRRRR\\\"RRSSSSSSTTgTTTTUUtUUUUUVVVVVVVVVVVqVVVMWWRWWWWWWWW%XXXXXXXXXXYYYYYZZZZZZZZZ2y[S[[[I[[[[\\\\$g\\\"\\\\\\\\\\\\\\\\T]]]]]]]]]]^^o^^______________`?&`I`y````aaaaaabbbbcccccc3ddddIu;L*dddeeee#eee]ffff1f]=fffffffffgggghhxhhhhhhiigiiiiiiiDiiCiiiijLjjIljjjjjjjkklllllmmmmJymmmmnnnnMnnnnnnoooiobooXoopppppqy5qqqdqqrrIrrrrJrssssssssTsstt'ttttZttt@tttuluuuuu0uuuvvxvvvv\\\\vv3vvvvwwwwwwba.wwx4xxxxxxxxxxxxxJyyyyyyyyyyzzzzzzzz{{{{{{{{\"):\n    return all(s[x[i]] <= s[x[i + 1]] and x[i + 1] > x[i] >= 0 for i in range(length - 1))",
    "ans_type": "List[int]",
    "sol_header": "def sol(length=737, s=\"    _   !m!!!!!!!!!!!V!\\\"=\\\"\\\"\\\"\\\"\\\"l#####$$r$$$$$$$$$%%%%%&&&&&&y&''''''@'''''<(((())))))******+++++++p,,,,,!,-----w-----o-....,.......//////D000000000000111111111222222,23h33c33334444444'4455555555566666R6@9777777T7888888-8994999999999::::::::::;;;;;;;P;;;<<<:<<^<)<<sn<<<====u=*=>>>>>>>>>???A?j??8??.?@@O@@@@@@ArAA&ABBBBBBBBBCCCCCDDDEEEEEEEEE%E(EEEEEFF!FFG-GGGGGGGGHHCHHHIGIsIIIInIIIIJJJRJFJJKKKKKKa0K<KKLL.LLLLLLMMMnMMM_MMMNNNONNOOOOOPPPP4LPPPPQQ\\\\QQQbQQQ7QQRRRRR\\\"RRSSSSSSTTgTTTTUUtUUUUUVVVVVVVVVVVqVVVMWWRWWWWWWWW%XXXXXXXXXXYYYYYZZZZZZZZZ2y[S[[[I[[[[\\\\$g\\\"\\\\\\\\\\\\\\\\T]]]]]]]]]]^^o^^______________`?&`I`y````aaaaaabbbbcccccc3ddddIu;L*dddeeee#eee]ffff1f]=fffffffffgggghhxhhhhhhiigiiiiiiiDiiCiiiijLjjIljjjjjjjkklllllmmmmJymmmmnnnnMnnnnnnoooiobooXoopppppqy5qqqdqqrrIrrrrJrssssssssTsstt'ttttZttt@tttuluuuuu0uuuvvxvvvv\\\\vv3vvvvwwwwwwba.wwx4xxxxxxxxxxxxxJyyyyyyyyyyzzzzzzzz{{{{{{{{\"):",
    "sol_docstring": "    \"\"\"\n    Remove as few characters as possible from s so that the characters of the remaining string are alphebetical.\n    Here x is the list of string indices that have not been deleted.\n    \"\"\"",
    "sol_bodies": [
      "    # O(N^2) method. Todo: add binary search solution which is O(n log n)\n    if s == \"\":\n        return []\n    n = len(s)\n    dyn = []  # list of (seq length, seq end, prev index)\n    for i in range(n):\n        try:\n            dyn.append(max((length + 1, i, e) for length, e, _ in dyn if s[e] <= s[i]))\n        except ValueError:\n            dyn.append((1, i, -1))  # sequence ends at i\n    _length, i, _ = max(dyn)\n    backwards = [i]\n    while dyn[i][2] != -1:\n        i = dyn[i][2]\n        backwards.append(i)\n    return backwards[::-1]"
    ],
    "module": "classic_puzzles.py",
    "notes": "This is a form of the classic\n[Longest increasing subsequence](https://en.wikipedia.org/wiki/Longest_increasing_subsequence) problem\nwhere the goal is to find a substring with characters in sorted order.",
    "weight": 1.0
  },
  {
    "name": "LongestMonotonicSubstring:3",
    "sat": "def sat(x: List[int], length=0, s=\"\"):\n    return all(s[x[i]] <= s[x[i + 1]] and x[i + 1] > x[i] >= 0 for i in range(length - 1))",
    "ans_type": "List[int]",
    "sol_header": "def sol(length=0, s=\"\"):",
    "sol_docstring": "    \"\"\"\n    Remove as few characters as possible from s so that the characters of the remaining string are alphebetical.\n    Here x is the list of string indices that have not been deleted.\n    \"\"\"",
    "sol_bodies": [
      "    # O(N^2) method. Todo: add binary search solution which is O(n log n)\n    if s == \"\":\n        return []\n    n = len(s)\n    dyn = []  # list of (seq length, seq end, prev index)\n    for i in range(n):\n        try:\n            dyn.append(max((length + 1, i, e) for length, e, _ in dyn if s[e] <= s[i]))\n        except ValueError:\n            dyn.append((1, i, -1))  # sequence ends at i\n    _length, i, _ = max(dyn)\n    backwards = [i]\n    while dyn[i][2] != -1:\n        i = dyn[i][2]\n        backwards.append(i)\n    return backwards[::-1]"
    ],
    "module": "classic_puzzles.py",
    "notes": "This is a form of the classic\n[Longest increasing subsequence](https://en.wikipedia.org/wiki/Longest_increasing_subsequence) problem\nwhere the goal is to find a substring with characters in sorted order.",
    "weight": 1.0
  },
  {
    "name": "LongestMonotonicSubstring:4",
    "sat": "def sat(x: List[int], length=1, s=\"xwV\"):\n    return all(s[x[i]] <= s[x[i + 1]] and x[i + 1] > x[i] >= 0 for i in range(length - 1))",
    "ans_type": "List[int]",
    "sol_header": "def sol(length=1, s=\"xwV\"):",
    "sol_docstring": "    \"\"\"\n    Remove as few characters as possible from s so that the characters of the remaining string are alphebetical.\n    Here x is the list of string indices that have not been deleted.\n    \"\"\"",
    "sol_bodies": [
      "    # O(N^2) method. Todo: add binary search solution which is O(n log n)\n    if s == \"\":\n        return []\n    n = len(s)\n    dyn = []  # list of (seq length, seq end, prev index)\n    for i in range(n):\n        try:\n            dyn.append(max((length + 1, i, e) for length, e, _ in dyn if s[e] <= s[i]))\n        except ValueError:\n            dyn.append((1, i, -1))  # sequence ends at i\n    _length, i, _ = max(dyn)\n    backwards = [i]\n    while dyn[i][2] != -1:\n        i = dyn[i][2]\n        backwards.append(i)\n    return backwards[::-1]"
    ],
    "module": "classic_puzzles.py",
    "notes": "This is a form of the classic\n[Longest increasing subsequence](https://en.wikipedia.org/wiki/Longest_increasing_subsequence) problem\nwhere the goal is to find a substring with characters in sorted order.",
    "weight": 1.0
  },
  {
    "name": "LongestMonotonicSubstringTricky:0",
    "sat": "def sat(x: List[int], length=20, s=\"Dynamic programming solves this classic job-interview puzzle!!!\"):\n    return all(s[x[i]] <= s[x[i + 1]] and x[i + 1] > x[i] for i in range(length - 1))",
    "ans_type": "List[int]",
    "sol_header": "def sol(length=20, s=\"Dynamic programming solves this classic job-interview puzzle!!!\"):",
    "sol_docstring": "    \"\"\"Find the indices of the longest substring with characters in sorted order\"\"\"",
    "sol_bodies": [
      "    # O(N^2) method. Todo: add binary search solution which is O(n log n)\n    if s == \"\":\n        return []\n    n = len(s)\n    dyn = []  # list of (seq length, seq end, prev index)\n    for i in range(-n, n):\n        try:\n            dyn.append(max((length + 1, i, e) for length, e, _ in dyn if s[e] <= s[i]))\n        except ValueError:\n            dyn.append((1, i, None))  # sequence ends at i\n    _length, i, _ = max(dyn)\n    backwards = [i]\n    while dyn[n + i][2] is not None:\n        i = dyn[n + i][2]\n        backwards.append(i)\n    return backwards[::-1]"
    ],
    "module": "classic_puzzles.py",
    "notes": "The same as the above problem, but with a twist!",
    "weight": 1.0
  },
  {
    "name": "LongestMonotonicSubstringTricky:1",
    "sat": "def sat(x: List[int], length=535, s=\"RRRS  S !L!eSSSS!TTT+!TTTUU!!UU!UU\\\"U\\\"\\\"\\\"VVV\\\"\\\"\\\"VK#WW##gfW##X##6$$X$XX@$XXP%%%YY%+YY%&ZZ)%ZZ&#Z&[&[[[[\\\\'\\\\\\\\]\\\\\\\\]''']]']]]^^(^R^((^))^)^^*^_*_L____**;**_``*```++`+`+[+++``,m,,`,,-aa@aa[a-arb-b--b(vzbb-.b.6.ccc.cKcc.cc//c/cc//dddddd/0deeeee000e0f0ff0f01ff11f1<1gg;g12R2g22233gg33g333g3g445555566ghhh66799h9hhh9h999iEii/iYi::i::j:jvv:;;;;jj<j<<k===kkkk===ll=l=l>>l>ll0>l>m>m@mmm??0m^,?nn???n?sn@@oo@DobAAooAo7AAppppBqC$qqqqCCCCqqqqrDrrrrrrrDbrsDDDEsEs9asssfttEtttEEEtEEtFFtuuLFuuuFFFvF0FGvGGGvvvvRwwwwxGHxHHHx+HIxxIexxIIyyyPCyyyII,yIyyIzIJzJJQJzKzzKz{KK{{{{{[K{K{KK{?{KLLLLLLLMMM>NNNNNOOOOOOOOPPPQQQQQQQRRR\"):\n    return all(s[x[i]] <= s[x[i + 1]] and x[i + 1] > x[i] for i in range(length - 1))",
    "ans_type": "List[int]",
    "sol_header": "def sol(length=535, s=\"RRRS  S !L!eSSSS!TTT+!TTTUU!!UU!UU\\\"U\\\"\\\"\\\"VVV\\\"\\\"\\\"VK#WW##gfW##X##6$$X$XX@$XXP%%%YY%+YY%&ZZ)%ZZ&#Z&[&[[[[\\\\'\\\\\\\\]\\\\\\\\]''']]']]]^^(^R^((^))^)^^*^_*_L____**;**_``*```++`+`+[+++``,m,,`,,-aa@aa[a-arb-b--b(vzbb-.b.6.ccc.cKcc.cc//c/cc//dddddd/0deeeee000e0f0ff0f01ff11f1<1gg;g12R2g22233gg33g333g3g445555566ghhh66799h9hhh9h999iEii/iYi::i::j:jvv:;;;;jj<j<<k===kkkk===ll=l=l>>l>ll0>l>m>m@mmm??0m^,?nn???n?sn@@oo@DobAAooAo7AAppppBqC$qqqqCCCCqqqqrDrrrrrrrDbrsDDDEsEs9asssfttEtttEEEtEEtFFtuuLFuuuFFFvF0FGvGGGvvvvRwwwwxGHxHHHx+HIxxIexxIIyyyPCyyyII,yIyyIzIJzJJQJzKzzKz{KK{{{{{[K{K{KK{?{KLLLLLLLMMM>NNNNNOOOOOOOOPPPQQQQQQQRRR\"):",
    "sol_docstring": "    \"\"\"Find the indices of the longest substring with characters in sorted order\"\"\"",
    "sol_bodies": [
      "    # O(N^2) method. Todo: add binary search solution which is O(n log n)\n    if s == \"\":\n        return []\n    n = len(s)\n    dyn = []  # list of (seq length, seq end, prev index)\n    for i in range(-n, n):\n        try:\n            dyn.append(max((length + 1, i, e) for length, e, _ in dyn if s[e] <= s[i]))\n        except ValueError:\n            dyn.append((1, i, None))  # sequence ends at i\n    _length, i, _ = max(dyn)\n    backwards = [i]\n    while dyn[n + i][2] is not None:\n        i = dyn[n + i][2]\n        backwards.append(i)\n    return backwards[::-1]"
    ],
    "module": "classic_puzzles.py",
    "notes": "The same as the above problem, but with a twist!",
    "weight": 1.0
  },
  {
    "name": "LongestMonotonicSubstringTricky:2",
    "sat": "def sat(x: List[int], length=1, s=\"O!A{SeKv\"):\n    return all(s[x[i]] <= s[x[i + 1]] and x[i + 1] > x[i] for i in range(length - 1))",
    "ans_type": "List[int]",
    "sol_header": "def sol(length=1, s=\"O!A{SeKv\"):",
    "sol_docstring": "    \"\"\"Find the indices of the longest substring with characters in sorted order\"\"\"",
    "sol_bodies": [
      "    # O(N^2) method. Todo: add binary search solution which is O(n log n)\n    if s == \"\":\n        return []\n    n = len(s)\n    dyn = []  # list of (seq length, seq end, prev index)\n    for i in range(-n, n):\n        try:\n            dyn.append(max((length + 1, i, e) for length, e, _ in dyn if s[e] <= s[i]))\n        except ValueError:\n            dyn.append((1, i, None))  # sequence ends at i\n    _length, i, _ = max(dyn)\n    backwards = [i]\n    while dyn[n + i][2] is not None:\n        i = dyn[n + i][2]\n        backwards.append(i)\n    return backwards[::-1]"
    ],
    "module": "classic_puzzles.py",
    "notes": "The same as the above problem, but with a twist!",
    "weight": 1.0
  },
  {
    "name": "LongestMonotonicSubstringTricky:3",
    "sat": "def sat(x: List[int], length=61, s=\" OW##P%T'UW)X+X-YY]^_`bd/044e5egk7lm779:<m?D@ADnnpDEFIpNNOqqwxx\"):\n    return all(s[x[i]] <= s[x[i + 1]] and x[i + 1] > x[i] for i in range(length - 1))",
    "ans_type": "List[int]",
    "sol_header": "def sol(length=61, s=\" OW##P%T'UW)X+X-YY]^_`bd/044e5egk7lm779:<m?D@ADnnpDEFIpNNOqqwxx\"):",
    "sol_docstring": "    \"\"\"Find the indices of the longest substring with characters in sorted order\"\"\"",
    "sol_bodies": [
      "    # O(N^2) method. Todo: add binary search solution which is O(n log n)\n    if s == \"\":\n        return []\n    n = len(s)\n    dyn = []  # list of (seq length, seq end, prev index)\n    for i in range(-n, n):\n        try:\n            dyn.append(max((length + 1, i, e) for length, e, _ in dyn if s[e] <= s[i]))\n        except ValueError:\n            dyn.append((1, i, None))  # sequence ends at i\n    _length, i, _ = max(dyn)\n    backwards = [i]\n    while dyn[n + i][2] is not None:\n        i = dyn[n + i][2]\n        backwards.append(i)\n    return backwards[::-1]"
    ],
    "module": "classic_puzzles.py",
    "notes": "The same as the above problem, but with a twist!",
    "weight": 1.0
  },
  {
    "name": "LongestMonotonicSubstringTricky:4",
    "sat": "def sat(x: List[int], length=19, s=\"1>C>DmJh5\\\"Ju,\\\"Q8zJ_u-O-VfnVTZ?W'm=jq.\\\\l&%m$cU.nqv2\\\\**.o\\\">]FZ5owil>l*kIM wcLd<*UX`\\\"_u'DC3R$8wr;jT]CW\\\"F$QKeRPMzZY'U42&Km dRr8b$T3x)w2v,_k(dR,F:`=c$MjE_Kf/KCXFg^ueiO.U%S8_](:GF;`2`^O%eAqSRAHW0dYg5!u<ZV@usa`-<<ET@xZ)&<6=ogIhp9jJ/`$/_jEa-N$oZVT6#]^]x5u!$ Xk?g=TMwVGZqTU(OeH!Jbgz!9`%yxq(GN+@yD6RM1M#:geJpIPw1l{xxK!z'tXS5-S+vvE(nO:I_`l14Gz@U^.Ra73g!iH\\\\\\\"0{*>F@K'q>2HgCc^:baOy[,9vJtFWPAed2w_7zHLl&.x^:XLwwtS+Ocr#, *qXmo9Sp,Z>{l&ElT>RNZ:.5f6,yedMqH8?jA=_@oK;X\\\\pm>r0Il0+k\\\\,&'u*(S`]>u?(4M\\\\3=0 F<Jh?v`wz85A=?q3FUP<HiW[t0QB-Dx=e=ggmY29G4[HR!4i-*y@s$0)E'XPud6)gt(O[RWVf]ci,4.(:  8H[**k[g* T`z.Y2)Oq5`R8H$$joU/xfl*e4 \\\\z>*MS8wqj0(HwK?gvpuma{V5inBL\\\",39`%*r$uPi=%:s!<?{FCb-zILUAT?kdy\\\"B;sfYu#DoVp-'+]z:/c8eo2v&UAoeXEe:w#JZHKR\\\\3Xmxf'9jlHli*PTR-y`sdqRnv=;E$s]m!%I*`<*&.5N)wrI\\\"C=4^9RP5'9[5\\\"uG(4YU{3_aPHffi<E*+nVYQq37UP(P#wU9;p0Si.vyM1e?tXWZ9dRho1i!(we-<waQrvITH6vkTCG2 9hxMvtZ8QdR%WQ[B^0X1B;Vm&g/o=;YlD5[`Oh\"):\n    return all(s[x[i]] <= s[x[i + 1]] and x[i + 1] > x[i] for i in range(length - 1))",
    "ans_type": "List[int]",
    "sol_header": "def sol(length=19, s=\"1>C>DmJh5\\\"Ju,\\\"Q8zJ_u-O-VfnVTZ?W'm=jq.\\\\l&%m$cU.nqv2\\\\**.o\\\">]FZ5owil>l*kIM wcLd<*UX`\\\"_u'DC3R$8wr;jT]CW\\\"F$QKeRPMzZY'U42&Km dRr8b$T3x)w2v,_k(dR,F:`=c$MjE_Kf/KCXFg^ueiO.U%S8_](:GF;`2`^O%eAqSRAHW0dYg5!u<ZV@usa`-<<ET@xZ)&<6=ogIhp9jJ/`$/_jEa-N$oZVT6#]^]x5u!$ Xk?g=TMwVGZqTU(OeH!Jbgz!9`%yxq(GN+@yD6RM1M#:geJpIPw1l{xxK!z'tXS5-S+vvE(nO:I_`l14Gz@U^.Ra73g!iH\\\\\\\"0{*>F@K'q>2HgCc^:baOy[,9vJtFWPAed2w_7zHLl&.x^:XLwwtS+Ocr#, *qXmo9Sp,Z>{l&ElT>RNZ:.5f6,yedMqH8?jA=_@oK;X\\\\pm>r0Il0+k\\\\,&'u*(S`]>u?(4M\\\\3=0 F<Jh?v`wz85A=?q3FUP<HiW[t0QB-Dx=e=ggmY29G4[HR!4i-*y@s$0)E'XPud6)gt(O[RWVf]ci,4.(:  8H[**k[g* T`z.Y2)Oq5`R8H$$joU/xfl*e4 \\\\z>*MS8wqj0(HwK?gvpuma{V5inBL\\\",39`%*r$uPi=%:s!<?{FCb-zILUAT?kdy\\\"B;sfYu#DoVp-'+]z:/c8eo2v&UAoeXEe:w#JZHKR\\\\3Xmxf'9jlHli*PTR-y`sdqRnv=;E$s]m!%I*`<*&.5N)wrI\\\"C=4^9RP5'9[5\\\"uG(4YU{3_aPHffi<E*+nVYQq37UP(P#wU9;p0Si.vyM1e?tXWZ9dRho1i!(we-<waQrvITH6vkTCG2 9hxMvtZ8QdR%WQ[B^0X1B;Vm&g/o=;YlD5[`Oh\"):",
    "sol_docstring": "    \"\"\"Find the indices of the longest substring with characters in sorted order\"\"\"",
    "sol_bodies": [
      "    # O(N^2) method. Todo: add binary search solution which is O(n log n)\n    if s == \"\":\n        return []\n    n = len(s)\n    dyn = []  # list of (seq length, seq end, prev index)\n    for i in range(-n, n):\n        try:\n            dyn.append(max((length + 1, i, e) for length, e, _ in dyn if s[e] <= s[i]))\n        except ValueError:\n            dyn.append((1, i, None))  # sequence ends at i\n    _length, i, _ = max(dyn)\n    backwards = [i]\n    while dyn[n + i][2] is not None:\n        i = dyn[n + i][2]\n        backwards.append(i)\n    return backwards[::-1]"
    ],
    "module": "classic_puzzles.py",
    "notes": "The same as the above problem, but with a twist!",
    "weight": 1.0
  },
  {
    "name": "Quine:0",
    "sat": "def sat(quine: str):\n    return eval(quine) == quine",
    "ans_type": "str",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"Find a string that when evaluated as a Python expression is that string itself.\"\"\"",
    "sol_bodies": [
      "    return \"(lambda x: f'({x})({chr(34)}{x}{chr(34)})')(\\\"lambda x: f'({x})({chr(34)}{x}{chr(34)})'\\\")\""
    ],
    "module": "classic_puzzles.py",
    "notes": "[Quine](https://en.wikipedia.org/wiki/Quine_%28computing%29)",
    "weight": 1.0
  },
  {
    "name": "RevQuine:0",
    "sat": "def sat(rev_quine: str):\n    return eval(rev_quine[::-1]) == rev_quine",
    "ans_type": "str",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"Find a string that, when reversed and evaluated gives you back that same string.\"\"\"",
    "sol_bodies": [
      "    return \"rev_quine\"[::-1]  # thanks GPT-3!"
    ],
    "module": "classic_puzzles.py",
    "notes": "Reverse [Quine](https://en.wikipedia.org/wiki/Quine_%28computing%29). The solution we give is from GPT3.",
    "weight": 1.0
  },
  {
    "name": "BooleanPythagoreanTriples:0",
    "sat": "def sat(colors: List[int], n=100):\n    assert set(colors) <= {0, 1} and len(colors) >= n\n    squares = {i ** 2: colors[i] for i in range(1, len(colors))}\n    return not any(c == d == squares.get(i + j) for i, c in squares.items() for j, d in squares.items())",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=100):",
    "sol_docstring": "    \"\"\"\n    Color the first n integers with one of two colors so that there is no monochromatic Pythagorean triple.\n    A monochromatic Pythagorean triple is a triple of numbers i, j, k such that i^2 + j^2 = k^2 that\n    are all assigned the same color. The input, colors, is a list of 0/1 colors of length >= n.\n    \"\"\"",
    "sol_bodies": [
      "    sqrt = {i * i: i for i in range(1, n)}\n    trips = [(sqrt[i], sqrt[j], sqrt[i + j]) for i in sqrt for j in sqrt if i < j and i + j in sqrt]\n    import random\n    random.seed(0)\n    sol = [random.randrange(2) for _ in range(n)]\n    done = False\n    while not done:\n        done = True\n        random.shuffle(trips)\n        for i, j, k in trips:\n            if sol[i] == sol[j] == sol[k]:\n                done = False\n                sol[random.choice([i, j, k])] = 1 - sol[i]\n    return sol"
    ],
    "module": "classic_puzzles.py",
    "notes": "[Boolean Pythagorean Triples Problem](https://en.wikipedia.org/wiki/Boolean_Pythagorean_triples_problem)",
    "weight": 1.0
  },
  {
    "name": "BooleanPythagoreanTriples:1",
    "sat": "def sat(colors: List[int], n=7824):\n    assert set(colors) <= {0, 1} and len(colors) >= n\n    squares = {i ** 2: colors[i] for i in range(1, len(colors))}\n    return not any(c == d == squares.get(i + j) for i, c in squares.items() for j, d in squares.items())",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=7824):",
    "sol_docstring": "    \"\"\"\n    Color the first n integers with one of two colors so that there is no monochromatic Pythagorean triple.\n    A monochromatic Pythagorean triple is a triple of numbers i, j, k such that i^2 + j^2 = k^2 that\n    are all assigned the same color. The input, colors, is a list of 0/1 colors of length >= n.\n    \"\"\"",
    "sol_bodies": [],
    "module": "classic_puzzles.py",
    "notes": "[Boolean Pythagorean Triples Problem](https://en.wikipedia.org/wiki/Boolean_Pythagorean_triples_problem)",
    "weight": 1.0
  },
  {
    "name": "BooleanPythagoreanTriples:2",
    "sat": "def sat(colors: List[int], n=0):\n    assert set(colors) <= {0, 1} and len(colors) >= n\n    squares = {i ** 2: colors[i] for i in range(1, len(colors))}\n    return not any(c == d == squares.get(i + j) for i, c in squares.items() for j, d in squares.items())",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=0):",
    "sol_docstring": "    \"\"\"\n    Color the first n integers with one of two colors so that there is no monochromatic Pythagorean triple.\n    A monochromatic Pythagorean triple is a triple of numbers i, j, k such that i^2 + j^2 = k^2 that\n    are all assigned the same color. The input, colors, is a list of 0/1 colors of length >= n.\n    \"\"\"",
    "sol_bodies": [
      "    sqrt = {i * i: i for i in range(1, n)}\n    trips = [(sqrt[i], sqrt[j], sqrt[i + j]) for i in sqrt for j in sqrt if i < j and i + j in sqrt]\n    import random\n    random.seed(0)\n    sol = [random.randrange(2) for _ in range(n)]\n    done = False\n    while not done:\n        done = True\n        random.shuffle(trips)\n        for i, j, k in trips:\n            if sol[i] == sol[j] == sol[k]:\n                done = False\n                sol[random.choice([i, j, k])] = 1 - sol[i]\n    return sol"
    ],
    "module": "classic_puzzles.py",
    "notes": "[Boolean Pythagorean Triples Problem](https://en.wikipedia.org/wiki/Boolean_Pythagorean_triples_problem)",
    "weight": 1.0
  },
  {
    "name": "BooleanPythagoreanTriples:3",
    "sat": "def sat(colors: List[int], n=1):\n    assert set(colors) <= {0, 1} and len(colors) >= n\n    squares = {i ** 2: colors[i] for i in range(1, len(colors))}\n    return not any(c == d == squares.get(i + j) for i, c in squares.items() for j, d in squares.items())",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=1):",
    "sol_docstring": "    \"\"\"\n    Color the first n integers with one of two colors so that there is no monochromatic Pythagorean triple.\n    A monochromatic Pythagorean triple is a triple of numbers i, j, k such that i^2 + j^2 = k^2 that\n    are all assigned the same color. The input, colors, is a list of 0/1 colors of length >= n.\n    \"\"\"",
    "sol_bodies": [
      "    sqrt = {i * i: i for i in range(1, n)}\n    trips = [(sqrt[i], sqrt[j], sqrt[i + j]) for i in sqrt for j in sqrt if i < j and i + j in sqrt]\n    import random\n    random.seed(0)\n    sol = [random.randrange(2) for _ in range(n)]\n    done = False\n    while not done:\n        done = True\n        random.shuffle(trips)\n        for i, j, k in trips:\n            if sol[i] == sol[j] == sol[k]:\n                done = False\n                sol[random.choice([i, j, k])] = 1 - sol[i]\n    return sol"
    ],
    "module": "classic_puzzles.py",
    "notes": "[Boolean Pythagorean Triples Problem](https://en.wikipedia.org/wiki/Boolean_Pythagorean_triples_problem)",
    "weight": 1.0
  },
  {
    "name": "ClockAngle:0",
    "sat": "def sat(hands: List[int], target_angle=45):\n    h, m = hands\n    assert 0 < h <= 12 and 0 <= m < 60\n    hour_angle = 30 * h + m / 2\n    minute_angle = 6 * m\n    return abs(hour_angle - minute_angle) in [target_angle, 360 - target_angle]",
    "ans_type": "List[int]",
    "sol_header": "def sol(target_angle=45):",
    "sol_docstring": "    \"\"\"Find clock hands = [hour, min] such that the angle is target_angle degrees.\"\"\"",
    "sol_bodies": [
      "    for h in range(1, 13):\n        for m in range(60):\n            hour_angle = 30 * h + m / 2\n            minute_angle = 6 * m\n            if abs(hour_angle - minute_angle) % 360 in [target_angle, 360 - target_angle]:\n                return [h, m]"
    ],
    "module": "classic_puzzles.py",
    "notes": "[Clock Angle Problem](https://en.wikipedia.org/wiki/Clock_angle_problem), easy variant",
    "weight": 1.0
  },
  {
    "name": "ClockAngle:1",
    "sat": "def sat(hands: List[int], target_angle=39):\n    h, m = hands\n    assert 0 < h <= 12 and 0 <= m < 60\n    hour_angle = 30 * h + m / 2\n    minute_angle = 6 * m\n    return abs(hour_angle - minute_angle) in [target_angle, 360 - target_angle]",
    "ans_type": "List[int]",
    "sol_header": "def sol(target_angle=39):",
    "sol_docstring": "    \"\"\"Find clock hands = [hour, min] such that the angle is target_angle degrees.\"\"\"",
    "sol_bodies": [
      "    for h in range(1, 13):\n        for m in range(60):\n            hour_angle = 30 * h + m / 2\n            minute_angle = 6 * m\n            if abs(hour_angle - minute_angle) % 360 in [target_angle, 360 - target_angle]:\n                return [h, m]"
    ],
    "module": "classic_puzzles.py",
    "notes": "[Clock Angle Problem](https://en.wikipedia.org/wiki/Clock_angle_problem), easy variant",
    "weight": 1.0
  },
  {
    "name": "ClockAngle:2",
    "sat": "def sat(hands: List[int], target_angle=133):\n    h, m = hands\n    assert 0 < h <= 12 and 0 <= m < 60\n    hour_angle = 30 * h + m / 2\n    minute_angle = 6 * m\n    return abs(hour_angle - minute_angle) in [target_angle, 360 - target_angle]",
    "ans_type": "List[int]",
    "sol_header": "def sol(target_angle=133):",
    "sol_docstring": "    \"\"\"Find clock hands = [hour, min] such that the angle is target_angle degrees.\"\"\"",
    "sol_bodies": [
      "    for h in range(1, 13):\n        for m in range(60):\n            hour_angle = 30 * h + m / 2\n            minute_angle = 6 * m\n            if abs(hour_angle - minute_angle) % 360 in [target_angle, 360 - target_angle]:\n                return [h, m]"
    ],
    "module": "classic_puzzles.py",
    "notes": "[Clock Angle Problem](https://en.wikipedia.org/wiki/Clock_angle_problem), easy variant",
    "weight": 1.0
  },
  {
    "name": "ClockAngle:3",
    "sat": "def sat(hands: List[int], target_angle=138):\n    h, m = hands\n    assert 0 < h <= 12 and 0 <= m < 60\n    hour_angle = 30 * h + m / 2\n    minute_angle = 6 * m\n    return abs(hour_angle - minute_angle) in [target_angle, 360 - target_angle]",
    "ans_type": "List[int]",
    "sol_header": "def sol(target_angle=138):",
    "sol_docstring": "    \"\"\"Find clock hands = [hour, min] such that the angle is target_angle degrees.\"\"\"",
    "sol_bodies": [
      "    for h in range(1, 13):\n        for m in range(60):\n            hour_angle = 30 * h + m / 2\n            minute_angle = 6 * m\n            if abs(hour_angle - minute_angle) % 360 in [target_angle, 360 - target_angle]:\n                return [h, m]"
    ],
    "module": "classic_puzzles.py",
    "notes": "[Clock Angle Problem](https://en.wikipedia.org/wiki/Clock_angle_problem), easy variant",
    "weight": 1.0
  },
  {
    "name": "ClockAngle:4",
    "sat": "def sat(hands: List[int], target_angle=68):\n    h, m = hands\n    assert 0 < h <= 12 and 0 <= m < 60\n    hour_angle = 30 * h + m / 2\n    minute_angle = 6 * m\n    return abs(hour_angle - minute_angle) in [target_angle, 360 - target_angle]",
    "ans_type": "List[int]",
    "sol_header": "def sol(target_angle=68):",
    "sol_docstring": "    \"\"\"Find clock hands = [hour, min] such that the angle is target_angle degrees.\"\"\"",
    "sol_bodies": [
      "    for h in range(1, 13):\n        for m in range(60):\n            hour_angle = 30 * h + m / 2\n            minute_angle = 6 * m\n            if abs(hour_angle - minute_angle) % 360 in [target_angle, 360 - target_angle]:\n                return [h, m]"
    ],
    "module": "classic_puzzles.py",
    "notes": "[Clock Angle Problem](https://en.wikipedia.org/wiki/Clock_angle_problem), easy variant",
    "weight": 1.0
  },
  {
    "name": "Kirkman:0",
    "sat": "def sat(daygroups: List[List[List[int]]]):\n    assert len(daygroups) == 7\n    assert all(len(groups) == 5 and {i for g in groups for i in g} == set(range(15)) for groups in daygroups)\n    assert all(len(g) == 3 for groups in daygroups for g in groups)\n    return len({(i, j) for groups in daygroups for g in groups for i in g for j in g}) == 15 * 15",
    "ans_type": "List[List[List[int]]]",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"\n    Arrange 15 people into groups of 3 each day for seven days so that no two people are in the same group twice.\n    \"\"\"",
    "sol_bodies": [
      "    from itertools import combinations\n    import random\n    rand = random.Random(0)\n    days = [[list(range(15)) for _2 in range(2)] for _ in range(7)]  # each day is pi, inv\n    counts = {(i, j): (7 if j in range(k, k + 3) else 0)\n              for k in range(0, 15, 3)\n              for i in range(k, k + 3)\n              for j in range(15) if j != i\n              }\n\n    todos = [pair for pair, count in counts.items() if count == 0]\n    while True:\n        pair = rand.choice(todos)  # choose i and j to make next to each other on some day\n        if rand.randrange(2):\n            pair = pair[::-1]\n\n        a, u = pair\n        pi, inv = rand.choice(days)\n        assert pi[inv[a]] == a and pi[inv[u]] == u\n        bases = [3 * (inv[i] // 3) for i in pair]\n        (b, c), (v, w) = [[x for x in pi[b: b + 3] if x != i] for i, b in zip(pair, bases)]\n        if rand.randrange(2):\n            b, c, = c, b\n        # current (a, b, c) (u, v, w). consider swap of u with b to make (a, u, c) (b, v, w)\n\n        new_pairs = [(a, u), (c, u), (b, v), (b, w)]\n        old_pairs = [(u, v), (u, w), (b, a), (b, c)]\n        gained = sum(counts[p] == 0 for p in new_pairs)\n        lost = sum(counts[p] == 1 for p in old_pairs)\n        if rand.random() <= 100 ** (gained - lost):\n            for p in new_pairs:\n                counts[p] += 1\n                counts[p[::-1]] += 1\n            for p in old_pairs:\n                counts[p] -= 1\n                counts[p[::-1]] -= 1\n            pi[inv[b]], pi[inv[u]], inv[b], inv[u] = u, b, inv[u], inv[b]\n            todos = [pair for pair, count in counts.items() if count == 0]\n            if len(todos) == 0:\n                return [[pi[k:k + 3] for k in range(0, 15, 3)] for pi, _inv in days]"
    ],
    "module": "classic_puzzles.py",
    "notes": "[Kirkman's problem](https://en.wikipedia.org/wiki/Kirkman%27s_schoolgirl_problem)",
    "weight": 1.0
  },
  {
    "name": "MonkeyAndCoconuts:0",
    "sat": "def sat(n: int):\n    for i in range(5):\n        assert n % 5 == 1\n        n -= 1 + (n - 1) // 5\n    return n > 0 and n % 5 == 1",
    "ans_type": "int",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"\n    Find the number of coconuts to solve the following riddle:\n        There is a pile of coconuts, owned by five men. One man divides the pile into five equal piles, giving the\n        one left over coconut to a passing monkey, and takes away his own share. The second man then repeats the\n        procedure, dividing the remaining pile into five and taking away his share, as do the third, fourth, and\n        fifth, each of them finding one coconut left over when dividing the pile by five, and giving it to a monkey.\n        Finally, the group divide the remaining coconuts into five equal piles: this time no coconuts are left over.\n        How many coconuts were there in the original pile?\n                                          Quoted from https://en.wikipedia.org/wiki/The_monkey_and_the_coconuts\n    \"\"\"",
    "sol_bodies": [
      "    m = 1\n    while True:\n        n = m\n        for i in range(5):\n            if n % 5 != 1:\n                break\n            n -= 1 + (n - 1) // 5\n        if n > 0 and n % 5 == 1:\n            return m\n        m += 5"
    ],
    "module": "classic_puzzles.py",
    "notes": "[The Monkey and the Coconuts](https://en.wikipedia.org/wiki/The_monkey_and_the_coconuts)",
    "weight": 1.0
  },
  {
    "name": "No3Colinear:0",
    "sat": "def sat(coords: List[List[int]], side=10, num_points=20):\n    for i1 in range(len(coords)):\n        x1, y1 = coords[i1]\n        assert 0 <= x1 < side and 0 <= y1 < side\n        for i2 in range(i1):\n            x2, y2 = coords[i2]\n            for i3 in range(i2):\n                x3, y3 = coords[i3]\n                assert x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) != 0\n    return len({(a, b) for a, b in coords}) == len(coords) >= num_points",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(side=10, num_points=20):",
    "sol_docstring": "    \"\"\"Find num_points points in an side x side grid such that no three points are collinear.\"\"\"",
    "sol_bodies": [
      "    from itertools import combinations\n    assert side <= 5 or side == 10, \"Don't know how to solve other sides\"\n\n    def test(coords):\n        return all(p[0] * (q[1] - r[1]) + q[0] * (r[1] - p[1]) + r[0] * (p[1] - q[1])\n                   for p, q, r in combinations(coords, 3))\n\n    if side <= 5:\n        grid = [[i, j] for i in range(side) for j in range(side)]\n        return next(list(coords) for coords in combinations(grid, num_points) if test(coords))\n\n    if side == 10:\n        def mirror(coords):  # rotate to all four corners\n            return [[a, b] for x, y in coords for a in [x, side - 1 - x] for b in [y, side - 1 - y]]\n\n        grid = [[i, j] for i in range(side // 2) for j in range(side // 2)]\n        return next(list(mirror(coords)) for coords in combinations(grid, side // 2) if\n                    test(coords) and test(mirror(coords)))"
    ],
    "module": "classic_puzzles.py",
    "notes": "[No three-in-a-line](https://en.wikipedia.org/wiki/No-three-in-line_problem)",
    "weight": 1.0
  },
  {
    "name": "No3Colinear:1",
    "sat": "def sat(coords: List[List[int]], side=0, num_points=0):\n    for i1 in range(len(coords)):\n        x1, y1 = coords[i1]\n        assert 0 <= x1 < side and 0 <= y1 < side\n        for i2 in range(i1):\n            x2, y2 = coords[i2]\n            for i3 in range(i2):\n                x3, y3 = coords[i3]\n                assert x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) != 0\n    return len({(a, b) for a, b in coords}) == len(coords) >= num_points",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(side=0, num_points=0):",
    "sol_docstring": "    \"\"\"Find num_points points in an side x side grid such that no three points are collinear.\"\"\"",
    "sol_bodies": [
      "    from itertools import combinations\n    assert side <= 5 or side == 10, \"Don't know how to solve other sides\"\n\n    def test(coords):\n        return all(p[0] * (q[1] - r[1]) + q[0] * (r[1] - p[1]) + r[0] * (p[1] - q[1])\n                   for p, q, r in combinations(coords, 3))\n\n    if side <= 5:\n        grid = [[i, j] for i in range(side) for j in range(side)]\n        return next(list(coords) for coords in combinations(grid, num_points) if test(coords))\n\n    if side == 10:\n        def mirror(coords):  # rotate to all four corners\n            return [[a, b] for x, y in coords for a in [x, side - 1 - x] for b in [y, side - 1 - y]]\n\n        grid = [[i, j] for i in range(side // 2) for j in range(side // 2)]\n        return next(list(mirror(coords)) for coords in combinations(grid, side // 2) if\n                    test(coords) and test(mirror(coords)))"
    ],
    "module": "classic_puzzles.py",
    "notes": "[No three-in-a-line](https://en.wikipedia.org/wiki/No-three-in-line_problem)",
    "weight": 1.0
  },
  {
    "name": "No3Colinear:2",
    "sat": "def sat(coords: List[List[int]], side=1, num_points=1):\n    for i1 in range(len(coords)):\n        x1, y1 = coords[i1]\n        assert 0 <= x1 < side and 0 <= y1 < side\n        for i2 in range(i1):\n            x2, y2 = coords[i2]\n            for i3 in range(i2):\n                x3, y3 = coords[i3]\n                assert x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) != 0\n    return len({(a, b) for a, b in coords}) == len(coords) >= num_points",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(side=1, num_points=1):",
    "sol_docstring": "    \"\"\"Find num_points points in an side x side grid such that no three points are collinear.\"\"\"",
    "sol_bodies": [
      "    from itertools import combinations\n    assert side <= 5 or side == 10, \"Don't know how to solve other sides\"\n\n    def test(coords):\n        return all(p[0] * (q[1] - r[1]) + q[0] * (r[1] - p[1]) + r[0] * (p[1] - q[1])\n                   for p, q, r in combinations(coords, 3))\n\n    if side <= 5:\n        grid = [[i, j] for i in range(side) for j in range(side)]\n        return next(list(coords) for coords in combinations(grid, num_points) if test(coords))\n\n    if side == 10:\n        def mirror(coords):  # rotate to all four corners\n            return [[a, b] for x, y in coords for a in [x, side - 1 - x] for b in [y, side - 1 - y]]\n\n        grid = [[i, j] for i in range(side // 2) for j in range(side // 2)]\n        return next(list(mirror(coords)) for coords in combinations(grid, side // 2) if\n                    test(coords) and test(mirror(coords)))"
    ],
    "module": "classic_puzzles.py",
    "notes": "[No three-in-a-line](https://en.wikipedia.org/wiki/No-three-in-line_problem)",
    "weight": 1.0
  },
  {
    "name": "No3Colinear:3",
    "sat": "def sat(coords: List[List[int]], side=2, num_points=4):\n    for i1 in range(len(coords)):\n        x1, y1 = coords[i1]\n        assert 0 <= x1 < side and 0 <= y1 < side\n        for i2 in range(i1):\n            x2, y2 = coords[i2]\n            for i3 in range(i2):\n                x3, y3 = coords[i3]\n                assert x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2) != 0\n    return len({(a, b) for a, b in coords}) == len(coords) >= num_points",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(side=2, num_points=4):",
    "sol_docstring": "    \"\"\"Find num_points points in an side x side grid such that no three points are collinear.\"\"\"",
    "sol_bodies": [
      "    from itertools import combinations\n    assert side <= 5 or side == 10, \"Don't know how to solve other sides\"\n\n    def test(coords):\n        return all(p[0] * (q[1] - r[1]) + q[0] * (r[1] - p[1]) + r[0] * (p[1] - q[1])\n                   for p, q, r in combinations(coords, 3))\n\n    if side <= 5:\n        grid = [[i, j] for i in range(side) for j in range(side)]\n        return next(list(coords) for coords in combinations(grid, num_points) if test(coords))\n\n    if side == 10:\n        def mirror(coords):  # rotate to all four corners\n            return [[a, b] for x, y in coords for a in [x, side - 1 - x] for b in [y, side - 1 - y]]\n\n        grid = [[i, j] for i in range(side // 2) for j in range(side // 2)]\n        return next(list(mirror(coords)) for coords in combinations(grid, side // 2) if\n                    test(coords) and test(mirror(coords)))"
    ],
    "module": "classic_puzzles.py",
    "notes": "[No three-in-a-line](https://en.wikipedia.org/wiki/No-three-in-line_problem)",
    "weight": 1.0
  },
  {
    "name": "PostageStamp:0",
    "sat": "def sat(stamps: List[int], target=80, max_stamps=4, options=[10, 32, 8]):\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target",
    "ans_type": "List[int]",
    "sol_header": "def sol(target=80, max_stamps=4, options=[10, 32, 8]):",
    "sol_docstring": "    \"\"\"Find a selection of at most max_stamps stamps whose total worth is the target value.\"\"\"",
    "sol_bodies": [
      "    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)"
    ],
    "module": "classic_puzzles.py",
    "notes": "[Postage stamp problem](https://en.wikipedia.org/wiki/Postage_stamp_problem)",
    "weight": 1.0
  },
  {
    "name": "PostageStamp:1",
    "sat": "def sat(stamps: List[int], target=271, max_stamps=8, options=[37, 37, 12, 87, 39]):\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target",
    "ans_type": "List[int]",
    "sol_header": "def sol(target=271, max_stamps=8, options=[37, 37, 12, 87, 39]):",
    "sol_docstring": "    \"\"\"Find a selection of at most max_stamps stamps whose total worth is the target value.\"\"\"",
    "sol_bodies": [
      "    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)"
    ],
    "module": "classic_puzzles.py",
    "notes": "[Postage stamp problem](https://en.wikipedia.org/wiki/Postage_stamp_problem)",
    "weight": 1.0
  },
  {
    "name": "PostageStamp:2",
    "sat": "def sat(stamps: List[int], target=3, max_stamps=3, options=[18, 1, 43, 81]):\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target",
    "ans_type": "List[int]",
    "sol_header": "def sol(target=3, max_stamps=3, options=[18, 1, 43, 81]):",
    "sol_docstring": "    \"\"\"Find a selection of at most max_stamps stamps whose total worth is the target value.\"\"\"",
    "sol_bodies": [
      "    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)"
    ],
    "module": "classic_puzzles.py",
    "notes": "[Postage stamp problem](https://en.wikipedia.org/wiki/Postage_stamp_problem)",
    "weight": 1.0
  },
  {
    "name": "PostageStamp:3",
    "sat": "def sat(stamps: List[int], target=19, max_stamps=2, options=[19, 14, 81]):\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target",
    "ans_type": "List[int]",
    "sol_header": "def sol(target=19, max_stamps=2, options=[19, 14, 81]):",
    "sol_docstring": "    \"\"\"Find a selection of at most max_stamps stamps whose total worth is the target value.\"\"\"",
    "sol_bodies": [
      "    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)"
    ],
    "module": "classic_puzzles.py",
    "notes": "[Postage stamp problem](https://en.wikipedia.org/wiki/Postage_stamp_problem)",
    "weight": 1.0
  },
  {
    "name": "PostageStamp:4",
    "sat": "def sat(stamps: List[int], target=56, max_stamps=1, options=[25, 22, 8, 84, 60, 56, 54, 7, 8]):\n    for s in stamps:\n        assert s in options\n    return len(stamps) <= max_stamps and sum(stamps) == target",
    "ans_type": "List[int]",
    "sol_header": "def sol(target=56, max_stamps=1, options=[25, 22, 8, 84, 60, 56, 54, 7, 8]):",
    "sol_docstring": "    \"\"\"Find a selection of at most max_stamps stamps whose total worth is the target value.\"\"\"",
    "sol_bodies": [
      "    from itertools import combinations_with_replacement\n    for n in range(max_stamps + 1):\n        for c in combinations_with_replacement(options, n):\n            if sum(c) == target:\n                return list(c)"
    ],
    "module": "classic_puzzles.py",
    "notes": "[Postage stamp problem](https://en.wikipedia.org/wiki/Postage_stamp_problem)",
    "weight": 1.0
  },
  {
    "name": "Sudoku:0",
    "sat": "def sat(x: str, puz=\"____9_2___7__________1_8_4____2_78____4_____1____69____2_8___5__6__3_7___49______\"):\n    assert all(c == \"_\" or c == s for (c, s) in zip(puz, x))\n\n    full = set('123456789')\n    for i in range(9):\n        assert {x[i] for i in range(9 * i, 9 * i + 9)} == full, \"invalid row\"\n        assert {x[i] for i in range(i, i + 81, 9)} == full, \"invalid column\"\n        assert {x[9 * a + b + i + 26 * (i % 3)] for a in range(3) for b in range(3)} == full, \"invalid square\"\n\n    return True",
    "ans_type": "str",
    "sol_header": "def sol(puz=\"____9_2___7__________1_8_4____2_78____4_____1____69____2_8___5__6__3_7___49______\"):",
    "sol_docstring": "    \"\"\"Find the unique valid solution to the Sudoku puzzle\"\"\"",
    "sol_bodies": [
      "    \"\"\"Simple depth-first backtracking solver that branches at the square with fewest possibilities\"\"\"\n    sets = [{int(c)} if c != '_' else set(range(1, 10)) for c in puz]\n\n    groups = []\n    for i in range(9):\n        groups.append(list(range(9 * i, 9 * i + 9)))\n        groups.append(list(range(i, i + 81, 9)))\n        groups.append([9 * a + b + i + 26 * (i % 3) for a in range(3) for b in range(3)])\n\n    inv = [[] for i in range(81)]\n    for g in groups:\n        for i in g:\n            inv[i].append(g)\n\n    def reduce():\n        \"\"\"Reduce possibilities and return False if it's clearly impossible to solve, True otherwise.\n        Repeatedly applies two types of logic:\n        * When an entry has a single possibility, remove that value from all 20 neighbors\n        * When a row/col/square has only one entry with k as a possibility, fill in that possibility\n        \"\"\"\n        done = False\n        while not done:\n            done = True\n            for i in range(81):\n                new = sets[i] - {k for g in inv[i] for j in g if j != i and len(sets[j]) == 1 for k in sets[j]}\n                if not new:\n                    return False\n                if len(sets[i]) != len(new):\n                    sets[i] = new\n                    done = False\n\n            for g in groups:\n                for k in range(1, 10):\n                    possibilities = [i for i in g if k in sets[i]]\n                    if not possibilities:\n                        return False\n                    if len(possibilities) == 1:\n                        i = possibilities[0]\n                        if len(sets[i]) > 1:\n                            done = False\n                            sets[i] = {k}\n\n        return True\n\n    ans = []\n\n    counter = 0\n\n    def solve_helper():\n        nonlocal sets, ans, counter\n        counter += 1\n        assert len(ans) <= 1, \"Sudoku puzzle should have a unique solution\"\n        old_sets = sets[:]\n        if reduce():\n            if all(len(s) == 1 for s in sets):\n                ans.append(\"\".join(str(list(s)[0]) for s in sets))\n            else:\n                smallest_set = min(range(81), key=lambda i: len(sets[i]) if len(sets[i]) > 1 else 10)\n                for v in sorted(sets[smallest_set]):\n                    sets[smallest_set] = {v}\n                    solve_helper()\n\n        sets = old_sets\n\n    solve_helper()\n    assert ans, \"No solution found\"\n    return ans[0]"
    ],
    "module": "classic_puzzles.py",
    "notes": "The classic game of [Sudoku](https://en.wikipedia.org/wiki/Sudoku)",
    "weight": 1.0
  },
  {
    "name": "Sudoku:1",
    "sat": "def sat(x: str, puz=\"__2__1_3__9_7_____5______8_6___5_______12____2____3_68________9_1_8__4____7____25\"):\n    assert all(c == \"_\" or c == s for (c, s) in zip(puz, x))\n\n    full = set('123456789')\n    for i in range(9):\n        assert {x[i] for i in range(9 * i, 9 * i + 9)} == full, \"invalid row\"\n        assert {x[i] for i in range(i, i + 81, 9)} == full, \"invalid column\"\n        assert {x[9 * a + b + i + 26 * (i % 3)] for a in range(3) for b in range(3)} == full, \"invalid square\"\n\n    return True",
    "ans_type": "str",
    "sol_header": "def sol(puz=\"__2__1_3__9_7_____5______8_6___5_______12____2____3_68________9_1_8__4____7____25\"):",
    "sol_docstring": "    \"\"\"Find the unique valid solution to the Sudoku puzzle\"\"\"",
    "sol_bodies": [
      "    \"\"\"Simple depth-first backtracking solver that branches at the square with fewest possibilities\"\"\"\n    sets = [{int(c)} if c != '_' else set(range(1, 10)) for c in puz]\n\n    groups = []\n    for i in range(9):\n        groups.append(list(range(9 * i, 9 * i + 9)))\n        groups.append(list(range(i, i + 81, 9)))\n        groups.append([9 * a + b + i + 26 * (i % 3) for a in range(3) for b in range(3)])\n\n    inv = [[] for i in range(81)]\n    for g in groups:\n        for i in g:\n            inv[i].append(g)\n\n    def reduce():\n        \"\"\"Reduce possibilities and return False if it's clearly impossible to solve, True otherwise.\n        Repeatedly applies two types of logic:\n        * When an entry has a single possibility, remove that value from all 20 neighbors\n        * When a row/col/square has only one entry with k as a possibility, fill in that possibility\n        \"\"\"\n        done = False\n        while not done:\n            done = True\n            for i in range(81):\n                new = sets[i] - {k for g in inv[i] for j in g if j != i and len(sets[j]) == 1 for k in sets[j]}\n                if not new:\n                    return False\n                if len(sets[i]) != len(new):\n                    sets[i] = new\n                    done = False\n\n            for g in groups:\n                for k in range(1, 10):\n                    possibilities = [i for i in g if k in sets[i]]\n                    if not possibilities:\n                        return False\n                    if len(possibilities) == 1:\n                        i = possibilities[0]\n                        if len(sets[i]) > 1:\n                            done = False\n                            sets[i] = {k}\n\n        return True\n\n    ans = []\n\n    counter = 0\n\n    def solve_helper():\n        nonlocal sets, ans, counter\n        counter += 1\n        assert len(ans) <= 1, \"Sudoku puzzle should have a unique solution\"\n        old_sets = sets[:]\n        if reduce():\n            if all(len(s) == 1 for s in sets):\n                ans.append(\"\".join(str(list(s)[0]) for s in sets))\n            else:\n                smallest_set = min(range(81), key=lambda i: len(sets[i]) if len(sets[i]) > 1 else 10)\n                for v in sorted(sets[smallest_set]):\n                    sets[smallest_set] = {v}\n                    solve_helper()\n\n        sets = old_sets\n\n    solve_helper()\n    assert ans, \"No solution found\"\n    return ans[0]"
    ],
    "module": "classic_puzzles.py",
    "notes": "The classic game of [Sudoku](https://en.wikipedia.org/wiki/Sudoku)",
    "weight": 1.0
  },
  {
    "name": "Sudoku:2",
    "sat": "def sat(x: str, puz=\"__721__56__27___________9______5____62______1_1___9___8_____________3197__61__32_\"):\n    assert all(c == \"_\" or c == s for (c, s) in zip(puz, x))\n\n    full = set('123456789')\n    for i in range(9):\n        assert {x[i] for i in range(9 * i, 9 * i + 9)} == full, \"invalid row\"\n        assert {x[i] for i in range(i, i + 81, 9)} == full, \"invalid column\"\n        assert {x[9 * a + b + i + 26 * (i % 3)] for a in range(3) for b in range(3)} == full, \"invalid square\"\n\n    return True",
    "ans_type": "str",
    "sol_header": "def sol(puz=\"__721__56__27___________9______5____62______1_1___9___8_____________3197__61__32_\"):",
    "sol_docstring": "    \"\"\"Find the unique valid solution to the Sudoku puzzle\"\"\"",
    "sol_bodies": [
      "    \"\"\"Simple depth-first backtracking solver that branches at the square with fewest possibilities\"\"\"\n    sets = [{int(c)} if c != '_' else set(range(1, 10)) for c in puz]\n\n    groups = []\n    for i in range(9):\n        groups.append(list(range(9 * i, 9 * i + 9)))\n        groups.append(list(range(i, i + 81, 9)))\n        groups.append([9 * a + b + i + 26 * (i % 3) for a in range(3) for b in range(3)])\n\n    inv = [[] for i in range(81)]\n    for g in groups:\n        for i in g:\n            inv[i].append(g)\n\n    def reduce():\n        \"\"\"Reduce possibilities and return False if it's clearly impossible to solve, True otherwise.\n        Repeatedly applies two types of logic:\n        * When an entry has a single possibility, remove that value from all 20 neighbors\n        * When a row/col/square has only one entry with k as a possibility, fill in that possibility\n        \"\"\"\n        done = False\n        while not done:\n            done = True\n            for i in range(81):\n                new = sets[i] - {k for g in inv[i] for j in g if j != i and len(sets[j]) == 1 for k in sets[j]}\n                if not new:\n                    return False\n                if len(sets[i]) != len(new):\n                    sets[i] = new\n                    done = False\n\n            for g in groups:\n                for k in range(1, 10):\n                    possibilities = [i for i in g if k in sets[i]]\n                    if not possibilities:\n                        return False\n                    if len(possibilities) == 1:\n                        i = possibilities[0]\n                        if len(sets[i]) > 1:\n                            done = False\n                            sets[i] = {k}\n\n        return True\n\n    ans = []\n\n    counter = 0\n\n    def solve_helper():\n        nonlocal sets, ans, counter\n        counter += 1\n        assert len(ans) <= 1, \"Sudoku puzzle should have a unique solution\"\n        old_sets = sets[:]\n        if reduce():\n            if all(len(s) == 1 for s in sets):\n                ans.append(\"\".join(str(list(s)[0]) for s in sets))\n            else:\n                smallest_set = min(range(81), key=lambda i: len(sets[i]) if len(sets[i]) > 1 else 10)\n                for v in sorted(sets[smallest_set]):\n                    sets[smallest_set] = {v}\n                    solve_helper()\n\n        sets = old_sets\n\n    solve_helper()\n    assert ans, \"No solution found\"\n    return ans[0]"
    ],
    "module": "classic_puzzles.py",
    "notes": "The classic game of [Sudoku](https://en.wikipedia.org/wiki/Sudoku)",
    "weight": 1.0
  },
  {
    "name": "Sudoku:3",
    "sat": "def sat(x: str, puz=\"_____42______7_____4______9__49___626_8__3___3_7__65_4_5_3__1__1____8_7__________\"):\n    assert all(c == \"_\" or c == s for (c, s) in zip(puz, x))\n\n    full = set('123456789')\n    for i in range(9):\n        assert {x[i] for i in range(9 * i, 9 * i + 9)} == full, \"invalid row\"\n        assert {x[i] for i in range(i, i + 81, 9)} == full, \"invalid column\"\n        assert {x[9 * a + b + i + 26 * (i % 3)] for a in range(3) for b in range(3)} == full, \"invalid square\"\n\n    return True",
    "ans_type": "str",
    "sol_header": "def sol(puz=\"_____42______7_____4______9__49___626_8__3___3_7__65_4_5_3__1__1____8_7__________\"):",
    "sol_docstring": "    \"\"\"Find the unique valid solution to the Sudoku puzzle\"\"\"",
    "sol_bodies": [
      "    \"\"\"Simple depth-first backtracking solver that branches at the square with fewest possibilities\"\"\"\n    sets = [{int(c)} if c != '_' else set(range(1, 10)) for c in puz]\n\n    groups = []\n    for i in range(9):\n        groups.append(list(range(9 * i, 9 * i + 9)))\n        groups.append(list(range(i, i + 81, 9)))\n        groups.append([9 * a + b + i + 26 * (i % 3) for a in range(3) for b in range(3)])\n\n    inv = [[] for i in range(81)]\n    for g in groups:\n        for i in g:\n            inv[i].append(g)\n\n    def reduce():\n        \"\"\"Reduce possibilities and return False if it's clearly impossible to solve, True otherwise.\n        Repeatedly applies two types of logic:\n        * When an entry has a single possibility, remove that value from all 20 neighbors\n        * When a row/col/square has only one entry with k as a possibility, fill in that possibility\n        \"\"\"\n        done = False\n        while not done:\n            done = True\n            for i in range(81):\n                new = sets[i] - {k for g in inv[i] for j in g if j != i and len(sets[j]) == 1 for k in sets[j]}\n                if not new:\n                    return False\n                if len(sets[i]) != len(new):\n                    sets[i] = new\n                    done = False\n\n            for g in groups:\n                for k in range(1, 10):\n                    possibilities = [i for i in g if k in sets[i]]\n                    if not possibilities:\n                        return False\n                    if len(possibilities) == 1:\n                        i = possibilities[0]\n                        if len(sets[i]) > 1:\n                            done = False\n                            sets[i] = {k}\n\n        return True\n\n    ans = []\n\n    counter = 0\n\n    def solve_helper():\n        nonlocal sets, ans, counter\n        counter += 1\n        assert len(ans) <= 1, \"Sudoku puzzle should have a unique solution\"\n        old_sets = sets[:]\n        if reduce():\n            if all(len(s) == 1 for s in sets):\n                ans.append(\"\".join(str(list(s)[0]) for s in sets))\n            else:\n                smallest_set = min(range(81), key=lambda i: len(sets[i]) if len(sets[i]) > 1 else 10)\n                for v in sorted(sets[smallest_set]):\n                    sets[smallest_set] = {v}\n                    solve_helper()\n\n        sets = old_sets\n\n    solve_helper()\n    assert ans, \"No solution found\"\n    return ans[0]"
    ],
    "module": "classic_puzzles.py",
    "notes": "The classic game of [Sudoku](https://en.wikipedia.org/wiki/Sudoku)",
    "weight": 1.0
  },
  {
    "name": "Sudoku:4",
    "sat": "def sat(x: str, puz=\"___56_4_7__92_4_65___3______9____2___5_______7___8___1_________43_____5_____76__2\"):\n    assert all(c == \"_\" or c == s for (c, s) in zip(puz, x))\n\n    full = set('123456789')\n    for i in range(9):\n        assert {x[i] for i in range(9 * i, 9 * i + 9)} == full, \"invalid row\"\n        assert {x[i] for i in range(i, i + 81, 9)} == full, \"invalid column\"\n        assert {x[9 * a + b + i + 26 * (i % 3)] for a in range(3) for b in range(3)} == full, \"invalid square\"\n\n    return True",
    "ans_type": "str",
    "sol_header": "def sol(puz=\"___56_4_7__92_4_65___3______9____2___5_______7___8___1_________43_____5_____76__2\"):",
    "sol_docstring": "    \"\"\"Find the unique valid solution to the Sudoku puzzle\"\"\"",
    "sol_bodies": [
      "    \"\"\"Simple depth-first backtracking solver that branches at the square with fewest possibilities\"\"\"\n    sets = [{int(c)} if c != '_' else set(range(1, 10)) for c in puz]\n\n    groups = []\n    for i in range(9):\n        groups.append(list(range(9 * i, 9 * i + 9)))\n        groups.append(list(range(i, i + 81, 9)))\n        groups.append([9 * a + b + i + 26 * (i % 3) for a in range(3) for b in range(3)])\n\n    inv = [[] for i in range(81)]\n    for g in groups:\n        for i in g:\n            inv[i].append(g)\n\n    def reduce():\n        \"\"\"Reduce possibilities and return False if it's clearly impossible to solve, True otherwise.\n        Repeatedly applies two types of logic:\n        * When an entry has a single possibility, remove that value from all 20 neighbors\n        * When a row/col/square has only one entry with k as a possibility, fill in that possibility\n        \"\"\"\n        done = False\n        while not done:\n            done = True\n            for i in range(81):\n                new = sets[i] - {k for g in inv[i] for j in g if j != i and len(sets[j]) == 1 for k in sets[j]}\n                if not new:\n                    return False\n                if len(sets[i]) != len(new):\n                    sets[i] = new\n                    done = False\n\n            for g in groups:\n                for k in range(1, 10):\n                    possibilities = [i for i in g if k in sets[i]]\n                    if not possibilities:\n                        return False\n                    if len(possibilities) == 1:\n                        i = possibilities[0]\n                        if len(sets[i]) > 1:\n                            done = False\n                            sets[i] = {k}\n\n        return True\n\n    ans = []\n\n    counter = 0\n\n    def solve_helper():\n        nonlocal sets, ans, counter\n        counter += 1\n        assert len(ans) <= 1, \"Sudoku puzzle should have a unique solution\"\n        old_sets = sets[:]\n        if reduce():\n            if all(len(s) == 1 for s in sets):\n                ans.append(\"\".join(str(list(s)[0]) for s in sets))\n            else:\n                smallest_set = min(range(81), key=lambda i: len(sets[i]) if len(sets[i]) > 1 else 10)\n                for v in sorted(sets[smallest_set]):\n                    sets[smallest_set] = {v}\n                    solve_helper()\n\n        sets = old_sets\n\n    solve_helper()\n    assert ans, \"No solution found\"\n    return ans[0]"
    ],
    "module": "classic_puzzles.py",
    "notes": "The classic game of [Sudoku](https://en.wikipedia.org/wiki/Sudoku)",
    "weight": 1.0
  },
  {
    "name": "SquaringTheSquare:0",
    "sat": "def sat(xy_sides: List[List[int]]):\n    n = max(x + side for x, y, side in xy_sides)\n    assert len({side for x, y, side in xy_sides}) == len(xy_sides) > 1\n    for x, y, s in xy_sides:\n        assert 0 <= y < y + s <= n and 0 <= x\n        for x2, y2, s2 in xy_sides:\n            assert s2 <= s or x2 >= x + s or x2 + s2 <= x or y2 >= y + s or y2 + s2 <= y\n\n    return sum(side ** 2 for x, y, side in xy_sides) == n ** 2",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"\n    Partition a square into smaller squares with unique side lengths. A perfect squared path has distinct sides.\n    xy_sides is a List of (x, y, side)\n    \"\"\"",
    "sol_bodies": [
      "    return [[0, 0, 50], [0, 50, 29], [0, 79, 33], [29, 50, 25], [29, 75, 4], [33, 75, 37], [50, 0, 35],\n            [50, 35, 15], [54, 50, 9], [54, 59, 16], [63, 50, 2], [63, 52, 7], [65, 35, 17], [70, 52, 18],\n            [70, 70, 42], [82, 35, 11], [82, 46, 6], [85, 0, 27], [85, 27, 8], [88, 46, 24], [93, 27, 19]]"
    ],
    "module": "classic_puzzles.py",
    "notes": "[Squaring the square](https://en.wikipedia.org/wiki/Squaring_the_square)\nWikipedia gives a minimal [solution with 21 squares](https://en.wikipedia.org/wiki/Squaring_the_square)\ndue to Duijvestijn (1978).",
    "weight": 1.0
  },
  {
    "name": "NecklaceSplit:0",
    "sat": "def sat(n: int, lace=\"bbrbrbbbbbbrrrrrrrbrrrrbbbrbrrbbbrbrrrbrrbrrbrbbrrrrrbrbbbrrrbbbrbbrbbbrbrbb\"):\n    sub = lace[n: n + len(lace) // 2]\n    return n >= 0 and lace.count(\"r\") == 2 * sub.count(\"r\") and lace.count(\"b\") == 2 * sub.count(\"b\")",
    "ans_type": "int",
    "sol_header": "def sol(lace=\"bbrbrbbbbbbrrrrrrrbrrrrbbbrbrrbbbrbrrrbrrbrrbrbbrrrrrbrbbbrrrbbbrbbrbbbrbrbb\"):",
    "sol_docstring": "    \"\"\"\n    Find a split dividing the given red/blue necklace in half at n so that each piece has an equal number of\n    reds and blues.\n    \"\"\"",
    "sol_bodies": [
      "    if lace == \"\":\n        return 0\n    return next(n for n in range(len(lace) // 2) if lace[n: n + len(lace) // 2].count(\"r\") == len(lace) // 4)"
    ],
    "module": "classic_puzzles.py",
    "notes": "[Necklace Splitting Problem](https://en.wikipedia.org/wiki/Necklace_splitting_problem)",
    "weight": 1.0
  },
  {
    "name": "NecklaceSplit:1",
    "sat": "def sat(n: int, lace=\"rbbrrbbrbrbbbrrrbbrbrbrrbbrbbbbbbrrrrrrrrbrrrbbrbrrbbbrbbrrrbbrbbrrbrrbrbbrbbbbbbrbbbrbrbrrbrbbrbrrbbrrbrrbrrbrrbrbrbrrrbbrbrbbrrbbbbrrrrrbbrbrbrrbr\"):\n    sub = lace[n: n + len(lace) // 2]\n    return n >= 0 and lace.count(\"r\") == 2 * sub.count(\"r\") and lace.count(\"b\") == 2 * sub.count(\"b\")",
    "ans_type": "int",
    "sol_header": "def sol(lace=\"rbbrrbbrbrbbbrrrbbrbrbrrbbrbbbbbbrrrrrrrrbrrrbbrbrrbbbrbbrrrbbrbbrrbrrbrbbrbbbbbbrbbbrbrbrrbrbbrbrrbbrrbrrbrrbrrbrbrbrrrbbrbrbbrrbbbbrrrrrbbrbrbrrbr\"):",
    "sol_docstring": "    \"\"\"\n    Find a split dividing the given red/blue necklace in half at n so that each piece has an equal number of\n    reds and blues.\n    \"\"\"",
    "sol_bodies": [
      "    if lace == \"\":\n        return 0\n    return next(n for n in range(len(lace) // 2) if lace[n: n + len(lace) // 2].count(\"r\") == len(lace) // 4)"
    ],
    "module": "classic_puzzles.py",
    "notes": "[Necklace Splitting Problem](https://en.wikipedia.org/wiki/Necklace_splitting_problem)",
    "weight": 1.0
  },
  {
    "name": "NecklaceSplit:2",
    "sat": "def sat(n: int, lace=\"brrrbrrbrbbbbbrrbbrr\"):\n    sub = lace[n: n + len(lace) // 2]\n    return n >= 0 and lace.count(\"r\") == 2 * sub.count(\"r\") and lace.count(\"b\") == 2 * sub.count(\"b\")",
    "ans_type": "int",
    "sol_header": "def sol(lace=\"brrrbrrbrbbbbbrrbbrr\"):",
    "sol_docstring": "    \"\"\"\n    Find a split dividing the given red/blue necklace in half at n so that each piece has an equal number of\n    reds and blues.\n    \"\"\"",
    "sol_bodies": [
      "    if lace == \"\":\n        return 0\n    return next(n for n in range(len(lace) // 2) if lace[n: n + len(lace) // 2].count(\"r\") == len(lace) // 4)"
    ],
    "module": "classic_puzzles.py",
    "notes": "[Necklace Splitting Problem](https://en.wikipedia.org/wiki/Necklace_splitting_problem)",
    "weight": 1.0
  },
  {
    "name": "NecklaceSplit:3",
    "sat": "def sat(n: int, lace=\"bbbbrrbbbbrrbbrrrbbrrbbrrrrrrrbrbrbbbrrbrrrbbbbbbbrbrbrbbbbbbbrrbbrbbrbrrbrbrrbbbrrrrrbrrbbrrrbbrbrrrbbbbrbbbrrrrbrbrrbbrbrbrbbrrbrrrbrbrrbbbbbbrbrrrrbbrbbbrbrrbrbbrbrrbbbbrrrrrbrrrbbrrrrrrbrrrbrbbbrbbbrrrbbr\"):\n    sub = lace[n: n + len(lace) // 2]\n    return n >= 0 and lace.count(\"r\") == 2 * sub.count(\"r\") and lace.count(\"b\") == 2 * sub.count(\"b\")",
    "ans_type": "int",
    "sol_header": "def sol(lace=\"bbbbrrbbbbrrbbrrrbbrrbbrrrrrrrbrbrbbbrrbrrrbbbbbbbrbrbrbbbbbbbrrbbrbbrbrrbrbrrbbbrrrrrbrrbbrrrbbrbrrrbbbbrbbbrrrrbrbrrbbrbrbrbbrrbrrrbrbrrbbbbbbrbrrrrbbrbbbrbrrbrbbrbrrbbbbrrrrrbrrrbbrrrrrrbrrrbrbbbrbbbrrrbbr\"):",
    "sol_docstring": "    \"\"\"\n    Find a split dividing the given red/blue necklace in half at n so that each piece has an equal number of\n    reds and blues.\n    \"\"\"",
    "sol_bodies": [
      "    if lace == \"\":\n        return 0\n    return next(n for n in range(len(lace) // 2) if lace[n: n + len(lace) // 2].count(\"r\") == len(lace) // 4)"
    ],
    "module": "classic_puzzles.py",
    "notes": "[Necklace Splitting Problem](https://en.wikipedia.org/wiki/Necklace_splitting_problem)",
    "weight": 1.0
  },
  {
    "name": "NecklaceSplit:4",
    "sat": "def sat(n: int, lace=\"brrbbbrbbrrbrrbbrrbrrrbbrbbrrrbrbrbrrrrbbrrrbrrbbbbrbbbrrbbrrrbbrbrbbbbbrrbrrbbr\"):\n    sub = lace[n: n + len(lace) // 2]\n    return n >= 0 and lace.count(\"r\") == 2 * sub.count(\"r\") and lace.count(\"b\") == 2 * sub.count(\"b\")",
    "ans_type": "int",
    "sol_header": "def sol(lace=\"brrbbbrbbrrbrrbbrrbrrrbbrbbrrrbrbrbrrrrbbrrrbrrbbbbrbbbrrbbrrrbbrbrbbbbbrrbrrbbr\"):",
    "sol_docstring": "    \"\"\"\n    Find a split dividing the given red/blue necklace in half at n so that each piece has an equal number of\n    reds and blues.\n    \"\"\"",
    "sol_bodies": [
      "    if lace == \"\":\n        return 0\n    return next(n for n in range(len(lace) // 2) if lace[n: n + len(lace) // 2].count(\"r\") == len(lace) // 4)"
    ],
    "module": "classic_puzzles.py",
    "notes": "[Necklace Splitting Problem](https://en.wikipedia.org/wiki/Necklace_splitting_problem)",
    "weight": 1.0
  },
  {
    "name": "PandigitalSquare:0",
    "sat": "def sat(n: int):\n    s = str(n * n)\n    for i in \"0123456789\":\n        assert s.count(i) == 1\n    return True",
    "ans_type": "int",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"Find an integer whose square has all digits 0-9 once.\"\"\"",
    "sol_bodies": [
      "    for n in range(10 ** 5):\n        if sorted([int(s) for s in str(n * n)]) == list(range(10)):\n            return n"
    ],
    "module": "classic_puzzles.py",
    "notes": "[Pandigital](https://en.wikipedia.org/wiki/Pandigital_number) Square",
    "weight": 1.0
  },
  {
    "name": "AllPandigitalSquares:0",
    "sat": "def sat(nums: List[int]):\n    return [sorted([int(s) for s in str(n * n)]) for n in set(nums)] == [list(range(10))] * 174",
    "ans_type": "List[int]",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"Find all 174 integers whose 10-digit square has all digits 0-9 just once.\"\"\"",
    "sol_bodies": [
      "    return [i for i in range(-10 ** 5, 10 ** 5) if sorted([int(s) for s in str(i * i)]) == list(range(10))]"
    ],
    "module": "classic_puzzles.py",
    "notes": "All [Pandigital](https://en.wikipedia.org/wiki/Pandigital_number) Squares",
    "weight": 1.0
  },
  {
    "name": "CardGame24:0",
    "sat": "def sat(expr: str, nums=[3, 7, 3, 7]):\n    assert len(nums) == 4 and 1 <= min(nums) and max(nums) <= 13, \"hint: nums is a list of four ints in 1..13\"\n    expr = expr.replace(\" \", \"\")  # ignore whitespace\n    digits = \"\"\n    for i in range(len(expr)):\n        if i == 0 or expr[i - 1] in \"+*-/(\":\n            assert expr[i] in \"123456789(\", \"Expr cannot contain **, //, or unary -\"\n        assert expr[i] in \"1234567890()+-*/\", \"Expr can only contain `0123456789()+-*/`\"\n        digits += expr[i] if expr[i] in \"0123456789\" else \" \"\n    assert sorted(int(s) for s in digits.split()) == sorted(nums), \"Each number must occur exactly once\"\n    return abs(eval(expr) - 24.0) < 1e-6",
    "ans_type": "str",
    "sol_header": "def sol(nums=[3, 7, 3, 7]):",
    "sol_docstring": "    \"\"\"Find a formula with two 3's and two 7's and + - * / (and parentheses) that evaluates to 24.\"\"\"",
    "sol_bodies": [
      "    def helper(pairs):\n        if len(pairs) == 2:\n            (x, s), (y, t) = pairs\n            ans = {\n                x + y: f\"{s}+{t}\",\n                x - y: f\"{s}-({t})\",\n                y - x: f\"{t}-({s})\",\n                x * y: f\"({s})*({t})\"\n            }\n            if y != 0:\n                ans[x / y] = f\"({s})/({t})\"\n            if x != 0:\n                ans[y / x] = f\"({t})/({s})\"\n            return ans\n        ans = {y: t\n               for i in range(len(pairs))\n               for x_s in helper(pairs[:i] + pairs[i + 1:]).items()\n               for y, t in helper([x_s, pairs[i]]).items()}\n        if len(pairs) == 3:\n            return ans\n        ans.update({z: u\n                    for i in range(1, 4)\n                    for x_s in helper([pairs[0], pairs[i]]).items()\n                    for y_t in helper(pairs[1:i] + pairs[i + 1:]).items()\n                    for z, u in helper([x_s, y_t]).items()\n                    })\n        return ans\n\n    derivations = helper([(n, str(n)) for n in nums])\n    for x in derivations:\n        if abs(x - 24.0) < 1e-6:\n            return derivations[x]"
    ],
    "module": "classic_puzzles.py",
    "notes": "[24 Game](https://en.wikipedia.org/wiki/24_Game)\n\nIn this game one is given four numbers from the range 1-13 (Ace-King) and one needs to combine them with\n    + - * / (and parentheses)\nto make the number 24.\nThe solution to this tricky example is `7 * (3 + 3 / 7)`",
    "weight": 1.0
  },
  {
    "name": "CardGame24:1",
    "sat": "def sat(expr: str, nums=[1, 3, 7, 13]):\n    assert len(nums) == 4 and 1 <= min(nums) and max(nums) <= 13, \"hint: nums is a list of four ints in 1..13\"\n    expr = expr.replace(\" \", \"\")  # ignore whitespace\n    digits = \"\"\n    for i in range(len(expr)):\n        if i == 0 or expr[i - 1] in \"+*-/(\":\n            assert expr[i] in \"123456789(\", \"Expr cannot contain **, //, or unary -\"\n        assert expr[i] in \"1234567890()+-*/\", \"Expr can only contain `0123456789()+-*/`\"\n        digits += expr[i] if expr[i] in \"0123456789\" else \" \"\n    assert sorted(int(s) for s in digits.split()) == sorted(nums), \"Each number must occur exactly once\"\n    return abs(eval(expr) - 24.0) < 1e-6",
    "ans_type": "str",
    "sol_header": "def sol(nums=[1, 3, 7, 13]):",
    "sol_docstring": "    \"\"\"Find a formula with two 3's and two 7's and + - * / (and parentheses) that evaluates to 24.\"\"\"",
    "sol_bodies": [
      "    def helper(pairs):\n        if len(pairs) == 2:\n            (x, s), (y, t) = pairs\n            ans = {\n                x + y: f\"{s}+{t}\",\n                x - y: f\"{s}-({t})\",\n                y - x: f\"{t}-({s})\",\n                x * y: f\"({s})*({t})\"\n            }\n            if y != 0:\n                ans[x / y] = f\"({s})/({t})\"\n            if x != 0:\n                ans[y / x] = f\"({t})/({s})\"\n            return ans\n        ans = {y: t\n               for i in range(len(pairs))\n               for x_s in helper(pairs[:i] + pairs[i + 1:]).items()\n               for y, t in helper([x_s, pairs[i]]).items()}\n        if len(pairs) == 3:\n            return ans\n        ans.update({z: u\n                    for i in range(1, 4)\n                    for x_s in helper([pairs[0], pairs[i]]).items()\n                    for y_t in helper(pairs[1:i] + pairs[i + 1:]).items()\n                    for z, u in helper([x_s, y_t]).items()\n                    })\n        return ans\n\n    derivations = helper([(n, str(n)) for n in nums])\n    for x in derivations:\n        if abs(x - 24.0) < 1e-6:\n            return derivations[x]"
    ],
    "module": "classic_puzzles.py",
    "notes": "[24 Game](https://en.wikipedia.org/wiki/24_Game)\n\nIn this game one is given four numbers from the range 1-13 (Ace-King) and one needs to combine them with\n    + - * / (and parentheses)\nto make the number 24.\nThe solution to this tricky example is `7 * (3 + 3 / 7)`",
    "weight": 1.0
  },
  {
    "name": "CardGame24:2",
    "sat": "def sat(expr: str, nums=[10, 7, 3, 1]):\n    assert len(nums) == 4 and 1 <= min(nums) and max(nums) <= 13, \"hint: nums is a list of four ints in 1..13\"\n    expr = expr.replace(\" \", \"\")  # ignore whitespace\n    digits = \"\"\n    for i in range(len(expr)):\n        if i == 0 or expr[i - 1] in \"+*-/(\":\n            assert expr[i] in \"123456789(\", \"Expr cannot contain **, //, or unary -\"\n        assert expr[i] in \"1234567890()+-*/\", \"Expr can only contain `0123456789()+-*/`\"\n        digits += expr[i] if expr[i] in \"0123456789\" else \" \"\n    assert sorted(int(s) for s in digits.split()) == sorted(nums), \"Each number must occur exactly once\"\n    return abs(eval(expr) - 24.0) < 1e-6",
    "ans_type": "str",
    "sol_header": "def sol(nums=[10, 7, 3, 1]):",
    "sol_docstring": "    \"\"\"Find a formula with two 3's and two 7's and + - * / (and parentheses) that evaluates to 24.\"\"\"",
    "sol_bodies": [
      "    def helper(pairs):\n        if len(pairs) == 2:\n            (x, s), (y, t) = pairs\n            ans = {\n                x + y: f\"{s}+{t}\",\n                x - y: f\"{s}-({t})\",\n                y - x: f\"{t}-({s})\",\n                x * y: f\"({s})*({t})\"\n            }\n            if y != 0:\n                ans[x / y] = f\"({s})/({t})\"\n            if x != 0:\n                ans[y / x] = f\"({t})/({s})\"\n            return ans\n        ans = {y: t\n               for i in range(len(pairs))\n               for x_s in helper(pairs[:i] + pairs[i + 1:]).items()\n               for y, t in helper([x_s, pairs[i]]).items()}\n        if len(pairs) == 3:\n            return ans\n        ans.update({z: u\n                    for i in range(1, 4)\n                    for x_s in helper([pairs[0], pairs[i]]).items()\n                    for y_t in helper(pairs[1:i] + pairs[i + 1:]).items()\n                    for z, u in helper([x_s, y_t]).items()\n                    })\n        return ans\n\n    derivations = helper([(n, str(n)) for n in nums])\n    for x in derivations:\n        if abs(x - 24.0) < 1e-6:\n            return derivations[x]"
    ],
    "module": "classic_puzzles.py",
    "notes": "[24 Game](https://en.wikipedia.org/wiki/24_Game)\n\nIn this game one is given four numbers from the range 1-13 (Ace-King) and one needs to combine them with\n    + - * / (and parentheses)\nto make the number 24.\nThe solution to this tricky example is `7 * (3 + 3 / 7)`",
    "weight": 1.0
  },
  {
    "name": "CardGame24:3",
    "sat": "def sat(expr: str, nums=[8, 3, 12, 1]):\n    assert len(nums) == 4 and 1 <= min(nums) and max(nums) <= 13, \"hint: nums is a list of four ints in 1..13\"\n    expr = expr.replace(\" \", \"\")  # ignore whitespace\n    digits = \"\"\n    for i in range(len(expr)):\n        if i == 0 or expr[i - 1] in \"+*-/(\":\n            assert expr[i] in \"123456789(\", \"Expr cannot contain **, //, or unary -\"\n        assert expr[i] in \"1234567890()+-*/\", \"Expr can only contain `0123456789()+-*/`\"\n        digits += expr[i] if expr[i] in \"0123456789\" else \" \"\n    assert sorted(int(s) for s in digits.split()) == sorted(nums), \"Each number must occur exactly once\"\n    return abs(eval(expr) - 24.0) < 1e-6",
    "ans_type": "str",
    "sol_header": "def sol(nums=[8, 3, 12, 1]):",
    "sol_docstring": "    \"\"\"Find a formula with two 3's and two 7's and + - * / (and parentheses) that evaluates to 24.\"\"\"",
    "sol_bodies": [
      "    def helper(pairs):\n        if len(pairs) == 2:\n            (x, s), (y, t) = pairs\n            ans = {\n                x + y: f\"{s}+{t}\",\n                x - y: f\"{s}-({t})\",\n                y - x: f\"{t}-({s})\",\n                x * y: f\"({s})*({t})\"\n            }\n            if y != 0:\n                ans[x / y] = f\"({s})/({t})\"\n            if x != 0:\n                ans[y / x] = f\"({t})/({s})\"\n            return ans\n        ans = {y: t\n               for i in range(len(pairs))\n               for x_s in helper(pairs[:i] + pairs[i + 1:]).items()\n               for y, t in helper([x_s, pairs[i]]).items()}\n        if len(pairs) == 3:\n            return ans\n        ans.update({z: u\n                    for i in range(1, 4)\n                    for x_s in helper([pairs[0], pairs[i]]).items()\n                    for y_t in helper(pairs[1:i] + pairs[i + 1:]).items()\n                    for z, u in helper([x_s, y_t]).items()\n                    })\n        return ans\n\n    derivations = helper([(n, str(n)) for n in nums])\n    for x in derivations:\n        if abs(x - 24.0) < 1e-6:\n            return derivations[x]"
    ],
    "module": "classic_puzzles.py",
    "notes": "[24 Game](https://en.wikipedia.org/wiki/24_Game)\n\nIn this game one is given four numbers from the range 1-13 (Ace-King) and one needs to combine them with\n    + - * / (and parentheses)\nto make the number 24.\nThe solution to this tricky example is `7 * (3 + 3 / 7)`",
    "weight": 1.0
  },
  {
    "name": "CardGame24:4",
    "sat": "def sat(expr: str, nums=[10, 12, 1, 7]):\n    assert len(nums) == 4 and 1 <= min(nums) and max(nums) <= 13, \"hint: nums is a list of four ints in 1..13\"\n    expr = expr.replace(\" \", \"\")  # ignore whitespace\n    digits = \"\"\n    for i in range(len(expr)):\n        if i == 0 or expr[i - 1] in \"+*-/(\":\n            assert expr[i] in \"123456789(\", \"Expr cannot contain **, //, or unary -\"\n        assert expr[i] in \"1234567890()+-*/\", \"Expr can only contain `0123456789()+-*/`\"\n        digits += expr[i] if expr[i] in \"0123456789\" else \" \"\n    assert sorted(int(s) for s in digits.split()) == sorted(nums), \"Each number must occur exactly once\"\n    return abs(eval(expr) - 24.0) < 1e-6",
    "ans_type": "str",
    "sol_header": "def sol(nums=[10, 12, 1, 7]):",
    "sol_docstring": "    \"\"\"Find a formula with two 3's and two 7's and + - * / (and parentheses) that evaluates to 24.\"\"\"",
    "sol_bodies": [
      "    def helper(pairs):\n        if len(pairs) == 2:\n            (x, s), (y, t) = pairs\n            ans = {\n                x + y: f\"{s}+{t}\",\n                x - y: f\"{s}-({t})\",\n                y - x: f\"{t}-({s})\",\n                x * y: f\"({s})*({t})\"\n            }\n            if y != 0:\n                ans[x / y] = f\"({s})/({t})\"\n            if x != 0:\n                ans[y / x] = f\"({t})/({s})\"\n            return ans\n        ans = {y: t\n               for i in range(len(pairs))\n               for x_s in helper(pairs[:i] + pairs[i + 1:]).items()\n               for y, t in helper([x_s, pairs[i]]).items()}\n        if len(pairs) == 3:\n            return ans\n        ans.update({z: u\n                    for i in range(1, 4)\n                    for x_s in helper([pairs[0], pairs[i]]).items()\n                    for y_t in helper(pairs[1:i] + pairs[i + 1:]).items()\n                    for z, u in helper([x_s, y_t]).items()\n                    })\n        return ans\n\n    derivations = helper([(n, str(n)) for n in nums])\n    for x in derivations:\n        if abs(x - 24.0) < 1e-6:\n            return derivations[x]"
    ],
    "module": "classic_puzzles.py",
    "notes": "[24 Game](https://en.wikipedia.org/wiki/24_Game)\n\nIn this game one is given four numbers from the range 1-13 (Ace-King) and one needs to combine them with\n    + - * / (and parentheses)\nto make the number 24.\nThe solution to this tricky example is `7 * (3 + 3 / 7)`",
    "weight": 1.0
  },
  {
    "name": "Easy63:0",
    "sat": "def sat(s: str):\n    return set(s) <= set(\"18-+*/\") and s.count(\"8\") == 2 and s.count(\"1\") == 1 and eval(s) == 63",
    "ans_type": "str",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"Find a formula using two 8s and two 1's and -+*/ that evaluates to 1.\"\"\"",
    "sol_bodies": [
      "    return \"8*8-1\""
    ],
    "module": "classic_puzzles.py",
    "notes": "An easy puzzle to make 63 using two 8's and one 1's.",
    "weight": 1.0
  },
  {
    "name": "Harder63:0",
    "sat": "def sat(s: str):\n    return set(s) <= set(\"18-+*/\") and s.count(\"8\") == 3 and s.count(\"1\") == 1 and eval(s) == 63",
    "ans_type": "str",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"Find an expression using two 8s and two 1's and -+*/ that evaluates to 1.\"\"\"",
    "sol_bodies": [
      "    return \"8*8-1**8\""
    ],
    "module": "classic_puzzles.py",
    "notes": "An harder puzzle to make 63 using three 8's and one 1's.",
    "weight": 1.0
  },
  {
    "name": "WaterPouring:0",
    "sat": "def sat(moves: List[List[int]], capacities=[8, 5, 3], init=[8, 0, 0], goal=[4, 4, 0]):\n    state = init.copy()\n\n    for [i, j] in moves:\n        assert min(i, j) >= 0, \"Indices must be non-negative\"\n        assert i != j, \"Cannot pour from same state to itself\"\n        n = min(capacities[j], state[i] + state[j])\n        state[i], state[j] = state[i] + state[j] - n, n\n\n    return state == goal",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(capacities=[8, 5, 3], init=[8, 0, 0], goal=[4, 4, 0]):",
    "sol_docstring": "    \"\"\"\n    Given an initial state of water quantities in jugs and jug capacities, find a sequence of moves (pouring\n    one jug into another until it is full or the first is empty) to reaches the given goal state.\n    moves is list of [from, to] pairs\n    \"\"\"",
    "sol_bodies": [
      "    from collections import deque\n    num_jugs = len(capacities)\n    start = tuple(init)\n    target = tuple(goal)\n    trails = {start: ([], start)}\n    queue = deque([tuple(init)])\n    while target not in trails:\n        state = queue.popleft()\n        for i in range(num_jugs):\n            for j in range(num_jugs):\n                if i != j:\n                    n = min(capacities[j], state[i] + state[j])\n                    new_state = list(state)\n                    new_state[i], new_state[j] = state[i] + state[j] - n, n\n                    new_state = tuple(new_state)\n                    if new_state not in trails:\n                        queue.append(new_state)\n                        trails[new_state] = ([i, j], state)\n    ans = []\n    state = target\n    while state != start:\n        move, state = trails[state]\n        ans.append(move)\n    return ans[::-1]"
    ],
    "module": "classic_puzzles.py",
    "notes": "[Water pouring puzzle](https://en.wikipedia.org/w/index.php?title=Water_pouring_puzzle&oldid=985741928)",
    "weight": 1.0
  },
  {
    "name": "WaterPouring:1",
    "sat": "def sat(moves: List[List[int]], capacities=[724, 43, 611], init=[72, 2, 269], goal=[56, 0, 287]):\n    state = init.copy()\n\n    for [i, j] in moves:\n        assert min(i, j) >= 0, \"Indices must be non-negative\"\n        assert i != j, \"Cannot pour from same state to itself\"\n        n = min(capacities[j], state[i] + state[j])\n        state[i], state[j] = state[i] + state[j] - n, n\n\n    return state == goal",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(init=[72, 2, 269], goal=[56, 0, 287], capacities=[724, 43, 611]):",
    "sol_docstring": "    \"\"\"\n    Given an initial state of water quantities in jugs and jug capacities, find a sequence of moves (pouring\n    one jug into another until it is full or the first is empty) to reaches the given goal state.\n    moves is list of [from, to] pairs\n    \"\"\"",
    "sol_bodies": [
      "    from collections import deque\n    num_jugs = len(capacities)\n    start = tuple(init)\n    target = tuple(goal)\n    trails = {start: ([], start)}\n    queue = deque([tuple(init)])\n    while target not in trails:\n        state = queue.popleft()\n        for i in range(num_jugs):\n            for j in range(num_jugs):\n                if i != j:\n                    n = min(capacities[j], state[i] + state[j])\n                    new_state = list(state)\n                    new_state[i], new_state[j] = state[i] + state[j] - n, n\n                    new_state = tuple(new_state)\n                    if new_state not in trails:\n                        queue.append(new_state)\n                        trails[new_state] = ([i, j], state)\n    ans = []\n    state = target\n    while state != start:\n        move, state = trails[state]\n        ans.append(move)\n    return ans[::-1]"
    ],
    "module": "classic_puzzles.py",
    "notes": "[Water pouring puzzle](https://en.wikipedia.org/w/index.php?title=Water_pouring_puzzle&oldid=985741928)",
    "weight": 1.0
  },
  {
    "name": "WaterPouring:2",
    "sat": "def sat(moves: List[List[int]], capacities=[357, 298, 492], init=[8, 284, 72], goal=[0, 0, 364]):\n    state = init.copy()\n\n    for [i, j] in moves:\n        assert min(i, j) >= 0, \"Indices must be non-negative\"\n        assert i != j, \"Cannot pour from same state to itself\"\n        n = min(capacities[j], state[i] + state[j])\n        state[i], state[j] = state[i] + state[j] - n, n\n\n    return state == goal",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(init=[8, 284, 72], goal=[0, 0, 364], capacities=[357, 298, 492]):",
    "sol_docstring": "    \"\"\"\n    Given an initial state of water quantities in jugs and jug capacities, find a sequence of moves (pouring\n    one jug into another until it is full or the first is empty) to reaches the given goal state.\n    moves is list of [from, to] pairs\n    \"\"\"",
    "sol_bodies": [
      "    from collections import deque\n    num_jugs = len(capacities)\n    start = tuple(init)\n    target = tuple(goal)\n    trails = {start: ([], start)}\n    queue = deque([tuple(init)])\n    while target not in trails:\n        state = queue.popleft()\n        for i in range(num_jugs):\n            for j in range(num_jugs):\n                if i != j:\n                    n = min(capacities[j], state[i] + state[j])\n                    new_state = list(state)\n                    new_state[i], new_state[j] = state[i] + state[j] - n, n\n                    new_state = tuple(new_state)\n                    if new_state not in trails:\n                        queue.append(new_state)\n                        trails[new_state] = ([i, j], state)\n    ans = []\n    state = target\n    while state != start:\n        move, state = trails[state]\n        ans.append(move)\n    return ans[::-1]"
    ],
    "module": "classic_puzzles.py",
    "notes": "[Water pouring puzzle](https://en.wikipedia.org/w/index.php?title=Water_pouring_puzzle&oldid=985741928)",
    "weight": 1.0
  },
  {
    "name": "WaterPouring:3",
    "sat": "def sat(moves: List[List[int]], capacities=[511, 625, 553], init=[472, 153, 127], goal=[97, 625, 30]):\n    state = init.copy()\n\n    for [i, j] in moves:\n        assert min(i, j) >= 0, \"Indices must be non-negative\"\n        assert i != j, \"Cannot pour from same state to itself\"\n        n = min(capacities[j], state[i] + state[j])\n        state[i], state[j] = state[i] + state[j] - n, n\n\n    return state == goal",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(init=[472, 153, 127], goal=[97, 625, 30], capacities=[511, 625, 553]):",
    "sol_docstring": "    \"\"\"\n    Given an initial state of water quantities in jugs and jug capacities, find a sequence of moves (pouring\n    one jug into another until it is full or the first is empty) to reaches the given goal state.\n    moves is list of [from, to] pairs\n    \"\"\"",
    "sol_bodies": [
      "    from collections import deque\n    num_jugs = len(capacities)\n    start = tuple(init)\n    target = tuple(goal)\n    trails = {start: ([], start)}\n    queue = deque([tuple(init)])\n    while target not in trails:\n        state = queue.popleft()\n        for i in range(num_jugs):\n            for j in range(num_jugs):\n                if i != j:\n                    n = min(capacities[j], state[i] + state[j])\n                    new_state = list(state)\n                    new_state[i], new_state[j] = state[i] + state[j] - n, n\n                    new_state = tuple(new_state)\n                    if new_state not in trails:\n                        queue.append(new_state)\n                        trails[new_state] = ([i, j], state)\n    ans = []\n    state = target\n    while state != start:\n        move, state = trails[state]\n        ans.append(move)\n    return ans[::-1]"
    ],
    "module": "classic_puzzles.py",
    "notes": "[Water pouring puzzle](https://en.wikipedia.org/w/index.php?title=Water_pouring_puzzle&oldid=985741928)",
    "weight": 1.0
  },
  {
    "name": "WaterPouring:4",
    "sat": "def sat(moves: List[List[int]], capacities=[86, 259, 281], init=[47, 18, 35], goal=[35, 0, 65]):\n    state = init.copy()\n\n    for [i, j] in moves:\n        assert min(i, j) >= 0, \"Indices must be non-negative\"\n        assert i != j, \"Cannot pour from same state to itself\"\n        n = min(capacities[j], state[i] + state[j])\n        state[i], state[j] = state[i] + state[j] - n, n\n\n    return state == goal",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(init=[47, 18, 35], goal=[35, 0, 65], capacities=[86, 259, 281]):",
    "sol_docstring": "    \"\"\"\n    Given an initial state of water quantities in jugs and jug capacities, find a sequence of moves (pouring\n    one jug into another until it is full or the first is empty) to reaches the given goal state.\n    moves is list of [from, to] pairs\n    \"\"\"",
    "sol_bodies": [
      "    from collections import deque\n    num_jugs = len(capacities)\n    start = tuple(init)\n    target = tuple(goal)\n    trails = {start: ([], start)}\n    queue = deque([tuple(init)])\n    while target not in trails:\n        state = queue.popleft()\n        for i in range(num_jugs):\n            for j in range(num_jugs):\n                if i != j:\n                    n = min(capacities[j], state[i] + state[j])\n                    new_state = list(state)\n                    new_state[i], new_state[j] = state[i] + state[j] - n, n\n                    new_state = tuple(new_state)\n                    if new_state not in trails:\n                        queue.append(new_state)\n                        trails[new_state] = ([i, j], state)\n    ans = []\n    state = target\n    while state != start:\n        move, state = trails[state]\n        ans.append(move)\n    return ans[::-1]"
    ],
    "module": "classic_puzzles.py",
    "notes": "[Water pouring puzzle](https://en.wikipedia.org/w/index.php?title=Water_pouring_puzzle&oldid=985741928)",
    "weight": 1.0
  },
  {
    "name": "VerbalArithmetic:0",
    "sat": "def sat(li: List[int], words=['SEND', 'MORE', 'MONEY']):\n    assert len(li) == len(words) and all(i > 0 and len(str(i)) == len(w) for i, w in zip(li, words))\n    assert len({c for w in words for c in w}) == len({(d, c) for i, w in zip(li, words) for d, c in zip(str(i), w)})\n    return sum(li[:-1]) == li[-1]",
    "ans_type": "List[int]",
    "sol_header": "def sol(words=['SEND', 'MORE', 'MONEY']):",
    "sol_docstring": "    \"\"\"\n    Find a list of integers corresponding to the given list of strings substituting a different digit for each\n    character, so that the last string corresponds to the sum of the previous numbers.\n    \"\"\"",
    "sol_bodies": [
      "    print(\"solving\", words)\n    pi = list(range(10))  # permutation\n    letters = []\n    order = {}\n    steps = []\n    tens = 1\n    for col in range(1, 1 + max(len(w) for w in words)):\n        for w in words:\n            is_tot = (w is words[-1])\n            if len(w) >= col:\n                c = w[-col]\n                if c in order:\n                    if is_tot:\n                        kind = \"check\"\n                    else:\n                        kind = \"seen\"\n                else:\n                    if is_tot:\n                        kind = \"derive\"\n                    else:\n                        kind = \"add\"\n                    order[c] = len(letters)\n                    letters.append(c)\n                steps.append((kind, order[c], tens))\n        tens *= 10\n\n    inits = [any(w[0] == c for w in words) for c in letters]\n\n    def helper(pos, delta):  # on success, returns True and pi has the correct values\n        if pos == len(steps):\n            return delta == 0\n\n        kind, i, tens = steps[pos]\n\n        if kind == \"seen\":\n            return helper(pos + 1, delta + tens * pi[i])\n\n        if kind == \"add\":\n            for j in range(i, 10):\n                if pi[j] != 0 or not inits[i]:  # not adding a leading 0\n                    pi[i], pi[j] = pi[j], pi[i]\n                    if helper(pos + 1, delta + tens * pi[i]):\n                        return True\n                    pi[i], pi[j] = pi[j], pi[i]\n            return False\n        if kind == \"check\":\n            delta -= tens * pi[i]\n            return (delta % (10 * tens)) == 0 and helper(pos + 1, delta)\n\n        assert kind == \"derive\"\n        digit = (delta % (10 * tens)) // tens\n        if digit == 0 and inits[i]:\n            return False  # would be a leading 0\n        j = pi.index(digit)\n        if j < i:\n            return False  # already used\n        pi[i], pi[j] = pi[j], pi[i]\n        if helper(pos + 1, delta - tens * digit):\n            return True\n        pi[i], pi[j] = pi[j], pi[i]\n        return False\n\n    assert helper(0, 0)\n    return [int(\"\".join(str(pi[order[c]]) for c in w)) for w in words]"
    ],
    "module": "classic_puzzles.py",
    "notes": "Find a substitution of digits for characters to make the numbers add up in a sum like this:\nSEND + MORE = MONEY\n\nThe first digit in any number cannot be 0. In this example the solution is `9567 + 1085 = 10652`.\nSee [Wikipedia article](https://en.wikipedia.org/wiki/Verbal_arithmetic)",
    "weight": 1.0
  },
  {
    "name": "VerbalArithmetic:1",
    "sat": "def sat(li: List[int], words=['FORTY', 'TEN', 'TEN', 'SIXTY']):\n    assert len(li) == len(words) and all(i > 0 and len(str(i)) == len(w) for i, w in zip(li, words))\n    assert len({c for w in words for c in w}) == len({(d, c) for i, w in zip(li, words) for d, c in zip(str(i), w)})\n    return sum(li[:-1]) == li[-1]",
    "ans_type": "List[int]",
    "sol_header": "def sol(words=['FORTY', 'TEN', 'TEN', 'SIXTY']):",
    "sol_docstring": "    \"\"\"\n    Find a list of integers corresponding to the given list of strings substituting a different digit for each\n    character, so that the last string corresponds to the sum of the previous numbers.\n    \"\"\"",
    "sol_bodies": [
      "    print(\"solving\", words)\n    pi = list(range(10))  # permutation\n    letters = []\n    order = {}\n    steps = []\n    tens = 1\n    for col in range(1, 1 + max(len(w) for w in words)):\n        for w in words:\n            is_tot = (w is words[-1])\n            if len(w) >= col:\n                c = w[-col]\n                if c in order:\n                    if is_tot:\n                        kind = \"check\"\n                    else:\n                        kind = \"seen\"\n                else:\n                    if is_tot:\n                        kind = \"derive\"\n                    else:\n                        kind = \"add\"\n                    order[c] = len(letters)\n                    letters.append(c)\n                steps.append((kind, order[c], tens))\n        tens *= 10\n\n    inits = [any(w[0] == c for w in words) for c in letters]\n\n    def helper(pos, delta):  # on success, returns True and pi has the correct values\n        if pos == len(steps):\n            return delta == 0\n\n        kind, i, tens = steps[pos]\n\n        if kind == \"seen\":\n            return helper(pos + 1, delta + tens * pi[i])\n\n        if kind == \"add\":\n            for j in range(i, 10):\n                if pi[j] != 0 or not inits[i]:  # not adding a leading 0\n                    pi[i], pi[j] = pi[j], pi[i]\n                    if helper(pos + 1, delta + tens * pi[i]):\n                        return True\n                    pi[i], pi[j] = pi[j], pi[i]\n            return False\n        if kind == \"check\":\n            delta -= tens * pi[i]\n            return (delta % (10 * tens)) == 0 and helper(pos + 1, delta)\n\n        assert kind == \"derive\"\n        digit = (delta % (10 * tens)) // tens\n        if digit == 0 and inits[i]:\n            return False  # would be a leading 0\n        j = pi.index(digit)\n        if j < i:\n            return False  # already used\n        pi[i], pi[j] = pi[j], pi[i]\n        if helper(pos + 1, delta - tens * digit):\n            return True\n        pi[i], pi[j] = pi[j], pi[i]\n        return False\n\n    assert helper(0, 0)\n    return [int(\"\".join(str(pi[order[c]]) for c in w)) for w in words]"
    ],
    "module": "classic_puzzles.py",
    "notes": "Find a substitution of digits for characters to make the numbers add up in a sum like this:\nSEND + MORE = MONEY\n\nThe first digit in any number cannot be 0. In this example the solution is `9567 + 1085 = 10652`.\nSee [Wikipedia article](https://en.wikipedia.org/wiki/Verbal_arithmetic)",
    "weight": 1.0
  },
  {
    "name": "VerbalArithmetic:2",
    "sat": "def sat(li: List[int], words=['GREEN', 'ORANGE', 'COLORS']):\n    assert len(li) == len(words) and all(i > 0 and len(str(i)) == len(w) for i, w in zip(li, words))\n    assert len({c for w in words for c in w}) == len({(d, c) for i, w in zip(li, words) for d, c in zip(str(i), w)})\n    return sum(li[:-1]) == li[-1]",
    "ans_type": "List[int]",
    "sol_header": "def sol(words=['GREEN', 'ORANGE', 'COLORS']):",
    "sol_docstring": "    \"\"\"\n    Find a list of integers corresponding to the given list of strings substituting a different digit for each\n    character, so that the last string corresponds to the sum of the previous numbers.\n    \"\"\"",
    "sol_bodies": [
      "    print(\"solving\", words)\n    pi = list(range(10))  # permutation\n    letters = []\n    order = {}\n    steps = []\n    tens = 1\n    for col in range(1, 1 + max(len(w) for w in words)):\n        for w in words:\n            is_tot = (w is words[-1])\n            if len(w) >= col:\n                c = w[-col]\n                if c in order:\n                    if is_tot:\n                        kind = \"check\"\n                    else:\n                        kind = \"seen\"\n                else:\n                    if is_tot:\n                        kind = \"derive\"\n                    else:\n                        kind = \"add\"\n                    order[c] = len(letters)\n                    letters.append(c)\n                steps.append((kind, order[c], tens))\n        tens *= 10\n\n    inits = [any(w[0] == c for w in words) for c in letters]\n\n    def helper(pos, delta):  # on success, returns True and pi has the correct values\n        if pos == len(steps):\n            return delta == 0\n\n        kind, i, tens = steps[pos]\n\n        if kind == \"seen\":\n            return helper(pos + 1, delta + tens * pi[i])\n\n        if kind == \"add\":\n            for j in range(i, 10):\n                if pi[j] != 0 or not inits[i]:  # not adding a leading 0\n                    pi[i], pi[j] = pi[j], pi[i]\n                    if helper(pos + 1, delta + tens * pi[i]):\n                        return True\n                    pi[i], pi[j] = pi[j], pi[i]\n            return False\n        if kind == \"check\":\n            delta -= tens * pi[i]\n            return (delta % (10 * tens)) == 0 and helper(pos + 1, delta)\n\n        assert kind == \"derive\"\n        digit = (delta % (10 * tens)) // tens\n        if digit == 0 and inits[i]:\n            return False  # would be a leading 0\n        j = pi.index(digit)\n        if j < i:\n            return False  # already used\n        pi[i], pi[j] = pi[j], pi[i]\n        if helper(pos + 1, delta - tens * digit):\n            return True\n        pi[i], pi[j] = pi[j], pi[i]\n        return False\n\n    assert helper(0, 0)\n    return [int(\"\".join(str(pi[order[c]]) for c in w)) for w in words]"
    ],
    "module": "classic_puzzles.py",
    "notes": "Find a substitution of digits for characters to make the numbers add up in a sum like this:\nSEND + MORE = MONEY\n\nThe first digit in any number cannot be 0. In this example the solution is `9567 + 1085 = 10652`.\nSee [Wikipedia article](https://en.wikipedia.org/wiki/Verbal_arithmetic)",
    "weight": 1.0
  },
  {
    "name": "VerbalArithmetic:3",
    "sat": "def sat(li: List[int], words=['fqjb', 'awqw', 'lfll', 'fvvvb']):\n    assert len(li) == len(words) and all(i > 0 and len(str(i)) == len(w) for i, w in zip(li, words))\n    assert len({c for w in words for c in w}) == len({(d, c) for i, w in zip(li, words) for d, c in zip(str(i), w)})\n    return sum(li[:-1]) == li[-1]",
    "ans_type": "List[int]",
    "sol_header": "def sol(words=['fqjb', 'awqw', 'lfll', 'fvvvb']):",
    "sol_docstring": "    \"\"\"\n    Find a list of integers corresponding to the given list of strings substituting a different digit for each\n    character, so that the last string corresponds to the sum of the previous numbers.\n    \"\"\"",
    "sol_bodies": [
      "    print(\"solving\", words)\n    pi = list(range(10))  # permutation\n    letters = []\n    order = {}\n    steps = []\n    tens = 1\n    for col in range(1, 1 + max(len(w) for w in words)):\n        for w in words:\n            is_tot = (w is words[-1])\n            if len(w) >= col:\n                c = w[-col]\n                if c in order:\n                    if is_tot:\n                        kind = \"check\"\n                    else:\n                        kind = \"seen\"\n                else:\n                    if is_tot:\n                        kind = \"derive\"\n                    else:\n                        kind = \"add\"\n                    order[c] = len(letters)\n                    letters.append(c)\n                steps.append((kind, order[c], tens))\n        tens *= 10\n\n    inits = [any(w[0] == c for w in words) for c in letters]\n\n    def helper(pos, delta):  # on success, returns True and pi has the correct values\n        if pos == len(steps):\n            return delta == 0\n\n        kind, i, tens = steps[pos]\n\n        if kind == \"seen\":\n            return helper(pos + 1, delta + tens * pi[i])\n\n        if kind == \"add\":\n            for j in range(i, 10):\n                if pi[j] != 0 or not inits[i]:  # not adding a leading 0\n                    pi[i], pi[j] = pi[j], pi[i]\n                    if helper(pos + 1, delta + tens * pi[i]):\n                        return True\n                    pi[i], pi[j] = pi[j], pi[i]\n            return False\n        if kind == \"check\":\n            delta -= tens * pi[i]\n            return (delta % (10 * tens)) == 0 and helper(pos + 1, delta)\n\n        assert kind == \"derive\"\n        digit = (delta % (10 * tens)) // tens\n        if digit == 0 and inits[i]:\n            return False  # would be a leading 0\n        j = pi.index(digit)\n        if j < i:\n            return False  # already used\n        pi[i], pi[j] = pi[j], pi[i]\n        if helper(pos + 1, delta - tens * digit):\n            return True\n        pi[i], pi[j] = pi[j], pi[i]\n        return False\n\n    assert helper(0, 0)\n    return [int(\"\".join(str(pi[order[c]]) for c in w)) for w in words]"
    ],
    "module": "classic_puzzles.py",
    "notes": "Find a substitution of digits for characters to make the numbers add up in a sum like this:\nSEND + MORE = MONEY\n\nThe first digit in any number cannot be 0. In this example the solution is `9567 + 1085 = 10652`.\nSee [Wikipedia article](https://en.wikipedia.org/wiki/Verbal_arithmetic)",
    "weight": 1.0
  },
  {
    "name": "VerbalArithmetic:4",
    "sat": "def sat(li: List[int], words=['tnnq', 'sna', 'ajjc', 'isun', 'usub', 'caiun']):\n    assert len(li) == len(words) and all(i > 0 and len(str(i)) == len(w) for i, w in zip(li, words))\n    assert len({c for w in words for c in w}) == len({(d, c) for i, w in zip(li, words) for d, c in zip(str(i), w)})\n    return sum(li[:-1]) == li[-1]",
    "ans_type": "List[int]",
    "sol_header": "def sol(words=['tnnq', 'sna', 'ajjc', 'isun', 'usub', 'caiun']):",
    "sol_docstring": "    \"\"\"\n    Find a list of integers corresponding to the given list of strings substituting a different digit for each\n    character, so that the last string corresponds to the sum of the previous numbers.\n    \"\"\"",
    "sol_bodies": [
      "    print(\"solving\", words)\n    pi = list(range(10))  # permutation\n    letters = []\n    order = {}\n    steps = []\n    tens = 1\n    for col in range(1, 1 + max(len(w) for w in words)):\n        for w in words:\n            is_tot = (w is words[-1])\n            if len(w) >= col:\n                c = w[-col]\n                if c in order:\n                    if is_tot:\n                        kind = \"check\"\n                    else:\n                        kind = \"seen\"\n                else:\n                    if is_tot:\n                        kind = \"derive\"\n                    else:\n                        kind = \"add\"\n                    order[c] = len(letters)\n                    letters.append(c)\n                steps.append((kind, order[c], tens))\n        tens *= 10\n\n    inits = [any(w[0] == c for w in words) for c in letters]\n\n    def helper(pos, delta):  # on success, returns True and pi has the correct values\n        if pos == len(steps):\n            return delta == 0\n\n        kind, i, tens = steps[pos]\n\n        if kind == \"seen\":\n            return helper(pos + 1, delta + tens * pi[i])\n\n        if kind == \"add\":\n            for j in range(i, 10):\n                if pi[j] != 0 or not inits[i]:  # not adding a leading 0\n                    pi[i], pi[j] = pi[j], pi[i]\n                    if helper(pos + 1, delta + tens * pi[i]):\n                        return True\n                    pi[i], pi[j] = pi[j], pi[i]\n            return False\n        if kind == \"check\":\n            delta -= tens * pi[i]\n            return (delta % (10 * tens)) == 0 and helper(pos + 1, delta)\n\n        assert kind == \"derive\"\n        digit = (delta % (10 * tens)) // tens\n        if digit == 0 and inits[i]:\n            return False  # would be a leading 0\n        j = pi.index(digit)\n        if j < i:\n            return False  # already used\n        pi[i], pi[j] = pi[j], pi[i]\n        if helper(pos + 1, delta - tens * digit):\n            return True\n        pi[i], pi[j] = pi[j], pi[i]\n        return False\n\n    assert helper(0, 0)\n    return [int(\"\".join(str(pi[order[c]]) for c in w)) for w in words]"
    ],
    "module": "classic_puzzles.py",
    "notes": "Find a substitution of digits for characters to make the numbers add up in a sum like this:\nSEND + MORE = MONEY\n\nThe first digit in any number cannot be 0. In this example the solution is `9567 + 1085 = 10652`.\nSee [Wikipedia article](https://en.wikipedia.org/wiki/Verbal_arithmetic)",
    "weight": 1.0
  },
  {
    "name": "SlidingPuzzle:0",
    "sat": "def sat(moves: List[int], start=[[5, 0, 2, 3], [1, 9, 6, 7], [4, 14, 8, 11], [12, 13, 10, 15]]):\n\n    locs = {i: [x, y] for y, row in enumerate(start) for x, i in enumerate(row)}  # locations, 0 stands for blank\n    for i in moves:\n        assert abs(locs[0][0] - locs[i][0]) + abs(locs[0][1] - locs[i][1]) == 1\n        locs[0], locs[i] = locs[i], locs[0]\n    return all(locs[i] == [i % len(start[0]), i // len(start)] for i in locs)",
    "ans_type": "List[int]",
    "sol_header": "def sol(start=[[5, 0, 2, 3], [1, 9, 6, 7], [4, 14, 8, 11], [12, 13, 10, 15]]):",
    "sol_docstring": "    \"\"\"\n    In this puzzle, you are given a board like:\n    1 2 5\n    3 4 0\n    6 7 8\n\n    and your goal is to transform it to:\n    0 1 2\n    3 4 5\n    6 7 8\n\n    by a sequence of swaps with the 0 square (0 indicates blank). The starting configuration is given by a 2d list\n    of lists and the answer is represented by a list of integers indicating which number you swap with 0. In the\n    above example, an answer would be [1, 2, 5]\n    \"\"\"",
    "sol_bodies": [
      "    from collections import defaultdict\n    import math\n    d = len(start)\n    N = d * d\n    assert all(len(row) == d for row in start)\n\n    def get_state(\n            li):  # state is an integer with 4 bits for each slot and the last 4 bits indicate where the blank is\n        ans = 0\n        for i in li[::-1] + [li.index(0)]:\n            ans = (ans << 4) + i\n        return ans\n\n    start = get_state([i for row in start for i in row])\n    target = get_state(list(range(N)))\n\n    def h(state):  # manhattan distance\n        ans = 0\n        for i in range(N):\n            state = (state >> 4)\n            n = state & 15\n            if n != 0:\n                ans += abs(i % d - n % d) + abs(i // d - n // d)\n        return ans\n\n    g = defaultdict(lambda: math.inf)\n    g[start] = 0  # shortest p ath lengths\n    f = {start: h(start)}  # f[s] = g[s] + h(s)\n    backtrack = {}\n\n    todo = {start}\n    import heapq\n    heap = [(f[start], start)]\n\n    neighbors = [[i for i in [b - 1, b + 1, b + d, b - d] if i in range(N) and (b // d == i // d or b % d == i % d)]\n                 for b in range(N)]\n\n    def next_state(s, blank, i):\n        assert blank == (s & 15)\n        v = (s >> (4 * i + 4)) & 15\n        return s + (i - blank) + (v << (4 * blank + 4)) - (v << (4 * i + 4))\n\n    while todo:\n        (dist, s) = heapq.heappop(heap)\n        if f[s] < dist:\n            continue\n        if s == target:\n            # compute path\n            ans = []\n            while s != start:\n                s, i = backtrack[s]\n                ans.append((s >> (4 * i + 4)) & 15)\n            return ans[::-1]\n\n        todo.remove(s)\n\n        blank = s & 15\n        score = g[s] + 1\n        for i in neighbors[blank]:\n            s2 = next_state(s, blank, i)\n\n            if score < g[s2]:\n                # paths[s2] = paths[s] + [s[i]]\n                g[s2] = score\n                backtrack[s2] = (s, i)\n                score2 = score + h(s2)\n                f[s2] = score2\n                todo.add(s2)\n                heapq.heappush(heap, (score2, s2))"
    ],
    "module": "classic_puzzles.py",
    "notes": "[Sliding puzzle](https://en.wikipedia.org/wiki/15_puzzle)\nThe 3-, 8-, and 15-sliding puzzles are classic examples of A* search.\nThe problem is NP-hard but the puzzles can all be solved with A* and an efficient representation.",
    "weight": 1.0
  },
  {
    "name": "SlidingPuzzle:1",
    "sat": "def sat(moves: List[int], start=[[1, 5, 0], [3, 2, 8], [6, 4, 7]]):\n\n    locs = {i: [x, y] for y, row in enumerate(start) for x, i in enumerate(row)}  # locations, 0 stands for blank\n    for i in moves:\n        assert abs(locs[0][0] - locs[i][0]) + abs(locs[0][1] - locs[i][1]) == 1\n        locs[0], locs[i] = locs[i], locs[0]\n    return all(locs[i] == [i % len(start[0]), i // len(start)] for i in locs)",
    "ans_type": "List[int]",
    "sol_header": "def sol(start=[[1, 5, 0], [3, 2, 8], [6, 4, 7]]):",
    "sol_docstring": "    \"\"\"\n    In this puzzle, you are given a board like:\n    1 2 5\n    3 4 0\n    6 7 8\n\n    and your goal is to transform it to:\n    0 1 2\n    3 4 5\n    6 7 8\n\n    by a sequence of swaps with the 0 square (0 indicates blank). The starting configuration is given by a 2d list\n    of lists and the answer is represented by a list of integers indicating which number you swap with 0. In the\n    above example, an answer would be [1, 2, 5]\n    \"\"\"",
    "sol_bodies": [
      "    from collections import defaultdict\n    import math\n    d = len(start)\n    N = d * d\n    assert all(len(row) == d for row in start)\n\n    def get_state(\n            li):  # state is an integer with 4 bits for each slot and the last 4 bits indicate where the blank is\n        ans = 0\n        for i in li[::-1] + [li.index(0)]:\n            ans = (ans << 4) + i\n        return ans\n\n    start = get_state([i for row in start for i in row])\n    target = get_state(list(range(N)))\n\n    def h(state):  # manhattan distance\n        ans = 0\n        for i in range(N):\n            state = (state >> 4)\n            n = state & 15\n            if n != 0:\n                ans += abs(i % d - n % d) + abs(i // d - n // d)\n        return ans\n\n    g = defaultdict(lambda: math.inf)\n    g[start] = 0  # shortest p ath lengths\n    f = {start: h(start)}  # f[s] = g[s] + h(s)\n    backtrack = {}\n\n    todo = {start}\n    import heapq\n    heap = [(f[start], start)]\n\n    neighbors = [[i for i in [b - 1, b + 1, b + d, b - d] if i in range(N) and (b // d == i // d or b % d == i % d)]\n                 for b in range(N)]\n\n    def next_state(s, blank, i):\n        assert blank == (s & 15)\n        v = (s >> (4 * i + 4)) & 15\n        return s + (i - blank) + (v << (4 * blank + 4)) - (v << (4 * i + 4))\n\n    while todo:\n        (dist, s) = heapq.heappop(heap)\n        if f[s] < dist:\n            continue\n        if s == target:\n            # compute path\n            ans = []\n            while s != start:\n                s, i = backtrack[s]\n                ans.append((s >> (4 * i + 4)) & 15)\n            return ans[::-1]\n\n        todo.remove(s)\n\n        blank = s & 15\n        score = g[s] + 1\n        for i in neighbors[blank]:\n            s2 = next_state(s, blank, i)\n\n            if score < g[s2]:\n                # paths[s2] = paths[s] + [s[i]]\n                g[s2] = score\n                backtrack[s2] = (s, i)\n                score2 = score + h(s2)\n                f[s2] = score2\n                todo.add(s2)\n                heapq.heappush(heap, (score2, s2))"
    ],
    "module": "classic_puzzles.py",
    "notes": "[Sliding puzzle](https://en.wikipedia.org/wiki/15_puzzle)\nThe 3-, 8-, and 15-sliding puzzles are classic examples of A* search.\nThe problem is NP-hard but the puzzles can all be solved with A* and an efficient representation.",
    "weight": 1.0
  },
  {
    "name": "SlidingPuzzle:2",
    "sat": "def sat(moves: List[int], start=[[6, 0, 3], [7, 1, 4], [8, 2, 5]]):\n\n    locs = {i: [x, y] for y, row in enumerate(start) for x, i in enumerate(row)}  # locations, 0 stands for blank\n    for i in moves:\n        assert abs(locs[0][0] - locs[i][0]) + abs(locs[0][1] - locs[i][1]) == 1\n        locs[0], locs[i] = locs[i], locs[0]\n    return all(locs[i] == [i % len(start[0]), i // len(start)] for i in locs)",
    "ans_type": "List[int]",
    "sol_header": "def sol(start=[[6, 0, 3], [7, 1, 4], [8, 2, 5]]):",
    "sol_docstring": "    \"\"\"\n    In this puzzle, you are given a board like:\n    1 2 5\n    3 4 0\n    6 7 8\n\n    and your goal is to transform it to:\n    0 1 2\n    3 4 5\n    6 7 8\n\n    by a sequence of swaps with the 0 square (0 indicates blank). The starting configuration is given by a 2d list\n    of lists and the answer is represented by a list of integers indicating which number you swap with 0. In the\n    above example, an answer would be [1, 2, 5]\n    \"\"\"",
    "sol_bodies": [
      "    from collections import defaultdict\n    import math\n    d = len(start)\n    N = d * d\n    assert all(len(row) == d for row in start)\n\n    def get_state(\n            li):  # state is an integer with 4 bits for each slot and the last 4 bits indicate where the blank is\n        ans = 0\n        for i in li[::-1] + [li.index(0)]:\n            ans = (ans << 4) + i\n        return ans\n\n    start = get_state([i for row in start for i in row])\n    target = get_state(list(range(N)))\n\n    def h(state):  # manhattan distance\n        ans = 0\n        for i in range(N):\n            state = (state >> 4)\n            n = state & 15\n            if n != 0:\n                ans += abs(i % d - n % d) + abs(i // d - n // d)\n        return ans\n\n    g = defaultdict(lambda: math.inf)\n    g[start] = 0  # shortest p ath lengths\n    f = {start: h(start)}  # f[s] = g[s] + h(s)\n    backtrack = {}\n\n    todo = {start}\n    import heapq\n    heap = [(f[start], start)]\n\n    neighbors = [[i for i in [b - 1, b + 1, b + d, b - d] if i in range(N) and (b // d == i // d or b % d == i % d)]\n                 for b in range(N)]\n\n    def next_state(s, blank, i):\n        assert blank == (s & 15)\n        v = (s >> (4 * i + 4)) & 15\n        return s + (i - blank) + (v << (4 * blank + 4)) - (v << (4 * i + 4))\n\n    while todo:\n        (dist, s) = heapq.heappop(heap)\n        if f[s] < dist:\n            continue\n        if s == target:\n            # compute path\n            ans = []\n            while s != start:\n                s, i = backtrack[s]\n                ans.append((s >> (4 * i + 4)) & 15)\n            return ans[::-1]\n\n        todo.remove(s)\n\n        blank = s & 15\n        score = g[s] + 1\n        for i in neighbors[blank]:\n            s2 = next_state(s, blank, i)\n\n            if score < g[s2]:\n                # paths[s2] = paths[s] + [s[i]]\n                g[s2] = score\n                backtrack[s2] = (s, i)\n                score2 = score + h(s2)\n                f[s2] = score2\n                todo.add(s2)\n                heapq.heappush(heap, (score2, s2))"
    ],
    "module": "classic_puzzles.py",
    "notes": "[Sliding puzzle](https://en.wikipedia.org/wiki/15_puzzle)\nThe 3-, 8-, and 15-sliding puzzles are classic examples of A* search.\nThe problem is NP-hard but the puzzles can all be solved with A* and an efficient representation.",
    "weight": 1.0
  },
  {
    "name": "SlidingPuzzle:3",
    "sat": "def sat(moves: List[int], start=[[0, 1], [2, 3]]):\n\n    locs = {i: [x, y] for y, row in enumerate(start) for x, i in enumerate(row)}  # locations, 0 stands for blank\n    for i in moves:\n        assert abs(locs[0][0] - locs[i][0]) + abs(locs[0][1] - locs[i][1]) == 1\n        locs[0], locs[i] = locs[i], locs[0]\n    return all(locs[i] == [i % len(start[0]), i // len(start)] for i in locs)",
    "ans_type": "List[int]",
    "sol_header": "def sol(start=[[0, 1], [2, 3]]):",
    "sol_docstring": "    \"\"\"\n    In this puzzle, you are given a board like:\n    1 2 5\n    3 4 0\n    6 7 8\n\n    and your goal is to transform it to:\n    0 1 2\n    3 4 5\n    6 7 8\n\n    by a sequence of swaps with the 0 square (0 indicates blank). The starting configuration is given by a 2d list\n    of lists and the answer is represented by a list of integers indicating which number you swap with 0. In the\n    above example, an answer would be [1, 2, 5]\n    \"\"\"",
    "sol_bodies": [
      "    from collections import defaultdict\n    import math\n    d = len(start)\n    N = d * d\n    assert all(len(row) == d for row in start)\n\n    def get_state(\n            li):  # state is an integer with 4 bits for each slot and the last 4 bits indicate where the blank is\n        ans = 0\n        for i in li[::-1] + [li.index(0)]:\n            ans = (ans << 4) + i\n        return ans\n\n    start = get_state([i for row in start for i in row])\n    target = get_state(list(range(N)))\n\n    def h(state):  # manhattan distance\n        ans = 0\n        for i in range(N):\n            state = (state >> 4)\n            n = state & 15\n            if n != 0:\n                ans += abs(i % d - n % d) + abs(i // d - n // d)\n        return ans\n\n    g = defaultdict(lambda: math.inf)\n    g[start] = 0  # shortest p ath lengths\n    f = {start: h(start)}  # f[s] = g[s] + h(s)\n    backtrack = {}\n\n    todo = {start}\n    import heapq\n    heap = [(f[start], start)]\n\n    neighbors = [[i for i in [b - 1, b + 1, b + d, b - d] if i in range(N) and (b // d == i // d or b % d == i % d)]\n                 for b in range(N)]\n\n    def next_state(s, blank, i):\n        assert blank == (s & 15)\n        v = (s >> (4 * i + 4)) & 15\n        return s + (i - blank) + (v << (4 * blank + 4)) - (v << (4 * i + 4))\n\n    while todo:\n        (dist, s) = heapq.heappop(heap)\n        if f[s] < dist:\n            continue\n        if s == target:\n            # compute path\n            ans = []\n            while s != start:\n                s, i = backtrack[s]\n                ans.append((s >> (4 * i + 4)) & 15)\n            return ans[::-1]\n\n        todo.remove(s)\n\n        blank = s & 15\n        score = g[s] + 1\n        for i in neighbors[blank]:\n            s2 = next_state(s, blank, i)\n\n            if score < g[s2]:\n                # paths[s2] = paths[s] + [s[i]]\n                g[s2] = score\n                backtrack[s2] = (s, i)\n                score2 = score + h(s2)\n                f[s2] = score2\n                todo.add(s2)\n                heapq.heappush(heap, (score2, s2))"
    ],
    "module": "classic_puzzles.py",
    "notes": "[Sliding puzzle](https://en.wikipedia.org/wiki/15_puzzle)\nThe 3-, 8-, and 15-sliding puzzles are classic examples of A* search.\nThe problem is NP-hard but the puzzles can all be solved with A* and an efficient representation.",
    "weight": 1.0
  },
  {
    "name": "SlidingPuzzle:4",
    "sat": "def sat(moves: List[int], start=[[2, 1], [0, 3]]):\n\n    locs = {i: [x, y] for y, row in enumerate(start) for x, i in enumerate(row)}  # locations, 0 stands for blank\n    for i in moves:\n        assert abs(locs[0][0] - locs[i][0]) + abs(locs[0][1] - locs[i][1]) == 1\n        locs[0], locs[i] = locs[i], locs[0]\n    return all(locs[i] == [i % len(start[0]), i // len(start)] for i in locs)",
    "ans_type": "List[int]",
    "sol_header": "def sol(start=[[2, 1], [0, 3]]):",
    "sol_docstring": "    \"\"\"\n    In this puzzle, you are given a board like:\n    1 2 5\n    3 4 0\n    6 7 8\n\n    and your goal is to transform it to:\n    0 1 2\n    3 4 5\n    6 7 8\n\n    by a sequence of swaps with the 0 square (0 indicates blank). The starting configuration is given by a 2d list\n    of lists and the answer is represented by a list of integers indicating which number you swap with 0. In the\n    above example, an answer would be [1, 2, 5]\n    \"\"\"",
    "sol_bodies": [
      "    from collections import defaultdict\n    import math\n    d = len(start)\n    N = d * d\n    assert all(len(row) == d for row in start)\n\n    def get_state(\n            li):  # state is an integer with 4 bits for each slot and the last 4 bits indicate where the blank is\n        ans = 0\n        for i in li[::-1] + [li.index(0)]:\n            ans = (ans << 4) + i\n        return ans\n\n    start = get_state([i for row in start for i in row])\n    target = get_state(list(range(N)))\n\n    def h(state):  # manhattan distance\n        ans = 0\n        for i in range(N):\n            state = (state >> 4)\n            n = state & 15\n            if n != 0:\n                ans += abs(i % d - n % d) + abs(i // d - n // d)\n        return ans\n\n    g = defaultdict(lambda: math.inf)\n    g[start] = 0  # shortest p ath lengths\n    f = {start: h(start)}  # f[s] = g[s] + h(s)\n    backtrack = {}\n\n    todo = {start}\n    import heapq\n    heap = [(f[start], start)]\n\n    neighbors = [[i for i in [b - 1, b + 1, b + d, b - d] if i in range(N) and (b // d == i // d or b % d == i % d)]\n                 for b in range(N)]\n\n    def next_state(s, blank, i):\n        assert blank == (s & 15)\n        v = (s >> (4 * i + 4)) & 15\n        return s + (i - blank) + (v << (4 * blank + 4)) - (v << (4 * i + 4))\n\n    while todo:\n        (dist, s) = heapq.heappop(heap)\n        if f[s] < dist:\n            continue\n        if s == target:\n            # compute path\n            ans = []\n            while s != start:\n                s, i = backtrack[s]\n                ans.append((s >> (4 * i + 4)) & 15)\n            return ans[::-1]\n\n        todo.remove(s)\n\n        blank = s & 15\n        score = g[s] + 1\n        for i in neighbors[blank]:\n            s2 = next_state(s, blank, i)\n\n            if score < g[s2]:\n                # paths[s2] = paths[s] + [s[i]]\n                g[s2] = score\n                backtrack[s2] = (s, i)\n                score2 = score + h(s2)\n                f[s2] = score2\n                todo.add(s2)\n                heapq.heappush(heap, (score2, s2))"
    ],
    "module": "classic_puzzles.py",
    "notes": "[Sliding puzzle](https://en.wikipedia.org/wiki/15_puzzle)\nThe 3-, 8-, and 15-sliding puzzles are classic examples of A* search.\nThe problem is NP-hard but the puzzles can all be solved with A* and an efficient representation.",
    "weight": 1.0
  },
  {
    "name": "FindCloseElements:0",
    "sat": "def sat(pair: List[float], nums=[0.17, 21.3, 5.0, 9.0, 11.0, 4.99, 17.0, 17.0, 12.4, 6.8]):\n    a, b = pair\n    assert a in nums and b in nums and a != b\n    return abs(a - b) == min(x - y for x in nums for y in nums if x > y)",
    "ans_type": "List[float]",
    "sol_header": "def sol(nums=[0.17, 21.3, 5.0, 9.0, 11.0, 4.99, 17.0, 17.0, 12.4, 6.8]):",
    "sol_docstring": "    \"\"\"\n    Given a list of numbers, find the two closest distinct numbers in the list.\n\n    Sample Input:\n    [1.2, 5.23, 0.89, 21.0, 5.28, 1.2]\n\n    Sample Output:\n    [5.23, 5.28]\n    \"\"\"",
    "sol_bodies": [
      "    s = sorted(set(nums))\n    return min([[a, b] for a, b in zip(s, s[1:])], key=lambda x: x[1] - x[0])"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#0",
    "weight": 1.0
  },
  {
    "name": "FindCloseElements:1",
    "sat": "def sat(pair: List[float], nums=[-3.027185809375565, -6.642297851887924, -6.773598672960938, 8.692593210252113, 4.9144452253248225, -6.773598672960938, -9.228605102488878]):\n    a, b = pair\n    assert a in nums and b in nums and a != b\n    return abs(a - b) == min(x - y for x in nums for y in nums if x > y)",
    "ans_type": "List[float]",
    "sol_header": "def sol(nums=[-3.027185809375565, -6.642297851887924, -6.773598672960938, 8.692593210252113, 4.9144452253248225, -6.773598672960938, -9.228605102488878]):",
    "sol_docstring": "    \"\"\"\n    Given a list of numbers, find the two closest distinct numbers in the list.\n\n    Sample Input:\n    [1.2, 5.23, 0.89, 21.0, 5.28, 1.2]\n\n    Sample Output:\n    [5.23, 5.28]\n    \"\"\"",
    "sol_bodies": [
      "    s = sorted(set(nums))\n    return min([[a, b] for a, b in zip(s, s[1:])], key=lambda x: x[1] - x[0])"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#0",
    "weight": 1.0
  },
  {
    "name": "FindCloseElements:2",
    "sat": "def sat(pair: List[float], nums=[-1.5625078353699955, 3.6482553468598375, -2.6412688082759868, -0.511423740751141, -2.6412688082759868, 5.648091691238367]):\n    a, b = pair\n    assert a in nums and b in nums and a != b\n    return abs(a - b) == min(x - y for x in nums for y in nums if x > y)",
    "ans_type": "List[float]",
    "sol_header": "def sol(nums=[-1.5625078353699955, 3.6482553468598375, -2.6412688082759868, -0.511423740751141, -2.6412688082759868, 5.648091691238367]):",
    "sol_docstring": "    \"\"\"\n    Given a list of numbers, find the two closest distinct numbers in the list.\n\n    Sample Input:\n    [1.2, 5.23, 0.89, 21.0, 5.28, 1.2]\n\n    Sample Output:\n    [5.23, 5.28]\n    \"\"\"",
    "sol_bodies": [
      "    s = sorted(set(nums))\n    return min([[a, b] for a, b in zip(s, s[1:])], key=lambda x: x[1] - x[0])"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#0",
    "weight": 1.0
  },
  {
    "name": "FindCloseElements:3",
    "sat": "def sat(pair: List[float], nums=[4.183381104176473, 1.6210985169040963, 1.6210985169040963]):\n    a, b = pair\n    assert a in nums and b in nums and a != b\n    return abs(a - b) == min(x - y for x in nums for y in nums if x > y)",
    "ans_type": "List[float]",
    "sol_header": "def sol(nums=[4.183381104176473, 1.6210985169040963, 1.6210985169040963]):",
    "sol_docstring": "    \"\"\"\n    Given a list of numbers, find the two closest distinct numbers in the list.\n\n    Sample Input:\n    [1.2, 5.23, 0.89, 21.0, 5.28, 1.2]\n\n    Sample Output:\n    [5.23, 5.28]\n    \"\"\"",
    "sol_bodies": [
      "    s = sorted(set(nums))\n    return min([[a, b] for a, b in zip(s, s[1:])], key=lambda x: x[1] - x[0])"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#0",
    "weight": 1.0
  },
  {
    "name": "FindCloseElements:4",
    "sat": "def sat(pair: List[float], nums=[2.3934380222903258, -7.674333581672553, 2.3934380222903258]):\n    a, b = pair\n    assert a in nums and b in nums and a != b\n    return abs(a - b) == min(x - y for x in nums for y in nums if x > y)",
    "ans_type": "List[float]",
    "sol_header": "def sol(nums=[2.3934380222903258, -7.674333581672553, 2.3934380222903258]):",
    "sol_docstring": "    \"\"\"\n    Given a list of numbers, find the two closest distinct numbers in the list.\n\n    Sample Input:\n    [1.2, 5.23, 0.89, 21.0, 5.28, 1.2]\n\n    Sample Output:\n    [5.23, 5.28]\n    \"\"\"",
    "sol_bodies": [
      "    s = sorted(set(nums))\n    return min([[a, b] for a, b in zip(s, s[1:])], key=lambda x: x[1] - x[0])"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#0",
    "weight": 1.0
  },
  {
    "name": "SeparateParenGroups:0",
    "sat": "def sat(ls: List[str], combined=\"() (()) ((() () ())) (() )\"):\n    for s in ls:\n        assert s.count(\"(\") == s.count(\")\")\n        assert all(s[:i].count(\"(\") > s[:i].count(\")\") for i in range(1, len(s)))  # s is not further divisible\n    return ''.join(ls) == combined.replace(' ', '')",
    "ans_type": "List[str]",
    "sol_header": "def sol(combined=\"() (()) ((() () ())) (() )\"):",
    "sol_docstring": "    \"\"\"\n    Given a string consisting of whitespace and groups of matched parentheses, split it\n    into groups of perfectly matched parentheses without any whitespace.\n\n    Sample Input:\n    '( ()) ((()()())) (()) ()'\n\n    Sample Output:\n    ['(())', '((()()()))', '(())', '()']\n    \"\"\"",
    "sol_bodies": [
      "    cur = ''\n    ans = []\n    depth = 0\n    for c in combined.replace(' ', ''):\n        cur += c\n        if c == '(':\n            depth += 1\n        else:\n            assert c == ')'\n            depth -= 1\n            if depth == 0:\n                ans.append(cur)\n                cur = ''\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#1",
    "weight": 1.0
  },
  {
    "name": "SeparateParenGroups:1",
    "sat": "def sat(ls: List[str], combined=\"()  () \"):\n    for s in ls:\n        assert s.count(\"(\") == s.count(\")\")\n        assert all(s[:i].count(\"(\") > s[:i].count(\")\") for i in range(1, len(s)))  # s is not further divisible\n    return ''.join(ls) == combined.replace(' ', '')",
    "ans_type": "List[str]",
    "sol_header": "def sol(combined=\"()  () \"):",
    "sol_docstring": "    \"\"\"\n    Given a string consisting of whitespace and groups of matched parentheses, split it\n    into groups of perfectly matched parentheses without any whitespace.\n\n    Sample Input:\n    '( ()) ((()()())) (()) ()'\n\n    Sample Output:\n    ['(())', '((()()()))', '(())', '()']\n    \"\"\"",
    "sol_bodies": [
      "    cur = ''\n    ans = []\n    depth = 0\n    for c in combined.replace(' ', ''):\n        cur += c\n        if c == '(':\n            depth += 1\n        else:\n            assert c == ')'\n            depth -= 1\n            if depth == 0:\n                ans.append(cur)\n                cur = ''\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#1",
    "weight": 1.0
  },
  {
    "name": "SeparateParenGroups:2",
    "sat": "def sat(ls: List[str], combined=\" ((((() ())( ( ))())))   \"):\n    for s in ls:\n        assert s.count(\"(\") == s.count(\")\")\n        assert all(s[:i].count(\"(\") > s[:i].count(\")\") for i in range(1, len(s)))  # s is not further divisible\n    return ''.join(ls) == combined.replace(' ', '')",
    "ans_type": "List[str]",
    "sol_header": "def sol(combined=\" ((((() ())( ( ))())))   \"):",
    "sol_docstring": "    \"\"\"\n    Given a string consisting of whitespace and groups of matched parentheses, split it\n    into groups of perfectly matched parentheses without any whitespace.\n\n    Sample Input:\n    '( ()) ((()()())) (()) ()'\n\n    Sample Output:\n    ['(())', '((()()()))', '(())', '()']\n    \"\"\"",
    "sol_bodies": [
      "    cur = ''\n    ans = []\n    depth = 0\n    for c in combined.replace(' ', ''):\n        cur += c\n        if c == '(':\n            depth += 1\n        else:\n            assert c == ')'\n            depth -= 1\n            if depth == 0:\n                ans.append(cur)\n                cur = ''\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#1",
    "weight": 1.0
  },
  {
    "name": "SeparateParenGroups:3",
    "sat": "def sat(ls: List[str], combined=\"()   \"):\n    for s in ls:\n        assert s.count(\"(\") == s.count(\")\")\n        assert all(s[:i].count(\"(\") > s[:i].count(\")\") for i in range(1, len(s)))  # s is not further divisible\n    return ''.join(ls) == combined.replace(' ', '')",
    "ans_type": "List[str]",
    "sol_header": "def sol(combined=\"()   \"):",
    "sol_docstring": "    \"\"\"\n    Given a string consisting of whitespace and groups of matched parentheses, split it\n    into groups of perfectly matched parentheses without any whitespace.\n\n    Sample Input:\n    '( ()) ((()()())) (()) ()'\n\n    Sample Output:\n    ['(())', '((()()()))', '(())', '()']\n    \"\"\"",
    "sol_bodies": [
      "    cur = ''\n    ans = []\n    depth = 0\n    for c in combined.replace(' ', ''):\n        cur += c\n        if c == '(':\n            depth += 1\n        else:\n            assert c == ')'\n            depth -= 1\n            if depth == 0:\n                ans.append(cur)\n                cur = ''\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#1",
    "weight": 1.0
  },
  {
    "name": "SeparateParenGroups:4",
    "sat": "def sat(ls: List[str], combined=\"(() )(( )()  ) ((( (()))(()(()() ( )( ()) )( ( )( )) (() )) )()) (( ))    \"):\n    for s in ls:\n        assert s.count(\"(\") == s.count(\")\")\n        assert all(s[:i].count(\"(\") > s[:i].count(\")\") for i in range(1, len(s)))  # s is not further divisible\n    return ''.join(ls) == combined.replace(' ', '')",
    "ans_type": "List[str]",
    "sol_header": "def sol(combined=\"(() )(( )()  ) ((( (()))(()(()() ( )( ()) )( ( )( )) (() )) )()) (( ))    \"):",
    "sol_docstring": "    \"\"\"\n    Given a string consisting of whitespace and groups of matched parentheses, split it\n    into groups of perfectly matched parentheses without any whitespace.\n\n    Sample Input:\n    '( ()) ((()()())) (()) ()'\n\n    Sample Output:\n    ['(())', '((()()()))', '(())', '()']\n    \"\"\"",
    "sol_bodies": [
      "    cur = ''\n    ans = []\n    depth = 0\n    for c in combined.replace(' ', ''):\n        cur += c\n        if c == '(':\n            depth += 1\n        else:\n            assert c == ')'\n            depth -= 1\n            if depth == 0:\n                ans.append(cur)\n                cur = ''\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#1",
    "weight": 1.0
  },
  {
    "name": "Frac:0",
    "sat": "def sat(x: float, v=523.12892):\n    return 0 <= x < 1 and (v - x).is_integer()",
    "ans_type": "float",
    "sol_header": "def sol(v=523.12892):",
    "sol_docstring": "    \"\"\"\n    Given a floating point number, find its fractional part.\n\n    Sample Input:\n    4.175\n\n    Sample Output:\n    0.175\n    \"\"\"",
    "sol_bodies": [
      "    return v % 1.0"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#2",
    "weight": 1.0
  },
  {
    "name": "Frac:1",
    "sat": "def sat(x: float, v=93.86070917102649):\n    return 0 <= x < 1 and (v - x).is_integer()",
    "ans_type": "float",
    "sol_header": "def sol(v=93.86070917102649):",
    "sol_docstring": "    \"\"\"\n    Given a floating point number, find its fractional part.\n\n    Sample Input:\n    4.175\n\n    Sample Output:\n    0.175\n    \"\"\"",
    "sol_bodies": [
      "    return v % 1.0"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#2",
    "weight": 1.0
  },
  {
    "name": "Frac:2",
    "sat": "def sat(x: float, v=-6.770237138115334):\n    return 0 <= x < 1 and (v - x).is_integer()",
    "ans_type": "float",
    "sol_header": "def sol(v=-6.770237138115334):",
    "sol_docstring": "    \"\"\"\n    Given a floating point number, find its fractional part.\n\n    Sample Input:\n    4.175\n\n    Sample Output:\n    0.175\n    \"\"\"",
    "sol_bodies": [
      "    return v % 1.0"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#2",
    "weight": 1.0
  },
  {
    "name": "Frac:3",
    "sat": "def sat(x: float, v=61.58244309946389):\n    return 0 <= x < 1 and (v - x).is_integer()",
    "ans_type": "float",
    "sol_header": "def sol(v=61.58244309946389):",
    "sol_docstring": "    \"\"\"\n    Given a floating point number, find its fractional part.\n\n    Sample Input:\n    4.175\n\n    Sample Output:\n    0.175\n    \"\"\"",
    "sol_bodies": [
      "    return v % 1.0"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#2",
    "weight": 1.0
  },
  {
    "name": "Frac:4",
    "sat": "def sat(x: float, v=-80.9341003381162):\n    return 0 <= x < 1 and (v - x).is_integer()",
    "ans_type": "float",
    "sol_header": "def sol(v=-80.9341003381162):",
    "sol_docstring": "    \"\"\"\n    Given a floating point number, find its fractional part.\n\n    Sample Input:\n    4.175\n\n    Sample Output:\n    0.175\n    \"\"\"",
    "sol_bodies": [
      "    return v % 1.0"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#2",
    "weight": 1.0
  },
  {
    "name": "FirstNegCumulative:0",
    "sat": "def sat(firsts: List[int], balances=[[2, 7, -2, 4, 3, -15, 10, -45, 3], [3, 4, -17, -1], [100, -100, -101], [-1]]):\n    for i, bals in enumerate(balances):\n        total = 0\n        for b in bals:\n            total += b\n            if total < 0:\n                assert total == firsts[i]\n                break\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(balances=[[2, 7, -2, 4, 3, -15, 10, -45, 3], [3, 4, -17, -1], [100, -100, -101], [-1]]):",
    "sol_docstring": "    \"\"\"\n    Given a list of numbers which represent bank deposits and withdrawals, find the *first* negative balance.\n\n    Sample Input:\n    [[12, -5, 3, -99, 14, 88, -99], [-1, 2, 5]]\n\n    Sample Output:\n    [-89, -1]\n    \"\"\"",
    "sol_bodies": [
      "    firsts = []\n    for bals in balances:\n        total = 0\n        for b in bals:\n            total += b\n            if total < 0:\n                firsts.append(total)\n                break\n    return firsts"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#3",
    "weight": 1.0
  },
  {
    "name": "FirstNegCumulative:1",
    "sat": "def sat(firsts: List[int], balances=[[-1500518832, 928669978, -8834236111, 5315367227, 9459906565], [-922459571, 980368404, 2797206106, -8743339029, 1937237746], [-5581999780, -8355044389, 7691080588, 8819548586, -8678046394, 81698589, -1909402868], [-1496460602, -254633700, 1563740297, 2090111052, -2538220111, 2872427340, 3374773774], [8943500651, -9334877156, -8549860005, 7833776489, 6973829595, 7722681537, 535145192, -1822889532, 1811860043, -7700960933], [-1026876, -8774841983, 8413152214, 6772330745, 5578115818, -3502599311, 3134009997, 463541762, 3083435301], [-4305579008, 5200456205, -7357895007]]):\n    for i, bals in enumerate(balances):\n        total = 0\n        for b in bals:\n            total += b\n            if total < 0:\n                assert total == firsts[i]\n                break\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(balances=[[-1500518832, 928669978, -8834236111, 5315367227, 9459906565], [-922459571, 980368404, 2797206106, -8743339029, 1937237746], [-5581999780, -8355044389, 7691080588, 8819548586, -8678046394, 81698589, -1909402868], [-1496460602, -254633700, 1563740297, 2090111052, -2538220111, 2872427340, 3374773774], [8943500651, -9334877156, -8549860005, 7833776489, 6973829595, 7722681537, 535145192, -1822889532, 1811860043, -7700960933], [-1026876, -8774841983, 8413152214, 6772330745, 5578115818, -3502599311, 3134009997, 463541762, 3083435301], [-4305579008, 5200456205, -7357895007]]):",
    "sol_docstring": "    \"\"\"\n    Given a list of numbers which represent bank deposits and withdrawals, find the *first* negative balance.\n\n    Sample Input:\n    [[12, -5, 3, -99, 14, 88, -99], [-1, 2, 5]]\n\n    Sample Output:\n    [-89, -1]\n    \"\"\"",
    "sol_bodies": [
      "    firsts = []\n    for bals in balances:\n        total = 0\n        for b in bals:\n            total += b\n            if total < 0:\n                firsts.append(total)\n                break\n    return firsts"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#3",
    "weight": 1.0
  },
  {
    "name": "FirstNegCumulative:2",
    "sat": "def sat(firsts: List[int], balances=[[914333345, -1563107339, 668467168, 9415600365, -8131416309, 8389610356, 7604207836, -4164203506, -2291145775], [4697936594, -7745934015], [-4651520348, -3085645067, -4519068178, -7950040818, -9543066562, 5606895475, -1534568525, -8229155741], [-2634952680, 3565837670], [-3239154229, -3459559891, -9783565309, 2874293724], [-3904981094, -7396874754], [-9841547454, -7990665221, 5130235947, -5311423002], [-4206303129, 4047239354, 5652054537, 7165867290]]):\n    for i, bals in enumerate(balances):\n        total = 0\n        for b in bals:\n            total += b\n            if total < 0:\n                assert total == firsts[i]\n                break\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(balances=[[914333345, -1563107339, 668467168, 9415600365, -8131416309, 8389610356, 7604207836, -4164203506, -2291145775], [4697936594, -7745934015], [-4651520348, -3085645067, -4519068178, -7950040818, -9543066562, 5606895475, -1534568525, -8229155741], [-2634952680, 3565837670], [-3239154229, -3459559891, -9783565309, 2874293724], [-3904981094, -7396874754], [-9841547454, -7990665221, 5130235947, -5311423002], [-4206303129, 4047239354, 5652054537, 7165867290]]):",
    "sol_docstring": "    \"\"\"\n    Given a list of numbers which represent bank deposits and withdrawals, find the *first* negative balance.\n\n    Sample Input:\n    [[12, -5, 3, -99, 14, 88, -99], [-1, 2, 5]]\n\n    Sample Output:\n    [-89, -1]\n    \"\"\"",
    "sol_bodies": [
      "    firsts = []\n    for bals in balances:\n        total = 0\n        for b in bals:\n            total += b\n            if total < 0:\n                firsts.append(total)\n                break\n    return firsts"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#3",
    "weight": 1.0
  },
  {
    "name": "FirstNegCumulative:3",
    "sat": "def sat(firsts: List[int], balances=[[-3159744279, -5564462797, 9181877256, -581801013, -2730806212, -8069766232], [-2778889563, 6023011147, 6046948312, -1208971488, 2110520757, 7936971409, -4498797430, -7122967646], [-4649451153, -7199067130, 6484358738, -1015824976, 1504326141, 7704654617, 1083805811, -561837290, -9713157689], [-6286190794, 9847932237, -9818551636, -475170800], [-3927971639, 8808808262, 5363473771, 6453926109, -7932299279, 3515829826, -5092391511, 1619970550], [922221935, -3257271738, -4032399516, 5900007512, -2582293019, -1474957782, 2672311585, 5186169557, -4404554166], [3505067196, -649622176, -9390601127, 4030860857], [-8952966741], [2421457437, 531860397, -5157882824, 1563799160, -2925234193, 339874024, -7985065932, 1541877668, 7043758413]]):\n    for i, bals in enumerate(balances):\n        total = 0\n        for b in bals:\n            total += b\n            if total < 0:\n                assert total == firsts[i]\n                break\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(balances=[[-3159744279, -5564462797, 9181877256, -581801013, -2730806212, -8069766232], [-2778889563, 6023011147, 6046948312, -1208971488, 2110520757, 7936971409, -4498797430, -7122967646], [-4649451153, -7199067130, 6484358738, -1015824976, 1504326141, 7704654617, 1083805811, -561837290, -9713157689], [-6286190794, 9847932237, -9818551636, -475170800], [-3927971639, 8808808262, 5363473771, 6453926109, -7932299279, 3515829826, -5092391511, 1619970550], [922221935, -3257271738, -4032399516, 5900007512, -2582293019, -1474957782, 2672311585, 5186169557, -4404554166], [3505067196, -649622176, -9390601127, 4030860857], [-8952966741], [2421457437, 531860397, -5157882824, 1563799160, -2925234193, 339874024, -7985065932, 1541877668, 7043758413]]):",
    "sol_docstring": "    \"\"\"\n    Given a list of numbers which represent bank deposits and withdrawals, find the *first* negative balance.\n\n    Sample Input:\n    [[12, -5, 3, -99, 14, 88, -99], [-1, 2, 5]]\n\n    Sample Output:\n    [-89, -1]\n    \"\"\"",
    "sol_bodies": [
      "    firsts = []\n    for bals in balances:\n        total = 0\n        for b in bals:\n            total += b\n            if total < 0:\n                firsts.append(total)\n                break\n    return firsts"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#3",
    "weight": 1.0
  },
  {
    "name": "FirstNegCumulative:4",
    "sat": "def sat(firsts: List[int], balances=[[-2041524901, -9443452974, 6724922319], [9512986005, -7256441789, -8146859479, -648834428, 9137465613, 6849232316, -3669774686, -2798878807], [-700370861, -7254999326, 1316572844, -6690887070, 1763578306], [-71670187, 5659836631, 4279460608, 3047233262, -3918077853, 465790429, -1844240292], [-4058863322, 9667272009, 46010424, -5378831171, 6550560002, -1392053235, -2356282119], [-6617394020, -122757412, 5783268011, -7742860607, 3581304886, 5357960664, 6017029257, -1679200889], [-3456426106, -3386028090, -6864999581, -4690984097, -2321291466, -5583489756]]):\n    for i, bals in enumerate(balances):\n        total = 0\n        for b in bals:\n            total += b\n            if total < 0:\n                assert total == firsts[i]\n                break\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(balances=[[-2041524901, -9443452974, 6724922319], [9512986005, -7256441789, -8146859479, -648834428, 9137465613, 6849232316, -3669774686, -2798878807], [-700370861, -7254999326, 1316572844, -6690887070, 1763578306], [-71670187, 5659836631, 4279460608, 3047233262, -3918077853, 465790429, -1844240292], [-4058863322, 9667272009, 46010424, -5378831171, 6550560002, -1392053235, -2356282119], [-6617394020, -122757412, 5783268011, -7742860607, 3581304886, 5357960664, 6017029257, -1679200889], [-3456426106, -3386028090, -6864999581, -4690984097, -2321291466, -5583489756]]):",
    "sol_docstring": "    \"\"\"\n    Given a list of numbers which represent bank deposits and withdrawals, find the *first* negative balance.\n\n    Sample Input:\n    [[12, -5, 3, -99, 14, 88, -99], [-1, 2, 5]]\n\n    Sample Output:\n    [-89, -1]\n    \"\"\"",
    "sol_bodies": [
      "    firsts = []\n    for bals in balances:\n        total = 0\n        for b in bals:\n            total += b\n            if total < 0:\n                firsts.append(total)\n                break\n    return firsts"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#3",
    "weight": 1.0
  },
  {
    "name": "MinSquaredDeviation:0",
    "sat": "def sat(x: float, nums=[12, -2, 14, 3, -15, 10, -45, 3, 30]):\n    return sum((n - x) ** 2 for n in nums) * len(nums) <= sum((m - n) ** 2 for m in nums for n in nums) * .5 + 1e-4",
    "ans_type": "float",
    "sol_header": "def sol(nums=[12, -2, 14, 3, -15, 10, -45, 3, 30]):",
    "sol_docstring": "    \"\"\"\n    Given a list of numbers, find x that minimizes mean squared deviation.\n\n    Sample Input:\n    [4, -5, 17, -9, 14, 108, -9]\n\n    Sample Output:\n    17.14285\n    \"\"\"",
    "sol_bodies": [
      "    return sum(nums) / len(nums)  # mean minimizes mean squared deviation"
    ],
    "module": "human_eval.py",
    "notes": "Loosely inspired by [HumanEval](https://github.com/openai/human-eval) \\#4\n\nThe HumanEval problem was simply to compute the mean absolute deviation. This problem is more interesting.\nIt requires minimizing the sum of squared deviations, which turns out to be the mean `mu`. Moreover, if\n`mu` is the mean of the numbers then a simple calculation shows that:\n\n`sum((mu - n) ** 2 for n in nums) == sum((m - n) ** 2 for m in nums for n in nums) / (2 * len(nums))`\n\nWe use 0.501 rather than 1/2 to deal with rounding errors.",
    "weight": 1.0
  },
  {
    "name": "MinSquaredDeviation:1",
    "sat": "def sat(x: float, nums=[-47, -58, -46, -29, 48, -7, 85, -48]):\n    return sum((n - x) ** 2 for n in nums) * len(nums) <= sum((m - n) ** 2 for m in nums for n in nums) * .5 + 1e-4",
    "ans_type": "float",
    "sol_header": "def sol(nums=[-47, -58, -46, -29, 48, -7, 85, -48]):",
    "sol_docstring": "    \"\"\"\n    Given a list of numbers, find x that minimizes mean squared deviation.\n\n    Sample Input:\n    [4, -5, 17, -9, 14, 108, -9]\n\n    Sample Output:\n    17.14285\n    \"\"\"",
    "sol_bodies": [
      "    return sum(nums) / len(nums)  # mean minimizes mean squared deviation"
    ],
    "module": "human_eval.py",
    "notes": "Loosely inspired by [HumanEval](https://github.com/openai/human-eval) \\#4\n\nThe HumanEval problem was simply to compute the mean absolute deviation. This problem is more interesting.\nIt requires minimizing the sum of squared deviations, which turns out to be the mean `mu`. Moreover, if\n`mu` is the mean of the numbers then a simple calculation shows that:\n\n`sum((mu - n) ** 2 for n in nums) == sum((m - n) ** 2 for m in nums for n in nums) / (2 * len(nums))`\n\nWe use 0.501 rather than 1/2 to deal with rounding errors.",
    "weight": 1.0
  },
  {
    "name": "MinSquaredDeviation:2",
    "sat": "def sat(x: float, nums=[-76, -99, 72, 33, 21, -54, -21, 24, 97, 89]):\n    return sum((n - x) ** 2 for n in nums) * len(nums) <= sum((m - n) ** 2 for m in nums for n in nums) * .5 + 1e-4",
    "ans_type": "float",
    "sol_header": "def sol(nums=[-76, -99, 72, 33, 21, -54, -21, 24, 97, 89]):",
    "sol_docstring": "    \"\"\"\n    Given a list of numbers, find x that minimizes mean squared deviation.\n\n    Sample Input:\n    [4, -5, 17, -9, 14, 108, -9]\n\n    Sample Output:\n    17.14285\n    \"\"\"",
    "sol_bodies": [
      "    return sum(nums) / len(nums)  # mean minimizes mean squared deviation"
    ],
    "module": "human_eval.py",
    "notes": "Loosely inspired by [HumanEval](https://github.com/openai/human-eval) \\#4\n\nThe HumanEval problem was simply to compute the mean absolute deviation. This problem is more interesting.\nIt requires minimizing the sum of squared deviations, which turns out to be the mean `mu`. Moreover, if\n`mu` is the mean of the numbers then a simple calculation shows that:\n\n`sum((mu - n) ** 2 for n in nums) == sum((m - n) ** 2 for m in nums for n in nums) / (2 * len(nums))`\n\nWe use 0.501 rather than 1/2 to deal with rounding errors.",
    "weight": 1.0
  },
  {
    "name": "MinSquaredDeviation:3",
    "sat": "def sat(x: float, nums=[-62, -53, -80]):\n    return sum((n - x) ** 2 for n in nums) * len(nums) <= sum((m - n) ** 2 for m in nums for n in nums) * .5 + 1e-4",
    "ans_type": "float",
    "sol_header": "def sol(nums=[-62, -53, -80]):",
    "sol_docstring": "    \"\"\"\n    Given a list of numbers, find x that minimizes mean squared deviation.\n\n    Sample Input:\n    [4, -5, 17, -9, 14, 108, -9]\n\n    Sample Output:\n    17.14285\n    \"\"\"",
    "sol_bodies": [
      "    return sum(nums) / len(nums)  # mean minimizes mean squared deviation"
    ],
    "module": "human_eval.py",
    "notes": "Loosely inspired by [HumanEval](https://github.com/openai/human-eval) \\#4\n\nThe HumanEval problem was simply to compute the mean absolute deviation. This problem is more interesting.\nIt requires minimizing the sum of squared deviations, which turns out to be the mean `mu`. Moreover, if\n`mu` is the mean of the numbers then a simple calculation shows that:\n\n`sum((mu - n) ** 2 for n in nums) == sum((m - n) ** 2 for m in nums for n in nums) / (2 * len(nums))`\n\nWe use 0.501 rather than 1/2 to deal with rounding errors.",
    "weight": 1.0
  },
  {
    "name": "MinSquaredDeviation:4",
    "sat": "def sat(x: float, nums=[-76, 76, -88, 37, 7]):\n    return sum((n - x) ** 2 for n in nums) * len(nums) <= sum((m - n) ** 2 for m in nums for n in nums) * .5 + 1e-4",
    "ans_type": "float",
    "sol_header": "def sol(nums=[-76, 76, -88, 37, 7]):",
    "sol_docstring": "    \"\"\"\n    Given a list of numbers, find x that minimizes mean squared deviation.\n\n    Sample Input:\n    [4, -5, 17, -9, 14, 108, -9]\n\n    Sample Output:\n    17.14285\n    \"\"\"",
    "sol_bodies": [
      "    return sum(nums) / len(nums)  # mean minimizes mean squared deviation"
    ],
    "module": "human_eval.py",
    "notes": "Loosely inspired by [HumanEval](https://github.com/openai/human-eval) \\#4\n\nThe HumanEval problem was simply to compute the mean absolute deviation. This problem is more interesting.\nIt requires minimizing the sum of squared deviations, which turns out to be the mean `mu`. Moreover, if\n`mu` is the mean of the numbers then a simple calculation shows that:\n\n`sum((mu - n) ** 2 for n in nums) == sum((m - n) ** 2 for m in nums for n in nums) / (2 * len(nums))`\n\nWe use 0.501 rather than 1/2 to deal with rounding errors.",
    "weight": 1.0
  },
  {
    "name": "Intersperse:0",
    "sat": "def sat(li: List[int], nums=[12, 23, -2, 5, 0], sep=4):\n    return li[::2] == nums and li[1::2] == [sep] * (len(nums) - 1)",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[12, 23, -2, 5, 0], sep=4):",
    "sol_docstring": "    \"\"\"\n    Given a list of numbers and a number to inject, create a list containing that number in between each pair of\n    adjacent numbers.\n\n    Sample Input:\n    [8, 14, 21, 17, 9, -5], 3\n\n    Sample Output:\n    [8, 3, 14, 3, 21, 3, 17, 3, 9, 3, -5]\n    \"\"\"",
    "sol_bodies": [
      "    ans = [sep] * (2 * len(nums) - 1)\n    ans[::2] = nums\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#5",
    "weight": 1.0
  },
  {
    "name": "Intersperse:1",
    "sat": "def sat(li: List[int], nums=[], sep=23):\n    return li[::2] == nums and li[1::2] == [sep] * (len(nums) - 1)",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[], sep=23):",
    "sol_docstring": "    \"\"\"\n    Given a list of numbers and a number to inject, create a list containing that number in between each pair of\n    adjacent numbers.\n\n    Sample Input:\n    [8, 14, 21, 17, 9, -5], 3\n\n    Sample Output:\n    [8, 3, 14, 3, 21, 3, 17, 3, 9, 3, -5]\n    \"\"\"",
    "sol_bodies": [
      "    ans = [sep] * (2 * len(nums) - 1)\n    ans[::2] = nums\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#5",
    "weight": 1.0
  },
  {
    "name": "Intersperse:2",
    "sat": "def sat(li: List[int], nums=[90, 23, 0, 0, 36, 61, 73], sep=14):\n    return li[::2] == nums and li[1::2] == [sep] * (len(nums) - 1)",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[90, 23, 0, 0, 36, 61, 73], sep=14):",
    "sol_docstring": "    \"\"\"\n    Given a list of numbers and a number to inject, create a list containing that number in between each pair of\n    adjacent numbers.\n\n    Sample Input:\n    [8, 14, 21, 17, 9, -5], 3\n\n    Sample Output:\n    [8, 3, 14, 3, 21, 3, 17, 3, 9, 3, -5]\n    \"\"\"",
    "sol_bodies": [
      "    ans = [sep] * (2 * len(nums) - 1)\n    ans[::2] = nums\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#5",
    "weight": 1.0
  },
  {
    "name": "Intersperse:3",
    "sat": "def sat(li: List[int], nums=[41, 60, 18, 34, 31], sep=2):\n    return li[::2] == nums and li[1::2] == [sep] * (len(nums) - 1)",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[41, 60, 18, 34, 31], sep=2):",
    "sol_docstring": "    \"\"\"\n    Given a list of numbers and a number to inject, create a list containing that number in between each pair of\n    adjacent numbers.\n\n    Sample Input:\n    [8, 14, 21, 17, 9, -5], 3\n\n    Sample Output:\n    [8, 3, 14, 3, 21, 3, 17, 3, 9, 3, -5]\n    \"\"\"",
    "sol_bodies": [
      "    ans = [sep] * (2 * len(nums) - 1)\n    ans[::2] = nums\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#5",
    "weight": 1.0
  },
  {
    "name": "Intersperse:4",
    "sat": "def sat(li: List[int], nums=[39, 94, 99, 46, 93], sep=25):\n    return li[::2] == nums and li[1::2] == [sep] * (len(nums) - 1)",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[39, 94, 99, 46, 93], sep=25):",
    "sol_docstring": "    \"\"\"\n    Given a list of numbers and a number to inject, create a list containing that number in between each pair of\n    adjacent numbers.\n\n    Sample Input:\n    [8, 14, 21, 17, 9, -5], 3\n\n    Sample Output:\n    [8, 3, 14, 3, 21, 3, 17, 3, 9, 3, -5]\n    \"\"\"",
    "sol_bodies": [
      "    ans = [sep] * (2 * len(nums) - 1)\n    ans[::2] = nums\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#5",
    "weight": 1.0
  },
  {
    "name": "DeepestParens:0",
    "sat": "def sat(depths: List[int], parens=\"() (()) ((()()())) (((((((())))))))\"):\n    groups = parens.split()\n    for depth, group in zip(depths, groups):\n        budget = depth\n        success = False\n        for c in group:\n            if c == '(':\n                budget -= 1\n                if budget == 0:\n                    success = True\n                assert budget >= 0\n            else:\n                assert c == ')'\n                budget += 1\n        assert success\n\n    return len(groups) == len(depths)",
    "ans_type": "List[int]",
    "sol_header": "def sol(parens=\"() (()) ((()()())) (((((((())))))))\"):",
    "sol_docstring": "    \"\"\"\n    Given a string consisting of groups of matched nested parentheses separated by parentheses,\n    compute the depth of each group.\n\n    Sample Input:\n    '(()) ((()()())) (()) ()'\n\n    Sample Output:\n    [2, 3, 2, 1]\n    \"\"\"",
    "sol_bodies": [
      "    def max_depth(s):\n        m = 0\n        depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                m = max(m, depth)\n            else:\n                assert c == ')'\n                depth -= 1\n        assert depth == 0\n        return m\n\n    return [max_depth(s) for s in parens.split()]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#6",
    "weight": 1.0
  },
  {
    "name": "DeepestParens:1",
    "sat": "def sat(depths: List[int], parens=\"\"):\n    groups = parens.split()\n    for depth, group in zip(depths, groups):\n        budget = depth\n        success = False\n        for c in group:\n            if c == '(':\n                budget -= 1\n                if budget == 0:\n                    success = True\n                assert budget >= 0\n            else:\n                assert c == ')'\n                budget += 1\n        assert success\n\n    return len(groups) == len(depths)",
    "ans_type": "List[int]",
    "sol_header": "def sol(parens=\"\"):",
    "sol_docstring": "    \"\"\"\n    Given a string consisting of groups of matched nested parentheses separated by parentheses,\n    compute the depth of each group.\n\n    Sample Input:\n    '(()) ((()()())) (()) ()'\n\n    Sample Output:\n    [2, 3, 2, 1]\n    \"\"\"",
    "sol_bodies": [
      "    def max_depth(s):\n        m = 0\n        depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                m = max(m, depth)\n            else:\n                assert c == ')'\n                depth -= 1\n        assert depth == 0\n        return m\n\n    return [max_depth(s) for s in parens.split()]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#6",
    "weight": 1.0
  },
  {
    "name": "DeepestParens:2",
    "sat": "def sat(depths: List[int], parens=\"(()) (((()(((()())()())))))(())()\"):\n    groups = parens.split()\n    for depth, group in zip(depths, groups):\n        budget = depth\n        success = False\n        for c in group:\n            if c == '(':\n                budget -= 1\n                if budget == 0:\n                    success = True\n                assert budget >= 0\n            else:\n                assert c == ')'\n                budget += 1\n        assert success\n\n    return len(groups) == len(depths)",
    "ans_type": "List[int]",
    "sol_header": "def sol(parens=\"(()) (((()(((()())()())))))(())()\"):",
    "sol_docstring": "    \"\"\"\n    Given a string consisting of groups of matched nested parentheses separated by parentheses,\n    compute the depth of each group.\n\n    Sample Input:\n    '(()) ((()()())) (()) ()'\n\n    Sample Output:\n    [2, 3, 2, 1]\n    \"\"\"",
    "sol_bodies": [
      "    def max_depth(s):\n        m = 0\n        depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                m = max(m, depth)\n            else:\n                assert c == ')'\n                depth -= 1\n        assert depth == 0\n        return m\n\n    return [max_depth(s) for s in parens.split()]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#6",
    "weight": 1.0
  },
  {
    "name": "DeepestParens:3",
    "sat": "def sat(depths: List[int], parens=\"(()) ()()(()())() () ()(())() ()((()))\"):\n    groups = parens.split()\n    for depth, group in zip(depths, groups):\n        budget = depth\n        success = False\n        for c in group:\n            if c == '(':\n                budget -= 1\n                if budget == 0:\n                    success = True\n                assert budget >= 0\n            else:\n                assert c == ')'\n                budget += 1\n        assert success\n\n    return len(groups) == len(depths)",
    "ans_type": "List[int]",
    "sol_header": "def sol(parens=\"(()) ()()(()())() () ()(())() ()((()))\"):",
    "sol_docstring": "    \"\"\"\n    Given a string consisting of groups of matched nested parentheses separated by parentheses,\n    compute the depth of each group.\n\n    Sample Input:\n    '(()) ((()()())) (()) ()'\n\n    Sample Output:\n    [2, 3, 2, 1]\n    \"\"\"",
    "sol_bodies": [
      "    def max_depth(s):\n        m = 0\n        depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                m = max(m, depth)\n            else:\n                assert c == ')'\n                depth -= 1\n        assert depth == 0\n        return m\n\n    return [max_depth(s) for s in parens.split()]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#6",
    "weight": 1.0
  },
  {
    "name": "DeepestParens:4",
    "sat": "def sat(depths: List[int], parens=\"()()(())()(())\"):\n    groups = parens.split()\n    for depth, group in zip(depths, groups):\n        budget = depth\n        success = False\n        for c in group:\n            if c == '(':\n                budget -= 1\n                if budget == 0:\n                    success = True\n                assert budget >= 0\n            else:\n                assert c == ')'\n                budget += 1\n        assert success\n\n    return len(groups) == len(depths)",
    "ans_type": "List[int]",
    "sol_header": "def sol(parens=\"()()(())()(())\"):",
    "sol_docstring": "    \"\"\"\n    Given a string consisting of groups of matched nested parentheses separated by parentheses,\n    compute the depth of each group.\n\n    Sample Input:\n    '(()) ((()()())) (()) ()'\n\n    Sample Output:\n    [2, 3, 2, 1]\n    \"\"\"",
    "sol_bodies": [
      "    def max_depth(s):\n        m = 0\n        depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                m = max(m, depth)\n            else:\n                assert c == ')'\n                depth -= 1\n        assert depth == 0\n        return m\n\n    return [max_depth(s) for s in parens.split()]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#6",
    "weight": 1.0
  },
  {
    "name": "FindContainers:0",
    "sat": "def sat(containers: List[str], strings=['cat', 'dog', 'shatter', 'bear', 'at', 'ta'], substring=\"at\"):\n    i = 0\n    for s in strings:\n        if substring in s:\n            assert containers[i] == s\n            i += 1\n    return i == len(containers)",
    "ans_type": "List[str]",
    "sol_header": "def sol(strings=['cat', 'dog', 'shatter', 'bear', 'at', 'ta'], substring=\"at\"):",
    "sol_docstring": "    \"\"\"\n    Find the strings in a list containing a given substring\n\n    Sample Input:\n    ['cat', 'dog', 'bear'], 'a'\n\n    Sample Output:\n    ['cat', 'bear']\n    \"\"\"",
    "sol_bodies": [
      "    return [s for s in strings if substring in s]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#7",
    "weight": 1.0
  },
  {
    "name": "FindContainers:1",
    "sat": "def sat(containers: List[str], strings=['ty', 'jy', 'jsesnicy'], substring=\"ses\"):\n    i = 0\n    for s in strings:\n        if substring in s:\n            assert containers[i] == s\n            i += 1\n    return i == len(containers)",
    "ans_type": "List[str]",
    "sol_header": "def sol(strings=['ty', 'jy', 'jsesnicy'], substring=\"ses\"):",
    "sol_docstring": "    \"\"\"\n    Find the strings in a list containing a given substring\n\n    Sample Input:\n    ['cat', 'dog', 'bear'], 'a'\n\n    Sample Output:\n    ['cat', 'bear']\n    \"\"\"",
    "sol_bodies": [
      "    return [s for s in strings if substring in s]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#7",
    "weight": 1.0
  },
  {
    "name": "FindContainers:2",
    "sat": "def sat(containers: List[str], strings=['rgyjo', 'tipu', 'mulut', 'wutgypepu'], substring=\"gy\"):\n    i = 0\n    for s in strings:\n        if substring in s:\n            assert containers[i] == s\n            i += 1\n    return i == len(containers)",
    "ans_type": "List[str]",
    "sol_header": "def sol(strings=['rgyjo', 'tipu', 'mulut', 'wutgypepu'], substring=\"gy\"):",
    "sol_docstring": "    \"\"\"\n    Find the strings in a list containing a given substring\n\n    Sample Input:\n    ['cat', 'dog', 'bear'], 'a'\n\n    Sample Output:\n    ['cat', 'bear']\n    \"\"\"",
    "sol_bodies": [
      "    return [s for s in strings if substring in s]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#7",
    "weight": 1.0
  },
  {
    "name": "FindContainers:3",
    "sat": "def sat(containers: List[str], strings=[], substring=\"ve\"):\n    i = 0\n    for s in strings:\n        if substring in s:\n            assert containers[i] == s\n            i += 1\n    return i == len(containers)",
    "ans_type": "List[str]",
    "sol_header": "def sol(strings=[], substring=\"ve\"):",
    "sol_docstring": "    \"\"\"\n    Find the strings in a list containing a given substring\n\n    Sample Input:\n    ['cat', 'dog', 'bear'], 'a'\n\n    Sample Output:\n    ['cat', 'bear']\n    \"\"\"",
    "sol_bodies": [
      "    return [s for s in strings if substring in s]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#7",
    "weight": 1.0
  },
  {
    "name": "FindContainers:4",
    "sat": "def sat(containers: List[str], strings=['te', 'dmmo', ''], substring=\"m\"):\n    i = 0\n    for s in strings:\n        if substring in s:\n            assert containers[i] == s\n            i += 1\n    return i == len(containers)",
    "ans_type": "List[str]",
    "sol_header": "def sol(strings=['te', 'dmmo', ''], substring=\"m\"):",
    "sol_docstring": "    \"\"\"\n    Find the strings in a list containing a given substring\n\n    Sample Input:\n    ['cat', 'dog', 'bear'], 'a'\n\n    Sample Output:\n    ['cat', 'bear']\n    \"\"\"",
    "sol_bodies": [
      "    return [s for s in strings if substring in s]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#7",
    "weight": 1.0
  },
  {
    "name": "SumProduct:0",
    "sat": "def sat(nums: List[int], tot=14, prod=99):\n    assert sum(nums) == tot\n    p = 1\n    for n in nums:\n        p *= n\n    return p == prod",
    "ans_type": "List[int]",
    "sol_header": "def sol(tot=14, prod=99):",
    "sol_docstring": "    \"\"\"\n    Find a list of numbers with a given sum and a given product.\n\n    Sample Input:\n    12, 32\n\n    Sample Output:\n    [2, 8, 2]\n    \"\"\"",
    "sol_bodies": [
      "    ans = [prod]\n    while sum(ans) > tot:\n        ans += [-1, -1]\n    ans += [1] * (tot - sum(ans))\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#8",
    "weight": 1.0
  },
  {
    "name": "SumProduct:1",
    "sat": "def sat(nums: List[int], tot=-81, prod=13):\n    assert sum(nums) == tot\n    p = 1\n    for n in nums:\n        p *= n\n    return p == prod",
    "ans_type": "List[int]",
    "sol_header": "def sol(tot=-81, prod=13):",
    "sol_docstring": "    \"\"\"\n    Find a list of numbers with a given sum and a given product.\n\n    Sample Input:\n    12, 32\n\n    Sample Output:\n    [2, 8, 2]\n    \"\"\"",
    "sol_bodies": [
      "    ans = [prod]\n    while sum(ans) > tot:\n        ans += [-1, -1]\n    ans += [1] * (tot - sum(ans))\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#8",
    "weight": 1.0
  },
  {
    "name": "SumProduct:2",
    "sat": "def sat(nums: List[int], tot=96, prod=-44):\n    assert sum(nums) == tot\n    p = 1\n    for n in nums:\n        p *= n\n    return p == prod",
    "ans_type": "List[int]",
    "sol_header": "def sol(tot=96, prod=-44):",
    "sol_docstring": "    \"\"\"\n    Find a list of numbers with a given sum and a given product.\n\n    Sample Input:\n    12, 32\n\n    Sample Output:\n    [2, 8, 2]\n    \"\"\"",
    "sol_bodies": [
      "    ans = [prod]\n    while sum(ans) > tot:\n        ans += [-1, -1]\n    ans += [1] * (tot - sum(ans))\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#8",
    "weight": 1.0
  },
  {
    "name": "SumProduct:3",
    "sat": "def sat(nums: List[int], tot=86, prod=24):\n    assert sum(nums) == tot\n    p = 1\n    for n in nums:\n        p *= n\n    return p == prod",
    "ans_type": "List[int]",
    "sol_header": "def sol(tot=86, prod=24):",
    "sol_docstring": "    \"\"\"\n    Find a list of numbers with a given sum and a given product.\n\n    Sample Input:\n    12, 32\n\n    Sample Output:\n    [2, 8, 2]\n    \"\"\"",
    "sol_bodies": [
      "    ans = [prod]\n    while sum(ans) > tot:\n        ans += [-1, -1]\n    ans += [1] * (tot - sum(ans))\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#8",
    "weight": 1.0
  },
  {
    "name": "SumProduct:4",
    "sat": "def sat(nums: List[int], tot=-16, prod=3):\n    assert sum(nums) == tot\n    p = 1\n    for n in nums:\n        p *= n\n    return p == prod",
    "ans_type": "List[int]",
    "sol_header": "def sol(tot=-16, prod=3):",
    "sol_docstring": "    \"\"\"\n    Find a list of numbers with a given sum and a given product.\n\n    Sample Input:\n    12, 32\n\n    Sample Output:\n    [2, 8, 2]\n    \"\"\"",
    "sol_bodies": [
      "    ans = [prod]\n    while sum(ans) > tot:\n        ans += [-1, -1]\n    ans += [1] * (tot - sum(ans))\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#8",
    "weight": 1.0
  },
  {
    "name": "RollingMax:0",
    "sat": "def sat(maxes: List[int], nums=[1, 4, 3, -6, 19]):\n    assert len(maxes) == len(nums)\n    for i in range(len(nums)):\n        if i > 0:\n            assert maxes[i] == max(maxes[i - 1], nums[i])\n        else:\n            assert maxes[0] == nums[0]\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[1, 4, 3, -6, 19]):",
    "sol_docstring": "    \"\"\"\n    Find a list whose ith element is the maximum of the first i elements of the input list.\n\n    Sample Input:\n    [2, 8, 2]\n\n    Sample Output:\n    [2, 8, 8]\n    \"\"\"",
    "sol_bodies": [
      "    return [max(nums[:i]) for i in range(1, len(nums) + 1)]",
      "    ans = []\n    if nums:\n        m = nums[0]\n        for n in nums:\n            m = max(n, m)\n            ans.append(m)\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#9",
    "weight": 1.0
  },
  {
    "name": "RollingMax:1",
    "sat": "def sat(maxes: List[int], nums=[-15, -6]):\n    assert len(maxes) == len(nums)\n    for i in range(len(nums)):\n        if i > 0:\n            assert maxes[i] == max(maxes[i - 1], nums[i])\n        else:\n            assert maxes[0] == nums[0]\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[-15, -6]):",
    "sol_docstring": "    \"\"\"\n    Find a list whose ith element is the maximum of the first i elements of the input list.\n\n    Sample Input:\n    [2, 8, 2]\n\n    Sample Output:\n    [2, 8, 8]\n    \"\"\"",
    "sol_bodies": [
      "    return [max(nums[:i]) for i in range(1, len(nums) + 1)]",
      "    ans = []\n    if nums:\n        m = nums[0]\n        for n in nums:\n            m = max(n, m)\n            ans.append(m)\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#9",
    "weight": 1.0
  },
  {
    "name": "RollingMax:2",
    "sat": "def sat(maxes: List[int], nums=[]):\n    assert len(maxes) == len(nums)\n    for i in range(len(nums)):\n        if i > 0:\n            assert maxes[i] == max(maxes[i - 1], nums[i])\n        else:\n            assert maxes[0] == nums[0]\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[]):",
    "sol_docstring": "    \"\"\"\n    Find a list whose ith element is the maximum of the first i elements of the input list.\n\n    Sample Input:\n    [2, 8, 2]\n\n    Sample Output:\n    [2, 8, 8]\n    \"\"\"",
    "sol_bodies": [
      "    return [max(nums[:i]) for i in range(1, len(nums) + 1)]",
      "    ans = []\n    if nums:\n        m = nums[0]\n        for n in nums:\n            m = max(n, m)\n            ans.append(m)\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#9",
    "weight": 1.0
  },
  {
    "name": "RollingMax:3",
    "sat": "def sat(maxes: List[int], nums=[-100, 14, -45, 92, 36, -68, -40]):\n    assert len(maxes) == len(nums)\n    for i in range(len(nums)):\n        if i > 0:\n            assert maxes[i] == max(maxes[i - 1], nums[i])\n        else:\n            assert maxes[0] == nums[0]\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[-100, 14, -45, 92, 36, -68, -40]):",
    "sol_docstring": "    \"\"\"\n    Find a list whose ith element is the maximum of the first i elements of the input list.\n\n    Sample Input:\n    [2, 8, 2]\n\n    Sample Output:\n    [2, 8, 8]\n    \"\"\"",
    "sol_bodies": [
      "    return [max(nums[:i]) for i in range(1, len(nums) + 1)]",
      "    ans = []\n    if nums:\n        m = nums[0]\n        for n in nums:\n            m = max(n, m)\n            ans.append(m)\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#9",
    "weight": 1.0
  },
  {
    "name": "RollingMax:4",
    "sat": "def sat(maxes: List[int], nums=[23, -34, 96]):\n    assert len(maxes) == len(nums)\n    for i in range(len(nums)):\n        if i > 0:\n            assert maxes[i] == max(maxes[i - 1], nums[i])\n        else:\n            assert maxes[0] == nums[0]\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[23, -34, 96]):",
    "sol_docstring": "    \"\"\"\n    Find a list whose ith element is the maximum of the first i elements of the input list.\n\n    Sample Input:\n    [2, 8, 2]\n\n    Sample Output:\n    [2, 8, 8]\n    \"\"\"",
    "sol_bodies": [
      "    return [max(nums[:i]) for i in range(1, len(nums) + 1)]",
      "    ans = []\n    if nums:\n        m = nums[0]\n        for n in nums:\n            m = max(n, m)\n            ans.append(m)\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#9",
    "weight": 1.0
  },
  {
    "name": "PalindromeContaining:0",
    "sat": "def sat(ans: str, s=\"so easy\", length=20):\n    return ans == ans[::-1] and len(ans) == length and s in ans",
    "ans_type": "str",
    "sol_header": "def sol(s=\"so easy\", length=20):",
    "sol_docstring": "    \"\"\"\n    Find a palindrome of a given length containing a given string.\n\n    Sample Input:\n    \"abba\", 6\n\n    Sample Output:\n    \"cabbac\"\n    \"\"\"",
    "sol_bodies": [
      "    ls = list(s)\n    for i in range(length - len(s) + 1):\n        arr = ['x'] * length\n        arr[i:i + len(s)] = ls\n        a = length - i - 1\n        b = length - (i + len(s)) - 1\n        if b == -1:\n            b = None\n        arr[a:b:-1] = ls\n        if arr == arr[::-1]:\n            ans = \"\".join(arr)\n            if s in ans:\n                return ans\n    assert False, \"shouldn't reach here\""
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#10",
    "weight": 1.0
  },
  {
    "name": "PalindromeContaining:1",
    "sat": "def sat(ans: str, s=\"aabbab\", length=12):\n    return ans == ans[::-1] and len(ans) == length and s in ans",
    "ans_type": "str",
    "sol_header": "def sol(s=\"aabbab\", length=12):",
    "sol_docstring": "    \"\"\"\n    Find a palindrome of a given length containing a given string.\n\n    Sample Input:\n    \"abba\", 6\n\n    Sample Output:\n    \"cabbac\"\n    \"\"\"",
    "sol_bodies": [
      "    ls = list(s)\n    for i in range(length - len(s) + 1):\n        arr = ['x'] * length\n        arr[i:i + len(s)] = ls\n        a = length - i - 1\n        b = length - (i + len(s)) - 1\n        if b == -1:\n            b = None\n        arr[a:b:-1] = ls\n        if arr == arr[::-1]:\n            ans = \"\".join(arr)\n            if s in ans:\n                return ans\n    assert False, \"shouldn't reach here\""
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#10",
    "weight": 1.0
  },
  {
    "name": "PalindromeContaining:2",
    "sat": "def sat(ans: str, s=\"bbb\", length=27):\n    return ans == ans[::-1] and len(ans) == length and s in ans",
    "ans_type": "str",
    "sol_header": "def sol(s=\"bbb\", length=27):",
    "sol_docstring": "    \"\"\"\n    Find a palindrome of a given length containing a given string.\n\n    Sample Input:\n    \"abba\", 6\n\n    Sample Output:\n    \"cabbac\"\n    \"\"\"",
    "sol_bodies": [
      "    ls = list(s)\n    for i in range(length - len(s) + 1):\n        arr = ['x'] * length\n        arr[i:i + len(s)] = ls\n        a = length - i - 1\n        b = length - (i + len(s)) - 1\n        if b == -1:\n            b = None\n        arr[a:b:-1] = ls\n        if arr == arr[::-1]:\n            ans = \"\".join(arr)\n            if s in ans:\n                return ans\n    assert False, \"shouldn't reach here\""
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#10",
    "weight": 1.0
  },
  {
    "name": "PalindromeContaining:3",
    "sat": "def sat(ans: str, s=\"bb\", length=38):\n    return ans == ans[::-1] and len(ans) == length and s in ans",
    "ans_type": "str",
    "sol_header": "def sol(s=\"bb\", length=38):",
    "sol_docstring": "    \"\"\"\n    Find a palindrome of a given length containing a given string.\n\n    Sample Input:\n    \"abba\", 6\n\n    Sample Output:\n    \"cabbac\"\n    \"\"\"",
    "sol_bodies": [
      "    ls = list(s)\n    for i in range(length - len(s) + 1):\n        arr = ['x'] * length\n        arr[i:i + len(s)] = ls\n        a = length - i - 1\n        b = length - (i + len(s)) - 1\n        if b == -1:\n            b = None\n        arr[a:b:-1] = ls\n        if arr == arr[::-1]:\n            ans = \"\".join(arr)\n            if s in ans:\n                return ans\n    assert False, \"shouldn't reach here\""
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#10",
    "weight": 1.0
  },
  {
    "name": "PalindromeContaining:4",
    "sat": "def sat(ans: str, s=\"\", length=0):\n    return ans == ans[::-1] and len(ans) == length and s in ans",
    "ans_type": "str",
    "sol_header": "def sol(s=\"\", length=0):",
    "sol_docstring": "    \"\"\"\n    Find a palindrome of a given length containing a given string.\n\n    Sample Input:\n    \"abba\", 6\n\n    Sample Output:\n    \"cabbac\"\n    \"\"\"",
    "sol_bodies": [
      "    ls = list(s)\n    for i in range(length - len(s) + 1):\n        arr = ['x'] * length\n        arr[i:i + len(s)] = ls\n        a = length - i - 1\n        b = length - (i + len(s)) - 1\n        if b == -1:\n            b = None\n        arr[a:b:-1] = ls\n        if arr == arr[::-1]:\n            ans = \"\".join(arr)\n            if s in ans:\n                return ans\n    assert False, \"shouldn't reach here\""
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#10",
    "weight": 1.0
  },
  {
    "name": "BinaryStrXOR:0",
    "sat": "def sat(str_num: str, nums=['100011101100001', '100101100101110']):\n    a, b = nums\n    return int(str_num, 2) == int(a, 2) ^ int(b, 2)",
    "ans_type": "str",
    "sol_header": "def sol(nums=['100011101100001', '100101100101110']):",
    "sol_docstring": "    \"\"\"\n    Find a the XOR of two given strings interpreted as binary numbers.\n\n    Sample Input:\n    \"0001\", \"1011\"\n\n    Sample Output:\n    \"1010\"\n    \"\"\"",
    "sol_bodies": [
      "    a, b = nums\n    ans = int(a, 2) ^ int(b, 2)\n    return format(ans, \"b\")"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#11",
    "weight": 1.0
  },
  {
    "name": "BinaryStrXOR:1",
    "sat": "def sat(str_num: str, nums=['1101101111', '11001100']):\n    a, b = nums\n    return int(str_num, 2) == int(a, 2) ^ int(b, 2)",
    "ans_type": "str",
    "sol_header": "def sol(nums=['1101101111', '11001100']):",
    "sol_docstring": "    \"\"\"\n    Find a the XOR of two given strings interpreted as binary numbers.\n\n    Sample Input:\n    \"0001\", \"1011\"\n\n    Sample Output:\n    \"1010\"\n    \"\"\"",
    "sol_bodies": [
      "    a, b = nums\n    ans = int(a, 2) ^ int(b, 2)\n    return format(ans, \"b\")"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#11",
    "weight": 1.0
  },
  {
    "name": "BinaryStrXOR:2",
    "sat": "def sat(str_num: str, nums=['11011111', '1101001110']):\n    a, b = nums\n    return int(str_num, 2) == int(a, 2) ^ int(b, 2)",
    "ans_type": "str",
    "sol_header": "def sol(nums=['11011111', '1101001110']):",
    "sol_docstring": "    \"\"\"\n    Find a the XOR of two given strings interpreted as binary numbers.\n\n    Sample Input:\n    \"0001\", \"1011\"\n\n    Sample Output:\n    \"1010\"\n    \"\"\"",
    "sol_bodies": [
      "    a, b = nums\n    ans = int(a, 2) ^ int(b, 2)\n    return format(ans, \"b\")"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#11",
    "weight": 1.0
  },
  {
    "name": "BinaryStrXOR:3",
    "sat": "def sat(str_num: str, nums=['100000001', '1010001001']):\n    a, b = nums\n    return int(str_num, 2) == int(a, 2) ^ int(b, 2)",
    "ans_type": "str",
    "sol_header": "def sol(nums=['100000001', '1010001001']):",
    "sol_docstring": "    \"\"\"\n    Find a the XOR of two given strings interpreted as binary numbers.\n\n    Sample Input:\n    \"0001\", \"1011\"\n\n    Sample Output:\n    \"1010\"\n    \"\"\"",
    "sol_bodies": [
      "    a, b = nums\n    ans = int(a, 2) ^ int(b, 2)\n    return format(ans, \"b\")"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#11",
    "weight": 1.0
  },
  {
    "name": "BinaryStrXOR:4",
    "sat": "def sat(str_num: str, nums=['10010110', '10000']):\n    a, b = nums\n    return int(str_num, 2) == int(a, 2) ^ int(b, 2)",
    "ans_type": "str",
    "sol_header": "def sol(nums=['10010110', '10000']):",
    "sol_docstring": "    \"\"\"\n    Find a the XOR of two given strings interpreted as binary numbers.\n\n    Sample Input:\n    \"0001\", \"1011\"\n\n    Sample Output:\n    \"1010\"\n    \"\"\"",
    "sol_bodies": [
      "    a, b = nums\n    ans = int(a, 2) ^ int(b, 2)\n    return format(ans, \"b\")"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#11",
    "weight": 1.0
  },
  {
    "name": "LongestStr:0",
    "sat": "def sat(ans: str, words=['these', 'are', 'some', 'pretty', 'long', 'words']):\n    return ans in words and all(len(ans) >= len(w) for w in words)",
    "ans_type": "str",
    "sol_header": "def sol(words=['these', 'are', 'some', 'pretty', 'long', 'words']):",
    "sol_docstring": "    \"\"\"\n    Find the longest of a list of strings\n\n    Sample Input:\n    [\"cat\", \"dog\", \"sheep\", \"chimp\"]\n\n    Sample Output:\n    \"sheep\"\n    \"\"\"",
    "sol_bodies": [
      "    return max(words, key=len)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#12",
    "weight": 1.0
  },
  {
    "name": "LongestStr:1",
    "sat": "def sat(ans: str, words=['suquojurethy', 'zetenejubichicyj', 'dyzeroquyxipyfe']):\n    return ans in words and all(len(ans) >= len(w) for w in words)",
    "ans_type": "str",
    "sol_header": "def sol(words=['suquojurethy', 'zetenejubichicyj', 'dyzeroquyxipyfe']):",
    "sol_docstring": "    \"\"\"\n    Find the longest of a list of strings\n\n    Sample Input:\n    [\"cat\", \"dog\", \"sheep\", \"chimp\"]\n\n    Sample Output:\n    \"sheep\"\n    \"\"\"",
    "sol_bodies": [
      "    return max(words, key=len)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#12",
    "weight": 1.0
  },
  {
    "name": "LongestStr:2",
    "sat": "def sat(ans: str, words=['thusisequiw', 'tevozequetextupetha', 'texterut', 'zopuhesofowyk', 'chajokapechunekizic', 'hefuhyjiwakifyma', 'thopebom', 'pah']):\n    return ans in words and all(len(ans) >= len(w) for w in words)",
    "ans_type": "str",
    "sol_header": "def sol(words=['thusisequiw', 'tevozequetextupetha', 'texterut', 'zopuhesofowyk', 'chajokapechunekizic', 'hefuhyjiwakifyma', 'thopebom', 'pah']):",
    "sol_docstring": "    \"\"\"\n    Find the longest of a list of strings\n\n    Sample Input:\n    [\"cat\", \"dog\", \"sheep\", \"chimp\"]\n\n    Sample Output:\n    \"sheep\"\n    \"\"\"",
    "sol_bodies": [
      "    return max(words, key=len)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#12",
    "weight": 1.0
  },
  {
    "name": "LongestStr:3",
    "sat": "def sat(ans: str, words=['melo', 'zoj', 'wujololyfytew', 'barivitextyte', 'decipywiduvaq', 'ruty', 'gekusoduz']):\n    return ans in words and all(len(ans) >= len(w) for w in words)",
    "ans_type": "str",
    "sol_header": "def sol(words=['melo', 'zoj', 'wujololyfytew', 'barivitextyte', 'decipywiduvaq', 'ruty', 'gekusoduz']):",
    "sol_docstring": "    \"\"\"\n    Find the longest of a list of strings\n\n    Sample Input:\n    [\"cat\", \"dog\", \"sheep\", \"chimp\"]\n\n    Sample Output:\n    \"sheep\"\n    \"\"\"",
    "sol_bodies": [
      "    return max(words, key=len)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#12",
    "weight": 1.0
  },
  {
    "name": "LongestStr:4",
    "sat": "def sat(ans: str, words=['quicydynigatha', 'pethiquifegosych', 'jixotextoxa', 'pe', 'xona', 'cifuco', 'gyrejypifam']):\n    return ans in words and all(len(ans) >= len(w) for w in words)",
    "ans_type": "str",
    "sol_header": "def sol(words=['quicydynigatha', 'pethiquifegosych', 'jixotextoxa', 'pe', 'xona', 'cifuco', 'gyrejypifam']):",
    "sol_docstring": "    \"\"\"\n    Find the longest of a list of strings\n\n    Sample Input:\n    [\"cat\", \"dog\", \"sheep\", \"chimp\"]\n\n    Sample Output:\n    \"sheep\"\n    \"\"\"",
    "sol_bodies": [
      "    return max(words, key=len)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#12",
    "weight": 1.0
  },
  {
    "name": "CertifiedGCD:0",
    "sat": "def sat(ans: List[int], m=200004931, n=66679984):\n    gcd, a, b = ans\n    return m % gcd == n % gcd == 0 and a * m + b * n == gcd and gcd > 0",
    "ans_type": "List[int]",
    "sol_header": "def sol(m=200004931, n=66679984):",
    "sol_docstring": "    \"\"\"\n    Find the greatest common divisor of two integers m, n and a certificate a, b such that m*a + n*b = gcd\n\n    Sample Input:\n    20, 30\n\n    Sample Output:\n    10, -1, 1\n    \"\"\"",
    "sol_bodies": [
      "    \"\"\"\n    Derivation of solution below\n    Recursive solution guarantees a * (big % small) + b * small == gcd\n    Let d = big // small so (big % small) == big - small * d\n    gives a * (big - small * d) + b * small == gcd\n    or equivalently (b - a * d) * small + a * big == gcd\n    \"\"\"\n\n    def gcd_cert(small, big):\n        \"\"\"Returns gcd, a, b, such that small * a + big * b == gcd\"\"\"\n        assert 0 < small <= big\n        if big % small == 0:\n            return [small, 1, 0]\n        gcd, a, b = gcd_cert(big % small, small)\n        return [gcd, b - a * (big // small), a]\n\n    if m < n:\n        return gcd_cert(m, n)\n    gcd, a, b = gcd_cert(n, m)\n    return [gcd, b, a]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#13",
    "weight": 1.0
  },
  {
    "name": "CertifiedGCD:1",
    "sat": "def sat(ans: List[int], m=2642408, n=828886):\n    gcd, a, b = ans\n    return m % gcd == n % gcd == 0 and a * m + b * n == gcd and gcd > 0",
    "ans_type": "List[int]",
    "sol_header": "def sol(m=2642408, n=828886):",
    "sol_docstring": "    \"\"\"\n    Find the greatest common divisor of two integers m, n and a certificate a, b such that m*a + n*b = gcd\n\n    Sample Input:\n    20, 30\n\n    Sample Output:\n    10, -1, 1\n    \"\"\"",
    "sol_bodies": [
      "    \"\"\"\n    Derivation of solution below\n    Recursive solution guarantees a * (big % small) + b * small == gcd\n    Let d = big // small so (big % small) == big - small * d\n    gives a * (big - small * d) + b * small == gcd\n    or equivalently (b - a * d) * small + a * big == gcd\n    \"\"\"\n\n    def gcd_cert(small, big):\n        \"\"\"Returns gcd, a, b, such that small * a + big * b == gcd\"\"\"\n        assert 0 < small <= big\n        if big % small == 0:\n            return [small, 1, 0]\n        gcd, a, b = gcd_cert(big % small, small)\n        return [gcd, b - a * (big // small), a]\n\n    if m < n:\n        return gcd_cert(m, n)\n    gcd, a, b = gcd_cert(n, m)\n    return [gcd, b, a]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#13",
    "weight": 1.0
  },
  {
    "name": "CertifiedGCD:2",
    "sat": "def sat(ans: List[int], m=184428, n=105545439738):\n    gcd, a, b = ans\n    return m % gcd == n % gcd == 0 and a * m + b * n == gcd and gcd > 0",
    "ans_type": "List[int]",
    "sol_header": "def sol(m=184428, n=105545439738):",
    "sol_docstring": "    \"\"\"\n    Find the greatest common divisor of two integers m, n and a certificate a, b such that m*a + n*b = gcd\n\n    Sample Input:\n    20, 30\n\n    Sample Output:\n    10, -1, 1\n    \"\"\"",
    "sol_bodies": [
      "    \"\"\"\n    Derivation of solution below\n    Recursive solution guarantees a * (big % small) + b * small == gcd\n    Let d = big // small so (big % small) == big - small * d\n    gives a * (big - small * d) + b * small == gcd\n    or equivalently (b - a * d) * small + a * big == gcd\n    \"\"\"\n\n    def gcd_cert(small, big):\n        \"\"\"Returns gcd, a, b, such that small * a + big * b == gcd\"\"\"\n        assert 0 < small <= big\n        if big % small == 0:\n            return [small, 1, 0]\n        gcd, a, b = gcd_cert(big % small, small)\n        return [gcd, b - a * (big // small), a]\n\n    if m < n:\n        return gcd_cert(m, n)\n    gcd, a, b = gcd_cert(n, m)\n    return [gcd, b, a]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#13",
    "weight": 1.0
  },
  {
    "name": "CertifiedGCD:3",
    "sat": "def sat(ans: List[int], m=3956548155, n=103530):\n    gcd, a, b = ans\n    return m % gcd == n % gcd == 0 and a * m + b * n == gcd and gcd > 0",
    "ans_type": "List[int]",
    "sol_header": "def sol(m=3956548155, n=103530):",
    "sol_docstring": "    \"\"\"\n    Find the greatest common divisor of two integers m, n and a certificate a, b such that m*a + n*b = gcd\n\n    Sample Input:\n    20, 30\n\n    Sample Output:\n    10, -1, 1\n    \"\"\"",
    "sol_bodies": [
      "    \"\"\"\n    Derivation of solution below\n    Recursive solution guarantees a * (big % small) + b * small == gcd\n    Let d = big // small so (big % small) == big - small * d\n    gives a * (big - small * d) + b * small == gcd\n    or equivalently (b - a * d) * small + a * big == gcd\n    \"\"\"\n\n    def gcd_cert(small, big):\n        \"\"\"Returns gcd, a, b, such that small * a + big * b == gcd\"\"\"\n        assert 0 < small <= big\n        if big % small == 0:\n            return [small, 1, 0]\n        gcd, a, b = gcd_cert(big % small, small)\n        return [gcd, b - a * (big // small), a]\n\n    if m < n:\n        return gcd_cert(m, n)\n    gcd, a, b = gcd_cert(n, m)\n    return [gcd, b, a]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#13",
    "weight": 1.0
  },
  {
    "name": "CertifiedGCD:4",
    "sat": "def sat(ans: List[int], m=101920, n=55199657760):\n    gcd, a, b = ans\n    return m % gcd == n % gcd == 0 and a * m + b * n == gcd and gcd > 0",
    "ans_type": "List[int]",
    "sol_header": "def sol(m=101920, n=55199657760):",
    "sol_docstring": "    \"\"\"\n    Find the greatest common divisor of two integers m, n and a certificate a, b such that m*a + n*b = gcd\n\n    Sample Input:\n    20, 30\n\n    Sample Output:\n    10, -1, 1\n    \"\"\"",
    "sol_bodies": [
      "    \"\"\"\n    Derivation of solution below\n    Recursive solution guarantees a * (big % small) + b * small == gcd\n    Let d = big // small so (big % small) == big - small * d\n    gives a * (big - small * d) + b * small == gcd\n    or equivalently (b - a * d) * small + a * big == gcd\n    \"\"\"\n\n    def gcd_cert(small, big):\n        \"\"\"Returns gcd, a, b, such that small * a + big * b == gcd\"\"\"\n        assert 0 < small <= big\n        if big % small == 0:\n            return [small, 1, 0]\n        gcd, a, b = gcd_cert(big % small, small)\n        return [gcd, b - a * (big // small), a]\n\n    if m < n:\n        return gcd_cert(m, n)\n    gcd, a, b = gcd_cert(n, m)\n    return [gcd, b, a]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#13",
    "weight": 1.0
  },
  {
    "name": "AllPrefixes:0",
    "sat": "def sat(prefixes: List[str], s=\"donesezichethofalij\"):\n    return all(s.startswith(p) for p in prefixes) and len(set(prefixes)) > len(s)",
    "ans_type": "List[str]",
    "sol_header": "def sol(s=\"donesezichethofalij\"):",
    "sol_docstring": "    \"\"\"\n    Find all prefixes of a given string\n\n    Sample Input:\n    \"aabcd\"\n\n    Sample Output:\n    [\"\", \"a\", \"aa\", \"aab\", \"aabc\", \"aabcd\"]\n    \"\"\"",
    "sol_bodies": [
      "    return [s[:i] for i in range(len(s) + 1)]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#14",
    "weight": 1.0
  },
  {
    "name": "AllPrefixes:1",
    "sat": "def sat(prefixes: List[str], s=\"vuf\"):\n    return all(s.startswith(p) for p in prefixes) and len(set(prefixes)) > len(s)",
    "ans_type": "List[str]",
    "sol_header": "def sol(s=\"vuf\"):",
    "sol_docstring": "    \"\"\"\n    Find all prefixes of a given string\n\n    Sample Input:\n    \"aabcd\"\n\n    Sample Output:\n    [\"\", \"a\", \"aa\", \"aab\", \"aabc\", \"aabcd\"]\n    \"\"\"",
    "sol_bodies": [
      "    return [s[:i] for i in range(len(s) + 1)]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#14",
    "weight": 1.0
  },
  {
    "name": "AllPrefixes:2",
    "sat": "def sat(prefixes: List[str], s=\"t\"):\n    return all(s.startswith(p) for p in prefixes) and len(set(prefixes)) > len(s)",
    "ans_type": "List[str]",
    "sol_header": "def sol(s=\"t\"):",
    "sol_docstring": "    \"\"\"\n    Find all prefixes of a given string\n\n    Sample Input:\n    \"aabcd\"\n\n    Sample Output:\n    [\"\", \"a\", \"aa\", \"aab\", \"aabc\", \"aabcd\"]\n    \"\"\"",
    "sol_bodies": [
      "    return [s[:i] for i in range(len(s) + 1)]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#14",
    "weight": 1.0
  },
  {
    "name": "AllPrefixes:3",
    "sat": "def sat(prefixes: List[str], s=\"qu\"):\n    return all(s.startswith(p) for p in prefixes) and len(set(prefixes)) > len(s)",
    "ans_type": "List[str]",
    "sol_header": "def sol(s=\"qu\"):",
    "sol_docstring": "    \"\"\"\n    Find all prefixes of a given string\n\n    Sample Input:\n    \"aabcd\"\n\n    Sample Output:\n    [\"\", \"a\", \"aa\", \"aab\", \"aabc\", \"aabcd\"]\n    \"\"\"",
    "sol_bodies": [
      "    return [s[:i] for i in range(len(s) + 1)]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#14",
    "weight": 1.0
  },
  {
    "name": "AllPrefixes:4",
    "sat": "def sat(prefixes: List[str], s=\"dugethixuneku\"):\n    return all(s.startswith(p) for p in prefixes) and len(set(prefixes)) > len(s)",
    "ans_type": "List[str]",
    "sol_header": "def sol(s=\"dugethixuneku\"):",
    "sol_docstring": "    \"\"\"\n    Find all prefixes of a given string\n\n    Sample Input:\n    \"aabcd\"\n\n    Sample Output:\n    [\"\", \"a\", \"aa\", \"aab\", \"aabc\", \"aabcd\"]\n    \"\"\"",
    "sol_bodies": [
      "    return [s[:i] for i in range(len(s) + 1)]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#14",
    "weight": 1.0
  },
  {
    "name": "SpaceyRange:0",
    "sat": "def sat(ans: str, n=15):\n    return [int(i) for i in ans.split(' ')] == list(range(n + 1))",
    "ans_type": "str",
    "sol_header": "def sol(n=15):",
    "sol_docstring": "    \"\"\"\n    Find a string consisting of the non-negative integers up to n inclusive\n\n    Sample Input:\n    4\n\n    Sample Output:\n    '0 1 2 3 4'\n    \"\"\"",
    "sol_bodies": [
      "    return ' '.join(str(i) for i in range(n + 1))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#15",
    "weight": 1.0
  },
  {
    "name": "SpaceyRange:1",
    "sat": "def sat(ans: str, n=54635):\n    return [int(i) for i in ans.split(' ')] == list(range(n + 1))",
    "ans_type": "str",
    "sol_header": "def sol(n=54635):",
    "sol_docstring": "    \"\"\"\n    Find a string consisting of the non-negative integers up to n inclusive\n\n    Sample Input:\n    4\n\n    Sample Output:\n    '0 1 2 3 4'\n    \"\"\"",
    "sol_bodies": [
      "    return ' '.join(str(i) for i in range(n + 1))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#15",
    "weight": 1.0
  },
  {
    "name": "SpaceyRange:2",
    "sat": "def sat(ans: str, n=83):\n    return [int(i) for i in ans.split(' ')] == list(range(n + 1))",
    "ans_type": "str",
    "sol_header": "def sol(n=83):",
    "sol_docstring": "    \"\"\"\n    Find a string consisting of the non-negative integers up to n inclusive\n\n    Sample Input:\n    4\n\n    Sample Output:\n    '0 1 2 3 4'\n    \"\"\"",
    "sol_bodies": [
      "    return ' '.join(str(i) for i in range(n + 1))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#15",
    "weight": 1.0
  },
  {
    "name": "SpaceyRange:3",
    "sat": "def sat(ans: str, n=99847):\n    return [int(i) for i in ans.split(' ')] == list(range(n + 1))",
    "ans_type": "str",
    "sol_header": "def sol(n=99847):",
    "sol_docstring": "    \"\"\"\n    Find a string consisting of the non-negative integers up to n inclusive\n\n    Sample Input:\n    4\n\n    Sample Output:\n    '0 1 2 3 4'\n    \"\"\"",
    "sol_bodies": [
      "    return ' '.join(str(i) for i in range(n + 1))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#15",
    "weight": 1.0
  },
  {
    "name": "SpaceyRange:4",
    "sat": "def sat(ans: str, n=18215):\n    return [int(i) for i in ans.split(' ')] == list(range(n + 1))",
    "ans_type": "str",
    "sol_header": "def sol(n=18215):",
    "sol_docstring": "    \"\"\"\n    Find a string consisting of the non-negative integers up to n inclusive\n\n    Sample Input:\n    4\n\n    Sample Output:\n    '0 1 2 3 4'\n    \"\"\"",
    "sol_bodies": [
      "    return ' '.join(str(i) for i in range(n + 1))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#15",
    "weight": 1.0
  },
  {
    "name": "DistinctChars:0",
    "sat": "def sat(ans: List[str], s=\"The quick brown fox jumps over the lazy dog!\", n=28):\n    assert all(ans.count(c.lower()) == 1 for c in s)\n    assert all(c == c.lower() for c in ans)\n    assert all(c in s.lower() for c in ans)\n    return True",
    "ans_type": "List[str]",
    "sol_header": "def sol(s=\"The quick brown fox jumps over the lazy dog!\", n=28):",
    "sol_docstring": "    \"\"\"\n    Find the set of distinct characters in a string, ignoring case\n\n    Sample Input:\n    'HELlo', 4\n\n    Sample Output:\n    ['h', 'e', 'l', 'o']\n    \"\"\"",
    "sol_bodies": [
      "    return list(set(s.lower()))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#16",
    "weight": 1.0
  },
  {
    "name": "DistinctChars:1",
    "sat": "def sat(ans: List[str], s=\"Iu]K,>Q8w\", n=9):\n    assert all(ans.count(c.lower()) == 1 for c in s)\n    assert all(c == c.lower() for c in ans)\n    assert all(c in s.lower() for c in ans)\n    return True",
    "ans_type": "List[str]",
    "sol_header": "def sol(s=\"Iu]K,>Q8w\", n=9):",
    "sol_docstring": "    \"\"\"\n    Find the set of distinct characters in a string, ignoring case\n\n    Sample Input:\n    'HELlo', 4\n\n    Sample Output:\n    ['h', 'e', 'l', 'o']\n    \"\"\"",
    "sol_bodies": [
      "    return list(set(s.lower()))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#16",
    "weight": 1.0
  },
  {
    "name": "DistinctChars:2",
    "sat": "def sat(ans: List[str], s=\"JrUCk=ek&q^xBuvtm\", n=15):\n    assert all(ans.count(c.lower()) == 1 for c in s)\n    assert all(c == c.lower() for c in ans)\n    assert all(c in s.lower() for c in ans)\n    return True",
    "ans_type": "List[str]",
    "sol_header": "def sol(s=\"JrUCk=ek&q^xBuvtm\", n=15):",
    "sol_docstring": "    \"\"\"\n    Find the set of distinct characters in a string, ignoring case\n\n    Sample Input:\n    'HELlo', 4\n\n    Sample Output:\n    ['h', 'e', 'l', 'o']\n    \"\"\"",
    "sol_bodies": [
      "    return list(set(s.lower()))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#16",
    "weight": 1.0
  },
  {
    "name": "DistinctChars:3",
    "sat": "def sat(ans: List[str], s=\"V-wKeN\", n=6):\n    assert all(ans.count(c.lower()) == 1 for c in s)\n    assert all(c == c.lower() for c in ans)\n    assert all(c in s.lower() for c in ans)\n    return True",
    "ans_type": "List[str]",
    "sol_header": "def sol(s=\"V-wKeN\", n=6):",
    "sol_docstring": "    \"\"\"\n    Find the set of distinct characters in a string, ignoring case\n\n    Sample Input:\n    'HELlo', 4\n\n    Sample Output:\n    ['h', 'e', 'l', 'o']\n    \"\"\"",
    "sol_bodies": [
      "    return list(set(s.lower()))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#16",
    "weight": 1.0
  },
  {
    "name": "DistinctChars:4",
    "sat": "def sat(ans: List[str], s=\"F;J*qHN.^YC\", n=11):\n    assert all(ans.count(c.lower()) == 1 for c in s)\n    assert all(c == c.lower() for c in ans)\n    assert all(c in s.lower() for c in ans)\n    return True",
    "ans_type": "List[str]",
    "sol_header": "def sol(s=\"F;J*qHN.^YC\", n=11):",
    "sol_docstring": "    \"\"\"\n    Find the set of distinct characters in a string, ignoring case\n\n    Sample Input:\n    'HELlo', 4\n\n    Sample Output:\n    ['h', 'e', 'l', 'o']\n    \"\"\"",
    "sol_bodies": [
      "    return list(set(s.lower()))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#16",
    "weight": 1.0
  },
  {
    "name": "ParseMusic:0",
    "sat": "def sat(beats: List[int], score=\"o o o| o| .| .| .| o| o| o o o| .|\"):\n    return \" \".join({1: '.|', 2: 'o|', 4: 'o'}[b] for b in beats) == score",
    "ans_type": "List[int]",
    "sol_header": "def sol(score=\"o o o| o| .| .| .| o| o| o o o| .|\"):",
    "sol_docstring": "    \"\"\"\n    Parse a string of notes to beats, 'o'=4, 'o|'=2, '.|'=1\n\n    Example input:\n    'o o .| o|'\n\n    Example output:\n    [4, 4, 1, 2]\n    \"\"\"",
    "sol_bodies": [
      "    mapping = {'.|': 1, 'o|': 2, 'o': 4}\n    return [mapping[note] for note in score.split()]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#17",
    "weight": 1.0
  },
  {
    "name": "ParseMusic:1",
    "sat": "def sat(beats: List[int], score=\".| o .| o| o| o| o| .| o o\"):\n    return \" \".join({1: '.|', 2: 'o|', 4: 'o'}[b] for b in beats) == score",
    "ans_type": "List[int]",
    "sol_header": "def sol(score=\".| o .| o| o| o| o| .| o o\"):",
    "sol_docstring": "    \"\"\"\n    Parse a string of notes to beats, 'o'=4, 'o|'=2, '.|'=1\n\n    Example input:\n    'o o .| o|'\n\n    Example output:\n    [4, 4, 1, 2]\n    \"\"\"",
    "sol_bodies": [
      "    mapping = {'.|': 1, 'o|': 2, 'o': 4}\n    return [mapping[note] for note in score.split()]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#17",
    "weight": 1.0
  },
  {
    "name": "ParseMusic:2",
    "sat": "def sat(beats: List[int], score=\"o| .| .| .| .| o| o .| o| o| o\"):\n    return \" \".join({1: '.|', 2: 'o|', 4: 'o'}[b] for b in beats) == score",
    "ans_type": "List[int]",
    "sol_header": "def sol(score=\"o| .| .| .| .| o| o .| o| o| o\"):",
    "sol_docstring": "    \"\"\"\n    Parse a string of notes to beats, 'o'=4, 'o|'=2, '.|'=1\n\n    Example input:\n    'o o .| o|'\n\n    Example output:\n    [4, 4, 1, 2]\n    \"\"\"",
    "sol_bodies": [
      "    mapping = {'.|': 1, 'o|': 2, 'o': 4}\n    return [mapping[note] for note in score.split()]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#17",
    "weight": 1.0
  },
  {
    "name": "ParseMusic:3",
    "sat": "def sat(beats: List[int], score=\".| o|\"):\n    return \" \".join({1: '.|', 2: 'o|', 4: 'o'}[b] for b in beats) == score",
    "ans_type": "List[int]",
    "sol_header": "def sol(score=\".| o|\"):",
    "sol_docstring": "    \"\"\"\n    Parse a string of notes to beats, 'o'=4, 'o|'=2, '.|'=1\n\n    Example input:\n    'o o .| o|'\n\n    Example output:\n    [4, 4, 1, 2]\n    \"\"\"",
    "sol_bodies": [
      "    mapping = {'.|': 1, 'o|': 2, 'o': 4}\n    return [mapping[note] for note in score.split()]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#17",
    "weight": 1.0
  },
  {
    "name": "ParseMusic:4",
    "sat": "def sat(beats: List[int], score=\"\"):\n    return \" \".join({1: '.|', 2: 'o|', 4: 'o'}[b] for b in beats) == score",
    "ans_type": "List[int]",
    "sol_header": "def sol(score=\"\"):",
    "sol_docstring": "    \"\"\"\n    Parse a string of notes to beats, 'o'=4, 'o|'=2, '.|'=1\n\n    Example input:\n    'o o .| o|'\n\n    Example output:\n    [4, 4, 1, 2]\n    \"\"\"",
    "sol_bodies": [
      "    mapping = {'.|': 1, 'o|': 2, 'o': 4}\n    return [mapping[note] for note in score.split()]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#17",
    "weight": 1.0
  },
  {
    "name": "OverlappingCount:0",
    "sat": "def sat(ans: List[int], s=\"Bananannanaannanaanananananana\", sub=\"anan\", count=7):\n    return all(sub == s[i:i + len(sub)] and i >= 0 for i in ans) and len(set(ans)) >= count",
    "ans_type": "List[int]",
    "sol_header": "def sol(s=\"Bananannanaannanaanananananana\", sub=\"anan\", count=7):",
    "sol_docstring": "    \"\"\"\n    Find occurrences of a substring in a parent string *including overlaps*\n\n    Sample Input:\n    'helllo', 'll'\n\n    Sample Output:\n    [2, 3]\n    \"\"\"",
    "sol_bodies": [
      "    ans = []\n    for i in range(len(s) + 1):\n        if s[i:i + len(sub)] == sub:\n            ans.append(i)\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#18",
    "weight": 1.0
  },
  {
    "name": "OverlappingCount:1",
    "sat": "def sat(ans: List[int], s=\"halidykugadobezebothidububawuvejiquitextyrequamobythynethojahyquutatextoquuzilu\", sub=\"ne\", count=1):\n    return all(sub == s[i:i + len(sub)] and i >= 0 for i in ans) and len(set(ans)) >= count",
    "ans_type": "List[int]",
    "sol_header": "def sol(s=\"halidykugadobezebothidububawuvejiquitextyrequamobythynethojahyquutatextoquuzilu\", sub=\"ne\", count=1):",
    "sol_docstring": "    \"\"\"\n    Find occurrences of a substring in a parent string *including overlaps*\n\n    Sample Input:\n    'helllo', 'll'\n\n    Sample Output:\n    [2, 3]\n    \"\"\"",
    "sol_bodies": [
      "    ans = []\n    for i in range(len(s) + 1):\n        if s[i:i + len(sub)] == sub:\n            ans.append(i)\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#18",
    "weight": 1.0
  },
  {
    "name": "OverlappingCount:2",
    "sat": "def sat(ans: List[int], s=\"sutapifitextidavyjedakotextopogonudy\", sub=\"te\", count=2):\n    return all(sub == s[i:i + len(sub)] and i >= 0 for i in ans) and len(set(ans)) >= count",
    "ans_type": "List[int]",
    "sol_header": "def sol(s=\"sutapifitextidavyjedakotextopogonudy\", sub=\"te\", count=2):",
    "sol_docstring": "    \"\"\"\n    Find occurrences of a substring in a parent string *including overlaps*\n\n    Sample Input:\n    'helllo', 'll'\n\n    Sample Output:\n    [2, 3]\n    \"\"\"",
    "sol_bodies": [
      "    ans = []\n    for i in range(len(s) + 1):\n        if s[i:i + len(sub)] == sub:\n            ans.append(i)\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#18",
    "weight": 1.0
  },
  {
    "name": "OverlappingCount:3",
    "sat": "def sat(ans: List[int], s=\"fizyquohachoromuxuquatextidemihithacazynytytextukozarahuwyfuchyquyhidadytext\", sub=\"quohach\", count=1):\n    return all(sub == s[i:i + len(sub)] and i >= 0 for i in ans) and len(set(ans)) >= count",
    "ans_type": "List[int]",
    "sol_header": "def sol(s=\"fizyquohachoromuxuquatextidemihithacazynytytextukozarahuwyfuchyquyhidadytext\", sub=\"quohach\", count=1):",
    "sol_docstring": "    \"\"\"\n    Find occurrences of a substring in a parent string *including overlaps*\n\n    Sample Input:\n    'helllo', 'll'\n\n    Sample Output:\n    [2, 3]\n    \"\"\"",
    "sol_bodies": [
      "    ans = []\n    for i in range(len(s) + 1):\n        if s[i:i + len(sub)] == sub:\n            ans.append(i)\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#18",
    "weight": 1.0
  },
  {
    "name": "OverlappingCount:4",
    "sat": "def sat(ans: List[int], s=\"wutextega\", sub=\"xtega\", count=1):\n    return all(sub == s[i:i + len(sub)] and i >= 0 for i in ans) and len(set(ans)) >= count",
    "ans_type": "List[int]",
    "sol_header": "def sol(s=\"wutextega\", sub=\"xtega\", count=1):",
    "sol_docstring": "    \"\"\"\n    Find occurrences of a substring in a parent string *including overlaps*\n\n    Sample Input:\n    'helllo', 'll'\n\n    Sample Output:\n    [2, 3]\n    \"\"\"",
    "sol_bodies": [
      "    ans = []\n    for i in range(len(s) + 1):\n        if s[i:i + len(sub)] == sub:\n            ans.append(i)\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#18",
    "weight": 1.0
  },
  {
    "name": "SortNumbers:0",
    "sat": "def sat(ans: str, s=\"six one four three two nine eight\"):\n    nums = 'zero one two three four five six seven eight nine'.split()\n    return [nums.index(x) for x in ans.split(\" \")] == sorted([nums.index(x) for x in s.split(\" \")])",
    "ans_type": "str",
    "sol_header": "def sol(s=\"six one four three two nine eight\"):",
    "sol_docstring": "    \"\"\"\n    Sort numbers based on strings\n\n    Sample input\n    ---\n    \"six one four\"\n\n    Sample output\n    ---\n    \"one four six\"\n    \"\"\"",
    "sol_bodies": [
      "    nums = 'zero one two three four five six seven eight nine'.split()\n    arr = [nums.index(x) for x in s.split()]\n    arr.sort()\n    ans = \" \".join([nums[i] for i in arr])\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#19",
    "weight": 1.0
  },
  {
    "name": "SortNumbers:1",
    "sat": "def sat(ans: str, s=\"nine two four nine zero six six eight\"):\n    nums = 'zero one two three four five six seven eight nine'.split()\n    return [nums.index(x) for x in ans.split(\" \")] == sorted([nums.index(x) for x in s.split(\" \")])",
    "ans_type": "str",
    "sol_header": "def sol(s=\"nine two four nine zero six six eight\"):",
    "sol_docstring": "    \"\"\"\n    Sort numbers based on strings\n\n    Sample input\n    ---\n    \"six one four\"\n\n    Sample output\n    ---\n    \"one four six\"\n    \"\"\"",
    "sol_bodies": [
      "    nums = 'zero one two three four five six seven eight nine'.split()\n    arr = [nums.index(x) for x in s.split()]\n    arr.sort()\n    ans = \" \".join([nums[i] for i in arr])\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#19",
    "weight": 1.0
  },
  {
    "name": "SortNumbers:2",
    "sat": "def sat(ans: str, s=\"nine six two\"):\n    nums = 'zero one two three four five six seven eight nine'.split()\n    return [nums.index(x) for x in ans.split(\" \")] == sorted([nums.index(x) for x in s.split(\" \")])",
    "ans_type": "str",
    "sol_header": "def sol(s=\"nine six two\"):",
    "sol_docstring": "    \"\"\"\n    Sort numbers based on strings\n\n    Sample input\n    ---\n    \"six one four\"\n\n    Sample output\n    ---\n    \"one four six\"\n    \"\"\"",
    "sol_bodies": [
      "    nums = 'zero one two three four five six seven eight nine'.split()\n    arr = [nums.index(x) for x in s.split()]\n    arr.sort()\n    ans = \" \".join([nums[i] for i in arr])\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#19",
    "weight": 1.0
  },
  {
    "name": "SortNumbers:3",
    "sat": "def sat(ans: str, s=\"five nine four eight\"):\n    nums = 'zero one two three four five six seven eight nine'.split()\n    return [nums.index(x) for x in ans.split(\" \")] == sorted([nums.index(x) for x in s.split(\" \")])",
    "ans_type": "str",
    "sol_header": "def sol(s=\"five nine four eight\"):",
    "sol_docstring": "    \"\"\"\n    Sort numbers based on strings\n\n    Sample input\n    ---\n    \"six one four\"\n\n    Sample output\n    ---\n    \"one four six\"\n    \"\"\"",
    "sol_bodies": [
      "    nums = 'zero one two three four five six seven eight nine'.split()\n    arr = [nums.index(x) for x in s.split()]\n    arr.sort()\n    ans = \" \".join([nums[i] for i in arr])\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#19",
    "weight": 1.0
  },
  {
    "name": "SortNumbers:4",
    "sat": "def sat(ans: str, s=\"seven eight seven zero zero five one\"):\n    nums = 'zero one two three four five six seven eight nine'.split()\n    return [nums.index(x) for x in ans.split(\" \")] == sorted([nums.index(x) for x in s.split(\" \")])",
    "ans_type": "str",
    "sol_header": "def sol(s=\"seven eight seven zero zero five one\"):",
    "sol_docstring": "    \"\"\"\n    Sort numbers based on strings\n\n    Sample input\n    ---\n    \"six one four\"\n\n    Sample output\n    ---\n    \"one four six\"\n    \"\"\"",
    "sol_bodies": [
      "    nums = 'zero one two three four five six seven eight nine'.split()\n    arr = [nums.index(x) for x in s.split()]\n    arr.sort()\n    ans = \" \".join([nums[i] for i in arr])\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#19",
    "weight": 1.0
  },
  {
    "name": "FindClosePair:0",
    "sat": "def sat(inds: List[int], nums=[0.31, 21.3, 5.0, 9.0, 11.0, 5.01, 17.2]):\n    a, b = inds\n    assert a != b and a >= 0 and b >= 0\n    for i in range(len(nums)):\n        for j in range(i):\n            assert abs(nums[i] - nums[j]) >= abs(nums[b] - nums[a])\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[0.31, 21.3, 5.0, 9.0, 11.0, 5.01, 17.2]):",
    "sol_docstring": "    \"\"\"\n    Given a list of numbers, find the indices of the closest pair.\n\n    Sample Input:\n    [1.2, 5.25, 0.89, 21.0, 5.23]\n\n    Sample Output:\n    [4, 1]\n    \"\"\"",
    "sol_bodies": [
      "    best = [0, 1]\n    best_score = abs(nums[1] - nums[0])\n    for i in range(len(nums)):\n        for j in range(i):\n            score = abs(nums[i] - nums[j])\n            if score < best_score:\n                best_score = score\n                best = [i, j]\n    return best"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#20",
    "weight": 1.0
  },
  {
    "name": "FindClosePair:1",
    "sat": "def sat(inds: List[int], nums=[-7.587461542549912, 0.7494004368541578, 2.0142388071411013, -1.552072793834526, 0.44845194836415025]):\n    a, b = inds\n    assert a != b and a >= 0 and b >= 0\n    for i in range(len(nums)):\n        for j in range(i):\n            assert abs(nums[i] - nums[j]) >= abs(nums[b] - nums[a])\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[-7.587461542549912, 0.7494004368541578, 2.0142388071411013, -1.552072793834526, 0.44845194836415025]):",
    "sol_docstring": "    \"\"\"\n    Given a list of numbers, find the indices of the closest pair.\n\n    Sample Input:\n    [1.2, 5.25, 0.89, 21.0, 5.23]\n\n    Sample Output:\n    [4, 1]\n    \"\"\"",
    "sol_bodies": [
      "    best = [0, 1]\n    best_score = abs(nums[1] - nums[0])\n    for i in range(len(nums)):\n        for j in range(i):\n            score = abs(nums[i] - nums[j])\n            if score < best_score:\n                best_score = score\n                best = [i, j]\n    return best"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#20",
    "weight": 1.0
  },
  {
    "name": "FindClosePair:2",
    "sat": "def sat(inds: List[int], nums=[-5.253924550449174, 7.798134742325132, 2.84274998450722, -5.355403889716619, -8.14069894708204, 6.276599656475899]):\n    a, b = inds\n    assert a != b and a >= 0 and b >= 0\n    for i in range(len(nums)):\n        for j in range(i):\n            assert abs(nums[i] - nums[j]) >= abs(nums[b] - nums[a])\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[-5.253924550449174, 7.798134742325132, 2.84274998450722, -5.355403889716619, -8.14069894708204, 6.276599656475899]):",
    "sol_docstring": "    \"\"\"\n    Given a list of numbers, find the indices of the closest pair.\n\n    Sample Input:\n    [1.2, 5.25, 0.89, 21.0, 5.23]\n\n    Sample Output:\n    [4, 1]\n    \"\"\"",
    "sol_bodies": [
      "    best = [0, 1]\n    best_score = abs(nums[1] - nums[0])\n    for i in range(len(nums)):\n        for j in range(i):\n            score = abs(nums[i] - nums[j])\n            if score < best_score:\n                best_score = score\n                best = [i, j]\n    return best"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#20",
    "weight": 1.0
  },
  {
    "name": "FindClosePair:3",
    "sat": "def sat(inds: List[int], nums=[8.647950767409466, 6.069423836495417, 8.647950767409466, -4.483139827348948, 7.822521892934297, 6.339621174459673]):\n    a, b = inds\n    assert a != b and a >= 0 and b >= 0\n    for i in range(len(nums)):\n        for j in range(i):\n            assert abs(nums[i] - nums[j]) >= abs(nums[b] - nums[a])\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[8.647950767409466, 6.069423836495417, 8.647950767409466, -4.483139827348948, 7.822521892934297, 6.339621174459673]):",
    "sol_docstring": "    \"\"\"\n    Given a list of numbers, find the indices of the closest pair.\n\n    Sample Input:\n    [1.2, 5.25, 0.89, 21.0, 5.23]\n\n    Sample Output:\n    [4, 1]\n    \"\"\"",
    "sol_bodies": [
      "    best = [0, 1]\n    best_score = abs(nums[1] - nums[0])\n    for i in range(len(nums)):\n        for j in range(i):\n            score = abs(nums[i] - nums[j])\n            if score < best_score:\n                best_score = score\n                best = [i, j]\n    return best"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#20",
    "weight": 1.0
  },
  {
    "name": "FindClosePair:4",
    "sat": "def sat(inds: List[int], nums=[-2.4491102095531385, -2.4896924424294635]):\n    a, b = inds\n    assert a != b and a >= 0 and b >= 0\n    for i in range(len(nums)):\n        for j in range(i):\n            assert abs(nums[i] - nums[j]) >= abs(nums[b] - nums[a])\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[-2.4491102095531385, -2.4896924424294635]):",
    "sol_docstring": "    \"\"\"\n    Given a list of numbers, find the indices of the closest pair.\n\n    Sample Input:\n    [1.2, 5.25, 0.89, 21.0, 5.23]\n\n    Sample Output:\n    [4, 1]\n    \"\"\"",
    "sol_bodies": [
      "    best = [0, 1]\n    best_score = abs(nums[1] - nums[0])\n    for i in range(len(nums)):\n        for j in range(i):\n            score = abs(nums[i] - nums[j])\n            if score < best_score:\n                best_score = score\n                best = [i, j]\n    return best"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#20",
    "weight": 1.0
  },
  {
    "name": "Rescale:0",
    "sat": "def sat(ans: List[float], nums=[13.0, 17.0, 17.0, 15.5, 2.94]):\n    assert min(ans) == 0.0 and max(ans) == 1.0\n    a = min(nums)\n    b = max(nums)\n    for i in range(len(nums)):\n        x = a + (b - a) * ans[i]\n        assert abs(nums[i] - x) < 1e-6\n    return True",
    "ans_type": "List[float]",
    "sol_header": "def sol(nums=[13.0, 17.0, 17.0, 15.5, 2.94]):",
    "sol_docstring": "    \"\"\"\n    Rescale and shift numbers so that they cover the range [0, 1]\n\n    Sample input\n    ---\n    [18.5, 17.0, 18.0, 19.0, 18.0]\n\n    Sample output\n    ---\n    [0.75, 0.0, 0.5, 1.0, 0.5]\n    \"\"\"",
    "sol_bodies": [
      "    nums = nums.copy()\n\n    a = min(nums)\n    b = max(nums)\n    if b - a == 0:\n        return [0.0] + [1.0] * (len(nums) - 1)\n    for i in range(len(nums)):\n        nums[i] = (nums[i] - a) / (b - a)\n    return nums"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#21",
    "weight": 1.0
  },
  {
    "name": "Rescale:1",
    "sat": "def sat(ans: List[float], nums=[939.7119884829771, 939.7119884829771, 939.7119884829771]):\n    assert min(ans) == 0.0 and max(ans) == 1.0\n    a = min(nums)\n    b = max(nums)\n    for i in range(len(nums)):\n        x = a + (b - a) * ans[i]\n        assert abs(nums[i] - x) < 1e-6\n    return True",
    "ans_type": "List[float]",
    "sol_header": "def sol(nums=[939.7119884829771, 939.7119884829771, 939.7119884829771]):",
    "sol_docstring": "    \"\"\"\n    Rescale and shift numbers so that they cover the range [0, 1]\n\n    Sample input\n    ---\n    [18.5, 17.0, 18.0, 19.0, 18.0]\n\n    Sample output\n    ---\n    [0.75, 0.0, 0.5, 1.0, 0.5]\n    \"\"\"",
    "sol_bodies": [
      "    nums = nums.copy()\n\n    a = min(nums)\n    b = max(nums)\n    if b - a == 0:\n        return [0.0] + [1.0] * (len(nums) - 1)\n    for i in range(len(nums)):\n        nums[i] = (nums[i] - a) / (b - a)\n    return nums"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#21",
    "weight": 1.0
  },
  {
    "name": "Rescale:2",
    "sat": "def sat(ans: List[float], nums=[0.4458061970026967, -3.9939008694208376, -1.0757147773525169, 0.3895998276095692, 2.0191942234485825, -0.23989163788911685, -0.003822778565885754, -0.8237835423706446, -0.08413275419390705]):\n    assert min(ans) == 0.0 and max(ans) == 1.0\n    a = min(nums)\n    b = max(nums)\n    for i in range(len(nums)):\n        x = a + (b - a) * ans[i]\n        assert abs(nums[i] - x) < 1e-6\n    return True",
    "ans_type": "List[float]",
    "sol_header": "def sol(nums=[0.4458061970026967, -3.9939008694208376, -1.0757147773525169, 0.3895998276095692, 2.0191942234485825, -0.23989163788911685, -0.003822778565885754, -0.8237835423706446, -0.08413275419390705]):",
    "sol_docstring": "    \"\"\"\n    Rescale and shift numbers so that they cover the range [0, 1]\n\n    Sample input\n    ---\n    [18.5, 17.0, 18.0, 19.0, 18.0]\n\n    Sample output\n    ---\n    [0.75, 0.0, 0.5, 1.0, 0.5]\n    \"\"\"",
    "sol_bodies": [
      "    nums = nums.copy()\n\n    a = min(nums)\n    b = max(nums)\n    if b - a == 0:\n        return [0.0] + [1.0] * (len(nums) - 1)\n    for i in range(len(nums)):\n        nums[i] = (nums[i] - a) / (b - a)\n    return nums"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#21",
    "weight": 1.0
  },
  {
    "name": "Rescale:3",
    "sat": "def sat(ans: List[float], nums=[1.7162662285160908, -0.5573868669921508, -11.304736303883987, 1.166009156041828, 2.1833750395727782, 4.274594378665487, -0.45875107135742743, 0.0046661656727550556, 0.8537569786748028]):\n    assert min(ans) == 0.0 and max(ans) == 1.0\n    a = min(nums)\n    b = max(nums)\n    for i in range(len(nums)):\n        x = a + (b - a) * ans[i]\n        assert abs(nums[i] - x) < 1e-6\n    return True",
    "ans_type": "List[float]",
    "sol_header": "def sol(nums=[1.7162662285160908, -0.5573868669921508, -11.304736303883987, 1.166009156041828, 2.1833750395727782, 4.274594378665487, -0.45875107135742743, 0.0046661656727550556, 0.8537569786748028]):",
    "sol_docstring": "    \"\"\"\n    Rescale and shift numbers so that they cover the range [0, 1]\n\n    Sample input\n    ---\n    [18.5, 17.0, 18.0, 19.0, 18.0]\n\n    Sample output\n    ---\n    [0.75, 0.0, 0.5, 1.0, 0.5]\n    \"\"\"",
    "sol_bodies": [
      "    nums = nums.copy()\n\n    a = min(nums)\n    b = max(nums)\n    if b - a == 0:\n        return [0.0] + [1.0] * (len(nums) - 1)\n    for i in range(len(nums)):\n        nums[i] = (nums[i] - a) / (b - a)\n    return nums"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#21",
    "weight": 1.0
  },
  {
    "name": "Rescale:4",
    "sat": "def sat(ans: List[float], nums=[23.976551109194304, 1.4655002766247416]):\n    assert min(ans) == 0.0 and max(ans) == 1.0\n    a = min(nums)\n    b = max(nums)\n    for i in range(len(nums)):\n        x = a + (b - a) * ans[i]\n        assert abs(nums[i] - x) < 1e-6\n    return True",
    "ans_type": "List[float]",
    "sol_header": "def sol(nums=[23.976551109194304, 1.4655002766247416]):",
    "sol_docstring": "    \"\"\"\n    Rescale and shift numbers so that they cover the range [0, 1]\n\n    Sample input\n    ---\n    [18.5, 17.0, 18.0, 19.0, 18.0]\n\n    Sample output\n    ---\n    [0.75, 0.0, 0.5, 1.0, 0.5]\n    \"\"\"",
    "sol_bodies": [
      "    nums = nums.copy()\n\n    a = min(nums)\n    b = max(nums)\n    if b - a == 0:\n        return [0.0] + [1.0] * (len(nums) - 1)\n    for i in range(len(nums)):\n        nums[i] = (nums[i] - a) / (b - a)\n    return nums"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#21",
    "weight": 1.0
  },
  {
    "name": "FilterInts:0",
    "sat": "def sat(candidates: List[str], int_indices=[2, 4, 7, 9, 101]):\n    for i in int_indices:\n        int(candidates[i])\n    for i, s in enumerate(candidates):\n        if i not in int_indices:\n            try:\n                int(s)\n                return False\n            except ValueError:\n                pass\n    return True",
    "ans_type": "List[str]",
    "sol_header": "def sol(int_indices=[2, 4, 7, 9, 101]):",
    "sol_docstring": "    \"\"\"\n    Find a list of strings where the only valid integers are at the given indices\n\n    Sample input\n    ---\n    [2, 4, 5]\n\n    Sample output\n    ---\n    [\"cat\", \"2.7\", \"2\", \"\", \"3\", \"-17\", \"free\"]\n    \"\"\"",
    "sol_bodies": [
      "    if not int_indices:\n        return []\n    ans = [\"\"] * (1 + max(abs(i) for i in int_indices))\n    for i in int_indices:\n        ans[i] = \"17\"\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#22",
    "weight": 1.0
  },
  {
    "name": "FilterInts:1",
    "sat": "def sat(candidates: List[str], int_indices=[80, 17, 74]):\n    for i in int_indices:\n        int(candidates[i])\n    for i, s in enumerate(candidates):\n        if i not in int_indices:\n            try:\n                int(s)\n                return False\n            except ValueError:\n                pass\n    return True",
    "ans_type": "List[str]",
    "sol_header": "def sol(int_indices=[80, 17, 74]):",
    "sol_docstring": "    \"\"\"\n    Find a list of strings where the only valid integers are at the given indices\n\n    Sample input\n    ---\n    [2, 4, 5]\n\n    Sample output\n    ---\n    [\"cat\", \"2.7\", \"2\", \"\", \"3\", \"-17\", \"free\"]\n    \"\"\"",
    "sol_bodies": [
      "    if not int_indices:\n        return []\n    ans = [\"\"] * (1 + max(abs(i) for i in int_indices))\n    for i in int_indices:\n        ans[i] = \"17\"\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#22",
    "weight": 1.0
  },
  {
    "name": "FilterInts:2",
    "sat": "def sat(candidates: List[str], int_indices=[56, 37, 17, 83, 35, 22, 4, 78, 79]):\n    for i in int_indices:\n        int(candidates[i])\n    for i, s in enumerate(candidates):\n        if i not in int_indices:\n            try:\n                int(s)\n                return False\n            except ValueError:\n                pass\n    return True",
    "ans_type": "List[str]",
    "sol_header": "def sol(int_indices=[56, 37, 17, 83, 35, 22, 4, 78, 79]):",
    "sol_docstring": "    \"\"\"\n    Find a list of strings where the only valid integers are at the given indices\n\n    Sample input\n    ---\n    [2, 4, 5]\n\n    Sample output\n    ---\n    [\"cat\", \"2.7\", \"2\", \"\", \"3\", \"-17\", \"free\"]\n    \"\"\"",
    "sol_bodies": [
      "    if not int_indices:\n        return []\n    ans = [\"\"] * (1 + max(abs(i) for i in int_indices))\n    for i in int_indices:\n        ans[i] = \"17\"\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#22",
    "weight": 1.0
  },
  {
    "name": "FilterInts:3",
    "sat": "def sat(candidates: List[str], int_indices=[25, 65]):\n    for i in int_indices:\n        int(candidates[i])\n    for i, s in enumerate(candidates):\n        if i not in int_indices:\n            try:\n                int(s)\n                return False\n            except ValueError:\n                pass\n    return True",
    "ans_type": "List[str]",
    "sol_header": "def sol(int_indices=[25, 65]):",
    "sol_docstring": "    \"\"\"\n    Find a list of strings where the only valid integers are at the given indices\n\n    Sample input\n    ---\n    [2, 4, 5]\n\n    Sample output\n    ---\n    [\"cat\", \"2.7\", \"2\", \"\", \"3\", \"-17\", \"free\"]\n    \"\"\"",
    "sol_bodies": [
      "    if not int_indices:\n        return []\n    ans = [\"\"] * (1 + max(abs(i) for i in int_indices))\n    for i in int_indices:\n        ans[i] = \"17\"\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#22",
    "weight": 1.0
  },
  {
    "name": "FilterInts:4",
    "sat": "def sat(candidates: List[str], int_indices=[92, 74, 83, 90, 9, 76, 66, 0]):\n    for i in int_indices:\n        int(candidates[i])\n    for i, s in enumerate(candidates):\n        if i not in int_indices:\n            try:\n                int(s)\n                return False\n            except ValueError:\n                pass\n    return True",
    "ans_type": "List[str]",
    "sol_header": "def sol(int_indices=[92, 74, 83, 90, 9, 76, 66, 0]):",
    "sol_docstring": "    \"\"\"\n    Find a list of strings where the only valid integers are at the given indices\n\n    Sample input\n    ---\n    [2, 4, 5]\n\n    Sample output\n    ---\n    [\"cat\", \"2.7\", \"2\", \"\", \"3\", \"-17\", \"free\"]\n    \"\"\"",
    "sol_bodies": [
      "    if not int_indices:\n        return []\n    ans = [\"\"] * (1 + max(abs(i) for i in int_indices))\n    for i in int_indices:\n        ans[i] = \"17\"\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#22",
    "weight": 1.0
  },
  {
    "name": "StrLength:0",
    "sat": "def sat(lengths: List[int], strs=['pneumonoultramicroscopicsilicovolcanoconiosis', ' ', 'foo', '2.5']):\n    for length, s in zip(lengths, strs):\n        try:\n            s[length]\n            return False\n        except IndexError:\n            s[length - 1]\n    return len(lengths) == len(strs)",
    "ans_type": "List[int]",
    "sol_header": "def sol(strs=['pneumonoultramicroscopicsilicovolcanoconiosis', ' ', 'foo', '2.5']):",
    "sol_docstring": "    \"\"\"\n    Find the lengths of a list of non-empty strings\n\n    Sample input\n    ---\n    [\"foo\", \"bars\"]\n\n    Sample output\n    ---\n    [3, 4]\n    \"\"\"",
    "sol_bodies": [
      "    return [len(s) for s in strs]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#23",
    "weight": 1.0
  },
  {
    "name": "StrLength:1",
    "sat": "def sat(lengths: List[int], strs=['=i', '&?Jq 2aNHt', '?uCcQht', 'e>8=4jZNfhZl3&Mko-MfWd<^QR Vf7:2M', ']Y,G2U4ur-7X,T@(Gv$:Y0^C,-$+xM9$X2,*90|', '+>&?Qa%yLWZA2nBDQ8i)zvVWT', 'Ly+NcKgOvg3J)', 's$0^cow)Q917uY', 'ZSA$sIKe|pz@|[<kk,h[eFCiD#xxN7*G*Ic', '2q7eG maF4Gi8gJvJr[mgY,[jt(VL|2']):\n    for length, s in zip(lengths, strs):\n        try:\n            s[length]\n            return False\n        except IndexError:\n            s[length - 1]\n    return len(lengths) == len(strs)",
    "ans_type": "List[int]",
    "sol_header": "def sol(strs=['=i', '&?Jq 2aNHt', '?uCcQht', 'e>8=4jZNfhZl3&Mko-MfWd<^QR Vf7:2M', ']Y,G2U4ur-7X,T@(Gv$:Y0^C,-$+xM9$X2,*90|', '+>&?Qa%yLWZA2nBDQ8i)zvVWT', 'Ly+NcKgOvg3J)', 's$0^cow)Q917uY', 'ZSA$sIKe|pz@|[<kk,h[eFCiD#xxN7*G*Ic', '2q7eG maF4Gi8gJvJr[mgY,[jt(VL|2']):",
    "sol_docstring": "    \"\"\"\n    Find the lengths of a list of non-empty strings\n\n    Sample input\n    ---\n    [\"foo\", \"bars\"]\n\n    Sample output\n    ---\n    [3, 4]\n    \"\"\"",
    "sol_bodies": [
      "    return [len(s) for s in strs]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#23",
    "weight": 1.0
  },
  {
    "name": "StrLength:2",
    "sat": "def sat(lengths: List[int], strs=['A/io]X92K;9aWaICuk7[]p|;af9#L#&aIk6I4E=c8u', '64P#$', 'cOpGRh3@ RoUho:YtF9L>/%4=%?ry(+2', '&.Qf?cuJI%m.>pBZY', 'FUeoE;h(#,f5<jC>[%xwK9@EU', '2NNz-,|C*]Vu9E7|!7mA+ oM9<N', '[3 !D2ddGb4aY17(=Q7lQZ&f H)Hrp)]VHFnxy6Jp', 'wg#VJiO-', 'jwBAk$XQ&*95d;[j,Y+', '!t:$CE#)+Pk7De*V|*&Z@u&0+gIhto/&.P*=q|!hw']):\n    for length, s in zip(lengths, strs):\n        try:\n            s[length]\n            return False\n        except IndexError:\n            s[length - 1]\n    return len(lengths) == len(strs)",
    "ans_type": "List[int]",
    "sol_header": "def sol(strs=['A/io]X92K;9aWaICuk7[]p|;af9#L#&aIk6I4E=c8u', '64P#$', 'cOpGRh3@ RoUho:YtF9L>/%4=%?ry(+2', '&.Qf?cuJI%m.>pBZY', 'FUeoE;h(#,f5<jC>[%xwK9@EU', '2NNz-,|C*]Vu9E7|!7mA+ oM9<N', '[3 !D2ddGb4aY17(=Q7lQZ&f H)Hrp)]VHFnxy6Jp', 'wg#VJiO-', 'jwBAk$XQ&*95d;[j,Y+', '!t:$CE#)+Pk7De*V|*&Z@u&0+gIhto/&.P*=q|!hw']):",
    "sol_docstring": "    \"\"\"\n    Find the lengths of a list of non-empty strings\n\n    Sample input\n    ---\n    [\"foo\", \"bars\"]\n\n    Sample output\n    ---\n    [3, 4]\n    \"\"\"",
    "sol_bodies": [
      "    return [len(s) for s in strs]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#23",
    "weight": 1.0
  },
  {
    "name": "StrLength:3",
    "sat": "def sat(lengths: List[int], strs=['ij+OUM5ZP Q3?', '^D.i+GLGID@2oUVF4', 'VaLA:aPP@5eKY,WK9MS*Ez', '.%fR+&q&0>Y(l%O2ub5<YXU#K.?9g', 'bO6[sMEL.g0^+r0', 'yCKQT^6Ug4al|r!PiMOF[KHz^%:WYTi]-G', '4lORJ/yub%d5gR@@>ciSw-]geHu6NgF9au)r', 'ED!Bz=4nF6  z^kMW-3-&<Eoc9B604*yscpnhcmJ?/', '?!u7%E0G4Z.r- V9LL 1Cd(W9eL=E^58a2xuf)ZYj-ILLW', 'A|NlyRr8uQG2eJm4y<Bu,r#fz&eNB]=hp']):\n    for length, s in zip(lengths, strs):\n        try:\n            s[length]\n            return False\n        except IndexError:\n            s[length - 1]\n    return len(lengths) == len(strs)",
    "ans_type": "List[int]",
    "sol_header": "def sol(strs=['ij+OUM5ZP Q3?', '^D.i+GLGID@2oUVF4', 'VaLA:aPP@5eKY,WK9MS*Ez', '.%fR+&q&0>Y(l%O2ub5<YXU#K.?9g', 'bO6[sMEL.g0^+r0', 'yCKQT^6Ug4al|r!PiMOF[KHz^%:WYTi]-G', '4lORJ/yub%d5gR@@>ciSw-]geHu6NgF9au)r', 'ED!Bz=4nF6  z^kMW-3-&<Eoc9B604*yscpnhcmJ?/', '?!u7%E0G4Z.r- V9LL 1Cd(W9eL=E^58a2xuf)ZYj-ILLW', 'A|NlyRr8uQG2eJm4y<Bu,r#fz&eNB]=hp']):",
    "sol_docstring": "    \"\"\"\n    Find the lengths of a list of non-empty strings\n\n    Sample input\n    ---\n    [\"foo\", \"bars\"]\n\n    Sample output\n    ---\n    [3, 4]\n    \"\"\"",
    "sol_bodies": [
      "    return [len(s) for s in strs]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#23",
    "weight": 1.0
  },
  {
    "name": "StrLength:4",
    "sat": "def sat(lengths: List[int], strs=['g', ';TWy9!004X#d7!0p ', 'eaX%:#7S2IIIUe&#r3=EB1;5K)3j;1Vn', ']cz!vZ]Wq&O]sMR8D', ')o=#sAp-c8:SM&.yRBpCMmS)-', 'Ql d.i(UA/|sFqHQ/c3M>p]exH|sgXQt', 'mwoa[nS-[%R(rf5!)9o.M[', '23Q0Sugd(RKZ+GuLu', 'x^VP2ZX$8', 'q7(GrHGkG6er!7hX+ZeKolCgdlqI0(*um']):\n    for length, s in zip(lengths, strs):\n        try:\n            s[length]\n            return False\n        except IndexError:\n            s[length - 1]\n    return len(lengths) == len(strs)",
    "ans_type": "List[int]",
    "sol_header": "def sol(strs=['g', ';TWy9!004X#d7!0p ', 'eaX%:#7S2IIIUe&#r3=EB1;5K)3j;1Vn', ']cz!vZ]Wq&O]sMR8D', ')o=#sAp-c8:SM&.yRBpCMmS)-', 'Ql d.i(UA/|sFqHQ/c3M>p]exH|sgXQt', 'mwoa[nS-[%R(rf5!)9o.M[', '23Q0Sugd(RKZ+GuLu', 'x^VP2ZX$8', 'q7(GrHGkG6er!7hX+ZeKolCgdlqI0(*um']):",
    "sol_docstring": "    \"\"\"\n    Find the lengths of a list of non-empty strings\n\n    Sample input\n    ---\n    [\"foo\", \"bars\"]\n\n    Sample output\n    ---\n    [3, 4]\n    \"\"\"",
    "sol_bodies": [
      "    return [len(s) for s in strs]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#23",
    "weight": 1.0
  },
  {
    "name": "LargestDivisor:0",
    "sat": "def sat(d: int, n=123456):\n    return n % d == 0 and d < n and all(n % e for e in range(d + 1, n))",
    "ans_type": "int",
    "sol_header": "def sol(n=123456):",
    "sol_docstring": "    \"\"\"\n    Find the largest integer divisor of a number n that is less than n\n\n    Sample input\n    ---\n    1000\n\n    Sample output\n    ---\n    500\n    \"\"\"",
    "sol_bodies": [
      "    return next(d for d in range(n - 1, 0, -1) if n % d == 0)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#24",
    "weight": 1.0
  },
  {
    "name": "LargestDivisor:1",
    "sat": "def sat(d: int, n=17836):\n    return n % d == 0 and d < n and all(n % e for e in range(d + 1, n))",
    "ans_type": "int",
    "sol_header": "def sol(n=17836):",
    "sol_docstring": "    \"\"\"\n    Find the largest integer divisor of a number n that is less than n\n\n    Sample input\n    ---\n    1000\n\n    Sample output\n    ---\n    500\n    \"\"\"",
    "sol_bodies": [
      "    return next(d for d in range(n - 1, 0, -1) if n % d == 0)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#24",
    "weight": 1.0
  },
  {
    "name": "LargestDivisor:2",
    "sat": "def sat(d: int, n=71793):\n    return n % d == 0 and d < n and all(n % e for e in range(d + 1, n))",
    "ans_type": "int",
    "sol_header": "def sol(n=71793):",
    "sol_docstring": "    \"\"\"\n    Find the largest integer divisor of a number n that is less than n\n\n    Sample input\n    ---\n    1000\n\n    Sample output\n    ---\n    500\n    \"\"\"",
    "sol_bodies": [
      "    return next(d for d in range(n - 1, 0, -1) if n % d == 0)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#24",
    "weight": 1.0
  },
  {
    "name": "LargestDivisor:3",
    "sat": "def sat(d: int, n=15466):\n    return n % d == 0 and d < n and all(n % e for e in range(d + 1, n))",
    "ans_type": "int",
    "sol_header": "def sol(n=15466):",
    "sol_docstring": "    \"\"\"\n    Find the largest integer divisor of a number n that is less than n\n\n    Sample input\n    ---\n    1000\n\n    Sample output\n    ---\n    500\n    \"\"\"",
    "sol_bodies": [
      "    return next(d for d in range(n - 1, 0, -1) if n % d == 0)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#24",
    "weight": 1.0
  },
  {
    "name": "LargestDivisor:4",
    "sat": "def sat(d: int, n=57567):\n    return n % d == 0 and d < n and all(n % e for e in range(d + 1, n))",
    "ans_type": "int",
    "sol_header": "def sol(n=57567):",
    "sol_docstring": "    \"\"\"\n    Find the largest integer divisor of a number n that is less than n\n\n    Sample input\n    ---\n    1000\n\n    Sample output\n    ---\n    500\n    \"\"\"",
    "sol_bodies": [
      "    return next(d for d in range(n - 1, 0, -1) if n % d == 0)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#24",
    "weight": 1.0
  },
  {
    "name": "PrimeFactorization:0",
    "sat": "def sat(factors: List[int], n=123456, num_factors=8):\n    assert len(factors) == num_factors\n    prod = 1\n    for d in factors:\n        prod *= d\n        assert d > 1\n    return prod == n",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=123456, num_factors=8):",
    "sol_docstring": "    \"\"\"\n    Factor number n into a given number of non-trivial factors\n\n    Sample input\n    ---\n    1000, 6\n\n    Sample output\n    ---\n    [2, 2, 2, 5, 5, 5]\n    \"\"\"",
    "sol_bodies": [
      "    if num_factors == 0:\n        return []\n    if num_factors == 1:\n        return [n]\n    ans = []\n    for d in range(2, n):\n        while n % d == 0:\n            n //= d\n            ans.append(d)\n            if len(ans) == num_factors - 1:\n                ans.append(n)\n                return ans\n    assert False"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#25",
    "weight": 1.0
  },
  {
    "name": "PrimeFactorization:1",
    "sat": "def sat(factors: List[int], n=1339030, num_factors=6):\n    assert len(factors) == num_factors\n    prod = 1\n    for d in factors:\n        prod *= d\n        assert d > 1\n    return prod == n",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=1339030, num_factors=6):",
    "sol_docstring": "    \"\"\"\n    Factor number n into a given number of non-trivial factors\n\n    Sample input\n    ---\n    1000, 6\n\n    Sample output\n    ---\n    [2, 2, 2, 5, 5, 5]\n    \"\"\"",
    "sol_bodies": [
      "    if num_factors == 0:\n        return []\n    if num_factors == 1:\n        return [n]\n    ans = []\n    for d in range(2, n):\n        while n % d == 0:\n            n //= d\n            ans.append(d)\n            if len(ans) == num_factors - 1:\n                ans.append(n)\n                return ans\n    assert False"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#25",
    "weight": 1.0
  },
  {
    "name": "PrimeFactorization:2",
    "sat": "def sat(factors: List[int], n=141752, num_factors=6):\n    assert len(factors) == num_factors\n    prod = 1\n    for d in factors:\n        prod *= d\n        assert d > 1\n    return prod == n",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=141752, num_factors=6):",
    "sol_docstring": "    \"\"\"\n    Factor number n into a given number of non-trivial factors\n\n    Sample input\n    ---\n    1000, 6\n\n    Sample output\n    ---\n    [2, 2, 2, 5, 5, 5]\n    \"\"\"",
    "sol_bodies": [
      "    if num_factors == 0:\n        return []\n    if num_factors == 1:\n        return [n]\n    ans = []\n    for d in range(2, n):\n        while n % d == 0:\n            n //= d\n            ans.append(d)\n            if len(ans) == num_factors - 1:\n                ans.append(n)\n                return ans\n    assert False"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#25",
    "weight": 1.0
  },
  {
    "name": "PrimeFactorization:3",
    "sat": "def sat(factors: List[int], n=33088, num_factors=8):\n    assert len(factors) == num_factors\n    prod = 1\n    for d in factors:\n        prod *= d\n        assert d > 1\n    return prod == n",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=33088, num_factors=8):",
    "sol_docstring": "    \"\"\"\n    Factor number n into a given number of non-trivial factors\n\n    Sample input\n    ---\n    1000, 6\n\n    Sample output\n    ---\n    [2, 2, 2, 5, 5, 5]\n    \"\"\"",
    "sol_bodies": [
      "    if num_factors == 0:\n        return []\n    if num_factors == 1:\n        return [n]\n    ans = []\n    for d in range(2, n):\n        while n % d == 0:\n            n //= d\n            ans.append(d)\n            if len(ans) == num_factors - 1:\n                ans.append(n)\n                return ans\n    assert False"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#25",
    "weight": 1.0
  },
  {
    "name": "PrimeFactorization:4",
    "sat": "def sat(factors: List[int], n=2375171125400, num_factors=12):\n    assert len(factors) == num_factors\n    prod = 1\n    for d in factors:\n        prod *= d\n        assert d > 1\n    return prod == n",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=2375171125400, num_factors=12):",
    "sol_docstring": "    \"\"\"\n    Factor number n into a given number of non-trivial factors\n\n    Sample input\n    ---\n    1000, 6\n\n    Sample output\n    ---\n    [2, 2, 2, 5, 5, 5]\n    \"\"\"",
    "sol_bodies": [
      "    if num_factors == 0:\n        return []\n    if num_factors == 1:\n        return [n]\n    ans = []\n    for d in range(2, n):\n        while n % d == 0:\n            n //= d\n            ans.append(d)\n            if len(ans) == num_factors - 1:\n                ans.append(n)\n                return ans\n    assert False"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#25",
    "weight": 1.0
  },
  {
    "name": "Dedup:0",
    "sat": "def sat(ans: List[int], li=[2, 19, 2, 53, 1, 1, 2, 44, 17, 0, 19, 31]):\n    return set(ans) == set(li) and all(li.index(ans[i]) < li.index(ans[i + 1]) for i in range(len(ans) - 1))",
    "ans_type": "List[int]",
    "sol_header": "def sol(li=[2, 19, 2, 53, 1, 1, 2, 44, 17, 0, 19, 31]):",
    "sol_docstring": "    \"\"\"\n    Remove duplicates from a list of integers, preserving order\n\n    Sample input\n    ---\n    [1, 3, 2, 9, 2, 1, 55]\n\n    Sample output\n    ---\n    [1, 3, 2, 9, 55]\n    \"\"\"",
    "sol_bodies": [
      "    seen = set()\n    ans = []\n    for n in li:\n        if n not in seen:\n            ans.append(n)\n            seen.add(n)\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#26",
    "weight": 1.0
  },
  {
    "name": "Dedup:1",
    "sat": "def sat(ans: List[int], li=[3, 3, 7, 9, 7, 2, 9, 4, 1]):\n    return set(ans) == set(li) and all(li.index(ans[i]) < li.index(ans[i + 1]) for i in range(len(ans) - 1))",
    "ans_type": "List[int]",
    "sol_header": "def sol(li=[3, 3, 7, 9, 7, 2, 9, 4, 1]):",
    "sol_docstring": "    \"\"\"\n    Remove duplicates from a list of integers, preserving order\n\n    Sample input\n    ---\n    [1, 3, 2, 9, 2, 1, 55]\n\n    Sample output\n    ---\n    [1, 3, 2, 9, 55]\n    \"\"\"",
    "sol_bodies": [
      "    seen = set()\n    ans = []\n    for n in li:\n        if n not in seen:\n            ans.append(n)\n            seen.add(n)\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#26",
    "weight": 1.0
  },
  {
    "name": "Dedup:2",
    "sat": "def sat(ans: List[int], li=[3, 9, 8, 9, 3, 5, 1, 3, 5]):\n    return set(ans) == set(li) and all(li.index(ans[i]) < li.index(ans[i + 1]) for i in range(len(ans) - 1))",
    "ans_type": "List[int]",
    "sol_header": "def sol(li=[3, 9, 8, 9, 3, 5, 1, 3, 5]):",
    "sol_docstring": "    \"\"\"\n    Remove duplicates from a list of integers, preserving order\n\n    Sample input\n    ---\n    [1, 3, 2, 9, 2, 1, 55]\n\n    Sample output\n    ---\n    [1, 3, 2, 9, 55]\n    \"\"\"",
    "sol_bodies": [
      "    seen = set()\n    ans = []\n    for n in li:\n        if n not in seen:\n            ans.append(n)\n            seen.add(n)\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#26",
    "weight": 1.0
  },
  {
    "name": "Dedup:3",
    "sat": "def sat(ans: List[int], li=[3, 8, 2, 1, 1, 7, 7, 7, 5, 5, 5, 9, 3, 7, 7]):\n    return set(ans) == set(li) and all(li.index(ans[i]) < li.index(ans[i + 1]) for i in range(len(ans) - 1))",
    "ans_type": "List[int]",
    "sol_header": "def sol(li=[3, 8, 2, 1, 1, 7, 7, 7, 5, 5, 5, 9, 3, 7, 7]):",
    "sol_docstring": "    \"\"\"\n    Remove duplicates from a list of integers, preserving order\n\n    Sample input\n    ---\n    [1, 3, 2, 9, 2, 1, 55]\n\n    Sample output\n    ---\n    [1, 3, 2, 9, 55]\n    \"\"\"",
    "sol_bodies": [
      "    seen = set()\n    ans = []\n    for n in li:\n        if n not in seen:\n            ans.append(n)\n            seen.add(n)\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#26",
    "weight": 1.0
  },
  {
    "name": "Dedup:4",
    "sat": "def sat(ans: List[int], li=[0, 3, 3, 2, 7, 0, 0, 6, 2, 4, 4, 5]):\n    return set(ans) == set(li) and all(li.index(ans[i]) < li.index(ans[i + 1]) for i in range(len(ans) - 1))",
    "ans_type": "List[int]",
    "sol_header": "def sol(li=[0, 3, 3, 2, 7, 0, 0, 6, 2, 4, 4, 5]):",
    "sol_docstring": "    \"\"\"\n    Remove duplicates from a list of integers, preserving order\n\n    Sample input\n    ---\n    [1, 3, 2, 9, 2, 1, 55]\n\n    Sample output\n    ---\n    [1, 3, 2, 9, 55]\n    \"\"\"",
    "sol_bodies": [
      "    seen = set()\n    ans = []\n    for n in li:\n        if n not in seen:\n            ans.append(n)\n            seen.add(n)\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#26",
    "weight": 1.0
  },
  {
    "name": "FlipCase:0",
    "sat": "def sat(ans: str, s=\"FlIp ME!\"):\n    return len(ans) == len(s) and all({c, d} == {d.upper(), d.lower()} for c, d in zip(ans, s))",
    "ans_type": "str",
    "sol_header": "def sol(s=\"FlIp ME!\"):",
    "sol_docstring": "    \"\"\"\n    Flip case\n\n    Sample input\n    ---\n    'cAt'\n\n    Sample output\n    ---\n    'CaT'\n    \"\"\"",
    "sol_bodies": [
      "    return \"\".join(c.lower() if c.upper() == c else c.upper() for c in s)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#27",
    "weight": 1.0
  },
  {
    "name": "FlipCase:1",
    "sat": "def sat(ans: str, s=\"mKC(K2.a!Z|>sv3izC3!\"):\n    return len(ans) == len(s) and all({c, d} == {d.upper(), d.lower()} for c, d in zip(ans, s))",
    "ans_type": "str",
    "sol_header": "def sol(s=\"mKC(K2.a!Z|>sv3izC3!\"):",
    "sol_docstring": "    \"\"\"\n    Flip case\n\n    Sample input\n    ---\n    'cAt'\n\n    Sample output\n    ---\n    'CaT'\n    \"\"\"",
    "sol_bodies": [
      "    return \"\".join(c.lower() if c.upper() == c else c.upper() for c in s)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#27",
    "weight": 1.0
  },
  {
    "name": "FlipCase:2",
    "sat": "def sat(ans: str, s=\"K a&3 tE 1tSG B3v3y(\"):\n    return len(ans) == len(s) and all({c, d} == {d.upper(), d.lower()} for c, d in zip(ans, s))",
    "ans_type": "str",
    "sol_header": "def sol(s=\"K a&3 tE 1tSG B3v3y(\"):",
    "sol_docstring": "    \"\"\"\n    Flip case\n\n    Sample input\n    ---\n    'cAt'\n\n    Sample output\n    ---\n    'CaT'\n    \"\"\"",
    "sol_bodies": [
      "    return \"\".join(c.lower() if c.upper() == c else c.upper() for c in s)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#27",
    "weight": 1.0
  },
  {
    "name": "FlipCase:3",
    "sat": "def sat(ans: str, s=\"Sb31E#e<@3u\"):\n    return len(ans) == len(s) and all({c, d} == {d.upper(), d.lower()} for c, d in zip(ans, s))",
    "ans_type": "str",
    "sol_header": "def sol(s=\"Sb31E#e<@3u\"):",
    "sol_docstring": "    \"\"\"\n    Flip case\n\n    Sample input\n    ---\n    'cAt'\n\n    Sample output\n    ---\n    'CaT'\n    \"\"\"",
    "sol_bodies": [
      "    return \"\".join(c.lower() if c.upper() == c else c.upper() for c in s)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#27",
    "weight": 1.0
  },
  {
    "name": "FlipCase:4",
    "sat": "def sat(ans: str, s=\"q Y*.zv? !3B3::/3%F3\"):\n    return len(ans) == len(s) and all({c, d} == {d.upper(), d.lower()} for c, d in zip(ans, s))",
    "ans_type": "str",
    "sol_header": "def sol(s=\"q Y*.zv? !3B3::/3%F3\"):",
    "sol_docstring": "    \"\"\"\n    Flip case\n\n    Sample input\n    ---\n    'cAt'\n\n    Sample output\n    ---\n    'CaT'\n    \"\"\"",
    "sol_bodies": [
      "    return \"\".join(c.lower() if c.upper() == c else c.upper() for c in s)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#27",
    "weight": 1.0
  },
  {
    "name": "CatStrings:0",
    "sat": "def sat(cat: str, strings=['Will', 'i', 'am', 'Now', 'here']):\n    i = 0\n    for s in strings:\n        for c in s:\n            assert cat[i] == c\n            i += 1\n    return i == len(cat)",
    "ans_type": "str",
    "sol_header": "def sol(strings=['Will', 'i', 'am', 'Now', 'here']):",
    "sol_docstring": "    \"\"\"\n    Concatenate a list of strings\n\n    Sample input\n    ---\n    ['cat', 'dog', 'bird']\n\n    Sample output\n    ---\n    'catdogbird'\n    \"\"\"",
    "sol_bodies": [
      "    return \"\".join(strings)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#28",
    "weight": 1.0
  },
  {
    "name": "CatStrings:1",
    "sat": "def sat(cat: str, strings=['dufe', 'keret', 'kothihisedatextumuva', 'pe', 'sicelynyzysukydew', 'zu', 'kathubaki']):\n    i = 0\n    for s in strings:\n        for c in s:\n            assert cat[i] == c\n            i += 1\n    return i == len(cat)",
    "ans_type": "str",
    "sol_header": "def sol(strings=['dufe', 'keret', 'kothihisedatextumuva', 'pe', 'sicelynyzysukydew', 'zu', 'kathubaki']):",
    "sol_docstring": "    \"\"\"\n    Concatenate a list of strings\n\n    Sample input\n    ---\n    ['cat', 'dog', 'bird']\n\n    Sample output\n    ---\n    'catdogbird'\n    \"\"\"",
    "sol_bodies": [
      "    return \"\".join(strings)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#28",
    "weight": 1.0
  },
  {
    "name": "CatStrings:2",
    "sat": "def sat(cat: str, strings=[]):\n    i = 0\n    for s in strings:\n        for c in s:\n            assert cat[i] == c\n            i += 1\n    return i == len(cat)",
    "ans_type": "str",
    "sol_header": "def sol(strings=[]):",
    "sol_docstring": "    \"\"\"\n    Concatenate a list of strings\n\n    Sample input\n    ---\n    ['cat', 'dog', 'bird']\n\n    Sample output\n    ---\n    'catdogbird'\n    \"\"\"",
    "sol_bodies": [
      "    return \"\".join(strings)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#28",
    "weight": 1.0
  },
  {
    "name": "CatStrings:3",
    "sat": "def sat(cat: str, strings=['c', 'vawumich', 'textucagidyhikomuro', 'wuchiquusojahoz', 'l']):\n    i = 0\n    for s in strings:\n        for c in s:\n            assert cat[i] == c\n            i += 1\n    return i == len(cat)",
    "ans_type": "str",
    "sol_header": "def sol(strings=['c', 'vawumich', 'textucagidyhikomuro', 'wuchiquusojahoz', 'l']):",
    "sol_docstring": "    \"\"\"\n    Concatenate a list of strings\n\n    Sample input\n    ---\n    ['cat', 'dog', 'bird']\n\n    Sample output\n    ---\n    'catdogbird'\n    \"\"\"",
    "sol_bodies": [
      "    return \"\".join(strings)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#28",
    "weight": 1.0
  },
  {
    "name": "CatStrings:4",
    "sat": "def sat(cat: str, strings=['s', 'nutext', 'quoxezenukowyho', 'botidyhu', 'kicethytextithybaqu']):\n    i = 0\n    for s in strings:\n        for c in s:\n            assert cat[i] == c\n            i += 1\n    return i == len(cat)",
    "ans_type": "str",
    "sol_header": "def sol(strings=['s', 'nutext', 'quoxezenukowyho', 'botidyhu', 'kicethytextithybaqu']):",
    "sol_docstring": "    \"\"\"\n    Concatenate a list of strings\n\n    Sample input\n    ---\n    ['cat', 'dog', 'bird']\n\n    Sample output\n    ---\n    'catdogbird'\n    \"\"\"",
    "sol_bodies": [
      "    return \"\".join(strings)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#28",
    "weight": 1.0
  },
  {
    "name": "FindExtensions:0",
    "sat": "def sat(extensions: List[str], strings=['cat', 'dog', 'shatter', 'donut', 'at', 'todo'], prefix=\"do\"):\n    i = 0\n    for s in strings:\n        if s.startswith(prefix):\n            assert extensions[i] == s\n            i += 1\n    return i == len(extensions)",
    "ans_type": "List[str]",
    "sol_header": "def sol(strings=['cat', 'dog', 'shatter', 'donut', 'at', 'todo'], prefix=\"do\"):",
    "sol_docstring": "    \"\"\"\n    Find the strings in a list starting with a given prefix\n\n    Sample Input:\n    ['cat', 'car', 'fear', 'center'], 'ca'\n\n    Sample Output:\n    ['cat', 'car']\n    \"\"\"",
    "sol_bodies": [
      "    return [s for s in strings if s.startswith(prefix)]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#29",
    "weight": 1.0
  },
  {
    "name": "FindExtensions:1",
    "sat": "def sat(extensions: List[str], strings=['cot', 'z'], prefix=\"ca\"):\n    i = 0\n    for s in strings:\n        if s.startswith(prefix):\n            assert extensions[i] == s\n            i += 1\n    return i == len(extensions)",
    "ans_type": "List[str]",
    "sol_header": "def sol(strings=['cot', 'z'], prefix=\"ca\"):",
    "sol_docstring": "    \"\"\"\n    Find the strings in a list starting with a given prefix\n\n    Sample Input:\n    ['cat', 'car', 'fear', 'center'], 'ca'\n\n    Sample Output:\n    ['cat', 'car']\n    \"\"\"",
    "sol_bodies": [
      "    return [s for s in strings if s.startswith(prefix)]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#29",
    "weight": 1.0
  },
  {
    "name": "FindExtensions:2",
    "sat": "def sat(extensions: List[str], strings=['jof', 'thibi'], prefix=\"le\"):\n    i = 0\n    for s in strings:\n        if s.startswith(prefix):\n            assert extensions[i] == s\n            i += 1\n    return i == len(extensions)",
    "ans_type": "List[str]",
    "sol_header": "def sol(strings=['jof', 'thibi'], prefix=\"le\"):",
    "sol_docstring": "    \"\"\"\n    Find the strings in a list starting with a given prefix\n\n    Sample Input:\n    ['cat', 'car', 'fear', 'center'], 'ca'\n\n    Sample Output:\n    ['cat', 'car']\n    \"\"\"",
    "sol_bodies": [
      "    return [s for s in strings if s.startswith(prefix)]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#29",
    "weight": 1.0
  },
  {
    "name": "FindExtensions:3",
    "sat": "def sat(extensions: List[str], strings=['t'], prefix=\"t\"):\n    i = 0\n    for s in strings:\n        if s.startswith(prefix):\n            assert extensions[i] == s\n            i += 1\n    return i == len(extensions)",
    "ans_type": "List[str]",
    "sol_header": "def sol(strings=['t'], prefix=\"t\"):",
    "sol_docstring": "    \"\"\"\n    Find the strings in a list starting with a given prefix\n\n    Sample Input:\n    ['cat', 'car', 'fear', 'center'], 'ca'\n\n    Sample Output:\n    ['cat', 'car']\n    \"\"\"",
    "sol_bodies": [
      "    return [s for s in strings if s.startswith(prefix)]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#29",
    "weight": 1.0
  },
  {
    "name": "FindExtensions:4",
    "sat": "def sat(extensions: List[str], strings=['cpud', 'cpal', 'cv', 'cchut'], prefix=\"c\"):\n    i = 0\n    for s in strings:\n        if s.startswith(prefix):\n            assert extensions[i] == s\n            i += 1\n    return i == len(extensions)",
    "ans_type": "List[str]",
    "sol_header": "def sol(strings=['cpud', 'cpal', 'cv', 'cchut'], prefix=\"c\"):",
    "sol_docstring": "    \"\"\"\n    Find the strings in a list starting with a given prefix\n\n    Sample Input:\n    ['cat', 'car', 'fear', 'center'], 'ca'\n\n    Sample Output:\n    ['cat', 'car']\n    \"\"\"",
    "sol_bodies": [
      "    return [s for s in strings if s.startswith(prefix)]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#29",
    "weight": 1.0
  },
  {
    "name": "FindPositives:0",
    "sat": "def sat(positives: List[int], nums=[2, 2342, -2, 32, -8, -5, 2342, 0, -9, 44, 11]):\n    stack = positives[::-1]\n    for n in nums:\n        assert n <= 0 or n == stack.pop()\n    return stack == []",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[2, 2342, -2, 32, -8, -5, 2342, 0, -9, 44, 11]):",
    "sol_docstring": "    \"\"\"\n    Find the positive integers in a list\n\n    Sample Input:\n    [-1, 3, 19, -2, 0, 44, 0, 44, 11]\n\n    Sample Output:\n    [3, 19, 44, 44, 11]\n    \"\"\"",
    "sol_bodies": [
      "    return [i for i in nums if i > 0]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#30",
    "weight": 1.0
  },
  {
    "name": "FindPositives:1",
    "sat": "def sat(positives: List[int], nums=[53, 33, 73, 47, 35, 24, 56, 89, 85]):\n    stack = positives[::-1]\n    for n in nums:\n        assert n <= 0 or n == stack.pop()\n    return stack == []",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[53, 33, 73, 47, 35, 24, 56, 89, 85]):",
    "sol_docstring": "    \"\"\"\n    Find the positive integers in a list\n\n    Sample Input:\n    [-1, 3, 19, -2, 0, 44, 0, 44, 11]\n\n    Sample Output:\n    [3, 19, 44, 44, 11]\n    \"\"\"",
    "sol_bodies": [
      "    return [i for i in nums if i > 0]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#30",
    "weight": 1.0
  },
  {
    "name": "FindPositives:2",
    "sat": "def sat(positives: List[int], nums=[61, -64, -11, -3, -96, -69, -18, -99, 87]):\n    stack = positives[::-1]\n    for n in nums:\n        assert n <= 0 or n == stack.pop()\n    return stack == []",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[61, -64, -11, -3, -96, -69, -18, -99, 87]):",
    "sol_docstring": "    \"\"\"\n    Find the positive integers in a list\n\n    Sample Input:\n    [-1, 3, 19, -2, 0, 44, 0, 44, 11]\n\n    Sample Output:\n    [3, 19, 44, 44, 11]\n    \"\"\"",
    "sol_bodies": [
      "    return [i for i in nums if i > 0]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#30",
    "weight": 1.0
  },
  {
    "name": "FindPositives:3",
    "sat": "def sat(positives: List[int], nums=[62, 3, -84]):\n    stack = positives[::-1]\n    for n in nums:\n        assert n <= 0 or n == stack.pop()\n    return stack == []",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[62, 3, -84]):",
    "sol_docstring": "    \"\"\"\n    Find the positive integers in a list\n\n    Sample Input:\n    [-1, 3, 19, -2, 0, 44, 0, 44, 11]\n\n    Sample Output:\n    [3, 19, 44, 44, 11]\n    \"\"\"",
    "sol_bodies": [
      "    return [i for i in nums if i > 0]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#30",
    "weight": 1.0
  },
  {
    "name": "FindPositives:4",
    "sat": "def sat(positives: List[int], nums=[]):\n    stack = positives[::-1]\n    for n in nums:\n        assert n <= 0 or n == stack.pop()\n    return stack == []",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[]):",
    "sol_docstring": "    \"\"\"\n    Find the positive integers in a list\n\n    Sample Input:\n    [-1, 3, 19, -2, 0, 44, 0, 44, 11]\n\n    Sample Output:\n    [3, 19, 44, 44, 11]\n    \"\"\"",
    "sol_bodies": [
      "    return [i for i in nums if i > 0]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#30",
    "weight": 1.0
  },
  {
    "name": "FermatComposites:0",
    "sat": "def sat(certificates: List[int], nums=[1449, 14, 21, 105, 217]):\n    return all(pow(cert, n - 1, n) > 1 for cert, n in zip(certificates, nums)) and len(certificates) == len(nums)",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[1449, 14, 21, 105, 217]):",
    "sol_docstring": "    \"\"\"\n    Find Fermat composite certificates for a list of numbers > 1\n\n    Sample Input:\n    [1469]\n\n    Sample Output:\n    [3]  # because (3 ** 1468) % 1469 != 1\n    \"\"\"",
    "sol_bodies": [
      "    return [next(i for i in range(2, n) if pow(i, n - 1, n) > 1) for n in nums]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#31",
    "weight": 1.0
  },
  {
    "name": "FermatComposites:1",
    "sat": "def sat(certificates: List[int], nums=[2299290630, 2051931473, 1592080723, 533977507, 6381433197, 6645010323, 5590359939, 1543343895, 1032597423]):\n    return all(pow(cert, n - 1, n) > 1 for cert, n in zip(certificates, nums)) and len(certificates) == len(nums)",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[2299290630, 2051931473, 1592080723, 533977507, 6381433197, 6645010323, 5590359939, 1543343895, 1032597423]):",
    "sol_docstring": "    \"\"\"\n    Find Fermat composite certificates for a list of numbers > 1\n\n    Sample Input:\n    [1469]\n\n    Sample Output:\n    [3]  # because (3 ** 1468) % 1469 != 1\n    \"\"\"",
    "sol_bodies": [
      "    return [next(i for i in range(2, n) if pow(i, n - 1, n) > 1) for n in nums]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#31",
    "weight": 1.0
  },
  {
    "name": "FermatComposites:2",
    "sat": "def sat(certificates: List[int], nums=[962036141, 941419353, 5954955179, 5140095171, 3027040707, 6069862645, 591197645, 2485033263]):\n    return all(pow(cert, n - 1, n) > 1 for cert, n in zip(certificates, nums)) and len(certificates) == len(nums)",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[962036141, 941419353, 5954955179, 5140095171, 3027040707, 6069862645, 591197645, 2485033263]):",
    "sol_docstring": "    \"\"\"\n    Find Fermat composite certificates for a list of numbers > 1\n\n    Sample Input:\n    [1469]\n\n    Sample Output:\n    [3]  # because (3 ** 1468) % 1469 != 1\n    \"\"\"",
    "sol_bodies": [
      "    return [next(i for i in range(2, n) if pow(i, n - 1, n) > 1) for n in nums]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#31",
    "weight": 1.0
  },
  {
    "name": "FermatComposites:3",
    "sat": "def sat(certificates: List[int], nums=[99210055, 4171577125, 459354525, 1534026075, 4255533095, 2441396441, 155962261]):\n    return all(pow(cert, n - 1, n) > 1 for cert, n in zip(certificates, nums)) and len(certificates) == len(nums)",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[99210055, 4171577125, 459354525, 1534026075, 4255533095, 2441396441, 155962261]):",
    "sol_docstring": "    \"\"\"\n    Find Fermat composite certificates for a list of numbers > 1\n\n    Sample Input:\n    [1469]\n\n    Sample Output:\n    [3]  # because (3 ** 1468) % 1469 != 1\n    \"\"\"",
    "sol_bodies": [
      "    return [next(i for i in range(2, n) if pow(i, n - 1, n) > 1) for n in nums]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#31",
    "weight": 1.0
  },
  {
    "name": "FermatComposites:4",
    "sat": "def sat(certificates: List[int], nums=[2629304451, 4885026075, 2283948525, 4145214425]):\n    return all(pow(cert, n - 1, n) > 1 for cert, n in zip(certificates, nums)) and len(certificates) == len(nums)",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[2629304451, 4885026075, 2283948525, 4145214425]):",
    "sol_docstring": "    \"\"\"\n    Find Fermat composite certificates for a list of numbers > 1\n\n    Sample Input:\n    [1469]\n\n    Sample Output:\n    [3]  # because (3 ** 1468) % 1469 != 1\n    \"\"\"",
    "sol_bodies": [
      "    return [next(i for i in range(2, n) if pow(i, n - 1, n) > 1) for n in nums]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#31",
    "weight": 1.0
  },
  {
    "name": "OddDegreePolynomialRoot:0",
    "sat": "def sat(root: float, coeffs=[1, 2, 3, 17]):\n    return abs(sum(coeff * (root ** i) for i, coeff in enumerate(coeffs))) < 1e-4",
    "ans_type": "float",
    "sol_header": "def sol(coeffs=[1, 2, 3, 17]):",
    "sol_docstring": "    \"\"\"\n    Find a real root of an odd degree polynomial from its coefficients\n\n    Sample Input:\n    [1, 0, 8]\n\n    Sample Output:\n    -2.0  # 1*(-2.0)^3 + 8 == 0\n    \"\"\"",
    "sol_bodies": [
      "    def p(x):\n        return sum(coeff * (x ** i) for i, coeff in enumerate(coeffs))\n\n    for attempt in range(100):\n        a, b = -(10 ** attempt), (10 ** attempt)\n        p_a, p_b = p(a), p(b)\n        while p_a * p_b <= 0:\n            mid = (a + b) / 2\n            p_mid = p(mid)\n            if abs(p_mid) < 1e-4:\n                return mid\n            assert mid not in [a, b]\n            if p_mid * p_a > 0:\n                a, p_a = mid, p_mid\n            else:\n                b, p_b = mid, p_mid\n\n    assert False, \"Root finder failed on 100 attempts\""
    ],
    "module": "human_eval.py",
    "notes": "Polynomials of odd degree always have a real solution.\n\nInspired by [HumanEval](https://github.com/openai/human-eval) \\#32",
    "weight": 1.0
  },
  {
    "name": "OddDegreePolynomialRoot:1",
    "sat": "def sat(root: float, coeffs=[-1, -5, 4, -8, 3, -1, 0, 7]):\n    return abs(sum(coeff * (root ** i) for i, coeff in enumerate(coeffs))) < 1e-4",
    "ans_type": "float",
    "sol_header": "def sol(coeffs=[-1, -5, 4, -8, 3, -1, 0, 7]):",
    "sol_docstring": "    \"\"\"\n    Find a real root of an odd degree polynomial from its coefficients\n\n    Sample Input:\n    [1, 0, 8]\n\n    Sample Output:\n    -2.0  # 1*(-2.0)^3 + 8 == 0\n    \"\"\"",
    "sol_bodies": [
      "    def p(x):\n        return sum(coeff * (x ** i) for i, coeff in enumerate(coeffs))\n\n    for attempt in range(100):\n        a, b = -(10 ** attempt), (10 ** attempt)\n        p_a, p_b = p(a), p(b)\n        while p_a * p_b <= 0:\n            mid = (a + b) / 2\n            p_mid = p(mid)\n            if abs(p_mid) < 1e-4:\n                return mid\n            assert mid not in [a, b]\n            if p_mid * p_a > 0:\n                a, p_a = mid, p_mid\n            else:\n                b, p_b = mid, p_mid\n\n    assert False, \"Root finder failed on 100 attempts\""
    ],
    "module": "human_eval.py",
    "notes": "Polynomials of odd degree always have a real solution.\n\nInspired by [HumanEval](https://github.com/openai/human-eval) \\#32",
    "weight": 1.0
  },
  {
    "name": "OddDegreePolynomialRoot:2",
    "sat": "def sat(root: float, coeffs=[7, 1]):\n    return abs(sum(coeff * (root ** i) for i, coeff in enumerate(coeffs))) < 1e-4",
    "ans_type": "float",
    "sol_header": "def sol(coeffs=[7, 1]):",
    "sol_docstring": "    \"\"\"\n    Find a real root of an odd degree polynomial from its coefficients\n\n    Sample Input:\n    [1, 0, 8]\n\n    Sample Output:\n    -2.0  # 1*(-2.0)^3 + 8 == 0\n    \"\"\"",
    "sol_bodies": [
      "    def p(x):\n        return sum(coeff * (x ** i) for i, coeff in enumerate(coeffs))\n\n    for attempt in range(100):\n        a, b = -(10 ** attempt), (10 ** attempt)\n        p_a, p_b = p(a), p(b)\n        while p_a * p_b <= 0:\n            mid = (a + b) / 2\n            p_mid = p(mid)\n            if abs(p_mid) < 1e-4:\n                return mid\n            assert mid not in [a, b]\n            if p_mid * p_a > 0:\n                a, p_a = mid, p_mid\n            else:\n                b, p_b = mid, p_mid\n\n    assert False, \"Root finder failed on 100 attempts\""
    ],
    "module": "human_eval.py",
    "notes": "Polynomials of odd degree always have a real solution.\n\nInspired by [HumanEval](https://github.com/openai/human-eval) \\#32",
    "weight": 1.0
  },
  {
    "name": "OddDegreePolynomialRoot:3",
    "sat": "def sat(root: float, coeffs=[1, 4, 1, -7, 5, 0, -10, -9, 4, 9]):\n    return abs(sum(coeff * (root ** i) for i, coeff in enumerate(coeffs))) < 1e-4",
    "ans_type": "float",
    "sol_header": "def sol(coeffs=[1, 4, 1, -7, 5, 0, -10, -9, 4, 9]):",
    "sol_docstring": "    \"\"\"\n    Find a real root of an odd degree polynomial from its coefficients\n\n    Sample Input:\n    [1, 0, 8]\n\n    Sample Output:\n    -2.0  # 1*(-2.0)^3 + 8 == 0\n    \"\"\"",
    "sol_bodies": [
      "    def p(x):\n        return sum(coeff * (x ** i) for i, coeff in enumerate(coeffs))\n\n    for attempt in range(100):\n        a, b = -(10 ** attempt), (10 ** attempt)\n        p_a, p_b = p(a), p(b)\n        while p_a * p_b <= 0:\n            mid = (a + b) / 2\n            p_mid = p(mid)\n            if abs(p_mid) < 1e-4:\n                return mid\n            assert mid not in [a, b]\n            if p_mid * p_a > 0:\n                a, p_a = mid, p_mid\n            else:\n                b, p_b = mid, p_mid\n\n    assert False, \"Root finder failed on 100 attempts\""
    ],
    "module": "human_eval.py",
    "notes": "Polynomials of odd degree always have a real solution.\n\nInspired by [HumanEval](https://github.com/openai/human-eval) \\#32",
    "weight": 1.0
  },
  {
    "name": "OddDegreePolynomialRoot:4",
    "sat": "def sat(root: float, coeffs=[7, 8]):\n    return abs(sum(coeff * (root ** i) for i, coeff in enumerate(coeffs))) < 1e-4",
    "ans_type": "float",
    "sol_header": "def sol(coeffs=[7, 8]):",
    "sol_docstring": "    \"\"\"\n    Find a real root of an odd degree polynomial from its coefficients\n\n    Sample Input:\n    [1, 0, 8]\n\n    Sample Output:\n    -2.0  # 1*(-2.0)^3 + 8 == 0\n    \"\"\"",
    "sol_bodies": [
      "    def p(x):\n        return sum(coeff * (x ** i) for i, coeff in enumerate(coeffs))\n\n    for attempt in range(100):\n        a, b = -(10 ** attempt), (10 ** attempt)\n        p_a, p_b = p(a), p(b)\n        while p_a * p_b <= 0:\n            mid = (a + b) / 2\n            p_mid = p(mid)\n            if abs(p_mid) < 1e-4:\n                return mid\n            assert mid not in [a, b]\n            if p_mid * p_a > 0:\n                a, p_a = mid, p_mid\n            else:\n                b, p_b = mid, p_mid\n\n    assert False, \"Root finder failed on 100 attempts\""
    ],
    "module": "human_eval.py",
    "notes": "Polynomials of odd degree always have a real solution.\n\nInspired by [HumanEval](https://github.com/openai/human-eval) \\#32",
    "weight": 1.0
  },
  {
    "name": "TwoThirdsSorted:0",
    "sat": "def sat(li: List[int], orig=[1, -2, 3, 17, 8, 4, 12, 3, 18, 5, -29, 0, 0]):\n    assert orig[::3] == li[::3], \"Keep every third entry fixed\"\n    assert sorted(li) == sorted(orig), \"Not even a permutation\"\n    assert all(li[i] <= li[i + 1] for i in range(1, len(li) - 1, 3))\n    assert all(li[i] <= li[i + 2] for i in range(2, len(li) - 2, 3))\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(orig=[1, -2, 3, 17, 8, 4, 12, 3, 18, 5, -29, 0, 0]):",
    "sol_docstring": "    \"\"\"\n    Start with a list of integers, keep every third element in place and otherwise sort the list\n\n    Sample Input:\n    [8, 0, 7, 2, 9, 4, 1, 2, 8, 3]\n\n    Sample Output:\n    [8, 0, 2, 2, 4, 8, 1, 8, 9, 3]\n    \"\"\"",
    "sol_bodies": [
      "    n = len(orig)\n    your_list = orig[::3]\n    sub = orig[:]\n    for i in range(int((len(sub) + 2) / 3)):\n        sub.pop((2 * i))\n    sub = sorted(sub)\n    answ = []\n    for i in range(int(n / 3)):\n        answ.append(your_list[i])\n        answ.append(sub[i * 2])\n        answ.append(sub[i * 2 + 1])\n    if n % 3 == 1:\n        answ.append(your_list[-1])\n    if n % 3 == 2:\n        answ.append(your_list[-1])\n        answ.append(sub[-1])\n    return answ"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#33",
    "weight": 1.0
  },
  {
    "name": "TwoThirdsSorted:1",
    "sat": "def sat(li: List[int], orig=[-10, 9, 0, -6, 0, -7, -2, 4, 8, 2, 3, -9, -8, 9, -4, -4]):\n    assert orig[::3] == li[::3], \"Keep every third entry fixed\"\n    assert sorted(li) == sorted(orig), \"Not even a permutation\"\n    assert all(li[i] <= li[i + 1] for i in range(1, len(li) - 1, 3))\n    assert all(li[i] <= li[i + 2] for i in range(2, len(li) - 2, 3))\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(orig=[-10, 9, 0, -6, 0, -7, -2, 4, 8, 2, 3, -9, -8, 9, -4, -4]):",
    "sol_docstring": "    \"\"\"\n    Start with a list of integers, keep every third element in place and otherwise sort the list\n\n    Sample Input:\n    [8, 0, 7, 2, 9, 4, 1, 2, 8, 3]\n\n    Sample Output:\n    [8, 0, 2, 2, 4, 8, 1, 8, 9, 3]\n    \"\"\"",
    "sol_bodies": [
      "    n = len(orig)\n    your_list = orig[::3]\n    sub = orig[:]\n    for i in range(int((len(sub) + 2) / 3)):\n        sub.pop((2 * i))\n    sub = sorted(sub)\n    answ = []\n    for i in range(int(n / 3)):\n        answ.append(your_list[i])\n        answ.append(sub[i * 2])\n        answ.append(sub[i * 2 + 1])\n    if n % 3 == 1:\n        answ.append(your_list[-1])\n    if n % 3 == 2:\n        answ.append(your_list[-1])\n        answ.append(sub[-1])\n    return answ"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#33",
    "weight": 1.0
  },
  {
    "name": "TwoThirdsSorted:2",
    "sat": "def sat(li: List[int], orig=[0, 7, -3, -3, 2, 2, 5, -9, -9]):\n    assert orig[::3] == li[::3], \"Keep every third entry fixed\"\n    assert sorted(li) == sorted(orig), \"Not even a permutation\"\n    assert all(li[i] <= li[i + 1] for i in range(1, len(li) - 1, 3))\n    assert all(li[i] <= li[i + 2] for i in range(2, len(li) - 2, 3))\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(orig=[0, 7, -3, -3, 2, 2, 5, -9, -9]):",
    "sol_docstring": "    \"\"\"\n    Start with a list of integers, keep every third element in place and otherwise sort the list\n\n    Sample Input:\n    [8, 0, 7, 2, 9, 4, 1, 2, 8, 3]\n\n    Sample Output:\n    [8, 0, 2, 2, 4, 8, 1, 8, 9, 3]\n    \"\"\"",
    "sol_bodies": [
      "    n = len(orig)\n    your_list = orig[::3]\n    sub = orig[:]\n    for i in range(int((len(sub) + 2) / 3)):\n        sub.pop((2 * i))\n    sub = sorted(sub)\n    answ = []\n    for i in range(int(n / 3)):\n        answ.append(your_list[i])\n        answ.append(sub[i * 2])\n        answ.append(sub[i * 2 + 1])\n    if n % 3 == 1:\n        answ.append(your_list[-1])\n    if n % 3 == 2:\n        answ.append(your_list[-1])\n        answ.append(sub[-1])\n    return answ"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#33",
    "weight": 1.0
  },
  {
    "name": "TwoThirdsSorted:3",
    "sat": "def sat(li: List[int], orig=[-1, -1, 0, 6, 3, -1, 4, -1, 1, 9, -4, -1, 6, 4, -7, -4, 1]):\n    assert orig[::3] == li[::3], \"Keep every third entry fixed\"\n    assert sorted(li) == sorted(orig), \"Not even a permutation\"\n    assert all(li[i] <= li[i + 1] for i in range(1, len(li) - 1, 3))\n    assert all(li[i] <= li[i + 2] for i in range(2, len(li) - 2, 3))\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(orig=[-1, -1, 0, 6, 3, -1, 4, -1, 1, 9, -4, -1, 6, 4, -7, -4, 1]):",
    "sol_docstring": "    \"\"\"\n    Start with a list of integers, keep every third element in place and otherwise sort the list\n\n    Sample Input:\n    [8, 0, 7, 2, 9, 4, 1, 2, 8, 3]\n\n    Sample Output:\n    [8, 0, 2, 2, 4, 8, 1, 8, 9, 3]\n    \"\"\"",
    "sol_bodies": [
      "    n = len(orig)\n    your_list = orig[::3]\n    sub = orig[:]\n    for i in range(int((len(sub) + 2) / 3)):\n        sub.pop((2 * i))\n    sub = sorted(sub)\n    answ = []\n    for i in range(int(n / 3)):\n        answ.append(your_list[i])\n        answ.append(sub[i * 2])\n        answ.append(sub[i * 2 + 1])\n    if n % 3 == 1:\n        answ.append(your_list[-1])\n    if n % 3 == 2:\n        answ.append(your_list[-1])\n        answ.append(sub[-1])\n    return answ"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#33",
    "weight": 1.0
  },
  {
    "name": "TwoThirdsSorted:4",
    "sat": "def sat(li: List[int], orig=[]):\n    assert orig[::3] == li[::3], \"Keep every third entry fixed\"\n    assert sorted(li) == sorted(orig), \"Not even a permutation\"\n    assert all(li[i] <= li[i + 1] for i in range(1, len(li) - 1, 3))\n    assert all(li[i] <= li[i + 2] for i in range(2, len(li) - 2, 3))\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(orig=[]):",
    "sol_docstring": "    \"\"\"\n    Start with a list of integers, keep every third element in place and otherwise sort the list\n\n    Sample Input:\n    [8, 0, 7, 2, 9, 4, 1, 2, 8, 3]\n\n    Sample Output:\n    [8, 0, 2, 2, 4, 8, 1, 8, 9, 3]\n    \"\"\"",
    "sol_bodies": [
      "    n = len(orig)\n    your_list = orig[::3]\n    sub = orig[:]\n    for i in range(int((len(sub) + 2) / 3)):\n        sub.pop((2 * i))\n    sub = sorted(sub)\n    answ = []\n    for i in range(int(n / 3)):\n        answ.append(your_list[i])\n        answ.append(sub[i * 2])\n        answ.append(sub[i * 2 + 1])\n    if n % 3 == 1:\n        answ.append(your_list[-1])\n    if n % 3 == 2:\n        answ.append(your_list[-1])\n        answ.append(sub[-1])\n    return answ"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#33",
    "weight": 1.0
  },
  {
    "name": "UniqueSorted:0",
    "sat": "def sat(li: List[int], orig=[1, 1, 3, 2, 0, 8, 32, -4, 0]):\n    for i in range(len(li) - 1):\n        assert li[i] < li[i + 1]\n        assert li[i] in orig\n    for n in orig:\n        assert n in li\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(orig=[1, 1, 3, 2, 0, 8, 32, -4, 0]):",
    "sol_docstring": "    \"\"\"\n    Find an increasing sequence consisting of the elements of the original list.\n\n    Sample Input:\n    [8, 0, 7, 2, 9, 4, 4, -2, 8, 3]\n\n    Sample Output:\n    [-2, 0, 2, 3, 4, 7, 8, 9]\n    \"\"\"",
    "sol_bodies": [
      "    my_list = sorted(set(orig))\n    return my_list"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#34",
    "weight": 1.0
  },
  {
    "name": "UniqueSorted:1",
    "sat": "def sat(li: List[int], orig=[-9, 1, -5, 6, -1, 3, 5, 8, -10, -2, 3, -9, -10]):\n    for i in range(len(li) - 1):\n        assert li[i] < li[i + 1]\n        assert li[i] in orig\n    for n in orig:\n        assert n in li\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(orig=[-9, 1, -5, 6, -1, 3, 5, 8, -10, -2, 3, -9, -10]):",
    "sol_docstring": "    \"\"\"\n    Find an increasing sequence consisting of the elements of the original list.\n\n    Sample Input:\n    [8, 0, 7, 2, 9, 4, 4, -2, 8, 3]\n\n    Sample Output:\n    [-2, 0, 2, 3, 4, 7, 8, 9]\n    \"\"\"",
    "sol_bodies": [
      "    my_list = sorted(set(orig))\n    return my_list"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#34",
    "weight": 1.0
  },
  {
    "name": "UniqueSorted:2",
    "sat": "def sat(li: List[int], orig=[-3, 7, 9, -10, -10, 5, 2, 8]):\n    for i in range(len(li) - 1):\n        assert li[i] < li[i + 1]\n        assert li[i] in orig\n    for n in orig:\n        assert n in li\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(orig=[-3, 7, 9, -10, -10, 5, 2, 8]):",
    "sol_docstring": "    \"\"\"\n    Find an increasing sequence consisting of the elements of the original list.\n\n    Sample Input:\n    [8, 0, 7, 2, 9, 4, 4, -2, 8, 3]\n\n    Sample Output:\n    [-2, 0, 2, 3, 4, 7, 8, 9]\n    \"\"\"",
    "sol_bodies": [
      "    my_list = sorted(set(orig))\n    return my_list"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#34",
    "weight": 1.0
  },
  {
    "name": "UniqueSorted:3",
    "sat": "def sat(li: List[int], orig=[-6]):\n    for i in range(len(li) - 1):\n        assert li[i] < li[i + 1]\n        assert li[i] in orig\n    for n in orig:\n        assert n in li\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(orig=[-6]):",
    "sol_docstring": "    \"\"\"\n    Find an increasing sequence consisting of the elements of the original list.\n\n    Sample Input:\n    [8, 0, 7, 2, 9, 4, 4, -2, 8, 3]\n\n    Sample Output:\n    [-2, 0, 2, 3, 4, 7, 8, 9]\n    \"\"\"",
    "sol_bodies": [
      "    my_list = sorted(set(orig))\n    return my_list"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#34",
    "weight": 1.0
  },
  {
    "name": "UniqueSorted:4",
    "sat": "def sat(li: List[int], orig=[1, -5, 6, 2, -7, -6, 5, -5, 3, 7, 4, -10, -2, 3, 7, 9, -3, 8, 7]):\n    for i in range(len(li) - 1):\n        assert li[i] < li[i + 1]\n        assert li[i] in orig\n    for n in orig:\n        assert n in li\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(orig=[1, -5, 6, 2, -7, -6, 5, -5, 3, 7, 4, -10, -2, 3, 7, 9, -3, 8, 7]):",
    "sol_docstring": "    \"\"\"\n    Find an increasing sequence consisting of the elements of the original list.\n\n    Sample Input:\n    [8, 0, 7, 2, 9, 4, 4, -2, 8, 3]\n\n    Sample Output:\n    [-2, 0, 2, 3, 4, 7, 8, 9]\n    \"\"\"",
    "sol_bodies": [
      "    my_list = sorted(set(orig))\n    return my_list"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#34",
    "weight": 1.0
  },
  {
    "name": "MaxInt:0",
    "sat": "def sat(m: int, hello=[1, 31, 3, 2, 0, 18, 32, -4, 2, -1000, 3502145, 3502145, 21, 18, 2, 60]):\n    return m in hello and not any(m < i for i in hello)",
    "ans_type": "int",
    "sol_header": "def sol(hello=[1, 31, 3, 2, 0, 18, 32, -4, 2, -1000, 3502145, 3502145, 21, 18, 2, 60]):",
    "sol_docstring": "    \"\"\"\n    Find the largest integer in a sequence\n\n    Sample Input:\n    [8, 0, 1, 4, 9, 3, 4, -2, 8, 3]\n\n    Sample Output:\n    9\n    \"\"\"",
    "sol_bodies": [
      "    return max(hello)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#35",
    "weight": 1.0
  },
  {
    "name": "MaxInt:1",
    "sat": "def sat(m: int, hello=[2, 2, 2, -4, -2, -5, -4, 0, -5, -10, 1, -1, -1, 2]):\n    return m in hello and not any(m < i for i in hello)",
    "ans_type": "int",
    "sol_header": "def sol(hello=[2, 2, 2, -4, -2, -5, -4, 0, -5, -10, 1, -1, -1, 2]):",
    "sol_docstring": "    \"\"\"\n    Find the largest integer in a sequence\n\n    Sample Input:\n    [8, 0, 1, 4, 9, 3, 4, -2, 8, 3]\n\n    Sample Output:\n    9\n    \"\"\"",
    "sol_bodies": [
      "    return max(hello)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#35",
    "weight": 1.0
  },
  {
    "name": "MaxInt:2",
    "sat": "def sat(m: int, hello=[8, -1, -8, 1, -10]):\n    return m in hello and not any(m < i for i in hello)",
    "ans_type": "int",
    "sol_header": "def sol(hello=[8, -1, -8, 1, -10]):",
    "sol_docstring": "    \"\"\"\n    Find the largest integer in a sequence\n\n    Sample Input:\n    [8, 0, 1, 4, 9, 3, 4, -2, 8, 3]\n\n    Sample Output:\n    9\n    \"\"\"",
    "sol_bodies": [
      "    return max(hello)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#35",
    "weight": 1.0
  },
  {
    "name": "MaxInt:3",
    "sat": "def sat(m: int, hello=[-8, 1, 9, 4, 4, 0, -1, 8, 2, 3, 5, 9, 2, -1, 9]):\n    return m in hello and not any(m < i for i in hello)",
    "ans_type": "int",
    "sol_header": "def sol(hello=[-8, 1, 9, 4, 4, 0, -1, 8, 2, 3, 5, 9, 2, -1, 9]):",
    "sol_docstring": "    \"\"\"\n    Find the largest integer in a sequence\n\n    Sample Input:\n    [8, 0, 1, 4, 9, 3, 4, -2, 8, 3]\n\n    Sample Output:\n    9\n    \"\"\"",
    "sol_bodies": [
      "    return max(hello)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#35",
    "weight": 1.0
  },
  {
    "name": "MaxInt:4",
    "sat": "def sat(m: int, hello=[5, 2, -10, -2, -4, 2, 3, -5, 9, 0]):\n    return m in hello and not any(m < i for i in hello)",
    "ans_type": "int",
    "sol_header": "def sol(hello=[5, 2, -10, -2, -4, 2, 3, -5, 9, 0]):",
    "sol_docstring": "    \"\"\"\n    Find the largest integer in a sequence\n\n    Sample Input:\n    [8, 0, 1, 4, 9, 3, 4, -2, 8, 3]\n\n    Sample Output:\n    9\n    \"\"\"",
    "sol_bodies": [
      "    return max(hello)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#35",
    "weight": 1.0
  },
  {
    "name": "SevenElevenThirteen:0",
    "sat": "def sat(li: List[List[int]], n=19723, lower=1000):\n    assert len({(i, j) for i, j in li}) >= lower, \"not enough 7's (ignoring duplicates)\"\n    return all(str(i)[j] == '7' and (i % 11 == 0 or i % 13 == 0) and 0 <= i < n and 0 <= j for i, j in li)",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(n=19723, lower=1000):",
    "sol_docstring": "    \"\"\"\n    Find all 7's in integers less than n that are divisible by 11 or 13\n\n    Sample Input:\n    79, 3\n\n    Sample Output:\n    [[77, 0], [77, 1], [78, 0]]\n    \"\"\"",
    "sol_bodies": [
      "    return [[i, j] for i in range(n) if (i % 11 == 0 or i % 13 == 0) for j, c in enumerate(str(i)) if c == '7']"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#36",
    "weight": 1.0
  },
  {
    "name": "SevenElevenThirteen:1",
    "sat": "def sat(li: List[List[int]], n=5, lower=0):\n    assert len({(i, j) for i, j in li}) >= lower, \"not enough 7's (ignoring duplicates)\"\n    return all(str(i)[j] == '7' and (i % 11 == 0 or i % 13 == 0) and 0 <= i < n and 0 <= j for i, j in li)",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(n=5, lower=0):",
    "sol_docstring": "    \"\"\"\n    Find all 7's in integers less than n that are divisible by 11 or 13\n\n    Sample Input:\n    79, 3\n\n    Sample Output:\n    [[77, 0], [77, 1], [78, 0]]\n    \"\"\"",
    "sol_bodies": [
      "    return [[i, j] for i in range(n) if (i % 11 == 0 or i % 13 == 0) for j, c in enumerate(str(i)) if c == '7']"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#36",
    "weight": 1.0
  },
  {
    "name": "SevenElevenThirteen:2",
    "sat": "def sat(li: List[List[int]], n=8, lower=0):\n    assert len({(i, j) for i, j in li}) >= lower, \"not enough 7's (ignoring duplicates)\"\n    return all(str(i)[j] == '7' and (i % 11 == 0 or i % 13 == 0) and 0 <= i < n and 0 <= j for i, j in li)",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(n=8, lower=0):",
    "sol_docstring": "    \"\"\"\n    Find all 7's in integers less than n that are divisible by 11 or 13\n\n    Sample Input:\n    79, 3\n\n    Sample Output:\n    [[77, 0], [77, 1], [78, 0]]\n    \"\"\"",
    "sol_bodies": [
      "    return [[i, j] for i in range(n) if (i % 11 == 0 or i % 13 == 0) for j, c in enumerate(str(i)) if c == '7']"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#36",
    "weight": 1.0
  },
  {
    "name": "SevenElevenThirteen:3",
    "sat": "def sat(li: List[List[int]], n=11, lower=0):\n    assert len({(i, j) for i, j in li}) >= lower, \"not enough 7's (ignoring duplicates)\"\n    return all(str(i)[j] == '7' and (i % 11 == 0 or i % 13 == 0) and 0 <= i < n and 0 <= j for i, j in li)",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(n=11, lower=0):",
    "sol_docstring": "    \"\"\"\n    Find all 7's in integers less than n that are divisible by 11 or 13\n\n    Sample Input:\n    79, 3\n\n    Sample Output:\n    [[77, 0], [77, 1], [78, 0]]\n    \"\"\"",
    "sol_bodies": [
      "    return [[i, j] for i in range(n) if (i % 11 == 0 or i % 13 == 0) for j, c in enumerate(str(i)) if c == '7']"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#36",
    "weight": 1.0
  },
  {
    "name": "HalfSorted:0",
    "sat": "def sat(li: List[int], orig=[1, 6, 3, 41, 19, 4, 12, 3, 18, 5, -29, 0, 19521]):\n    return orig[1::2] == li[1::2] and li[::2] == sorted(orig[::2])",
    "ans_type": "List[int]",
    "sol_header": "def sol(orig=[1, 6, 3, 41, 19, 4, 12, 3, 18, 5, -29, 0, 19521]):",
    "sol_docstring": "    \"\"\"\n    Start with a list of integers, keep every other element in place and otherwise sort the list\n\n    Sample Input:\n    [8, 0, 7, 2, 9, 4, 1, 2, 8, 3]\n\n    Sample Output:\n    [1, 0, 2, 2, 4, 8, 8, 8, 9, 3]\n    \"\"\"",
    "sol_bodies": [
      "    n = len(orig)\n    odds = orig[1::2]\n    evens = sorted(orig[::2])\n    ans = []\n    for i in range(len(evens)):\n        ans.append(evens[i])\n        if i < len(odds):\n            ans.append(odds[i])\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#37",
    "weight": 1.0
  },
  {
    "name": "HalfSorted:1",
    "sat": "def sat(li: List[int], orig=[-1, -9, 7, 8, -8, 2, -7]):\n    return orig[1::2] == li[1::2] and li[::2] == sorted(orig[::2])",
    "ans_type": "List[int]",
    "sol_header": "def sol(orig=[-1, -9, 7, 8, -8, 2, -7]):",
    "sol_docstring": "    \"\"\"\n    Start with a list of integers, keep every other element in place and otherwise sort the list\n\n    Sample Input:\n    [8, 0, 7, 2, 9, 4, 1, 2, 8, 3]\n\n    Sample Output:\n    [1, 0, 2, 2, 4, 8, 8, 8, 9, 3]\n    \"\"\"",
    "sol_bodies": [
      "    n = len(orig)\n    odds = orig[1::2]\n    evens = sorted(orig[::2])\n    ans = []\n    for i in range(len(evens)):\n        ans.append(evens[i])\n        if i < len(odds):\n            ans.append(odds[i])\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#37",
    "weight": 1.0
  },
  {
    "name": "HalfSorted:2",
    "sat": "def sat(li: List[int], orig=[4, -3, -8]):\n    return orig[1::2] == li[1::2] and li[::2] == sorted(orig[::2])",
    "ans_type": "List[int]",
    "sol_header": "def sol(orig=[4, -3, -8]):",
    "sol_docstring": "    \"\"\"\n    Start with a list of integers, keep every other element in place and otherwise sort the list\n\n    Sample Input:\n    [8, 0, 7, 2, 9, 4, 1, 2, 8, 3]\n\n    Sample Output:\n    [1, 0, 2, 2, 4, 8, 8, 8, 9, 3]\n    \"\"\"",
    "sol_bodies": [
      "    n = len(orig)\n    odds = orig[1::2]\n    evens = sorted(orig[::2])\n    ans = []\n    for i in range(len(evens)):\n        ans.append(evens[i])\n        if i < len(odds):\n            ans.append(odds[i])\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#37",
    "weight": 1.0
  },
  {
    "name": "HalfSorted:3",
    "sat": "def sat(li: List[int], orig=[3, 6, -7, 1, 2, -10, 6, -8, -9, -9, 6, -7, 7, -6, 1, 4, -8, -1, 8]):\n    return orig[1::2] == li[1::2] and li[::2] == sorted(orig[::2])",
    "ans_type": "List[int]",
    "sol_header": "def sol(orig=[3, 6, -7, 1, 2, -10, 6, -8, -9, -9, 6, -7, 7, -6, 1, 4, -8, -1, 8]):",
    "sol_docstring": "    \"\"\"\n    Start with a list of integers, keep every other element in place and otherwise sort the list\n\n    Sample Input:\n    [8, 0, 7, 2, 9, 4, 1, 2, 8, 3]\n\n    Sample Output:\n    [1, 0, 2, 2, 4, 8, 8, 8, 9, 3]\n    \"\"\"",
    "sol_bodies": [
      "    n = len(orig)\n    odds = orig[1::2]\n    evens = sorted(orig[::2])\n    ans = []\n    for i in range(len(evens)):\n        ans.append(evens[i])\n        if i < len(odds):\n            ans.append(odds[i])\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#37",
    "weight": 1.0
  },
  {
    "name": "HalfSorted:4",
    "sat": "def sat(li: List[int], orig=[-7, 6, 8, 8, -3, -5, -6, -5, 6, 7, 5, 7, -9, 9, -7, 4, -8, 8, -9]):\n    return orig[1::2] == li[1::2] and li[::2] == sorted(orig[::2])",
    "ans_type": "List[int]",
    "sol_header": "def sol(orig=[-7, 6, 8, 8, -3, -5, -6, -5, 6, 7, 5, 7, -9, 9, -7, 4, -8, 8, -9]):",
    "sol_docstring": "    \"\"\"\n    Start with a list of integers, keep every other element in place and otherwise sort the list\n\n    Sample Input:\n    [8, 0, 7, 2, 9, 4, 1, 2, 8, 3]\n\n    Sample Output:\n    [1, 0, 2, 2, 4, 8, 8, 8, 9, 3]\n    \"\"\"",
    "sol_bodies": [
      "    n = len(orig)\n    odds = orig[1::2]\n    evens = sorted(orig[::2])\n    ans = []\n    for i in range(len(evens)):\n        ans.append(evens[i])\n        if i < len(odds):\n            ans.append(odds[i])\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#37",
    "weight": 1.0
  },
  {
    "name": "ThreeCycle:0",
    "sat": "def sat(s: str, target=\"Hello world\"):\n\n    def cycle3(trip):\n        return trip if len(trip) != 3 else trip[2] + trip[:2]\n\n    return target == \"\".join(cycle3(s[i: i + 3]) for i in range(0, len(s), 3))",
    "ans_type": "str",
    "sol_header": "def sol(target=\"Hello world\"):",
    "sol_docstring": "    \"\"\"\n    Given a target string, find a string s such that when each group of three consecutive characters is cycled\n    forward one character, you achieve the target string.\n\n    Sample Input:\n    \"This is a test\"\n\n    Sample Output:\n    'hiT is aste st'\n    \"\"\"",
    "sol_bodies": [
      "    def un_cycle3(trip):\n        return trip if len(trip) != 3 else trip[1:3] + trip[0]\n\n    return \"\".join(un_cycle3(target[i: i + 3]) for i in range(0, len(target), 3))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#38",
    "weight": 1.0
  },
  {
    "name": "ThreeCycle:1",
    "sat": "def sat(s: str, target=\"rugetytextirocuterup\"):\n\n    def cycle3(trip):\n        return trip if len(trip) != 3 else trip[2] + trip[:2]\n\n    return target == \"\".join(cycle3(s[i: i + 3]) for i in range(0, len(s), 3))",
    "ans_type": "str",
    "sol_header": "def sol(target=\"rugetytextirocuterup\"):",
    "sol_docstring": "    \"\"\"\n    Given a target string, find a string s such that when each group of three consecutive characters is cycled\n    forward one character, you achieve the target string.\n\n    Sample Input:\n    \"This is a test\"\n\n    Sample Output:\n    'hiT is aste st'\n    \"\"\"",
    "sol_bodies": [
      "    def un_cycle3(trip):\n        return trip if len(trip) != 3 else trip[1:3] + trip[0]\n\n    return \"\".join(un_cycle3(target[i: i + 3]) for i in range(0, len(target), 3))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#38",
    "weight": 1.0
  },
  {
    "name": "ThreeCycle:2",
    "sat": "def sat(s: str, target=\"torusajidapaficiretoh\"):\n\n    def cycle3(trip):\n        return trip if len(trip) != 3 else trip[2] + trip[:2]\n\n    return target == \"\".join(cycle3(s[i: i + 3]) for i in range(0, len(s), 3))",
    "ans_type": "str",
    "sol_header": "def sol(target=\"torusajidapaficiretoh\"):",
    "sol_docstring": "    \"\"\"\n    Given a target string, find a string s such that when each group of three consecutive characters is cycled\n    forward one character, you achieve the target string.\n\n    Sample Input:\n    \"This is a test\"\n\n    Sample Output:\n    'hiT is aste st'\n    \"\"\"",
    "sol_bodies": [
      "    def un_cycle3(trip):\n        return trip if len(trip) != 3 else trip[1:3] + trip[0]\n\n    return \"\".join(un_cycle3(target[i: i + 3]) for i in range(0, len(target), 3))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#38",
    "weight": 1.0
  },
  {
    "name": "ThreeCycle:3",
    "sat": "def sat(s: str, target=\"quitextaf\"):\n\n    def cycle3(trip):\n        return trip if len(trip) != 3 else trip[2] + trip[:2]\n\n    return target == \"\".join(cycle3(s[i: i + 3]) for i in range(0, len(s), 3))",
    "ans_type": "str",
    "sol_header": "def sol(target=\"quitextaf\"):",
    "sol_docstring": "    \"\"\"\n    Given a target string, find a string s such that when each group of three consecutive characters is cycled\n    forward one character, you achieve the target string.\n\n    Sample Input:\n    \"This is a test\"\n\n    Sample Output:\n    'hiT is aste st'\n    \"\"\"",
    "sol_bodies": [
      "    def un_cycle3(trip):\n        return trip if len(trip) != 3 else trip[1:3] + trip[0]\n\n    return \"\".join(un_cycle3(target[i: i + 3]) for i in range(0, len(target), 3))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#38",
    "weight": 1.0
  },
  {
    "name": "ThreeCycle:4",
    "sat": "def sat(s: str, target=\"thoqui\"):\n\n    def cycle3(trip):\n        return trip if len(trip) != 3 else trip[2] + trip[:2]\n\n    return target == \"\".join(cycle3(s[i: i + 3]) for i in range(0, len(s), 3))",
    "ans_type": "str",
    "sol_header": "def sol(target=\"thoqui\"):",
    "sol_docstring": "    \"\"\"\n    Given a target string, find a string s such that when each group of three consecutive characters is cycled\n    forward one character, you achieve the target string.\n\n    Sample Input:\n    \"This is a test\"\n\n    Sample Output:\n    'hiT is aste st'\n    \"\"\"",
    "sol_bodies": [
      "    def un_cycle3(trip):\n        return trip if len(trip) != 3 else trip[1:3] + trip[0]\n\n    return \"\".join(un_cycle3(target[i: i + 3]) for i in range(0, len(target), 3))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#38",
    "weight": 1.0
  },
  {
    "name": "PrimeFib:0",
    "sat": "def sat(n: int, lower=123456):\n    assert any((i ** 0.5).is_integer() for i in [5 * n * n - 4, 5 * n * n + 4]), \"n must be a Fibonacci number\"\n    assert all(n % i for i in range(2, int(n ** 0.5) + 1)), \"n must be prime\"\n    return n > lower",
    "ans_type": "int",
    "sol_header": "def sol(lower=123456):",
    "sol_docstring": "    \"\"\"\n    Find a prime Fibonacci number bigger than a certain threshold, using Ira Gessel's test for Fibonacci numbers.\n\n    Sample Input:\n    10\n\n    Sample Output:\n    11\n    \"\"\"",
    "sol_bodies": [
      "    m, n = 2, 3\n    while True:\n        m, n = n, (m + n)\n        if n > lower and all(n % i for i in range(2, int(n ** 0.5) + 1)):\n            return n"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#39\n\nIra Gessel observed that n is a Fibonacci number if and if either 5 n^2 - 4 or 5 n^2 + 4 is a perfect square",
    "weight": 1.0
  },
  {
    "name": "PrimeFib:1",
    "sat": "def sat(n: int, lower=3):\n    assert any((i ** 0.5).is_integer() for i in [5 * n * n - 4, 5 * n * n + 4]), \"n must be a Fibonacci number\"\n    assert all(n % i for i in range(2, int(n ** 0.5) + 1)), \"n must be prime\"\n    return n > lower",
    "ans_type": "int",
    "sol_header": "def sol(lower=3):",
    "sol_docstring": "    \"\"\"\n    Find a prime Fibonacci number bigger than a certain threshold, using Ira Gessel's test for Fibonacci numbers.\n\n    Sample Input:\n    10\n\n    Sample Output:\n    11\n    \"\"\"",
    "sol_bodies": [
      "    m, n = 2, 3\n    while True:\n        m, n = n, (m + n)\n        if n > lower and all(n % i for i in range(2, int(n ** 0.5) + 1)):\n            return n"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#39\n\nIra Gessel observed that n is a Fibonacci number if and if either 5 n^2 - 4 or 5 n^2 + 4 is a perfect square",
    "weight": 1.0
  },
  {
    "name": "PrimeFib:2",
    "sat": "def sat(n: int, lower=458):\n    assert any((i ** 0.5).is_integer() for i in [5 * n * n - 4, 5 * n * n + 4]), \"n must be a Fibonacci number\"\n    assert all(n % i for i in range(2, int(n ** 0.5) + 1)), \"n must be prime\"\n    return n > lower",
    "ans_type": "int",
    "sol_header": "def sol(lower=458):",
    "sol_docstring": "    \"\"\"\n    Find a prime Fibonacci number bigger than a certain threshold, using Ira Gessel's test for Fibonacci numbers.\n\n    Sample Input:\n    10\n\n    Sample Output:\n    11\n    \"\"\"",
    "sol_bodies": [
      "    m, n = 2, 3\n    while True:\n        m, n = n, (m + n)\n        if n > lower and all(n % i for i in range(2, int(n ** 0.5) + 1)):\n            return n"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#39\n\nIra Gessel observed that n is a Fibonacci number if and if either 5 n^2 - 4 or 5 n^2 + 4 is a perfect square",
    "weight": 1.0
  },
  {
    "name": "PrimeFib:3",
    "sat": "def sat(n: int, lower=384):\n    assert any((i ** 0.5).is_integer() for i in [5 * n * n - 4, 5 * n * n + 4]), \"n must be a Fibonacci number\"\n    assert all(n % i for i in range(2, int(n ** 0.5) + 1)), \"n must be prime\"\n    return n > lower",
    "ans_type": "int",
    "sol_header": "def sol(lower=384):",
    "sol_docstring": "    \"\"\"\n    Find a prime Fibonacci number bigger than a certain threshold, using Ira Gessel's test for Fibonacci numbers.\n\n    Sample Input:\n    10\n\n    Sample Output:\n    11\n    \"\"\"",
    "sol_bodies": [
      "    m, n = 2, 3\n    while True:\n        m, n = n, (m + n)\n        if n > lower and all(n % i for i in range(2, int(n ** 0.5) + 1)):\n            return n"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#39\n\nIra Gessel observed that n is a Fibonacci number if and if either 5 n^2 - 4 or 5 n^2 + 4 is a perfect square",
    "weight": 1.0
  },
  {
    "name": "PrimeFib:4",
    "sat": "def sat(n: int, lower=4):\n    assert any((i ** 0.5).is_integer() for i in [5 * n * n - 4, 5 * n * n + 4]), \"n must be a Fibonacci number\"\n    assert all(n % i for i in range(2, int(n ** 0.5) + 1)), \"n must be prime\"\n    return n > lower",
    "ans_type": "int",
    "sol_header": "def sol(lower=4):",
    "sol_docstring": "    \"\"\"\n    Find a prime Fibonacci number bigger than a certain threshold, using Ira Gessel's test for Fibonacci numbers.\n\n    Sample Input:\n    10\n\n    Sample Output:\n    11\n    \"\"\"",
    "sol_bodies": [
      "    m, n = 2, 3\n    while True:\n        m, n = n, (m + n)\n        if n > lower and all(n % i for i in range(2, int(n ** 0.5) + 1)):\n            return n"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#39\n\nIra Gessel observed that n is a Fibonacci number if and if either 5 n^2 - 4 or 5 n^2 + 4 is a perfect square",
    "weight": 1.0
  },
  {
    "name": "TripleZeroSum:0",
    "sat": "def sat(inds: List[int], nums=[12, 6, 41, 15, -10452, 18242, 10440, 6, 6, 6, 6]):\n    return len(inds) == 3 and sum(nums[i] for i in inds) == 0",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[12, 6, 41, 15, -10452, 18242, 10440, 6, 6, 6, 6]):",
    "sol_docstring": "    \"\"\"\n    Find the indices of three numbers that sum to 0 in a list.\n\n    --- Example input ---\n    [1, 2, 4, -3, 5]\n\n    --- Example output ---\n    [0, 1, 3]\n    \"\"\"",
    "sol_bodies": [
      "    # \\tilde{O}(n^2) algorithm\n    inv = {n: i for i, n in enumerate(nums)}  # note that later duplicates will override earlier entries\n    for i, n in enumerate(nums):\n        if inv[n] == i:\n            del inv[n]\n        if any((-m - n) in inv for m in nums[:i]):  # found solution!\n            j, m = next((j, m) for j, m in enumerate(nums) if (-m - n) in inv)\n            k = inv[-m - n]\n            return sorted([i, j, k])"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#40\n    \nSimilar to but harder than PairZeroSum \\#43.\n    \nThis is a version of the classic [3SUM](https://en.wikipedia.org/wiki/3SUM) problem.",
    "weight": 1.0
  },
  {
    "name": "TripleZeroSum:1",
    "sat": "def sat(inds: List[int], nums=[-52, -16, 68, -27, 3]):\n    return len(inds) == 3 and sum(nums[i] for i in inds) == 0",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[-52, -16, 68, -27, 3]):",
    "sol_docstring": "    \"\"\"\n    Find the indices of three numbers that sum to 0 in a list.\n\n    --- Example input ---\n    [1, 2, 4, -3, 5]\n\n    --- Example output ---\n    [0, 1, 3]\n    \"\"\"",
    "sol_bodies": [
      "    # \\tilde{O}(n^2) algorithm\n    inv = {n: i for i, n in enumerate(nums)}  # note that later duplicates will override earlier entries\n    for i, n in enumerate(nums):\n        if inv[n] == i:\n            del inv[n]\n        if any((-m - n) in inv for m in nums[:i]):  # found solution!\n            j, m = next((j, m) for j, m in enumerate(nums) if (-m - n) in inv)\n            k = inv[-m - n]\n            return sorted([i, j, k])"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#40\n    \nSimilar to but harder than PairZeroSum \\#43.\n    \nThis is a version of the classic [3SUM](https://en.wikipedia.org/wiki/3SUM) problem.",
    "weight": 1.0
  },
  {
    "name": "TripleZeroSum:2",
    "sat": "def sat(inds: List[int], nums=[-64, -74, -18, -57, 89, -14, -25, 11, -60, -78]):\n    return len(inds) == 3 and sum(nums[i] for i in inds) == 0",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[-64, -74, -18, -57, 89, -14, -25, 11, -60, -78]):",
    "sol_docstring": "    \"\"\"\n    Find the indices of three numbers that sum to 0 in a list.\n\n    --- Example input ---\n    [1, 2, 4, -3, 5]\n\n    --- Example output ---\n    [0, 1, 3]\n    \"\"\"",
    "sol_bodies": [
      "    # \\tilde{O}(n^2) algorithm\n    inv = {n: i for i, n in enumerate(nums)}  # note that later duplicates will override earlier entries\n    for i, n in enumerate(nums):\n        if inv[n] == i:\n            del inv[n]\n        if any((-m - n) in inv for m in nums[:i]):  # found solution!\n            j, m = next((j, m) for j, m in enumerate(nums) if (-m - n) in inv)\n            k = inv[-m - n]\n            return sorted([i, j, k])"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#40\n    \nSimilar to but harder than PairZeroSum \\#43.\n    \nThis is a version of the classic [3SUM](https://en.wikipedia.org/wiki/3SUM) problem.",
    "weight": 1.0
  },
  {
    "name": "TripleZeroSum:3",
    "sat": "def sat(inds: List[int], nums=[-90, 63, 70, 21, 42, 20]):\n    return len(inds) == 3 and sum(nums[i] for i in inds) == 0",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[-90, 63, 70, 21, 42, 20]):",
    "sol_docstring": "    \"\"\"\n    Find the indices of three numbers that sum to 0 in a list.\n\n    --- Example input ---\n    [1, 2, 4, -3, 5]\n\n    --- Example output ---\n    [0, 1, 3]\n    \"\"\"",
    "sol_bodies": [
      "    # \\tilde{O}(n^2) algorithm\n    inv = {n: i for i, n in enumerate(nums)}  # note that later duplicates will override earlier entries\n    for i, n in enumerate(nums):\n        if inv[n] == i:\n            del inv[n]\n        if any((-m - n) in inv for m in nums[:i]):  # found solution!\n            j, m = next((j, m) for j, m in enumerate(nums) if (-m - n) in inv)\n            k = inv[-m - n]\n            return sorted([i, j, k])"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#40\n    \nSimilar to but harder than PairZeroSum \\#43.\n    \nThis is a version of the classic [3SUM](https://en.wikipedia.org/wiki/3SUM) problem.",
    "weight": 1.0
  },
  {
    "name": "TripleZeroSum:4",
    "sat": "def sat(inds: List[int], nums=[-14, 65, -7, -75, 54, 78, -61, 136, -85, 44]):\n    return len(inds) == 3 and sum(nums[i] for i in inds) == 0",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[-14, 65, -7, -75, 54, 78, -61, 136, -85, 44]):",
    "sol_docstring": "    \"\"\"\n    Find the indices of three numbers that sum to 0 in a list.\n\n    --- Example input ---\n    [1, 2, 4, -3, 5]\n\n    --- Example output ---\n    [0, 1, 3]\n    \"\"\"",
    "sol_bodies": [
      "    # \\tilde{O}(n^2) algorithm\n    inv = {n: i for i, n in enumerate(nums)}  # note that later duplicates will override earlier entries\n    for i, n in enumerate(nums):\n        if inv[n] == i:\n            del inv[n]\n        if any((-m - n) in inv for m in nums[:i]):  # found solution!\n            j, m = next((j, m) for j, m in enumerate(nums) if (-m - n) in inv)\n            k = inv[-m - n]\n            return sorted([i, j, k])"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#40\n    \nSimilar to but harder than PairZeroSum \\#43.\n    \nThis is a version of the classic [3SUM](https://en.wikipedia.org/wiki/3SUM) problem.",
    "weight": 1.0
  },
  {
    "name": "NumPasses:0",
    "sat": "def sat(count: int, n=981):\n    for i in range(n):\n        for j in range(n):\n            count -= 1\n    return count == 0",
    "ans_type": "int",
    "sol_header": "def sol(n=981):",
    "sol_docstring": "    \"\"\"\n    Given n cars traveling East and n cars traveling West on a road, how many passings will there be?\n    A passing is when one car passes another. The East-bound cars all begin further West than the West-bound cars.\n\n    --Sample input--\n    2\n\n    --Sample output--\n    4\n    \"\"\"",
    "sol_bodies": [
      "    return n ** 2"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#41",
    "weight": 1.0
  },
  {
    "name": "NumPasses:1",
    "sat": "def sat(count: int, n=123):\n    for i in range(n):\n        for j in range(n):\n            count -= 1\n    return count == 0",
    "ans_type": "int",
    "sol_header": "def sol(n=123):",
    "sol_docstring": "    \"\"\"\n    Given n cars traveling East and n cars traveling West on a road, how many passings will there be?\n    A passing is when one car passes another. The East-bound cars all begin further West than the West-bound cars.\n\n    --Sample input--\n    2\n\n    --Sample output--\n    4\n    \"\"\"",
    "sol_bodies": [
      "    return n ** 2"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#41",
    "weight": 1.0
  },
  {
    "name": "NumPasses:2",
    "sat": "def sat(count: int, n=239):\n    for i in range(n):\n        for j in range(n):\n            count -= 1\n    return count == 0",
    "ans_type": "int",
    "sol_header": "def sol(n=239):",
    "sol_docstring": "    \"\"\"\n    Given n cars traveling East and n cars traveling West on a road, how many passings will there be?\n    A passing is when one car passes another. The East-bound cars all begin further West than the West-bound cars.\n\n    --Sample input--\n    2\n\n    --Sample output--\n    4\n    \"\"\"",
    "sol_bodies": [
      "    return n ** 2"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#41",
    "weight": 1.0
  },
  {
    "name": "NumPasses:3",
    "sat": "def sat(count: int, n=378):\n    for i in range(n):\n        for j in range(n):\n            count -= 1\n    return count == 0",
    "ans_type": "int",
    "sol_header": "def sol(n=378):",
    "sol_docstring": "    \"\"\"\n    Given n cars traveling East and n cars traveling West on a road, how many passings will there be?\n    A passing is when one car passes another. The East-bound cars all begin further West than the West-bound cars.\n\n    --Sample input--\n    2\n\n    --Sample output--\n    4\n    \"\"\"",
    "sol_bodies": [
      "    return n ** 2"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#41",
    "weight": 1.0
  },
  {
    "name": "NumPasses:4",
    "sat": "def sat(count: int, n=501):\n    for i in range(n):\n        for j in range(n):\n            count -= 1\n    return count == 0",
    "ans_type": "int",
    "sol_header": "def sol(n=501):",
    "sol_docstring": "    \"\"\"\n    Given n cars traveling East and n cars traveling West on a road, how many passings will there be?\n    A passing is when one car passes another. The East-bound cars all begin further West than the West-bound cars.\n\n    --Sample input--\n    2\n\n    --Sample output--\n    4\n    \"\"\"",
    "sol_bodies": [
      "    return n ** 2"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#41",
    "weight": 1.0
  },
  {
    "name": "ListInc:0",
    "sat": "def sat(new_list: List[int], old_list=[321, 12, 532, 129, 9, -12, 4, 56, 90, 0]):\n    return [i - 1 for i in new_list] == old_list",
    "ans_type": "List[int]",
    "sol_header": "def sol(old_list=[321, 12, 532, 129, 9, -12, 4, 56, 90, 0]):",
    "sol_docstring": "    \"\"\"\n    Decrement each element of new_list by 1 and check that it's old_list\n\n    Sample Input:\n    [17, 15, 99]\n\n    Sample Output:\n    [18, 16, 100]\n    \"\"\"",
    "sol_bodies": [
      "    return [i + 1 for i in old_list]"
    ],
    "module": "human_eval.py",
    "notes": "Increment each element of a list by 1\n\nInspired by [HumanEval](https://github.com/openai/human-eval) \\#42",
    "weight": 1.0
  },
  {
    "name": "ListInc:1",
    "sat": "def sat(new_list: List[int], old_list=[18, 29, 40]):\n    return [i - 1 for i in new_list] == old_list",
    "ans_type": "List[int]",
    "sol_header": "def sol(old_list=[18, 29, 40]):",
    "sol_docstring": "    \"\"\"\n    Decrement each element of new_list by 1 and check that it's old_list\n\n    Sample Input:\n    [17, 15, 99]\n\n    Sample Output:\n    [18, 16, 100]\n    \"\"\"",
    "sol_bodies": [
      "    return [i + 1 for i in old_list]"
    ],
    "module": "human_eval.py",
    "notes": "Increment each element of a list by 1\n\nInspired by [HumanEval](https://github.com/openai/human-eval) \\#42",
    "weight": 1.0
  },
  {
    "name": "ListInc:2",
    "sat": "def sat(new_list: List[int], old_list=[43, 64, 73, 30, 47]):\n    return [i - 1 for i in new_list] == old_list",
    "ans_type": "List[int]",
    "sol_header": "def sol(old_list=[43, 64, 73, 30, 47]):",
    "sol_docstring": "    \"\"\"\n    Decrement each element of new_list by 1 and check that it's old_list\n\n    Sample Input:\n    [17, 15, 99]\n\n    Sample Output:\n    [18, 16, 100]\n    \"\"\"",
    "sol_bodies": [
      "    return [i + 1 for i in old_list]"
    ],
    "module": "human_eval.py",
    "notes": "Increment each element of a list by 1\n\nInspired by [HumanEval](https://github.com/openai/human-eval) \\#42",
    "weight": 1.0
  },
  {
    "name": "ListInc:3",
    "sat": "def sat(new_list: List[int], old_list=[43, 9, 49, 93, 36, 47, 48, 38, 12]):\n    return [i - 1 for i in new_list] == old_list",
    "ans_type": "List[int]",
    "sol_header": "def sol(old_list=[43, 9, 49, 93, 36, 47, 48, 38, 12]):",
    "sol_docstring": "    \"\"\"\n    Decrement each element of new_list by 1 and check that it's old_list\n\n    Sample Input:\n    [17, 15, 99]\n\n    Sample Output:\n    [18, 16, 100]\n    \"\"\"",
    "sol_bodies": [
      "    return [i + 1 for i in old_list]"
    ],
    "module": "human_eval.py",
    "notes": "Increment each element of a list by 1\n\nInspired by [HumanEval](https://github.com/openai/human-eval) \\#42",
    "weight": 1.0
  },
  {
    "name": "ListInc:4",
    "sat": "def sat(new_list: List[int], old_list=[45, 55, 71, 78, 54]):\n    return [i - 1 for i in new_list] == old_list",
    "ans_type": "List[int]",
    "sol_header": "def sol(old_list=[45, 55, 71, 78, 54]):",
    "sol_docstring": "    \"\"\"\n    Decrement each element of new_list by 1 and check that it's old_list\n\n    Sample Input:\n    [17, 15, 99]\n\n    Sample Output:\n    [18, 16, 100]\n    \"\"\"",
    "sol_bodies": [
      "    return [i + 1 for i in old_list]"
    ],
    "module": "human_eval.py",
    "notes": "Increment each element of a list by 1\n\nInspired by [HumanEval](https://github.com/openai/human-eval) \\#42",
    "weight": 1.0
  },
  {
    "name": "PairZeroSum:0",
    "sat": "def sat(inds: List[int], nums=[12, -10452, 18242, 10440, 81, 241, 525, -18242, 91, 20]):\n    a, b = inds\n    return nums[a] + nums[b] == 0 and a >= 0 and b >= 0",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[12, -10452, 18242, 10440, 81, 241, 525, -18242, 91, 20]):",
    "sol_docstring": "    \"\"\"\n    Find the indices of two numbers that sum to 0 in a list.\n\n    Sample Input:\n    [1, -4, -4, 7, -3]\n\n    Sample Output:\n    [1, 2]\n    \"\"\"",
    "sol_bodies": [
      "    s = set(nums)\n    for i in s:\n        if -i in s:\n            return [nums.index(i), nums.index(-i)]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#43\n\nSimilar to TripleZeroSum \\#40",
    "weight": 1.0
  },
  {
    "name": "PairZeroSum:1",
    "sat": "def sat(inds: List[int], nums=[50, 33, 12, -13, 65, -39, -12, -72, -61, -38, -58, -88, 70, -82, -80, 27, 68, 89, -57, 15, -33, 93, 57, -91, 60, -72, -19, -12, 70, -35, 53, -21, -19, 66, 58, 76, -92, 64, 52, -21, 29, -61, -10, 50, -88, 17, 0, -50, 52, -87, 9, -95, 59, 23, 69, -34, 73, -39, 15, 17, 37, -83, -31, 13, -33, 6, -27, -45, -15, -78, 74, 92, 56, -52, 44, -9, -22, 27, -94, -17, 5, -82, -40, 22, -91, 10, 57, 13, -41, -93, -40, -42, 28, -3, 82]):\n    a, b = inds\n    return nums[a] + nums[b] == 0 and a >= 0 and b >= 0",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[50, 33, 12, -13, 65, -39, -12, -72, -61, -38, -58, -88, 70, -82, -80, 27, 68, 89, -57, 15, -33, 93, 57, -91, 60, -72, -19, -12, 70, -35, 53, -21, -19, 66, 58, 76, -92, 64, 52, -21, 29, -61, -10, 50, -88, 17, 0, -50, 52, -87, 9, -95, 59, 23, 69, -34, 73, -39, 15, 17, 37, -83, -31, 13, -33, 6, -27, -45, -15, -78, 74, 92, 56, -52, 44, -9, -22, 27, -94, -17, 5, -82, -40, 22, -91, 10, 57, 13, -41, -93, -40, -42, 28, -3, 82]):",
    "sol_docstring": "    \"\"\"\n    Find the indices of two numbers that sum to 0 in a list.\n\n    Sample Input:\n    [1, -4, -4, 7, -3]\n\n    Sample Output:\n    [1, 2]\n    \"\"\"",
    "sol_bodies": [
      "    s = set(nums)\n    for i in s:\n        if -i in s:\n            return [nums.index(i), nums.index(-i)]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#43\n\nSimilar to TripleZeroSum \\#40",
    "weight": 1.0
  },
  {
    "name": "PairZeroSum:2",
    "sat": "def sat(inds: List[int], nums=[18, -81, 7, -48, -14, 88, -34, 29, 72, 16, 38, -29, 53, -52, 16, 31, 65, 1, -77, 24, -73, 8, 78, -13, -96, 29, -3, 45, -44, 98, 9, -89, -50, 46, -88, 89, -93, 98, -83, -3, -17, 72, 25, 18, 88, -32, -37, -26, 69, -39, 62, 64, 41, 58, 29, 33, -65, -13, 61, 41, -90, -79, -94, -81, 40, 46, -78, -13, -44, 9, 42, -90, 94, -19, 5, -33, 33, -60, 80, -40, -64, 19, -92, 62, -12, -58, 89, -50, -82, -32, 65, 82, -49, 80, -71, 68, -17, 26, 6, -61]):\n    a, b = inds\n    return nums[a] + nums[b] == 0 and a >= 0 and b >= 0",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[18, -81, 7, -48, -14, 88, -34, 29, 72, 16, 38, -29, 53, -52, 16, 31, 65, 1, -77, 24, -73, 8, 78, -13, -96, 29, -3, 45, -44, 98, 9, -89, -50, 46, -88, 89, -93, 98, -83, -3, -17, 72, 25, 18, 88, -32, -37, -26, 69, -39, 62, 64, 41, 58, 29, 33, -65, -13, 61, 41, -90, -79, -94, -81, 40, 46, -78, -13, -44, 9, 42, -90, 94, -19, 5, -33, 33, -60, 80, -40, -64, 19, -92, 62, -12, -58, 89, -50, -82, -32, 65, 82, -49, 80, -71, 68, -17, 26, 6, -61]):",
    "sol_docstring": "    \"\"\"\n    Find the indices of two numbers that sum to 0 in a list.\n\n    Sample Input:\n    [1, -4, -4, 7, -3]\n\n    Sample Output:\n    [1, 2]\n    \"\"\"",
    "sol_bodies": [
      "    s = set(nums)\n    for i in s:\n        if -i in s:\n            return [nums.index(i), nums.index(-i)]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#43\n\nSimilar to TripleZeroSum \\#40",
    "weight": 1.0
  },
  {
    "name": "PairZeroSum:3",
    "sat": "def sat(inds: List[int], nums=[61, 13, 32, -67, -29, 6, 65, 82, -36, -90, -3, -53, -80, 52, -20, 14, -58, 1, 14, 88, 90, -76, -83, 47, -20, -26, 5, 71, 29, -51, -6, 38, -42, -48, 9, -74, -37, -86, -31, -63, -45, -74, -40, 23, -16, 24, -6, -93, -46, -42, -4, -85, -91, 71, -72, 11, -33, 33, -82, -67, -34, -60, 89, 60, 26, -12, -92, 42, -92, -58, -37, 9, -38, 54, 34, 25, 85, -65, -79, 33, -52, -72, -80, -76, -39, 24, -2, 40, -53, -14, 8, 21, 7, 46, -88, -67]):\n    a, b = inds\n    return nums[a] + nums[b] == 0 and a >= 0 and b >= 0",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[61, 13, 32, -67, -29, 6, 65, 82, -36, -90, -3, -53, -80, 52, -20, 14, -58, 1, 14, 88, 90, -76, -83, 47, -20, -26, 5, 71, 29, -51, -6, 38, -42, -48, 9, -74, -37, -86, -31, -63, -45, -74, -40, 23, -16, 24, -6, -93, -46, -42, -4, -85, -91, 71, -72, 11, -33, 33, -82, -67, -34, -60, 89, 60, 26, -12, -92, 42, -92, -58, -37, 9, -38, 54, 34, 25, 85, -65, -79, 33, -52, -72, -80, -76, -39, 24, -2, 40, -53, -14, 8, 21, 7, 46, -88, -67]):",
    "sol_docstring": "    \"\"\"\n    Find the indices of two numbers that sum to 0 in a list.\n\n    Sample Input:\n    [1, -4, -4, 7, -3]\n\n    Sample Output:\n    [1, 2]\n    \"\"\"",
    "sol_bodies": [
      "    s = set(nums)\n    for i in s:\n        if -i in s:\n            return [nums.index(i), nums.index(-i)]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#43\n\nSimilar to TripleZeroSum \\#40",
    "weight": 1.0
  },
  {
    "name": "PairZeroSum:4",
    "sat": "def sat(inds: List[int], nums=[4, -4, -4, -3, 3, 1]):\n    a, b = inds\n    return nums[a] + nums[b] == 0 and a >= 0 and b >= 0",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[4, -4, -4, -3, 3, 1]):",
    "sol_docstring": "    \"\"\"\n    Find the indices of two numbers that sum to 0 in a list.\n\n    Sample Input:\n    [1, -4, -4, 7, -3]\n\n    Sample Output:\n    [1, 2]\n    \"\"\"",
    "sol_bodies": [
      "    s = set(nums)\n    for i in s:\n        if -i in s:\n            return [nums.index(i), nums.index(-i)]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#43\n\nSimilar to TripleZeroSum \\#40",
    "weight": 1.0
  },
  {
    "name": "ChangeBase:0",
    "sat": "def sat(s: str, n=142, base=7):\n    return int(s, base) == n",
    "ans_type": "str",
    "sol_header": "def sol(n=142, base=7):",
    "sol_docstring": "    \"\"\"\n    Write n in the given base as a string\n\n    Sample Input:\n    n=23, base=12\n\n    Sample Output:\n    '1A'\n    \"\"\"",
    "sol_bodies": [
      "    assert 2 <= base <= 10\n    ans = \"\"\n    while n:\n        ans = str(n % base) + ans\n        n //= base\n    return ans or \"0\""
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#44",
    "weight": 1.0
  },
  {
    "name": "ChangeBase:1",
    "sat": "def sat(s: str, n=85328, base=2):\n    return int(s, base) == n",
    "ans_type": "str",
    "sol_header": "def sol(n=85328, base=2):",
    "sol_docstring": "    \"\"\"\n    Write n in the given base as a string\n\n    Sample Input:\n    n=23, base=12\n\n    Sample Output:\n    '1A'\n    \"\"\"",
    "sol_bodies": [
      "    assert 2 <= base <= 10\n    ans = \"\"\n    while n:\n        ans = str(n % base) + ans\n        n //= base\n    return ans or \"0\""
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#44",
    "weight": 1.0
  },
  {
    "name": "ChangeBase:2",
    "sat": "def sat(s: str, n=9576751, base=10):\n    return int(s, base) == n",
    "ans_type": "str",
    "sol_header": "def sol(n=9576751, base=10):",
    "sol_docstring": "    \"\"\"\n    Write n in the given base as a string\n\n    Sample Input:\n    n=23, base=12\n\n    Sample Output:\n    '1A'\n    \"\"\"",
    "sol_bodies": [
      "    assert 2 <= base <= 10\n    ans = \"\"\n    while n:\n        ans = str(n % base) + ans\n        n //= base\n    return ans or \"0\""
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#44",
    "weight": 1.0
  },
  {
    "name": "ChangeBase:3",
    "sat": "def sat(s: str, n=5160280, base=5):\n    return int(s, base) == n",
    "ans_type": "str",
    "sol_header": "def sol(n=5160280, base=5):",
    "sol_docstring": "    \"\"\"\n    Write n in the given base as a string\n\n    Sample Input:\n    n=23, base=12\n\n    Sample Output:\n    '1A'\n    \"\"\"",
    "sol_bodies": [
      "    assert 2 <= base <= 10\n    ans = \"\"\n    while n:\n        ans = str(n % base) + ans\n        n //= base\n    return ans or \"0\""
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#44",
    "weight": 1.0
  },
  {
    "name": "ChangeBase:4",
    "sat": "def sat(s: str, n=4884658, base=6):\n    return int(s, base) == n",
    "ans_type": "str",
    "sol_header": "def sol(n=4884658, base=6):",
    "sol_docstring": "    \"\"\"\n    Write n in the given base as a string\n\n    Sample Input:\n    n=23, base=12\n\n    Sample Output:\n    '1A'\n    \"\"\"",
    "sol_bodies": [
      "    assert 2 <= base <= 10\n    ans = \"\"\n    while n:\n        ans = str(n % base) + ans\n        n //= base\n    return ans or \"0\""
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#44",
    "weight": 1.0
  },
  {
    "name": "TriangleArea:0",
    "sat": "def sat(height: int, area=1319098728582, base=45126):\n    return base * height == 2 * area",
    "ans_type": "int",
    "sol_header": "def sol(area=1319098728582, base=45126):",
    "sol_docstring": "    \"\"\"\n    Find the height of a triangle given the area and base. It is guaranteed that the answer is an integer.\n\n    Sample Input:\n    area = 6, base = 3\n\n    Sample Output:\n    4\n    \"\"\"",
    "sol_bodies": [
      "    return (2 * area) // base"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#45",
    "weight": 1.0
  },
  {
    "name": "TriangleArea:1",
    "sat": "def sat(height: int, area=2642925075, base=211434006):\n    return base * height == 2 * area",
    "ans_type": "int",
    "sol_header": "def sol(area=2642925075, base=211434006):",
    "sol_docstring": "    \"\"\"\n    Find the height of a triangle given the area and base. It is guaranteed that the answer is an integer.\n\n    Sample Input:\n    area = 6, base = 3\n\n    Sample Output:\n    4\n    \"\"\"",
    "sol_bodies": [
      "    return (2 * area) // base"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#45",
    "weight": 1.0
  },
  {
    "name": "TriangleArea:2",
    "sat": "def sat(height: int, area=5529468804, base=18936537):\n    return base * height == 2 * area",
    "ans_type": "int",
    "sol_header": "def sol(area=5529468804, base=18936537):",
    "sol_docstring": "    \"\"\"\n    Find the height of a triangle given the area and base. It is guaranteed that the answer is an integer.\n\n    Sample Input:\n    area = 6, base = 3\n\n    Sample Output:\n    4\n    \"\"\"",
    "sol_bodies": [
      "    return (2 * area) // base"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#45",
    "weight": 1.0
  },
  {
    "name": "TriangleArea:3",
    "sat": "def sat(height: int, area=1238452500, base=600):\n    return base * height == 2 * area",
    "ans_type": "int",
    "sol_header": "def sol(area=1238452500, base=600):",
    "sol_docstring": "    \"\"\"\n    Find the height of a triangle given the area and base. It is guaranteed that the answer is an integer.\n\n    Sample Input:\n    area = 6, base = 3\n\n    Sample Output:\n    4\n    \"\"\"",
    "sol_bodies": [
      "    return (2 * area) // base"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#45",
    "weight": 1.0
  },
  {
    "name": "TriangleArea:4",
    "sat": "def sat(height: int, area=32576448, base=147072):\n    return base * height == 2 * area",
    "ans_type": "int",
    "sol_header": "def sol(area=32576448, base=147072):",
    "sol_docstring": "    \"\"\"\n    Find the height of a triangle given the area and base. It is guaranteed that the answer is an integer.\n\n    Sample Input:\n    area = 6, base = 3\n\n    Sample Output:\n    4\n    \"\"\"",
    "sol_bodies": [
      "    return (2 * area) // base"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#45",
    "weight": 1.0
  },
  {
    "name": "Fib4:0",
    "sat": "def sat(init: List[int], target=2021):\n    a, b, c, d = init\n    for i in range(99):\n        a, b, c, d = b, c, d, (a + b + c + d)\n    return a == target",
    "ans_type": "List[int]",
    "sol_header": "def sol(target=2021):",
    "sol_docstring": "    \"\"\"\n    Define a four-wise Fibonacci sequence to be a sequence such that each number is the sum of the previous\n    four. Given a target number, find an initial four numbers such that the 100th number in the sequence is the\n    given target number.\n\n    Sample Input:\n    0\n\n    Sample Output:\n    [0, 0, 0, 0]\n    \"\"\"",
    "sol_bodies": [
      "    nums = [target, 0, 0, 0]\n    for i in range(99):\n        x = nums[3] - sum(nums[:3])  # x is such that x + nums[:3] == nums[3]\n        nums = [x] + nums[:3]\n    return nums"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#46\n\nAlmost identical to problem 63",
    "weight": 1.0
  },
  {
    "name": "Fib4:1",
    "sat": "def sat(init: List[int], target=56):\n    a, b, c, d = init\n    for i in range(99):\n        a, b, c, d = b, c, d, (a + b + c + d)\n    return a == target",
    "ans_type": "List[int]",
    "sol_header": "def sol(target=56):",
    "sol_docstring": "    \"\"\"\n    Define a four-wise Fibonacci sequence to be a sequence such that each number is the sum of the previous\n    four. Given a target number, find an initial four numbers such that the 100th number in the sequence is the\n    given target number.\n\n    Sample Input:\n    0\n\n    Sample Output:\n    [0, 0, 0, 0]\n    \"\"\"",
    "sol_bodies": [
      "    nums = [target, 0, 0, 0]\n    for i in range(99):\n        x = nums[3] - sum(nums[:3])  # x is such that x + nums[:3] == nums[3]\n        nums = [x] + nums[:3]\n    return nums"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#46\n\nAlmost identical to problem 63",
    "weight": 1.0
  },
  {
    "name": "Fib4:2",
    "sat": "def sat(init: List[int], target=58965):\n    a, b, c, d = init\n    for i in range(99):\n        a, b, c, d = b, c, d, (a + b + c + d)\n    return a == target",
    "ans_type": "List[int]",
    "sol_header": "def sol(target=58965):",
    "sol_docstring": "    \"\"\"\n    Define a four-wise Fibonacci sequence to be a sequence such that each number is the sum of the previous\n    four. Given a target number, find an initial four numbers such that the 100th number in the sequence is the\n    given target number.\n\n    Sample Input:\n    0\n\n    Sample Output:\n    [0, 0, 0, 0]\n    \"\"\"",
    "sol_bodies": [
      "    nums = [target, 0, 0, 0]\n    for i in range(99):\n        x = nums[3] - sum(nums[:3])  # x is such that x + nums[:3] == nums[3]\n        nums = [x] + nums[:3]\n    return nums"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#46\n\nAlmost identical to problem 63",
    "weight": 1.0
  },
  {
    "name": "Fib4:3",
    "sat": "def sat(init: List[int], target=501192137):\n    a, b, c, d = init\n    for i in range(99):\n        a, b, c, d = b, c, d, (a + b + c + d)\n    return a == target",
    "ans_type": "List[int]",
    "sol_header": "def sol(target=501192137):",
    "sol_docstring": "    \"\"\"\n    Define a four-wise Fibonacci sequence to be a sequence such that each number is the sum of the previous\n    four. Given a target number, find an initial four numbers such that the 100th number in the sequence is the\n    given target number.\n\n    Sample Input:\n    0\n\n    Sample Output:\n    [0, 0, 0, 0]\n    \"\"\"",
    "sol_bodies": [
      "    nums = [target, 0, 0, 0]\n    for i in range(99):\n        x = nums[3] - sum(nums[:3])  # x is such that x + nums[:3] == nums[3]\n        nums = [x] + nums[:3]\n    return nums"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#46\n\nAlmost identical to problem 63",
    "weight": 1.0
  },
  {
    "name": "Fib4:4",
    "sat": "def sat(init: List[int], target=0):\n    a, b, c, d = init\n    for i in range(99):\n        a, b, c, d = b, c, d, (a + b + c + d)\n    return a == target",
    "ans_type": "List[int]",
    "sol_header": "def sol(target=0):",
    "sol_docstring": "    \"\"\"\n    Define a four-wise Fibonacci sequence to be a sequence such that each number is the sum of the previous\n    four. Given a target number, find an initial four numbers such that the 100th number in the sequence is the\n    given target number.\n\n    Sample Input:\n    0\n\n    Sample Output:\n    [0, 0, 0, 0]\n    \"\"\"",
    "sol_bodies": [
      "    nums = [target, 0, 0, 0]\n    for i in range(99):\n        x = nums[3] - sum(nums[:3])  # x is such that x + nums[:3] == nums[3]\n        nums = [x] + nums[:3]\n    return nums"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#46\n\nAlmost identical to problem 63",
    "weight": 1.0
  },
  {
    "name": "Median:0",
    "sat": "def sat(x: int, nums=[132666041, 237412, 28141, -12, 11939, 912414, 17], upper=133658965):\n    dev = sum(n - x for n in nums)\n    return dev <= upper",
    "ans_type": "int",
    "sol_header": "def sol(nums=[132666041, 237412, 28141, -12, 11939, 912414, 17], upper=133658965):",
    "sol_docstring": "    \"\"\"\n    Find an integer that minimizes the sum of absolute deviations with respect to the given numbers.\n\n    Sample Input:\n    [3, 6, 1, 2, 5, 4, 100], upper=105\n\n    Sample Output:\n    4\n    \"\"\"",
    "sol_bodies": [
      "    return sorted(nums)[len(nums) // 2] if nums else 0"
    ],
    "module": "human_eval.py",
    "notes": "One definition of the median is a number that minimizes the sum of absolute deviations. When there are an\neven number of items, there is an interval of valid solutions.\n\nInspired by [HumanEval](https://github.com/openai/human-eval) \\#47",
    "weight": 1.0
  },
  {
    "name": "Median:1",
    "sat": "def sat(x: int, nums=[-8813279918, 7464351342, 8037181984, 8564600186, 660800781], upper=-21408102335):\n    dev = sum(n - x for n in nums)\n    return dev <= upper",
    "ans_type": "int",
    "sol_header": "def sol(nums=[-8813279918, 7464351342, 8037181984, 8564600186, 660800781], upper=-21408102335):",
    "sol_docstring": "    \"\"\"\n    Find an integer that minimizes the sum of absolute deviations with respect to the given numbers.\n\n    Sample Input:\n    [3, 6, 1, 2, 5, 4, 100], upper=105\n\n    Sample Output:\n    4\n    \"\"\"",
    "sol_bodies": [
      "    return sorted(nums)[len(nums) // 2] if nums else 0"
    ],
    "module": "human_eval.py",
    "notes": "One definition of the median is a number that minimizes the sum of absolute deviations. When there are an\neven number of items, there is an interval of valid solutions.\n\nInspired by [HumanEval](https://github.com/openai/human-eval) \\#47",
    "weight": 1.0
  },
  {
    "name": "Median:2",
    "sat": "def sat(x: int, nums=[], upper=0):\n    dev = sum(n - x for n in nums)\n    return dev <= upper",
    "ans_type": "int",
    "sol_header": "def sol(nums=[], upper=0):",
    "sol_docstring": "    \"\"\"\n    Find an integer that minimizes the sum of absolute deviations with respect to the given numbers.\n\n    Sample Input:\n    [3, 6, 1, 2, 5, 4, 100], upper=105\n\n    Sample Output:\n    4\n    \"\"\"",
    "sol_bodies": [
      "    return sorted(nums)[len(nums) // 2] if nums else 0"
    ],
    "module": "human_eval.py",
    "notes": "One definition of the median is a number that minimizes the sum of absolute deviations. When there are an\neven number of items, there is an interval of valid solutions.\n\nInspired by [HumanEval](https://github.com/openai/human-eval) \\#47",
    "weight": 1.0
  },
  {
    "name": "Median:3",
    "sat": "def sat(x: int, nums=[-2350083760, -34560579, 3780403495, -9390708907, 2424237816, -6782611896, 624505871], upper=-11486893907):\n    dev = sum(n - x for n in nums)\n    return dev <= upper",
    "ans_type": "int",
    "sol_header": "def sol(nums=[-2350083760, -34560579, 3780403495, -9390708907, 2424237816, -6782611896, 624505871], upper=-11486893907):",
    "sol_docstring": "    \"\"\"\n    Find an integer that minimizes the sum of absolute deviations with respect to the given numbers.\n\n    Sample Input:\n    [3, 6, 1, 2, 5, 4, 100], upper=105\n\n    Sample Output:\n    4\n    \"\"\"",
    "sol_bodies": [
      "    return sorted(nums)[len(nums) // 2] if nums else 0"
    ],
    "module": "human_eval.py",
    "notes": "One definition of the median is a number that minimizes the sum of absolute deviations. When there are an\neven number of items, there is an interval of valid solutions.\n\nInspired by [HumanEval](https://github.com/openai/human-eval) \\#47",
    "weight": 1.0
  },
  {
    "name": "Median:4",
    "sat": "def sat(x: int, nums=[-2410166269, 5887293672], upper=-8297459941):\n    dev = sum(n - x for n in nums)\n    return dev <= upper",
    "ans_type": "int",
    "sol_header": "def sol(nums=[-2410166269, 5887293672], upper=-8297459941):",
    "sol_docstring": "    \"\"\"\n    Find an integer that minimizes the sum of absolute deviations with respect to the given numbers.\n\n    Sample Input:\n    [3, 6, 1, 2, 5, 4, 100], upper=105\n\n    Sample Output:\n    4\n    \"\"\"",
    "sol_bodies": [
      "    return sorted(nums)[len(nums) // 2] if nums else 0"
    ],
    "module": "human_eval.py",
    "notes": "One definition of the median is a number that minimizes the sum of absolute deviations. When there are an\neven number of items, there is an interval of valid solutions.\n\nInspired by [HumanEval](https://github.com/openai/human-eval) \\#47",
    "weight": 1.0
  },
  {
    "name": "Palindrome:0",
    "sat": "def sat(pals: List[bool], strs=['palindrome', 'madamimadam', '', 'foo', 'eyes', '(-:-)']):\n    return all(pals[i] == (s == s[::-1]) for i, s in enumerate(strs))",
    "ans_type": "List[bool]",
    "sol_header": "def sol(strs=['palindrome', 'madamimadam', '', 'foo', 'eyes', '(-:-)']):",
    "sol_docstring": "    \"\"\"\n    Test whether the given strings are palindromes\n\n    Sample Input:\n    [\"aba\", \"no\"]\n\n    Sample Output:\n    [True, False]\n    \"\"\"",
    "sol_bodies": [
      "    return [s == s[::-1] for s in strs]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#48",
    "weight": 1.0
  },
  {
    "name": "Palindrome:1",
    "sat": "def sat(pals: List[bool], strs=['getuteg', 'quiuq', 'tebetextxetebet', 'quyquykame', 'palimubibibumilap', 'chirowykigollogikyworihc', 'jyt', 'zenoryluchydoquuzohehozuuqodyhculyronez', 'gumizilixogylygoxilizimug']):\n    return all(pals[i] == (s == s[::-1]) for i, s in enumerate(strs))",
    "ans_type": "List[bool]",
    "sol_header": "def sol(strs=['getuteg', 'quiuq', 'tebetextxetebet', 'quyquykame', 'palimubibibumilap', 'chirowykigollogikyworihc', 'jyt', 'zenoryluchydoquuzohehozuuqodyhculyronez', 'gumizilixogylygoxilizimug']):",
    "sol_docstring": "    \"\"\"\n    Test whether the given strings are palindromes\n\n    Sample Input:\n    [\"aba\", \"no\"]\n\n    Sample Output:\n    [True, False]\n    \"\"\"",
    "sol_bodies": [
      "    return [s == s[::-1] for s in strs]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#48",
    "weight": 1.0
  },
  {
    "name": "Palindrome:2",
    "sat": "def sat(pals: List[bool], strs=['hahez', 'fuchuwas', 'fatextynuruce', 'wetewotuzoggozutowetew', 'vutot']):\n    return all(pals[i] == (s == s[::-1]) for i, s in enumerate(strs))",
    "ans_type": "List[bool]",
    "sol_header": "def sol(strs=['hahez', 'fuchuwas', 'fatextynuruce', 'wetewotuzoggozutowetew', 'vutot']):",
    "sol_docstring": "    \"\"\"\n    Test whether the given strings are palindromes\n\n    Sample Input:\n    [\"aba\", \"no\"]\n\n    Sample Output:\n    [True, False]\n    \"\"\"",
    "sol_bodies": [
      "    return [s == s[::-1] for s in strs]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#48",
    "weight": 1.0
  },
  {
    "name": "Palindrome:3",
    "sat": "def sat(pals: List[bool], strs=['wexivivixew', 'fyzalagalazyf', 's', 'quizylymaquequqeuqamylyziuq', 'cydilozuthytex', 'quu', 'vygylaf', 'chotexttxetohc', 'hequedipothovof']):\n    return all(pals[i] == (s == s[::-1]) for i, s in enumerate(strs))",
    "ans_type": "List[bool]",
    "sol_header": "def sol(strs=['wexivivixew', 'fyzalagalazyf', 's', 'quizylymaquequqeuqamylyziuq', 'cydilozuthytex', 'quu', 'vygylaf', 'chotexttxetohc', 'hequedipothovof']):",
    "sol_docstring": "    \"\"\"\n    Test whether the given strings are palindromes\n\n    Sample Input:\n    [\"aba\", \"no\"]\n\n    Sample Output:\n    [True, False]\n    \"\"\"",
    "sol_bodies": [
      "    return [s == s[::-1] for s in strs]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#48",
    "weight": 1.0
  },
  {
    "name": "Palindrome:4",
    "sat": "def sat(pals: List[bool], strs=[]):\n    return all(pals[i] == (s == s[::-1]) for i, s in enumerate(strs))",
    "ans_type": "List[bool]",
    "sol_header": "def sol(strs=[]):",
    "sol_docstring": "    \"\"\"\n    Test whether the given strings are palindromes\n\n    Sample Input:\n    [\"aba\", \"no\"]\n\n    Sample Output:\n    [True, False]\n    \"\"\"",
    "sol_bodies": [
      "    return [s == s[::-1] for s in strs]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#48",
    "weight": 1.0
  },
  {
    "name": "LittleFermat:0",
    "sat": "def sat(exp_poly: List[int], d=74152093423, poly=[1, 6, 3, 1, 0, 4, 4]):\n    p = len(poly)\n    assert p > 2 and all(p % i for i in range(2, p)), \"Hint: p is a prime > 2\"\n\n    def val(coeffs, n):  # evaluate polynomial mod p\n        return sum(c * pow(n, i, p) for i, c in enumerate(coeffs)) % p\n\n    return all(val(exp_poly, n) == pow(val(poly, n), d, p) for n in range(p))",
    "ans_type": "List[int]",
    "sol_header": "def sol(d=74152093423, poly=[1, 6, 3, 1, 0, 4, 4]):",
    "sol_docstring": "    \"\"\"\n    Fermat's little theorem implies that any polynomial can be written equivalently as a degree p-1\n    polynomial (mod p).\n    Given the p coefficients of a polynomial poly, compute a polynomial equivalent to poly^d (mod p).\n\n    Sample Input:\n    d=2, poly=[1, 0, 0, 1, 0]  # 1 + x^3\n\n    Sample Output:\n    [1, 0, 1, 2, 0]  # 1+ x^2 + 2x^3 because (1 + x^3)^2 = 1 + 2x^3 + x^6 and x^6 = x^2 (mod 5)\n    \"\"\"",
    "sol_bodies": [
      "    \"\"\"\n    Use repeated squaring to exponentiate polynomial\n    \"\"\"\n    p = len(poly)\n\n    def prod(poly1, poly2):  # multiply two polynomials mod p\n        ans = [0] * p\n        for i, a in enumerate(poly1):\n            for j, b in enumerate(poly2):\n                e = (i + j) % (p - 1)\n                if e == 0 and i + j > 1:\n                    e = p - 1\n                ans[e] = (ans[e] + a * b) % p\n        return ans\n\n    ans = [1] + [0] * (p - 1)\n    while d:\n        if d % 2:\n            ans = prod(ans, poly)\n        poly = prod(poly, poly)\n        d //= 2\n    # for i in range(d):\n    #     ans = prod(ans, poly)\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Harder but loosely inspired by [HumanEval](https://github.com/openai/human-eval) \\#49",
    "weight": 1.0
  },
  {
    "name": "ShiftChars:0",
    "sat": "def sat(orig: str, result=\"Hello, world!\", shift=7):\n    n = len(result)\n    assert len(orig) == n\n    return all(ord(orig[i]) + shift == ord(result[i]) for i in range(n))",
    "ans_type": "str",
    "sol_header": "def sol(result=\"Hello, world!\", shift=7):",
    "sol_docstring": "    \"\"\"\n    Find a string which, when each character is shifted (ascii incremented) by shift, gives the result.\n\n    Sample Input:\n    result='very good', shift=-1\n\n    Sample Output:\n    'wfsz!hppe'\n    \"\"\"",
    "sol_bodies": [
      "    return \"\".join(chr(ord(c) - shift) for c in result)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#50",
    "weight": 1.0
  },
  {
    "name": "ShiftChars:1",
    "sat": "def sat(orig: str, result=\"rupomykecykynuric\", shift=-9):\n    n = len(result)\n    assert len(orig) == n\n    return all(ord(orig[i]) + shift == ord(result[i]) for i in range(n))",
    "ans_type": "str",
    "sol_header": "def sol(result=\"rupomykecykynuric\", shift=-9):",
    "sol_docstring": "    \"\"\"\n    Find a string which, when each character is shifted (ascii incremented) by shift, gives the result.\n\n    Sample Input:\n    result='very good', shift=-1\n\n    Sample Output:\n    'wfsz!hppe'\n    \"\"\"",
    "sol_bodies": [
      "    return \"\".join(chr(ord(c) - shift) for c in result)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#50",
    "weight": 1.0
  },
  {
    "name": "ShiftChars:2",
    "sat": "def sat(orig: str, result=\"vicyza\", shift=7):\n    n = len(result)\n    assert len(orig) == n\n    return all(ord(orig[i]) + shift == ord(result[i]) for i in range(n))",
    "ans_type": "str",
    "sol_header": "def sol(result=\"vicyza\", shift=7):",
    "sol_docstring": "    \"\"\"\n    Find a string which, when each character is shifted (ascii incremented) by shift, gives the result.\n\n    Sample Input:\n    result='very good', shift=-1\n\n    Sample Output:\n    'wfsz!hppe'\n    \"\"\"",
    "sol_bodies": [
      "    return \"\".join(chr(ord(c) - shift) for c in result)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#50",
    "weight": 1.0
  },
  {
    "name": "ShiftChars:3",
    "sat": "def sat(orig: str, result=\"nihyzatijyjoke\", shift=8):\n    n = len(result)\n    assert len(orig) == n\n    return all(ord(orig[i]) + shift == ord(result[i]) for i in range(n))",
    "ans_type": "str",
    "sol_header": "def sol(result=\"nihyzatijyjoke\", shift=8):",
    "sol_docstring": "    \"\"\"\n    Find a string which, when each character is shifted (ascii incremented) by shift, gives the result.\n\n    Sample Input:\n    result='very good', shift=-1\n\n    Sample Output:\n    'wfsz!hppe'\n    \"\"\"",
    "sol_bodies": [
      "    return \"\".join(chr(ord(c) - shift) for c in result)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#50",
    "weight": 1.0
  },
  {
    "name": "ShiftChars:4",
    "sat": "def sat(orig: str, result=\"tuthijotext\", shift=6):\n    n = len(result)\n    assert len(orig) == n\n    return all(ord(orig[i]) + shift == ord(result[i]) for i in range(n))",
    "ans_type": "str",
    "sol_header": "def sol(result=\"tuthijotext\", shift=6):",
    "sol_docstring": "    \"\"\"\n    Find a string which, when each character is shifted (ascii incremented) by shift, gives the result.\n\n    Sample Input:\n    result='very good', shift=-1\n\n    Sample Output:\n    'wfsz!hppe'\n    \"\"\"",
    "sol_bodies": [
      "    return \"\".join(chr(ord(c) - shift) for c in result)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#50",
    "weight": 1.0
  },
  {
    "name": "RemoveVowels:0",
    "sat": "def sat(txt: str, text=\"Hello, world!\"):\n    n = 0\n    for c in text:\n        if c.lower() not in \"aeiou\":\n            assert txt[n] == c\n            n += 1\n    assert n == len(txt)\n    return True",
    "ans_type": "str",
    "sol_header": "def sol(text=\"Hello, world!\"):",
    "sol_docstring": "    \"\"\"\n    Remove the vowels from the original string.\n\n    Sample Input:\n    \"very good\"\n\n    Sample Output:\n    'vry gd'\n    \"\"\"",
    "sol_bodies": [
      "    return \"\".join(c for c in text if c.lower() not in \"aeiou\")"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#51\n\nRelated to FindVowels \\#54",
    "weight": 1.0
  },
  {
    "name": "RemoveVowels:1",
    "sat": "def sat(txt: str, text=\"GUSUXeGePUJibAqUojo\"):\n    n = 0\n    for c in text:\n        if c.lower() not in \"aeiou\":\n            assert txt[n] == c\n            n += 1\n    assert n == len(txt)\n    return True",
    "ans_type": "str",
    "sol_header": "def sol(text=\"GUSUXeGePUJibAqUojo\"):",
    "sol_docstring": "    \"\"\"\n    Remove the vowels from the original string.\n\n    Sample Input:\n    \"very good\"\n\n    Sample Output:\n    'vry gd'\n    \"\"\"",
    "sol_bodies": [
      "    return \"\".join(c for c in text if c.lower() not in \"aeiou\")"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#51\n\nRelated to FindVowels \\#54",
    "weight": 1.0
  },
  {
    "name": "RemoveVowels:2",
    "sat": "def sat(txt: str, text=\"CAsaVyVOTHobAHEwIhI\"):\n    n = 0\n    for c in text:\n        if c.lower() not in \"aeiou\":\n            assert txt[n] == c\n            n += 1\n    assert n == len(txt)\n    return True",
    "ans_type": "str",
    "sol_header": "def sol(text=\"CAsaVyVOTHobAHEwIhI\"):",
    "sol_docstring": "    \"\"\"\n    Remove the vowels from the original string.\n\n    Sample Input:\n    \"very good\"\n\n    Sample Output:\n    'vry gd'\n    \"\"\"",
    "sol_bodies": [
      "    return \"\".join(c for c in text if c.lower() not in \"aeiou\")"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#51\n\nRelated to FindVowels \\#54",
    "weight": 1.0
  },
  {
    "name": "RemoveVowels:3",
    "sat": "def sat(txt: str, text=\"TeX\"):\n    n = 0\n    for c in text:\n        if c.lower() not in \"aeiou\":\n            assert txt[n] == c\n            n += 1\n    assert n == len(txt)\n    return True",
    "ans_type": "str",
    "sol_header": "def sol(text=\"TeX\"):",
    "sol_docstring": "    \"\"\"\n    Remove the vowels from the original string.\n\n    Sample Input:\n    \"very good\"\n\n    Sample Output:\n    'vry gd'\n    \"\"\"",
    "sol_bodies": [
      "    return \"\".join(c for c in text if c.lower() not in \"aeiou\")"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#51\n\nRelated to FindVowels \\#54",
    "weight": 1.0
  },
  {
    "name": "RemoveVowels:4",
    "sat": "def sat(txt: str, text=\"Q\"):\n    n = 0\n    for c in text:\n        if c.lower() not in \"aeiou\":\n            assert txt[n] == c\n            n += 1\n    assert n == len(txt)\n    return True",
    "ans_type": "str",
    "sol_header": "def sol(text=\"Q\"):",
    "sol_docstring": "    \"\"\"\n    Remove the vowels from the original string.\n\n    Sample Input:\n    \"very good\"\n\n    Sample Output:\n    'vry gd'\n    \"\"\"",
    "sol_bodies": [
      "    return \"\".join(c for c in text if c.lower() not in \"aeiou\")"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#51\n\nRelated to FindVowels \\#54",
    "weight": 1.0
  },
  {
    "name": "BelowThreshold:0",
    "sat": "def sat(indexes: List[int], nums=[0, 2, 17, 4, 4213, 322, 102, 29, 15, 39, 55], thresh=100):\n    j = 0\n    for i, n in enumerate(nums):\n        if n < thresh:\n            assert indexes[j] == i\n            j += 1\n    assert j == len(indexes)\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[0, 2, 17, 4, 4213, 322, 102, 29, 15, 39, 55], thresh=100):",
    "sol_docstring": "    \"\"\"\n    Find the indexes of numbers below a given threshold\n\n    Sample Input:\n    nums=[4, 7, 11, 5], threshold=10\n\n    Sample Output:\n    [0, 1, 3]\n    \"\"\"",
    "sol_bodies": [
      "    return [i for i, n in enumerate(nums) if n < thresh]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#52",
    "weight": 1.0
  },
  {
    "name": "BelowThreshold:1",
    "sat": "def sat(indexes: List[int], nums=[35, -96, -51, 7, 56, 0], thresh=-30):\n    j = 0\n    for i, n in enumerate(nums):\n        if n < thresh:\n            assert indexes[j] == i\n            j += 1\n    assert j == len(indexes)\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[35, -96, -51, 7, 56, 0], thresh=-30):",
    "sol_docstring": "    \"\"\"\n    Find the indexes of numbers below a given threshold\n\n    Sample Input:\n    nums=[4, 7, 11, 5], threshold=10\n\n    Sample Output:\n    [0, 1, 3]\n    \"\"\"",
    "sol_bodies": [
      "    return [i for i, n in enumerate(nums) if n < thresh]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#52",
    "weight": 1.0
  },
  {
    "name": "BelowThreshold:2",
    "sat": "def sat(indexes: List[int], nums=[-20, 45], thresh=91):\n    j = 0\n    for i, n in enumerate(nums):\n        if n < thresh:\n            assert indexes[j] == i\n            j += 1\n    assert j == len(indexes)\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[-20, 45], thresh=91):",
    "sol_docstring": "    \"\"\"\n    Find the indexes of numbers below a given threshold\n\n    Sample Input:\n    nums=[4, 7, 11, 5], threshold=10\n\n    Sample Output:\n    [0, 1, 3]\n    \"\"\"",
    "sol_bodies": [
      "    return [i for i, n in enumerate(nums) if n < thresh]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#52",
    "weight": 1.0
  },
  {
    "name": "BelowThreshold:3",
    "sat": "def sat(indexes: List[int], nums=[84, 56, 13], thresh=-80):\n    j = 0\n    for i, n in enumerate(nums):\n        if n < thresh:\n            assert indexes[j] == i\n            j += 1\n    assert j == len(indexes)\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[84, 56, 13], thresh=-80):",
    "sol_docstring": "    \"\"\"\n    Find the indexes of numbers below a given threshold\n\n    Sample Input:\n    nums=[4, 7, 11, 5], threshold=10\n\n    Sample Output:\n    [0, 1, 3]\n    \"\"\"",
    "sol_bodies": [
      "    return [i for i, n in enumerate(nums) if n < thresh]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#52",
    "weight": 1.0
  },
  {
    "name": "BelowThreshold:4",
    "sat": "def sat(indexes: List[int], nums=[3, -70, -88, 38], thresh=95):\n    j = 0\n    for i, n in enumerate(nums):\n        if n < thresh:\n            assert indexes[j] == i\n            j += 1\n    assert j == len(indexes)\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[3, -70, -88, 38], thresh=95):",
    "sol_docstring": "    \"\"\"\n    Find the indexes of numbers below a given threshold\n\n    Sample Input:\n    nums=[4, 7, 11, 5], threshold=10\n\n    Sample Output:\n    [0, 1, 3]\n    \"\"\"",
    "sol_bodies": [
      "    return [i for i, n in enumerate(nums) if n < thresh]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#52",
    "weight": 1.0
  },
  {
    "name": "ListTotal:0",
    "sat": "def sat(n: int, nums=[10, 42, 17, 9, 1315182, 184, 102, 29, 15, 39, 755]):\n    return sum(nums + [-n]) == 0",
    "ans_type": "int",
    "sol_header": "def sol(nums=[10, 42, 17, 9, 1315182, 184, 102, 29, 15, 39, 755]):",
    "sol_docstring": "    \"\"\"\n    Find the number which when appended to the list makes the total 0\n\n    Sample Input:\n    [1, 2, 3]\n\n    Sample Output:\n    -6\n    \"\"\"",
    "sol_bodies": [
      "    return sum(nums)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#53",
    "weight": 1.0
  },
  {
    "name": "ListTotal:1",
    "sat": "def sat(n: int, nums=[40388491, -864787067, 862143530, 604555885, -81302113, 717834573]):\n    return sum(nums + [-n]) == 0",
    "ans_type": "int",
    "sol_header": "def sol(nums=[40388491, -864787067, 862143530, 604555885, -81302113, 717834573]):",
    "sol_docstring": "    \"\"\"\n    Find the number which when appended to the list makes the total 0\n\n    Sample Input:\n    [1, 2, 3]\n\n    Sample Output:\n    -6\n    \"\"\"",
    "sol_bodies": [
      "    return sum(nums)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#53",
    "weight": 1.0
  },
  {
    "name": "ListTotal:2",
    "sat": "def sat(n: int, nums=[-93, 35, -95, -7, -85, 2]):\n    return sum(nums + [-n]) == 0",
    "ans_type": "int",
    "sol_header": "def sol(nums=[-93, 35, -95, -7, -85, 2]):",
    "sol_docstring": "    \"\"\"\n    Find the number which when appended to the list makes the total 0\n\n    Sample Input:\n    [1, 2, 3]\n\n    Sample Output:\n    -6\n    \"\"\"",
    "sol_bodies": [
      "    return sum(nums)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#53",
    "weight": 1.0
  },
  {
    "name": "ListTotal:3",
    "sat": "def sat(n: int, nums=[-2040052, -6582681, -6604315, 1042475, 7287312, 8050849, 5566992, 4332017]):\n    return sum(nums + [-n]) == 0",
    "ans_type": "int",
    "sol_header": "def sol(nums=[-2040052, -6582681, -6604315, 1042475, 7287312, 8050849, 5566992, 4332017]):",
    "sol_docstring": "    \"\"\"\n    Find the number which when appended to the list makes the total 0\n\n    Sample Input:\n    [1, 2, 3]\n\n    Sample Output:\n    -6\n    \"\"\"",
    "sol_bodies": [
      "    return sum(nums)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#53",
    "weight": 1.0
  },
  {
    "name": "ListTotal:4",
    "sat": "def sat(n: int, nums=[-1, -1, -1, -1, 0, 0]):\n    return sum(nums + [-n]) == 0",
    "ans_type": "int",
    "sol_header": "def sol(nums=[-1, -1, -1, -1, 0, 0]):",
    "sol_docstring": "    \"\"\"\n    Find the number which when appended to the list makes the total 0\n\n    Sample Input:\n    [1, 2, 3]\n\n    Sample Output:\n    -6\n    \"\"\"",
    "sol_bodies": [
      "    return sum(nums)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#53",
    "weight": 1.0
  },
  {
    "name": "DiffChars:0",
    "sat": "def sat(c: str, a=\"the quick brown fox jumped over the lazy dog\", b=\"how vexingly quick daft zebras jump\"):\n    return (c in a) != (c in b)",
    "ans_type": "str",
    "sol_header": "def sol(a=\"the quick brown fox jumped over the lazy dog\", b=\"how vexingly quick daft zebras jump\"):",
    "sol_docstring": "    \"\"\"\n    Find a character in one string that is not in the other.\n\n    Sample Input:\n    'Do you like green eggs and ham?', 'I do not like green eggs and ham.'\n\n    Sample Output:\n    't'  # or .?yI\n    \"\"\"",
    "sol_bodies": [
      "    return sorted(set(a).symmetric_difference(b))[0]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#54",
    "weight": 1.0
  },
  {
    "name": "DiffChars:1",
    "sat": "def sat(c: str, a=\"jyhud\", b=\"nexysezomevus\"):\n    return (c in a) != (c in b)",
    "ans_type": "str",
    "sol_header": "def sol(a=\"jyhud\", b=\"nexysezomevus\"):",
    "sol_docstring": "    \"\"\"\n    Find a character in one string that is not in the other.\n\n    Sample Input:\n    'Do you like green eggs and ham?', 'I do not like green eggs and ham.'\n\n    Sample Output:\n    't'  # or .?yI\n    \"\"\"",
    "sol_bodies": [
      "    return sorted(set(a).symmetric_difference(b))[0]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#54",
    "weight": 1.0
  },
  {
    "name": "DiffChars:2",
    "sat": "def sat(c: str, a=\"vofawawumovisajuryt\", b=\"t\"):\n    return (c in a) != (c in b)",
    "ans_type": "str",
    "sol_header": "def sol(a=\"vofawawumovisajuryt\", b=\"t\"):",
    "sol_docstring": "    \"\"\"\n    Find a character in one string that is not in the other.\n\n    Sample Input:\n    'Do you like green eggs and ham?', 'I do not like green eggs and ham.'\n\n    Sample Output:\n    't'  # or .?yI\n    \"\"\"",
    "sol_bodies": [
      "    return sorted(set(a).symmetric_difference(b))[0]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#54",
    "weight": 1.0
  },
  {
    "name": "DiffChars:3",
    "sat": "def sat(c: str, a=\"textuzaxoch\", b=\"acehmottuxxz\"):\n    return (c in a) != (c in b)",
    "ans_type": "str",
    "sol_header": "def sol(a=\"textuzaxoch\", b=\"acehmottuxxz\"):",
    "sol_docstring": "    \"\"\"\n    Find a character in one string that is not in the other.\n\n    Sample Input:\n    'Do you like green eggs and ham?', 'I do not like green eggs and ham.'\n\n    Sample Output:\n    't'  # or .?yI\n    \"\"\"",
    "sol_bodies": [
      "    return sorted(set(a).symmetric_difference(b))[0]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#54",
    "weight": 1.0
  },
  {
    "name": "DiffChars:4",
    "sat": "def sat(c: str, a=\"quytextila\", b=\"mydyhopakokinavo\"):\n    return (c in a) != (c in b)",
    "ans_type": "str",
    "sol_header": "def sol(a=\"quytextila\", b=\"mydyhopakokinavo\"):",
    "sol_docstring": "    \"\"\"\n    Find a character in one string that is not in the other.\n\n    Sample Input:\n    'Do you like green eggs and ham?', 'I do not like green eggs and ham.'\n\n    Sample Output:\n    't'  # or .?yI\n    \"\"\"",
    "sol_bodies": [
      "    return sorted(set(a).symmetric_difference(b))[0]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#54",
    "weight": 1.0
  },
  {
    "name": "Fibonacci:0",
    "sat": "def sat(nums: List[int], n=1402):\n    return nums[0] == nums[1] == 1 and all(nums[i + 2] == nums[i + 1] + nums[i] for i in range(n - 2))",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=1402):",
    "sol_docstring": "    \"\"\"\n    Find the first n Fibonacci numbers\n\n    Sample Input:\n    4\n\n    Sample Output:\n    [1, 1, 2, 3]\n    \"\"\"",
    "sol_bodies": [
      "    ans = [1, 1]\n    while len(ans) < n:\n        ans.append(ans[-1] + ans[-2])\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#55",
    "weight": 1.0
  },
  {
    "name": "Fibonacci:1",
    "sat": "def sat(nums: List[int], n=537):\n    return nums[0] == nums[1] == 1 and all(nums[i + 2] == nums[i + 1] + nums[i] for i in range(n - 2))",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=537):",
    "sol_docstring": "    \"\"\"\n    Find the first n Fibonacci numbers\n\n    Sample Input:\n    4\n\n    Sample Output:\n    [1, 1, 2, 3]\n    \"\"\"",
    "sol_bodies": [
      "    ans = [1, 1]\n    while len(ans) < n:\n        ans.append(ans[-1] + ans[-2])\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#55",
    "weight": 1.0
  },
  {
    "name": "Fibonacci:2",
    "sat": "def sat(nums: List[int], n=6968):\n    return nums[0] == nums[1] == 1 and all(nums[i + 2] == nums[i + 1] + nums[i] for i in range(n - 2))",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=6968):",
    "sol_docstring": "    \"\"\"\n    Find the first n Fibonacci numbers\n\n    Sample Input:\n    4\n\n    Sample Output:\n    [1, 1, 2, 3]\n    \"\"\"",
    "sol_bodies": [
      "    ans = [1, 1]\n    while len(ans) < n:\n        ans.append(ans[-1] + ans[-2])\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#55",
    "weight": 1.0
  },
  {
    "name": "Fibonacci:3",
    "sat": "def sat(nums: List[int], n=5585):\n    return nums[0] == nums[1] == 1 and all(nums[i + 2] == nums[i + 1] + nums[i] for i in range(n - 2))",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=5585):",
    "sol_docstring": "    \"\"\"\n    Find the first n Fibonacci numbers\n\n    Sample Input:\n    4\n\n    Sample Output:\n    [1, 1, 2, 3]\n    \"\"\"",
    "sol_bodies": [
      "    ans = [1, 1]\n    while len(ans) < n:\n        ans.append(ans[-1] + ans[-2])\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#55",
    "weight": 1.0
  },
  {
    "name": "Fibonacci:4",
    "sat": "def sat(nums: List[int], n=7277):\n    return nums[0] == nums[1] == 1 and all(nums[i + 2] == nums[i + 1] + nums[i] for i in range(n - 2))",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=7277):",
    "sol_docstring": "    \"\"\"\n    Find the first n Fibonacci numbers\n\n    Sample Input:\n    4\n\n    Sample Output:\n    [1, 1, 2, 3]\n    \"\"\"",
    "sol_bodies": [
      "    ans = [1, 1]\n    while len(ans) < n:\n        ans.append(ans[-1] + ans[-2])\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#55",
    "weight": 1.0
  },
  {
    "name": "MatchBrackets:0",
    "sat": "def sat(matches: List[int], brackets=\"<<>><<<><>><<>>>\"):\n    for i in range(len(brackets)):\n        j = matches[i]\n        c = brackets[i]\n        assert brackets[j] != c and matches[j] == i and all(i < matches[k] < j for k in range(i + 1, j))\n    return len(matches) == len(brackets)",
    "ans_type": "List[int]",
    "sol_header": "def sol(brackets=\"<<>><<<><>><<>>>\"):",
    "sol_docstring": "    \"\"\"\n    Find the index of the matching brackets for each character in the string\n\n    Sample Input:\n    \"<><>\"\n\n    Sample Output:\n    [1, 0, 3, 2]\n    \"\"\"",
    "sol_bodies": [
      "    matches = [-1] * len(brackets)\n    opens = []\n    for i, c in enumerate(brackets):\n        if c == \"<\":\n            opens.append(i)\n        else:\n            assert c == \">\"\n            j = opens.pop()\n            matches[i] = j\n            matches[j] = i\n    return matches"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#56",
    "weight": 1.0
  },
  {
    "name": "MatchBrackets:1",
    "sat": "def sat(matches: List[int], brackets=\"<><><><><<>><<<><><<>>>><><><>\"):\n    for i in range(len(brackets)):\n        j = matches[i]\n        c = brackets[i]\n        assert brackets[j] != c and matches[j] == i and all(i < matches[k] < j for k in range(i + 1, j))\n    return len(matches) == len(brackets)",
    "ans_type": "List[int]",
    "sol_header": "def sol(brackets=\"<><><><><<>><<<><><<>>>><><><>\"):",
    "sol_docstring": "    \"\"\"\n    Find the index of the matching brackets for each character in the string\n\n    Sample Input:\n    \"<><>\"\n\n    Sample Output:\n    [1, 0, 3, 2]\n    \"\"\"",
    "sol_bodies": [
      "    matches = [-1] * len(brackets)\n    opens = []\n    for i, c in enumerate(brackets):\n        if c == \"<\":\n            opens.append(i)\n        else:\n            assert c == \">\"\n            j = opens.pop()\n            matches[i] = j\n            matches[j] = i\n    return matches"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#56",
    "weight": 1.0
  },
  {
    "name": "MatchBrackets:2",
    "sat": "def sat(matches: List[int], brackets=\"<><><<<>><<<<><>>><<>><>>><>\"):\n    for i in range(len(brackets)):\n        j = matches[i]\n        c = brackets[i]\n        assert brackets[j] != c and matches[j] == i and all(i < matches[k] < j for k in range(i + 1, j))\n    return len(matches) == len(brackets)",
    "ans_type": "List[int]",
    "sol_header": "def sol(brackets=\"<><><<<>><<<<><>>><<>><>>><>\"):",
    "sol_docstring": "    \"\"\"\n    Find the index of the matching brackets for each character in the string\n\n    Sample Input:\n    \"<><>\"\n\n    Sample Output:\n    [1, 0, 3, 2]\n    \"\"\"",
    "sol_bodies": [
      "    matches = [-1] * len(brackets)\n    opens = []\n    for i, c in enumerate(brackets):\n        if c == \"<\":\n            opens.append(i)\n        else:\n            assert c == \">\"\n            j = opens.pop()\n            matches[i] = j\n            matches[j] = i\n    return matches"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#56",
    "weight": 1.0
  },
  {
    "name": "MatchBrackets:3",
    "sat": "def sat(matches: List[int], brackets=\"<><><><><<><><<><>>><><<>><><<>><><><><<<>><>><>\"):\n    for i in range(len(brackets)):\n        j = matches[i]\n        c = brackets[i]\n        assert brackets[j] != c and matches[j] == i and all(i < matches[k] < j for k in range(i + 1, j))\n    return len(matches) == len(brackets)",
    "ans_type": "List[int]",
    "sol_header": "def sol(brackets=\"<><><><><<><><<><>>><><<>><><<>><><><><<<>><>><>\"):",
    "sol_docstring": "    \"\"\"\n    Find the index of the matching brackets for each character in the string\n\n    Sample Input:\n    \"<><>\"\n\n    Sample Output:\n    [1, 0, 3, 2]\n    \"\"\"",
    "sol_bodies": [
      "    matches = [-1] * len(brackets)\n    opens = []\n    for i, c in enumerate(brackets):\n        if c == \"<\":\n            opens.append(i)\n        else:\n            assert c == \">\"\n            j = opens.pop()\n            matches[i] = j\n            matches[j] = i\n    return matches"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#56",
    "weight": 1.0
  },
  {
    "name": "MatchBrackets:4",
    "sat": "def sat(matches: List[int], brackets=\"<<<<<>>>>><><><<>>\"):\n    for i in range(len(brackets)):\n        j = matches[i]\n        c = brackets[i]\n        assert brackets[j] != c and matches[j] == i and all(i < matches[k] < j for k in range(i + 1, j))\n    return len(matches) == len(brackets)",
    "ans_type": "List[int]",
    "sol_header": "def sol(brackets=\"<<<<<>>>>><><><<>>\"):",
    "sol_docstring": "    \"\"\"\n    Find the index of the matching brackets for each character in the string\n\n    Sample Input:\n    \"<><>\"\n\n    Sample Output:\n    [1, 0, 3, 2]\n    \"\"\"",
    "sol_bodies": [
      "    matches = [-1] * len(brackets)\n    opens = []\n    for i, c in enumerate(brackets):\n        if c == \"<\":\n            opens.append(i)\n        else:\n            assert c == \">\"\n            j = opens.pop()\n            matches[i] = j\n            matches[j] = i\n    return matches"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#56",
    "weight": 1.0
  },
  {
    "name": "Monotonic:0",
    "sat": "def sat(direction: str, nums=[2, 4, 17, 29, 31, 1000, 416629]):\n    if direction == \"increasing\":\n        return all(nums[i] < nums[i + 1] for i in range(len(nums) - 1))\n    if direction == \"decreasing\":\n        return all(nums[i + 1] < nums[i] for i in range(len(nums) - 1))",
    "ans_type": "str",
    "sol_header": "def sol(nums=[2, 4, 17, 29, 31, 1000, 416629]):",
    "sol_docstring": "    \"\"\"\n    Determine the direction ('increasing' or 'decreasing') of monotonic sequence nums\n\n    Sample Input:\n    [1, 2, 5]\n\n    Sample Output:\n    \"increasing\"\n    \"\"\"",
    "sol_bodies": [
      "    return \"increasing\" if len(nums) > 1 and nums[1] > nums[0] else \"decreasing\""
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#57",
    "weight": 1.0
  },
  {
    "name": "Monotonic:1",
    "sat": "def sat(direction: str, nums=[540, 713, 887, 964]):\n    if direction == \"increasing\":\n        return all(nums[i] < nums[i + 1] for i in range(len(nums) - 1))\n    if direction == \"decreasing\":\n        return all(nums[i + 1] < nums[i] for i in range(len(nums) - 1))",
    "ans_type": "str",
    "sol_header": "def sol(nums=[540, 713, 887, 964]):",
    "sol_docstring": "    \"\"\"\n    Determine the direction ('increasing' or 'decreasing') of monotonic sequence nums\n\n    Sample Input:\n    [1, 2, 5]\n\n    Sample Output:\n    \"increasing\"\n    \"\"\"",
    "sol_bodies": [
      "    return \"increasing\" if len(nums) > 1 and nums[1] > nums[0] else \"decreasing\""
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#57",
    "weight": 1.0
  },
  {
    "name": "Monotonic:2",
    "sat": "def sat(direction: str, nums=[764, 291, 171]):\n    if direction == \"increasing\":\n        return all(nums[i] < nums[i + 1] for i in range(len(nums) - 1))\n    if direction == \"decreasing\":\n        return all(nums[i + 1] < nums[i] for i in range(len(nums) - 1))",
    "ans_type": "str",
    "sol_header": "def sol(nums=[764, 291, 171]):",
    "sol_docstring": "    \"\"\"\n    Determine the direction ('increasing' or 'decreasing') of monotonic sequence nums\n\n    Sample Input:\n    [1, 2, 5]\n\n    Sample Output:\n    \"increasing\"\n    \"\"\"",
    "sol_bodies": [
      "    return \"increasing\" if len(nums) > 1 and nums[1] > nums[0] else \"decreasing\""
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#57",
    "weight": 1.0
  },
  {
    "name": "Monotonic:3",
    "sat": "def sat(direction: str, nums=[74, 168, 229, 302, 430, 450, 481, 783]):\n    if direction == \"increasing\":\n        return all(nums[i] < nums[i + 1] for i in range(len(nums) - 1))\n    if direction == \"decreasing\":\n        return all(nums[i + 1] < nums[i] for i in range(len(nums) - 1))",
    "ans_type": "str",
    "sol_header": "def sol(nums=[74, 168, 229, 302, 430, 450, 481, 783]):",
    "sol_docstring": "    \"\"\"\n    Determine the direction ('increasing' or 'decreasing') of monotonic sequence nums\n\n    Sample Input:\n    [1, 2, 5]\n\n    Sample Output:\n    \"increasing\"\n    \"\"\"",
    "sol_bodies": [
      "    return \"increasing\" if len(nums) > 1 and nums[1] > nums[0] else \"decreasing\""
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#57",
    "weight": 1.0
  },
  {
    "name": "Monotonic:4",
    "sat": "def sat(direction: str, nums=[826, 784, 726, 537, 536, 392, 250, 241, 161]):\n    if direction == \"increasing\":\n        return all(nums[i] < nums[i + 1] for i in range(len(nums) - 1))\n    if direction == \"decreasing\":\n        return all(nums[i + 1] < nums[i] for i in range(len(nums) - 1))",
    "ans_type": "str",
    "sol_header": "def sol(nums=[826, 784, 726, 537, 536, 392, 250, 241, 161]):",
    "sol_docstring": "    \"\"\"\n    Determine the direction ('increasing' or 'decreasing') of monotonic sequence nums\n\n    Sample Input:\n    [1, 2, 5]\n\n    Sample Output:\n    \"increasing\"\n    \"\"\"",
    "sol_bodies": [
      "    return \"increasing\" if len(nums) > 1 and nums[1] > nums[0] else \"decreasing\""
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#57",
    "weight": 1.0
  },
  {
    "name": "CommonNumbers:0",
    "sat": "def sat(common: List[int], a=[2, 416629, 2, 4, 17, 29, 31, 1000], b=[31, 2, 4, 17, 29, 41205]):\n    return all((i in common) == (i in a and i in b) for i in a + b + common)",
    "ans_type": "List[int]",
    "sol_header": "def sol(a=[2, 416629, 2, 4, 17, 29, 31, 1000], b=[31, 2, 4, 17, 29, 41205]):",
    "sol_docstring": "    \"\"\"\n    Find numbers common to a and b\n\n    Sample Input:\n    [1, 2, 3], [3, 4, 5]\n\n    Sample Output:\n    [3]\n    \"\"\"",
    "sol_bodies": [
      "    return sorted(set(a).intersection(set(b)))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#58",
    "weight": 1.0
  },
  {
    "name": "CommonNumbers:1",
    "sat": "def sat(common: List[int], a=[824, 853, 392, 835, 225, 96], b=[73, 534, 705, 376, 376, 965, 404, 976]):\n    return all((i in common) == (i in a and i in b) for i in a + b + common)",
    "ans_type": "List[int]",
    "sol_header": "def sol(a=[824, 853, 392, 835, 225, 96], b=[73, 534, 705, 376, 376, 965, 404, 976]):",
    "sol_docstring": "    \"\"\"\n    Find numbers common to a and b\n\n    Sample Input:\n    [1, 2, 3], [3, 4, 5]\n\n    Sample Output:\n    [3]\n    \"\"\"",
    "sol_bodies": [
      "    return sorted(set(a).intersection(set(b)))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#58",
    "weight": 1.0
  },
  {
    "name": "CommonNumbers:2",
    "sat": "def sat(common: List[int], a=[338, 882, 92, 234], b=[993, 977, 403]):\n    return all((i in common) == (i in a and i in b) for i in a + b + common)",
    "ans_type": "List[int]",
    "sol_header": "def sol(a=[338, 882, 92, 234], b=[993, 977, 403]):",
    "sol_docstring": "    \"\"\"\n    Find numbers common to a and b\n\n    Sample Input:\n    [1, 2, 3], [3, 4, 5]\n\n    Sample Output:\n    [3]\n    \"\"\"",
    "sol_bodies": [
      "    return sorted(set(a).intersection(set(b)))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#58",
    "weight": 1.0
  },
  {
    "name": "CommonNumbers:3",
    "sat": "def sat(common: List[int], a=[950, 299, 581, 222, 490, 758, 58, 76, 808, 814], b=[790, 200, 814, 851, 902, 490, 581, 808, 950, 343, 758]):\n    return all((i in common) == (i in a and i in b) for i in a + b + common)",
    "ans_type": "List[int]",
    "sol_header": "def sol(a=[950, 299, 581, 222, 490, 758, 58, 76, 808, 814], b=[790, 200, 814, 851, 902, 490, 581, 808, 950, 343, 758]):",
    "sol_docstring": "    \"\"\"\n    Find numbers common to a and b\n\n    Sample Input:\n    [1, 2, 3], [3, 4, 5]\n\n    Sample Output:\n    [3]\n    \"\"\"",
    "sol_bodies": [
      "    return sorted(set(a).intersection(set(b)))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#58",
    "weight": 1.0
  },
  {
    "name": "CommonNumbers:4",
    "sat": "def sat(common: List[int], a=[452, 318, 348, 995, 733, 874, 699], b=[733, 348, 614, 874, 699, 995, 318, 167, 452]):\n    return all((i in common) == (i in a and i in b) for i in a + b + common)",
    "ans_type": "List[int]",
    "sol_header": "def sol(a=[452, 318, 348, 995, 733, 874, 699], b=[733, 348, 614, 874, 699, 995, 318, 167, 452]):",
    "sol_docstring": "    \"\"\"\n    Find numbers common to a and b\n\n    Sample Input:\n    [1, 2, 3], [3, 4, 5]\n\n    Sample Output:\n    [3]\n    \"\"\"",
    "sol_bodies": [
      "    return sorted(set(a).intersection(set(b)))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#58",
    "weight": 1.0
  },
  {
    "name": "LargestPrimeFactor:0",
    "sat": "def sat(p: int, n=101076):\n\n    def is_prime(m):\n        return all(m % i for i in range(2, m - 1))\n\n    return is_prime(p) and n % p == 0 and p > 0 and all(n % i or not is_prime(i) for i in range(p + 1, n))",
    "ans_type": "int",
    "sol_header": "def sol(n=101076):",
    "sol_docstring": "    \"\"\"\n    Find the largest prime factor of n.\n\n    Sample Input:\n    125\n\n    Sample Output:\n    5\n    \"\"\"",
    "sol_bodies": [
      "    def is_prime(m):\n        return all(m % i for i in range(2, m - 1))\n\n    return next(n // i for i in range(1, n) if n % i == 0 and is_prime(n // i))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#59",
    "weight": 1.0
  },
  {
    "name": "LargestPrimeFactor:1",
    "sat": "def sat(p: int, n=15132):\n\n    def is_prime(m):\n        return all(m % i for i in range(2, m - 1))\n\n    return is_prime(p) and n % p == 0 and p > 0 and all(n % i or not is_prime(i) for i in range(p + 1, n))",
    "ans_type": "int",
    "sol_header": "def sol(n=15132):",
    "sol_docstring": "    \"\"\"\n    Find the largest prime factor of n.\n\n    Sample Input:\n    125\n\n    Sample Output:\n    5\n    \"\"\"",
    "sol_bodies": [
      "    def is_prime(m):\n        return all(m % i for i in range(2, m - 1))\n\n    return next(n // i for i in range(1, n) if n % i == 0 and is_prime(n // i))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#59",
    "weight": 1.0
  },
  {
    "name": "LargestPrimeFactor:2",
    "sat": "def sat(p: int, n=22184):\n\n    def is_prime(m):\n        return all(m % i for i in range(2, m - 1))\n\n    return is_prime(p) and n % p == 0 and p > 0 and all(n % i or not is_prime(i) for i in range(p + 1, n))",
    "ans_type": "int",
    "sol_header": "def sol(n=22184):",
    "sol_docstring": "    \"\"\"\n    Find the largest prime factor of n.\n\n    Sample Input:\n    125\n\n    Sample Output:\n    5\n    \"\"\"",
    "sol_bodies": [
      "    def is_prime(m):\n        return all(m % i for i in range(2, m - 1))\n\n    return next(n // i for i in range(1, n) if n % i == 0 and is_prime(n // i))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#59",
    "weight": 1.0
  },
  {
    "name": "LargestPrimeFactor:3",
    "sat": "def sat(p: int, n=70875):\n\n    def is_prime(m):\n        return all(m % i for i in range(2, m - 1))\n\n    return is_prime(p) and n % p == 0 and p > 0 and all(n % i or not is_prime(i) for i in range(p + 1, n))",
    "ans_type": "int",
    "sol_header": "def sol(n=70875):",
    "sol_docstring": "    \"\"\"\n    Find the largest prime factor of n.\n\n    Sample Input:\n    125\n\n    Sample Output:\n    5\n    \"\"\"",
    "sol_bodies": [
      "    def is_prime(m):\n        return all(m % i for i in range(2, m - 1))\n\n    return next(n // i for i in range(1, n) if n % i == 0 and is_prime(n // i))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#59",
    "weight": 1.0
  },
  {
    "name": "LargestPrimeFactor:4",
    "sat": "def sat(p: int, n=63088):\n\n    def is_prime(m):\n        return all(m % i for i in range(2, m - 1))\n\n    return is_prime(p) and n % p == 0 and p > 0 and all(n % i or not is_prime(i) for i in range(p + 1, n))",
    "ans_type": "int",
    "sol_header": "def sol(n=63088):",
    "sol_docstring": "    \"\"\"\n    Find the largest prime factor of n.\n\n    Sample Input:\n    125\n\n    Sample Output:\n    5\n    \"\"\"",
    "sol_bodies": [
      "    def is_prime(m):\n        return all(m % i for i in range(2, m - 1))\n\n    return next(n // i for i in range(1, n) if n % i == 0 and is_prime(n // i))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#59",
    "weight": 1.0
  },
  {
    "name": "CumulativeSums:0",
    "sat": "def sat(sums: List[int], n=104):\n    return all(sums[i + 1] - sums[i] == i for i in range(n)) and sums[0] == 0",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=104):",
    "sol_docstring": "    \"\"\"\n    Find the sums of the integers from 1 to n\n\n    Sample Input:\n    3\n\n    Sample Output:\n    [0, 1, 3, 6]\n    \"\"\"",
    "sol_bodies": [
      "    ans = [0]\n    for i in range(n):\n        ans.append(ans[-1] + i)\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#60",
    "weight": 1.0
  },
  {
    "name": "CumulativeSums:1",
    "sat": "def sat(sums: List[int], n=19891):\n    return all(sums[i + 1] - sums[i] == i for i in range(n)) and sums[0] == 0",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=19891):",
    "sol_docstring": "    \"\"\"\n    Find the sums of the integers from 1 to n\n\n    Sample Input:\n    3\n\n    Sample Output:\n    [0, 1, 3, 6]\n    \"\"\"",
    "sol_bodies": [
      "    ans = [0]\n    for i in range(n):\n        ans.append(ans[-1] + i)\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#60",
    "weight": 1.0
  },
  {
    "name": "CumulativeSums:2",
    "sat": "def sat(sums: List[int], n=11023):\n    return all(sums[i + 1] - sums[i] == i for i in range(n)) and sums[0] == 0",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=11023):",
    "sol_docstring": "    \"\"\"\n    Find the sums of the integers from 1 to n\n\n    Sample Input:\n    3\n\n    Sample Output:\n    [0, 1, 3, 6]\n    \"\"\"",
    "sol_bodies": [
      "    ans = [0]\n    for i in range(n):\n        ans.append(ans[-1] + i)\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#60",
    "weight": 1.0
  },
  {
    "name": "CumulativeSums:3",
    "sat": "def sat(sums: List[int], n=10840):\n    return all(sums[i + 1] - sums[i] == i for i in range(n)) and sums[0] == 0",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=10840):",
    "sol_docstring": "    \"\"\"\n    Find the sums of the integers from 1 to n\n\n    Sample Input:\n    3\n\n    Sample Output:\n    [0, 1, 3, 6]\n    \"\"\"",
    "sol_bodies": [
      "    ans = [0]\n    for i in range(n):\n        ans.append(ans[-1] + i)\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#60",
    "weight": 1.0
  },
  {
    "name": "CumulativeSums:4",
    "sat": "def sat(sums: List[int], n=14049):\n    return all(sums[i + 1] - sums[i] == i for i in range(n)) and sums[0] == 0",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=14049):",
    "sol_docstring": "    \"\"\"\n    Find the sums of the integers from 1 to n\n\n    Sample Input:\n    3\n\n    Sample Output:\n    [0, 1, 3, 6]\n    \"\"\"",
    "sol_bodies": [
      "    ans = [0]\n    for i in range(n):\n        ans.append(ans[-1] + i)\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#60",
    "weight": 1.0
  },
  {
    "name": "ParenDepth:0",
    "sat": "def sat(matches: List[int], parens=\"((())()(()()))(())\"):\n    for i, (j, c) in enumerate(zip(matches, parens)):\n        assert parens[j] != c and matches[j] == i and all(i < matches[k] < j for k in range(i + 1, j))\n    return len(matches) == len(parens)",
    "ans_type": "List[int]",
    "sol_header": "def sol(parens=\"((())()(()()))(())\"):",
    "sol_docstring": "    \"\"\"\n    Find the index of the matching parentheses for each character in the string\n\n    Sample Input:\n    \"()((()))\"\n\n    Sample Output:\n    [1, 0, 7, 6, 5, 4, 3, 2]\n    \"\"\"",
    "sol_bodies": [
      "    matches = [-1] * len(parens)\n    opens = []\n    for i, c in enumerate(parens):\n        if c == \"(\":\n            opens.append(i)\n        else:\n            assert c == \")\"\n            j = opens.pop()\n            matches[i] = j\n            matches[j] = i\n    return matches"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#61\n\nNote that problems 61 and 56 are essentially the same",
    "weight": 1.0
  },
  {
    "name": "ParenDepth:1",
    "sat": "def sat(matches: List[int], parens=\"\"):\n    for i, (j, c) in enumerate(zip(matches, parens)):\n        assert parens[j] != c and matches[j] == i and all(i < matches[k] < j for k in range(i + 1, j))\n    return len(matches) == len(parens)",
    "ans_type": "List[int]",
    "sol_header": "def sol(parens=\"\"):",
    "sol_docstring": "    \"\"\"\n    Find the index of the matching parentheses for each character in the string\n\n    Sample Input:\n    \"()((()))\"\n\n    Sample Output:\n    [1, 0, 7, 6, 5, 4, 3, 2]\n    \"\"\"",
    "sol_bodies": [
      "    matches = [-1] * len(parens)\n    opens = []\n    for i, c in enumerate(parens):\n        if c == \"(\":\n            opens.append(i)\n        else:\n            assert c == \")\"\n            j = opens.pop()\n            matches[i] = j\n            matches[j] = i\n    return matches"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#61\n\nNote that problems 61 and 56 are essentially the same",
    "weight": 1.0
  },
  {
    "name": "ParenDepth:2",
    "sat": "def sat(matches: List[int], parens=\"()\"):\n    for i, (j, c) in enumerate(zip(matches, parens)):\n        assert parens[j] != c and matches[j] == i and all(i < matches[k] < j for k in range(i + 1, j))\n    return len(matches) == len(parens)",
    "ans_type": "List[int]",
    "sol_header": "def sol(parens=\"()\"):",
    "sol_docstring": "    \"\"\"\n    Find the index of the matching parentheses for each character in the string\n\n    Sample Input:\n    \"()((()))\"\n\n    Sample Output:\n    [1, 0, 7, 6, 5, 4, 3, 2]\n    \"\"\"",
    "sol_bodies": [
      "    matches = [-1] * len(parens)\n    opens = []\n    for i, c in enumerate(parens):\n        if c == \"(\":\n            opens.append(i)\n        else:\n            assert c == \")\"\n            j = opens.pop()\n            matches[i] = j\n            matches[j] = i\n    return matches"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#61\n\nNote that problems 61 and 56 are essentially the same",
    "weight": 1.0
  },
  {
    "name": "ParenDepth:3",
    "sat": "def sat(matches: List[int], parens=\"((()(())))\"):\n    for i, (j, c) in enumerate(zip(matches, parens)):\n        assert parens[j] != c and matches[j] == i and all(i < matches[k] < j for k in range(i + 1, j))\n    return len(matches) == len(parens)",
    "ans_type": "List[int]",
    "sol_header": "def sol(parens=\"((()(())))\"):",
    "sol_docstring": "    \"\"\"\n    Find the index of the matching parentheses for each character in the string\n\n    Sample Input:\n    \"()((()))\"\n\n    Sample Output:\n    [1, 0, 7, 6, 5, 4, 3, 2]\n    \"\"\"",
    "sol_bodies": [
      "    matches = [-1] * len(parens)\n    opens = []\n    for i, c in enumerate(parens):\n        if c == \"(\":\n            opens.append(i)\n        else:\n            assert c == \")\"\n            j = opens.pop()\n            matches[i] = j\n            matches[j] = i\n    return matches"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#61\n\nNote that problems 61 and 56 are essentially the same",
    "weight": 1.0
  },
  {
    "name": "ParenDepth:4",
    "sat": "def sat(matches: List[int], parens=\"(())\"):\n    for i, (j, c) in enumerate(zip(matches, parens)):\n        assert parens[j] != c and matches[j] == i and all(i < matches[k] < j for k in range(i + 1, j))\n    return len(matches) == len(parens)",
    "ans_type": "List[int]",
    "sol_header": "def sol(parens=\"(())\"):",
    "sol_docstring": "    \"\"\"\n    Find the index of the matching parentheses for each character in the string\n\n    Sample Input:\n    \"()((()))\"\n\n    Sample Output:\n    [1, 0, 7, 6, 5, 4, 3, 2]\n    \"\"\"",
    "sol_bodies": [
      "    matches = [-1] * len(parens)\n    opens = []\n    for i, c in enumerate(parens):\n        if c == \"(\":\n            opens.append(i)\n        else:\n            assert c == \")\"\n            j = opens.pop()\n            matches[i] = j\n            matches[j] = i\n    return matches"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#61\n\nNote that problems 61 and 56 are essentially the same",
    "weight": 1.0
  },
  {
    "name": "Derivative:0",
    "sat": "def sat(derivative: List[int], poly=[2, 1, 0, 4, 19, 231, 0, 5]):\n\n    def val(poly, x):\n        return sum(coeff * (x ** i) for i, coeff in enumerate(poly))\n\n    return all(abs(val(poly, x + 1e-8) - val(poly, x) - 1e-8 * val(derivative, x)) < 1e-4 for x in range(len(poly)))",
    "ans_type": "List[int]",
    "sol_header": "def sol(poly=[2, 1, 0, 4, 19, 231, 0, 5]):",
    "sol_docstring": "    \"\"\"\n    Find the derivative of the given polynomial, with coefficients in order of increasing degree\n\n    Sample Input:\n    [3, 4, 1] # 3 + 4x + x^2\n\n    Sample Output:\n    [2, 4]   # 4 + 2x^2\n    \"\"\"",
    "sol_bodies": [
      "    return [i * poly[i] for i in range(1, len(poly))]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#62\n\nThis puzzle gives the raw definition of a derivative in terms of small changes in x.",
    "weight": 1.0
  },
  {
    "name": "Derivative:1",
    "sat": "def sat(derivative: List[int], poly=[6, -7, -8, 3]):\n\n    def val(poly, x):\n        return sum(coeff * (x ** i) for i, coeff in enumerate(poly))\n\n    return all(abs(val(poly, x + 1e-8) - val(poly, x) - 1e-8 * val(derivative, x)) < 1e-4 for x in range(len(poly)))",
    "ans_type": "List[int]",
    "sol_header": "def sol(poly=[6, -7, -8, 3]):",
    "sol_docstring": "    \"\"\"\n    Find the derivative of the given polynomial, with coefficients in order of increasing degree\n\n    Sample Input:\n    [3, 4, 1] # 3 + 4x + x^2\n\n    Sample Output:\n    [2, 4]   # 4 + 2x^2\n    \"\"\"",
    "sol_bodies": [
      "    return [i * poly[i] for i in range(1, len(poly))]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#62\n\nThis puzzle gives the raw definition of a derivative in terms of small changes in x.",
    "weight": 1.0
  },
  {
    "name": "Derivative:2",
    "sat": "def sat(derivative: List[int], poly=[-5, 5, -6, 7]):\n\n    def val(poly, x):\n        return sum(coeff * (x ** i) for i, coeff in enumerate(poly))\n\n    return all(abs(val(poly, x + 1e-8) - val(poly, x) - 1e-8 * val(derivative, x)) < 1e-4 for x in range(len(poly)))",
    "ans_type": "List[int]",
    "sol_header": "def sol(poly=[-5, 5, -6, 7]):",
    "sol_docstring": "    \"\"\"\n    Find the derivative of the given polynomial, with coefficients in order of increasing degree\n\n    Sample Input:\n    [3, 4, 1] # 3 + 4x + x^2\n\n    Sample Output:\n    [2, 4]   # 4 + 2x^2\n    \"\"\"",
    "sol_bodies": [
      "    return [i * poly[i] for i in range(1, len(poly))]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#62\n\nThis puzzle gives the raw definition of a derivative in terms of small changes in x.",
    "weight": 1.0
  },
  {
    "name": "Derivative:3",
    "sat": "def sat(derivative: List[int], poly=[-8, 2, 1, -8, 9, -10, -2, -7, -10]):\n\n    def val(poly, x):\n        return sum(coeff * (x ** i) for i, coeff in enumerate(poly))\n\n    return all(abs(val(poly, x + 1e-8) - val(poly, x) - 1e-8 * val(derivative, x)) < 1e-4 for x in range(len(poly)))",
    "ans_type": "List[int]",
    "sol_header": "def sol(poly=[-8, 2, 1, -8, 9, -10, -2, -7, -10]):",
    "sol_docstring": "    \"\"\"\n    Find the derivative of the given polynomial, with coefficients in order of increasing degree\n\n    Sample Input:\n    [3, 4, 1] # 3 + 4x + x^2\n\n    Sample Output:\n    [2, 4]   # 4 + 2x^2\n    \"\"\"",
    "sol_bodies": [
      "    return [i * poly[i] for i in range(1, len(poly))]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#62\n\nThis puzzle gives the raw definition of a derivative in terms of small changes in x.",
    "weight": 1.0
  },
  {
    "name": "Derivative:4",
    "sat": "def sat(derivative: List[int], poly=[5, -1, -4, -2, 7, -9, 3, 9]):\n\n    def val(poly, x):\n        return sum(coeff * (x ** i) for i, coeff in enumerate(poly))\n\n    return all(abs(val(poly, x + 1e-8) - val(poly, x) - 1e-8 * val(derivative, x)) < 1e-4 for x in range(len(poly)))",
    "ans_type": "List[int]",
    "sol_header": "def sol(poly=[5, -1, -4, -2, 7, -9, 3, 9]):",
    "sol_docstring": "    \"\"\"\n    Find the derivative of the given polynomial, with coefficients in order of increasing degree\n\n    Sample Input:\n    [3, 4, 1] # 3 + 4x + x^2\n\n    Sample Output:\n    [2, 4]   # 4 + 2x^2\n    \"\"\"",
    "sol_bodies": [
      "    return [i * poly[i] for i in range(1, len(poly))]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#62\n\nThis puzzle gives the raw definition of a derivative in terms of small changes in x.",
    "weight": 1.0
  },
  {
    "name": "Fib3:0",
    "sat": "def sat(init: List[int], target=124156):\n    a, b, c = init\n    for i in range(16):\n        a, b, c = b, c, (a + b + c)\n    return a == target",
    "ans_type": "List[int]",
    "sol_header": "def sol(target=124156):",
    "sol_docstring": "    \"\"\"\n    Define a triple-Fibonacci sequence to be a sequence such that each number is the sum of the previous\n    three. Given a target number, find an initial triple such that the 17th number in the sequence is the\n    given target number.\n\n    Sample Input:\n    0\n\n    Sample Output:\n    [0, 0, 0]\n    \"\"\"",
    "sol_bodies": [
      "    nums = [target, 0, 0]\n    for i in range(16):\n        x = nums[-1] - sum(nums[:-1])  # x is such that x + nums[:3] == nums[3]\n        nums = [x] + nums[:-1]\n    return nums"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#63\n\nAlmost identical to problem 46",
    "weight": 1.0
  },
  {
    "name": "Fib3:1",
    "sat": "def sat(init: List[int], target=4050):\n    a, b, c = init\n    for i in range(16):\n        a, b, c = b, c, (a + b + c)\n    return a == target",
    "ans_type": "List[int]",
    "sol_header": "def sol(target=4050):",
    "sol_docstring": "    \"\"\"\n    Define a triple-Fibonacci sequence to be a sequence such that each number is the sum of the previous\n    three. Given a target number, find an initial triple such that the 17th number in the sequence is the\n    given target number.\n\n    Sample Input:\n    0\n\n    Sample Output:\n    [0, 0, 0]\n    \"\"\"",
    "sol_bodies": [
      "    nums = [target, 0, 0]\n    for i in range(16):\n        x = nums[-1] - sum(nums[:-1])  # x is such that x + nums[:3] == nums[3]\n        nums = [x] + nums[:-1]\n    return nums"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#63\n\nAlmost identical to problem 46",
    "weight": 1.0
  },
  {
    "name": "Fib3:2",
    "sat": "def sat(init: List[int], target=0):\n    a, b, c = init\n    for i in range(16):\n        a, b, c = b, c, (a + b + c)\n    return a == target",
    "ans_type": "List[int]",
    "sol_header": "def sol(target=0):",
    "sol_docstring": "    \"\"\"\n    Define a triple-Fibonacci sequence to be a sequence such that each number is the sum of the previous\n    three. Given a target number, find an initial triple such that the 17th number in the sequence is the\n    given target number.\n\n    Sample Input:\n    0\n\n    Sample Output:\n    [0, 0, 0]\n    \"\"\"",
    "sol_bodies": [
      "    nums = [target, 0, 0]\n    for i in range(16):\n        x = nums[-1] - sum(nums[:-1])  # x is such that x + nums[:3] == nums[3]\n        nums = [x] + nums[:-1]\n    return nums"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#63\n\nAlmost identical to problem 46",
    "weight": 1.0
  },
  {
    "name": "Fib3:3",
    "sat": "def sat(init: List[int], target=4644):\n    a, b, c = init\n    for i in range(16):\n        a, b, c = b, c, (a + b + c)\n    return a == target",
    "ans_type": "List[int]",
    "sol_header": "def sol(target=4644):",
    "sol_docstring": "    \"\"\"\n    Define a triple-Fibonacci sequence to be a sequence such that each number is the sum of the previous\n    three. Given a target number, find an initial triple such that the 17th number in the sequence is the\n    given target number.\n\n    Sample Input:\n    0\n\n    Sample Output:\n    [0, 0, 0]\n    \"\"\"",
    "sol_bodies": [
      "    nums = [target, 0, 0]\n    for i in range(16):\n        x = nums[-1] - sum(nums[:-1])  # x is such that x + nums[:3] == nums[3]\n        nums = [x] + nums[:-1]\n    return nums"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#63\n\nAlmost identical to problem 46",
    "weight": 1.0
  },
  {
    "name": "Fib3:4",
    "sat": "def sat(init: List[int], target=3):\n    a, b, c = init\n    for i in range(16):\n        a, b, c = b, c, (a + b + c)\n    return a == target",
    "ans_type": "List[int]",
    "sol_header": "def sol(target=3):",
    "sol_docstring": "    \"\"\"\n    Define a triple-Fibonacci sequence to be a sequence such that each number is the sum of the previous\n    three. Given a target number, find an initial triple such that the 17th number in the sequence is the\n    given target number.\n\n    Sample Input:\n    0\n\n    Sample Output:\n    [0, 0, 0]\n    \"\"\"",
    "sol_bodies": [
      "    nums = [target, 0, 0]\n    for i in range(16):\n        x = nums[-1] - sum(nums[:-1])  # x is such that x + nums[:3] == nums[3]\n        nums = [x] + nums[:-1]\n    return nums"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#63\n\nAlmost identical to problem 46",
    "weight": 1.0
  },
  {
    "name": "FindVowels:0",
    "sat": "def sat(vowels: List[str], texts=['Hello, world!', 'Goodbye, world!']):\n    for v, t in zip(vowels, texts):\n        i = 0\n        for j, c in enumerate(t):\n            if c.lower() in \"aeiou\" or c.lower() == 'y' and j == len(t) - 1:\n                assert v[i] == c\n                i += 1\n        assert i == len(v)\n    return len(vowels) == len(texts)",
    "ans_type": "List[str]",
    "sol_header": "def sol(texts=['Hello, world!', 'Goodbye, world!']):",
    "sol_docstring": "    \"\"\"\n    Find the vowels from each of the original texts (y counts as a vowel at the end of the word)\n\n    Sample Input:\n    [\"You can do it!\", \"CAT\"]\n\n    Sample Output:\n    [\"ouaoi\", \"A\"]\n    \"\"\"",
    "sol_bodies": [
      "    return [\"\".join(c for c in text if c.lower() in \"aeiou\") + (text[-1] if text[-1].lower() == \"y\" else \"\")\n            for text in texts]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#64\n\nVery similar to RemoveVowels \\#51",
    "weight": 1.0
  },
  {
    "name": "FindVowels:1",
    "sat": "def sat(vowels: List[str], texts=['kelUthI', 'RoRu', 'JuKEBesYtIcHakEQuala', 'TIzEXOtExTyJASiNiKi', 'tEWIFObesY', 'KyxySe', 'kEboWulOfEZEFuMYCH', 'XAPIFYS']):\n    for v, t in zip(vowels, texts):\n        i = 0\n        for j, c in enumerate(t):\n            if c.lower() in \"aeiou\" or c.lower() == 'y' and j == len(t) - 1:\n                assert v[i] == c\n                i += 1\n        assert i == len(v)\n    return len(vowels) == len(texts)",
    "ans_type": "List[str]",
    "sol_header": "def sol(texts=['kelUthI', 'RoRu', 'JuKEBesYtIcHakEQuala', 'TIzEXOtExTyJASiNiKi', 'tEWIFObesY', 'KyxySe', 'kEboWulOfEZEFuMYCH', 'XAPIFYS']):",
    "sol_docstring": "    \"\"\"\n    Find the vowels from each of the original texts (y counts as a vowel at the end of the word)\n\n    Sample Input:\n    [\"You can do it!\", \"CAT\"]\n\n    Sample Output:\n    [\"ouaoi\", \"A\"]\n    \"\"\"",
    "sol_bodies": [
      "    return [\"\".join(c for c in text if c.lower() in \"aeiou\") + (text[-1] if text[-1].lower() == \"y\" else \"\")\n            for text in texts]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#64\n\nVery similar to RemoveVowels \\#51",
    "weight": 1.0
  },
  {
    "name": "FindVowels:2",
    "sat": "def sat(vowels: List[str], texts=['sATExtIjopEJOWIvU', 'v', 'teXTOGOzetEX', 'CAMe', 'SApiQuUzISYG', 'NaV']):\n    for v, t in zip(vowels, texts):\n        i = 0\n        for j, c in enumerate(t):\n            if c.lower() in \"aeiou\" or c.lower() == 'y' and j == len(t) - 1:\n                assert v[i] == c\n                i += 1\n        assert i == len(v)\n    return len(vowels) == len(texts)",
    "ans_type": "List[str]",
    "sol_header": "def sol(texts=['sATExtIjopEJOWIvU', 'v', 'teXTOGOzetEX', 'CAMe', 'SApiQuUzISYG', 'NaV']):",
    "sol_docstring": "    \"\"\"\n    Find the vowels from each of the original texts (y counts as a vowel at the end of the word)\n\n    Sample Input:\n    [\"You can do it!\", \"CAT\"]\n\n    Sample Output:\n    [\"ouaoi\", \"A\"]\n    \"\"\"",
    "sol_bodies": [
      "    return [\"\".join(c for c in text if c.lower() in \"aeiou\") + (text[-1] if text[-1].lower() == \"y\" else \"\")\n            for text in texts]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#64\n\nVery similar to RemoveVowels \\#51",
    "weight": 1.0
  },
  {
    "name": "FindVowels:3",
    "sat": "def sat(vowels: List[str], texts=[]):\n    for v, t in zip(vowels, texts):\n        i = 0\n        for j, c in enumerate(t):\n            if c.lower() in \"aeiou\" or c.lower() == 'y' and j == len(t) - 1:\n                assert v[i] == c\n                i += 1\n        assert i == len(v)\n    return len(vowels) == len(texts)",
    "ans_type": "List[str]",
    "sol_header": "def sol(texts=[]):",
    "sol_docstring": "    \"\"\"\n    Find the vowels from each of the original texts (y counts as a vowel at the end of the word)\n\n    Sample Input:\n    [\"You can do it!\", \"CAT\"]\n\n    Sample Output:\n    [\"ouaoi\", \"A\"]\n    \"\"\"",
    "sol_bodies": [
      "    return [\"\".join(c for c in text if c.lower() in \"aeiou\") + (text[-1] if text[-1].lower() == \"y\" else \"\")\n            for text in texts]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#64\n\nVery similar to RemoveVowels \\#51",
    "weight": 1.0
  },
  {
    "name": "FindVowels:4",
    "sat": "def sat(vowels: List[str], texts=['mAloCyBOSAwUg', 'W', 'BEsICHeCeLoNO']):\n    for v, t in zip(vowels, texts):\n        i = 0\n        for j, c in enumerate(t):\n            if c.lower() in \"aeiou\" or c.lower() == 'y' and j == len(t) - 1:\n                assert v[i] == c\n                i += 1\n        assert i == len(v)\n    return len(vowels) == len(texts)",
    "ans_type": "List[str]",
    "sol_header": "def sol(texts=['mAloCyBOSAwUg', 'W', 'BEsICHeCeLoNO']):",
    "sol_docstring": "    \"\"\"\n    Find the vowels from each of the original texts (y counts as a vowel at the end of the word)\n\n    Sample Input:\n    [\"You can do it!\", \"CAT\"]\n\n    Sample Output:\n    [\"ouaoi\", \"A\"]\n    \"\"\"",
    "sol_bodies": [
      "    return [\"\".join(c for c in text if c.lower() in \"aeiou\") + (text[-1] if text[-1].lower() == \"y\" else \"\")\n            for text in texts]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#64\n\nVery similar to RemoveVowels \\#51",
    "weight": 1.0
  },
  {
    "name": "CircularShiftNum:0",
    "sat": "def sat(shifted: str, n=124582369835, shift=3):\n    if shift > len(str(n)):\n        return n == int(shifted[::-1])\n    return n == int(shifted[-shift:] + shifted[:-shift])",
    "ans_type": "str",
    "sol_header": "def sol(n=124582369835, shift=3):",
    "sol_docstring": "    \"\"\"\n    Shift the decimal digits n places to the left, wrapping the extra digits around. If shift > the number of\n    digits of n, reverse the string.\n\n    n=12345 shift=2 => '34512'\n    \"\"\"",
    "sol_bodies": [
      "    s = str(n)\n    if shift > len(s):\n        return s[::-1]\n    return s[shift:] + s[:shift]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#65",
    "weight": 1.0
  },
  {
    "name": "CircularShiftNum:1",
    "sat": "def sat(shifted: str, n=6852918492, shift=12):\n    if shift > len(str(n)):\n        return n == int(shifted[::-1])\n    return n == int(shifted[-shift:] + shifted[:-shift])",
    "ans_type": "str",
    "sol_header": "def sol(n=6852918492, shift=12):",
    "sol_docstring": "    \"\"\"\n    Shift the decimal digits n places to the left, wrapping the extra digits around. If shift > the number of\n    digits of n, reverse the string.\n\n    n=12345 shift=2 => '34512'\n    \"\"\"",
    "sol_bodies": [
      "    s = str(n)\n    if shift > len(s):\n        return s[::-1]\n    return s[shift:] + s[:shift]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#65",
    "weight": 1.0
  },
  {
    "name": "CircularShiftNum:2",
    "sat": "def sat(shifted: str, n=32928510691049616, shift=28):\n    if shift > len(str(n)):\n        return n == int(shifted[::-1])\n    return n == int(shifted[-shift:] + shifted[:-shift])",
    "ans_type": "str",
    "sol_header": "def sol(n=32928510691049616, shift=28):",
    "sol_docstring": "    \"\"\"\n    Shift the decimal digits n places to the left, wrapping the extra digits around. If shift > the number of\n    digits of n, reverse the string.\n\n    n=12345 shift=2 => '34512'\n    \"\"\"",
    "sol_bodies": [
      "    s = str(n)\n    if shift > len(s):\n        return s[::-1]\n    return s[shift:] + s[:shift]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#65",
    "weight": 1.0
  },
  {
    "name": "CircularShiftNum:3",
    "sat": "def sat(shifted: str, n=237, shift=26):\n    if shift > len(str(n)):\n        return n == int(shifted[::-1])\n    return n == int(shifted[-shift:] + shifted[:-shift])",
    "ans_type": "str",
    "sol_header": "def sol(n=237, shift=26):",
    "sol_docstring": "    \"\"\"\n    Shift the decimal digits n places to the left, wrapping the extra digits around. If shift > the number of\n    digits of n, reverse the string.\n\n    n=12345 shift=2 => '34512'\n    \"\"\"",
    "sol_bodies": [
      "    s = str(n)\n    if shift > len(s):\n        return s[::-1]\n    return s[shift:] + s[:shift]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#65",
    "weight": 1.0
  },
  {
    "name": "CircularShiftNum:4",
    "sat": "def sat(shifted: str, n=6, shift=26):\n    if shift > len(str(n)):\n        return n == int(shifted[::-1])\n    return n == int(shifted[-shift:] + shifted[:-shift])",
    "ans_type": "str",
    "sol_header": "def sol(n=6, shift=26):",
    "sol_docstring": "    \"\"\"\n    Shift the decimal digits n places to the left, wrapping the extra digits around. If shift > the number of\n    digits of n, reverse the string.\n\n    n=12345 shift=2 => '34512'\n    \"\"\"",
    "sol_bodies": [
      "    s = str(n)\n    if shift > len(s):\n        return s[::-1]\n    return s[shift:] + s[:shift]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#65",
    "weight": 1.0
  },
  {
    "name": "CharSum:0",
    "sat": "def sat(tot: int, s=\"Add ME uP AND YOU WILL GET A BIG NUMBER!\"):\n    for c in s:\n        if c.isupper():\n            tot -= ord(c)\n    return tot == 0",
    "ans_type": "int",
    "sol_header": "def sol(s=\"Add ME uP AND YOU WILL GET A BIG NUMBER!\"):",
    "sol_docstring": "    \"\"\"\n    Compute the sum of the ASCII values of the upper-case characters in the string.\n\n    Sample Input:\n    ARt\n\n    Sample Output:\n    147 # = 65 + 82\n    \"\"\"",
    "sol_bodies": [
      "    return sum(ord(c) for c in s if c.isupper())"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#66",
    "weight": 1.0
  },
  {
    "name": "CharSum:1",
    "sat": "def sat(tot: int, s=\"VRkmX=(1oF#l\"):\n    for c in s:\n        if c.isupper():\n            tot -= ord(c)\n    return tot == 0",
    "ans_type": "int",
    "sol_header": "def sol(s=\"VRkmX=(1oF#l\"):",
    "sol_docstring": "    \"\"\"\n    Compute the sum of the ASCII values of the upper-case characters in the string.\n\n    Sample Input:\n    ARt\n\n    Sample Output:\n    147 # = 65 + 82\n    \"\"\"",
    "sol_bodies": [
      "    return sum(ord(c) for c in s if c.isupper())"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#66",
    "weight": 1.0
  },
  {
    "name": "CharSum:2",
    "sat": "def sat(tot: int, s=\"*?sAJJ;FY8c!7zFwA\"):\n    for c in s:\n        if c.isupper():\n            tot -= ord(c)\n    return tot == 0",
    "ans_type": "int",
    "sol_header": "def sol(s=\"*?sAJJ;FY8c!7zFwA\"):",
    "sol_docstring": "    \"\"\"\n    Compute the sum of the ASCII values of the upper-case characters in the string.\n\n    Sample Input:\n    ARt\n\n    Sample Output:\n    147 # = 65 + 82\n    \"\"\"",
    "sol_bodies": [
      "    return sum(ord(c) for c in s if c.isupper())"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#66",
    "weight": 1.0
  },
  {
    "name": "CharSum:3",
    "sat": "def sat(tot: int, s=\"Vmv%e8d3P\"):\n    for c in s:\n        if c.isupper():\n            tot -= ord(c)\n    return tot == 0",
    "ans_type": "int",
    "sol_header": "def sol(s=\"Vmv%e8d3P\"):",
    "sol_docstring": "    \"\"\"\n    Compute the sum of the ASCII values of the upper-case characters in the string.\n\n    Sample Input:\n    ARt\n\n    Sample Output:\n    147 # = 65 + 82\n    \"\"\"",
    "sol_bodies": [
      "    return sum(ord(c) for c in s if c.isupper())"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#66",
    "weight": 1.0
  },
  {
    "name": "CharSum:4",
    "sat": "def sat(tot: int, s=\"K8B\"):\n    for c in s:\n        if c.isupper():\n            tot -= ord(c)\n    return tot == 0",
    "ans_type": "int",
    "sol_header": "def sol(s=\"K8B\"):",
    "sol_docstring": "    \"\"\"\n    Compute the sum of the ASCII values of the upper-case characters in the string.\n\n    Sample Input:\n    ARt\n\n    Sample Output:\n    147 # = 65 + 82\n    \"\"\"",
    "sol_bodies": [
      "    return sum(ord(c) for c in s if c.isupper())"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#66",
    "weight": 1.0
  },
  {
    "name": "MissingBananas:0",
    "sat": "def sat(bananas: int, bowl=\"5024 apples and 12189 oranges\", total=12491241):\n    bowl += f\" and {bananas} bananas\"\n    return sum([int(s) for s in bowl.split() if s.isdigit()]) == total",
    "ans_type": "int",
    "sol_header": "def sol(bowl=\"5024 apples and 12189 oranges\", total=12491241):",
    "sol_docstring": "    \"\"\"\n    Determine how many bananas are necessary to reach a certain total amount of fruit\n\n    bowl=\"3 apples and 4 oranges\", total=12 => 5\n    \"\"\"",
    "sol_bodies": [
      "    apples, oranges = [int(s) for s in bowl.split() if s.isdigit()]\n    return total - apples - oranges"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#67",
    "weight": 1.0
  },
  {
    "name": "MissingBananas:1",
    "sat": "def sat(bananas: int, bowl=\"7 apples and 9 oranges\", total=21):\n    bowl += f\" and {bananas} bananas\"\n    return sum([int(s) for s in bowl.split() if s.isdigit()]) == total",
    "ans_type": "int",
    "sol_header": "def sol(bowl=\"7 apples and 9 oranges\", total=21):",
    "sol_docstring": "    \"\"\"\n    Determine how many bananas are necessary to reach a certain total amount of fruit\n\n    bowl=\"3 apples and 4 oranges\", total=12 => 5\n    \"\"\"",
    "sol_bodies": [
      "    apples, oranges = [int(s) for s in bowl.split() if s.isdigit()]\n    return total - apples - oranges"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#67",
    "weight": 1.0
  },
  {
    "name": "MissingBananas:2",
    "sat": "def sat(bananas: int, bowl=\"508738582 apples and 346410095 oranges\", total=1452490389):\n    bowl += f\" and {bananas} bananas\"\n    return sum([int(s) for s in bowl.split() if s.isdigit()]) == total",
    "ans_type": "int",
    "sol_header": "def sol(bowl=\"508738582 apples and 346410095 oranges\", total=1452490389):",
    "sol_docstring": "    \"\"\"\n    Determine how many bananas are necessary to reach a certain total amount of fruit\n\n    bowl=\"3 apples and 4 oranges\", total=12 => 5\n    \"\"\"",
    "sol_bodies": [
      "    apples, oranges = [int(s) for s in bowl.split() if s.isdigit()]\n    return total - apples - oranges"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#67",
    "weight": 1.0
  },
  {
    "name": "MissingBananas:3",
    "sat": "def sat(bananas: int, bowl=\"28767 apples and 49488 oranges\", total=112303):\n    bowl += f\" and {bananas} bananas\"\n    return sum([int(s) for s in bowl.split() if s.isdigit()]) == total",
    "ans_type": "int",
    "sol_header": "def sol(bowl=\"28767 apples and 49488 oranges\", total=112303):",
    "sol_docstring": "    \"\"\"\n    Determine how many bananas are necessary to reach a certain total amount of fruit\n\n    bowl=\"3 apples and 4 oranges\", total=12 => 5\n    \"\"\"",
    "sol_bodies": [
      "    apples, oranges = [int(s) for s in bowl.split() if s.isdigit()]\n    return total - apples - oranges"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#67",
    "weight": 1.0
  },
  {
    "name": "MissingBananas:4",
    "sat": "def sat(bananas: int, bowl=\"29991 apples and 99737 oranges\", total=155600):\n    bowl += f\" and {bananas} bananas\"\n    return sum([int(s) for s in bowl.split() if s.isdigit()]) == total",
    "ans_type": "int",
    "sol_header": "def sol(bowl=\"29991 apples and 99737 oranges\", total=155600):",
    "sol_docstring": "    \"\"\"\n    Determine how many bananas are necessary to reach a certain total amount of fruit\n\n    bowl=\"3 apples and 4 oranges\", total=12 => 5\n    \"\"\"",
    "sol_bodies": [
      "    apples, oranges = [int(s) for s in bowl.split() if s.isdigit()]\n    return total - apples - oranges"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#67",
    "weight": 1.0
  },
  {
    "name": "SmallestEven:0",
    "sat": "def sat(val_index: List[int], nums=[125123, 422323, 141, 5325, 812152, 9, 42145, 5313, 421, 812152]):\n    if val_index == []:\n        return all(n % 2 == 1 for n in nums)\n    v, i = val_index\n    assert v % 2 == 0 and nums[i] == v\n    return all(n > v or n % 2 == 1 for n in nums[:i]) and all(n >= v or n % 2 == 1 for n in nums[i:])",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[125123, 422323, 141, 5325, 812152, 9, 42145, 5313, 421, 812152]):",
    "sol_docstring": "    \"\"\"\n    Given an array of nums representing a branch on a binary tree, find the minimum even value and its index.\n    In the case of a tie, return the smallest index. If there are no even numbers, the answer is [].\n\n    Sample Input:\n    [1, 7, 4, 6, 10, 11, 14]\n\n    Sample Output:\n    [4, 2]\n    \"\"\"",
    "sol_bodies": [
      "    if any(n % 2 == 0 for n in nums):\n        return min([v, i] for i, v in enumerate(nums) if v % 2 == 0)\n    else:\n        return []"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#68",
    "weight": 1.0
  },
  {
    "name": "SmallestEven:1",
    "sat": "def sat(val_index: List[int], nums=[38940, 7988, 78915]):\n    if val_index == []:\n        return all(n % 2 == 1 for n in nums)\n    v, i = val_index\n    assert v % 2 == 0 and nums[i] == v\n    return all(n > v or n % 2 == 1 for n in nums[:i]) and all(n >= v or n % 2 == 1 for n in nums[i:])",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[38940, 7988, 78915]):",
    "sol_docstring": "    \"\"\"\n    Given an array of nums representing a branch on a binary tree, find the minimum even value and its index.\n    In the case of a tie, return the smallest index. If there are no even numbers, the answer is [].\n\n    Sample Input:\n    [1, 7, 4, 6, 10, 11, 14]\n\n    Sample Output:\n    [4, 2]\n    \"\"\"",
    "sol_bodies": [
      "    if any(n % 2 == 0 for n in nums):\n        return min([v, i] for i, v in enumerate(nums) if v % 2 == 0)\n    else:\n        return []"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#68",
    "weight": 1.0
  },
  {
    "name": "SmallestEven:2",
    "sat": "def sat(val_index: List[int], nums=[26392632, 33805163]):\n    if val_index == []:\n        return all(n % 2 == 1 for n in nums)\n    v, i = val_index\n    assert v % 2 == 0 and nums[i] == v\n    return all(n > v or n % 2 == 1 for n in nums[:i]) and all(n >= v or n % 2 == 1 for n in nums[i:])",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[26392632, 33805163]):",
    "sol_docstring": "    \"\"\"\n    Given an array of nums representing a branch on a binary tree, find the minimum even value and its index.\n    In the case of a tie, return the smallest index. If there are no even numbers, the answer is [].\n\n    Sample Input:\n    [1, 7, 4, 6, 10, 11, 14]\n\n    Sample Output:\n    [4, 2]\n    \"\"\"",
    "sol_bodies": [
      "    if any(n % 2 == 0 for n in nums):\n        return min([v, i] for i, v in enumerate(nums) if v % 2 == 0)\n    else:\n        return []"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#68",
    "weight": 1.0
  },
  {
    "name": "SmallestEven:3",
    "sat": "def sat(val_index: List[int], nums=[744557286]):\n    if val_index == []:\n        return all(n % 2 == 1 for n in nums)\n    v, i = val_index\n    assert v % 2 == 0 and nums[i] == v\n    return all(n > v or n % 2 == 1 for n in nums[:i]) and all(n >= v or n % 2 == 1 for n in nums[i:])",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[744557286]):",
    "sol_docstring": "    \"\"\"\n    Given an array of nums representing a branch on a binary tree, find the minimum even value and its index.\n    In the case of a tie, return the smallest index. If there are no even numbers, the answer is [].\n\n    Sample Input:\n    [1, 7, 4, 6, 10, 11, 14]\n\n    Sample Output:\n    [4, 2]\n    \"\"\"",
    "sol_bodies": [
      "    if any(n % 2 == 0 for n in nums):\n        return min([v, i] for i, v in enumerate(nums) if v % 2 == 0)\n    else:\n        return []"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#68",
    "weight": 1.0
  },
  {
    "name": "SmallestEven:4",
    "sat": "def sat(val_index: List[int], nums=[4512821, 7022753, 5506558]):\n    if val_index == []:\n        return all(n % 2 == 1 for n in nums)\n    v, i = val_index\n    assert v % 2 == 0 and nums[i] == v\n    return all(n > v or n % 2 == 1 for n in nums[:i]) and all(n >= v or n % 2 == 1 for n in nums[i:])",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[4512821, 7022753, 5506558]):",
    "sol_docstring": "    \"\"\"\n    Given an array of nums representing a branch on a binary tree, find the minimum even value and its index.\n    In the case of a tie, return the smallest index. If there are no even numbers, the answer is [].\n\n    Sample Input:\n    [1, 7, 4, 6, 10, 11, 14]\n\n    Sample Output:\n    [4, 2]\n    \"\"\"",
    "sol_bodies": [
      "    if any(n % 2 == 0 for n in nums):\n        return min([v, i] for i, v in enumerate(nums) if v % 2 == 0)\n    else:\n        return []"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#68",
    "weight": 1.0
  },
  {
    "name": "GreatestHIndex:0",
    "sat": "def sat(h: int, seq=[3, 1, 4, 17, 5, 17, 2, 1, 41, 32, 2, 5, 5, 5, 5]):\n    for i in seq:\n        assert not (i > 0 and i > h and seq.count(i) >= i)\n    return h == -1 or seq.count(h) >= h > 0",
    "ans_type": "int",
    "sol_header": "def sol(seq=[3, 1, 4, 17, 5, 17, 2, 1, 41, 32, 2, 5, 5, 5, 5]):",
    "sol_docstring": "    \"\"\"\n    Find the h-index, the largest positive number h such that that h occurs in the sequence at least h times.\n    h = -1 if there is no such positive number.\n\n    Sample Input:\n    [1, 2, 2, 3, 3, 3, 4, 4]\n\n    Sample Output:\n    3\n    \"\"\"",
    "sol_bodies": [
      "    return max([-1] + [i for i in seq if i > 0 and seq.count(i) >= i])"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#69",
    "weight": 1.0
  },
  {
    "name": "GreatestHIndex:1",
    "sat": "def sat(h: int, seq=[5, 5, 4, 4, 0, 1, 3, 7, 2, 1, 0, 1, 8, 7, 2, 7, 4, 5, 2, 7, 5, 1, 9, 4, 7, 6, 3, 0, 1, 0, 6, 8, 0, 8, 9, 8, 3, 9, 4, 4, 4, 3, 8, 9, 5, 2, 5, 7, 9, 6, 2, 3, 0, 6, 0, 7, 8, 2, 2, 5, 1, 6, 1, 7, 8, 7, 6, 7]):\n    for i in seq:\n        assert not (i > 0 and i > h and seq.count(i) >= i)\n    return h == -1 or seq.count(h) >= h > 0",
    "ans_type": "int",
    "sol_header": "def sol(seq=[5, 5, 4, 4, 0, 1, 3, 7, 2, 1, 0, 1, 8, 7, 2, 7, 4, 5, 2, 7, 5, 1, 9, 4, 7, 6, 3, 0, 1, 0, 6, 8, 0, 8, 9, 8, 3, 9, 4, 4, 4, 3, 8, 9, 5, 2, 5, 7, 9, 6, 2, 3, 0, 6, 0, 7, 8, 2, 2, 5, 1, 6, 1, 7, 8, 7, 6, 7]):",
    "sol_docstring": "    \"\"\"\n    Find the h-index, the largest positive number h such that that h occurs in the sequence at least h times.\n    h = -1 if there is no such positive number.\n\n    Sample Input:\n    [1, 2, 2, 3, 3, 3, 4, 4]\n\n    Sample Output:\n    3\n    \"\"\"",
    "sol_bodies": [
      "    return max([-1] + [i for i in seq if i > 0 and seq.count(i) >= i])"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#69",
    "weight": 1.0
  },
  {
    "name": "GreatestHIndex:2",
    "sat": "def sat(h: int, seq=[3, 9, 0, 8, 2, 9, 6, 1, 8, 3, 5, 5, 4, 9, 0, 1, 0, 3, 4, 8, 7, 2, 4, 7, 1, 1, 7, 2, 1, 4, 1, 0]):\n    for i in seq:\n        assert not (i > 0 and i > h and seq.count(i) >= i)\n    return h == -1 or seq.count(h) >= h > 0",
    "ans_type": "int",
    "sol_header": "def sol(seq=[3, 9, 0, 8, 2, 9, 6, 1, 8, 3, 5, 5, 4, 9, 0, 1, 0, 3, 4, 8, 7, 2, 4, 7, 1, 1, 7, 2, 1, 4, 1, 0]):",
    "sol_docstring": "    \"\"\"\n    Find the h-index, the largest positive number h such that that h occurs in the sequence at least h times.\n    h = -1 if there is no such positive number.\n\n    Sample Input:\n    [1, 2, 2, 3, 3, 3, 4, 4]\n\n    Sample Output:\n    3\n    \"\"\"",
    "sol_bodies": [
      "    return max([-1] + [i for i in seq if i > 0 and seq.count(i) >= i])"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#69",
    "weight": 1.0
  },
  {
    "name": "GreatestHIndex:3",
    "sat": "def sat(h: int, seq=[7, 4, 1, 8, 6, 6, 6, 8, 5, 5, 8, 3, 0, 7, 2, 7, 2, 4, 5, 8, 6, 1, 1, 0, 0, 8, 8, 1, 5, 2, 1, 1, 7, 1, 3, 5, 6, 1, 7, 9, 6, 2, 6, 4, 7, 4, 3, 1, 2, 3, 9, 7, 7, 1, 7, 8, 6, 5, 9, 1, 6, 3, 4, 2, 4, 1, 7, 6, 3, 2, 5, 6, 1, 3, 9, 4, 9, 6, 9, 8, 1, 2, 3, 8]):\n    for i in seq:\n        assert not (i > 0 and i > h and seq.count(i) >= i)\n    return h == -1 or seq.count(h) >= h > 0",
    "ans_type": "int",
    "sol_header": "def sol(seq=[7, 4, 1, 8, 6, 6, 6, 8, 5, 5, 8, 3, 0, 7, 2, 7, 2, 4, 5, 8, 6, 1, 1, 0, 0, 8, 8, 1, 5, 2, 1, 1, 7, 1, 3, 5, 6, 1, 7, 9, 6, 2, 6, 4, 7, 4, 3, 1, 2, 3, 9, 7, 7, 1, 7, 8, 6, 5, 9, 1, 6, 3, 4, 2, 4, 1, 7, 6, 3, 2, 5, 6, 1, 3, 9, 4, 9, 6, 9, 8, 1, 2, 3, 8]):",
    "sol_docstring": "    \"\"\"\n    Find the h-index, the largest positive number h such that that h occurs in the sequence at least h times.\n    h = -1 if there is no such positive number.\n\n    Sample Input:\n    [1, 2, 2, 3, 3, 3, 4, 4]\n\n    Sample Output:\n    3\n    \"\"\"",
    "sol_bodies": [
      "    return max([-1] + [i for i in seq if i > 0 and seq.count(i) >= i])"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#69",
    "weight": 1.0
  },
  {
    "name": "GreatestHIndex:4",
    "sat": "def sat(h: int, seq=[1, 2, 6, 2]):\n    for i in seq:\n        assert not (i > 0 and i > h and seq.count(i) >= i)\n    return h == -1 or seq.count(h) >= h > 0",
    "ans_type": "int",
    "sol_header": "def sol(seq=[1, 2, 6, 2]):",
    "sol_docstring": "    \"\"\"\n    Find the h-index, the largest positive number h such that that h occurs in the sequence at least h times.\n    h = -1 if there is no such positive number.\n\n    Sample Input:\n    [1, 2, 2, 3, 3, 3, 4, 4]\n\n    Sample Output:\n    3\n    \"\"\"",
    "sol_bodies": [
      "    return max([-1] + [i for i in seq if i > 0 and seq.count(i) >= i])"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#69",
    "weight": 1.0
  },
  {
    "name": "WildSort:0",
    "sat": "def sat(strange: List[int], li=[30, 12, 42, 717, 45, 317, 200, -1, 491, 32, 15]):\n    assert sorted(strange) == sorted(li), \"Must be a permutation\"\n    return all(n == (min, max)[i % 2](strange[i:]) for i, n in enumerate(strange))",
    "ans_type": "List[int]",
    "sol_header": "def sol(li=[30, 12, 42, 717, 45, 317, 200, -1, 491, 32, 15]):",
    "sol_docstring": "    \"\"\"\n    Find the following strange sort of li: the first element is the smallest, the second is the largest of the\n    remaining, the third is the smallest of the remaining, the fourth is the smallest of the remaining, etc.\n\n    Sample Input:\n    [1, 2, 7, 3, 4, 5, 6]\n\n    Sample Output:\n    [1, 7, 2, 6, 3, 5, 4]\n    \"\"\"",
    "sol_bodies": [
      "    s = sorted(li)\n    i = 0\n    j = len(li) - 1\n    ans = []\n    while i <= j:\n        if len(ans) % 2:\n            ans.append(s[j])\n            j -= 1\n        else:\n            ans.append(s[i])\n            i += 1\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#70",
    "weight": 1.0
  },
  {
    "name": "WildSort:1",
    "sat": "def sat(strange: List[int], li=[8, 1, 0, 8, 1, 5, 2, 1, 7, 3, 0, 4, 0, 3, 8, 0, 9, 0, 7]):\n    assert sorted(strange) == sorted(li), \"Must be a permutation\"\n    return all(n == (min, max)[i % 2](strange[i:]) for i, n in enumerate(strange))",
    "ans_type": "List[int]",
    "sol_header": "def sol(li=[8, 1, 0, 8, 1, 5, 2, 1, 7, 3, 0, 4, 0, 3, 8, 0, 9, 0, 7]):",
    "sol_docstring": "    \"\"\"\n    Find the following strange sort of li: the first element is the smallest, the second is the largest of the\n    remaining, the third is the smallest of the remaining, the fourth is the smallest of the remaining, etc.\n\n    Sample Input:\n    [1, 2, 7, 3, 4, 5, 6]\n\n    Sample Output:\n    [1, 7, 2, 6, 3, 5, 4]\n    \"\"\"",
    "sol_bodies": [
      "    s = sorted(li)\n    i = 0\n    j = len(li) - 1\n    ans = []\n    while i <= j:\n        if len(ans) % 2:\n            ans.append(s[j])\n            j -= 1\n        else:\n            ans.append(s[i])\n            i += 1\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#70",
    "weight": 1.0
  },
  {
    "name": "WildSort:2",
    "sat": "def sat(strange: List[int], li=[2, 0, 2, 4, 7, 6, 9]):\n    assert sorted(strange) == sorted(li), \"Must be a permutation\"\n    return all(n == (min, max)[i % 2](strange[i:]) for i, n in enumerate(strange))",
    "ans_type": "List[int]",
    "sol_header": "def sol(li=[2, 0, 2, 4, 7, 6, 9]):",
    "sol_docstring": "    \"\"\"\n    Find the following strange sort of li: the first element is the smallest, the second is the largest of the\n    remaining, the third is the smallest of the remaining, the fourth is the smallest of the remaining, etc.\n\n    Sample Input:\n    [1, 2, 7, 3, 4, 5, 6]\n\n    Sample Output:\n    [1, 7, 2, 6, 3, 5, 4]\n    \"\"\"",
    "sol_bodies": [
      "    s = sorted(li)\n    i = 0\n    j = len(li) - 1\n    ans = []\n    while i <= j:\n        if len(ans) % 2:\n            ans.append(s[j])\n            j -= 1\n        else:\n            ans.append(s[i])\n            i += 1\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#70",
    "weight": 1.0
  },
  {
    "name": "WildSort:3",
    "sat": "def sat(strange: List[int], li=[5, 3, 9, 9, 5, 2, 9, 7, 0, 5, 7, 1, 2]):\n    assert sorted(strange) == sorted(li), \"Must be a permutation\"\n    return all(n == (min, max)[i % 2](strange[i:]) for i, n in enumerate(strange))",
    "ans_type": "List[int]",
    "sol_header": "def sol(li=[5, 3, 9, 9, 5, 2, 9, 7, 0, 5, 7, 1, 2]):",
    "sol_docstring": "    \"\"\"\n    Find the following strange sort of li: the first element is the smallest, the second is the largest of the\n    remaining, the third is the smallest of the remaining, the fourth is the smallest of the remaining, etc.\n\n    Sample Input:\n    [1, 2, 7, 3, 4, 5, 6]\n\n    Sample Output:\n    [1, 7, 2, 6, 3, 5, 4]\n    \"\"\"",
    "sol_bodies": [
      "    s = sorted(li)\n    i = 0\n    j = len(li) - 1\n    ans = []\n    while i <= j:\n        if len(ans) % 2:\n            ans.append(s[j])\n            j -= 1\n        else:\n            ans.append(s[i])\n            i += 1\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#70",
    "weight": 1.0
  },
  {
    "name": "WildSort:4",
    "sat": "def sat(strange: List[int], li=[7, 1, 3]):\n    assert sorted(strange) == sorted(li), \"Must be a permutation\"\n    return all(n == (min, max)[i % 2](strange[i:]) for i, n in enumerate(strange))",
    "ans_type": "List[int]",
    "sol_header": "def sol(li=[7, 1, 3]):",
    "sol_docstring": "    \"\"\"\n    Find the following strange sort of li: the first element is the smallest, the second is the largest of the\n    remaining, the third is the smallest of the remaining, the fourth is the smallest of the remaining, etc.\n\n    Sample Input:\n    [1, 2, 7, 3, 4, 5, 6]\n\n    Sample Output:\n    [1, 7, 2, 6, 3, 5, 4]\n    \"\"\"",
    "sol_bodies": [
      "    s = sorted(li)\n    i = 0\n    j = len(li) - 1\n    ans = []\n    while i <= j:\n        if len(ans) % 2:\n            ans.append(s[j])\n            j -= 1\n        else:\n            ans.append(s[i])\n            i += 1\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#70",
    "weight": 1.0
  },
  {
    "name": "HeronTriangle:0",
    "sat": "def sat(coords: List[List[float]], sides=[8.9, 10.8, 17.0]):\n    assert len(coords) == 3\n    sides2 = [((x - x2) ** 2 + (y - y2) ** 2) ** 0.5 for i, (x, y) in enumerate(coords) for x2, y2 in coords[:i]]\n    return all(abs(a - b) < 1e-6 for a, b in zip(sorted(sides), sorted(sides2)))",
    "ans_type": "List[List[float]]",
    "sol_header": "def sol(sides=[8.9, 10.8, 17.0]):",
    "sol_docstring": "    \"\"\"\n    Find the coordinates of a triangle with the given side lengths\n\n    Sample Input:\n    [3.0, 4.0, 5.0\n\n    Sample Output:\n    [[0.0, 0.0], [3.0, 0.0], [0.0, 4.0]]\n    \"\"\"",
    "sol_bodies": [
      "    a, b, c = sorted(sides)\n\n    s = sum(sides) / 2  # semi-perimeter\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5  # Heron's formula\n\n    y = 2 * area / a  # height\n    x = (c ** 2 - y ** 2) ** 0.5\n    return [[0.0, 0.0], [a, 0.0], [x, y]]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#71\n\nThat problem essentially asks for Heron's formula for the area of a triangle in terms of its three sides.\nIn our version, we consider the related problem (also solved by Heron's formula) of finding 2d coordinates\nof a triangle with the given sides. If one knows the area, this is a straightforward calculation.",
    "weight": 1.0
  },
  {
    "name": "HeronTriangle:1",
    "sat": "def sat(coords: List[List[float]], sides=[24.408110376178705, 32.72365349973282, 48.81696744586911]):\n    assert len(coords) == 3\n    sides2 = [((x - x2) ** 2 + (y - y2) ** 2) ** 0.5 for i, (x, y) in enumerate(coords) for x2, y2 in coords[:i]]\n    return all(abs(a - b) < 1e-6 for a, b in zip(sorted(sides), sorted(sides2)))",
    "ans_type": "List[List[float]]",
    "sol_header": "def sol(sides=[24.408110376178705, 32.72365349973282, 48.81696744586911]):",
    "sol_docstring": "    \"\"\"\n    Find the coordinates of a triangle with the given side lengths\n\n    Sample Input:\n    [3.0, 4.0, 5.0\n\n    Sample Output:\n    [[0.0, 0.0], [3.0, 0.0], [0.0, 4.0]]\n    \"\"\"",
    "sol_bodies": [
      "    a, b, c = sorted(sides)\n\n    s = sum(sides) / 2  # semi-perimeter\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5  # Heron's formula\n\n    y = 2 * area / a  # height\n    x = (c ** 2 - y ** 2) ** 0.5\n    return [[0.0, 0.0], [a, 0.0], [x, y]]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#71\n\nThat problem essentially asks for Heron's formula for the area of a triangle in terms of its three sides.\nIn our version, we consider the related problem (also solved by Heron's formula) of finding 2d coordinates\nof a triangle with the given sides. If one knows the area, this is a straightforward calculation.",
    "weight": 1.0
  },
  {
    "name": "HeronTriangle:2",
    "sat": "def sat(coords: List[List[float]], sides=[27.451864724831378, 71.73620497337176, 72.2364568008756]):\n    assert len(coords) == 3\n    sides2 = [((x - x2) ** 2 + (y - y2) ** 2) ** 0.5 for i, (x, y) in enumerate(coords) for x2, y2 in coords[:i]]\n    return all(abs(a - b) < 1e-6 for a, b in zip(sorted(sides), sorted(sides2)))",
    "ans_type": "List[List[float]]",
    "sol_header": "def sol(sides=[27.451864724831378, 71.73620497337176, 72.2364568008756]):",
    "sol_docstring": "    \"\"\"\n    Find the coordinates of a triangle with the given side lengths\n\n    Sample Input:\n    [3.0, 4.0, 5.0\n\n    Sample Output:\n    [[0.0, 0.0], [3.0, 0.0], [0.0, 4.0]]\n    \"\"\"",
    "sol_bodies": [
      "    a, b, c = sorted(sides)\n\n    s = sum(sides) / 2  # semi-perimeter\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5  # Heron's formula\n\n    y = 2 * area / a  # height\n    x = (c ** 2 - y ** 2) ** 0.5\n    return [[0.0, 0.0], [a, 0.0], [x, y]]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#71\n\nThat problem essentially asks for Heron's formula for the area of a triangle in terms of its three sides.\nIn our version, we consider the related problem (also solved by Heron's formula) of finding 2d coordinates\nof a triangle with the given sides. If one knows the area, this is a straightforward calculation.",
    "weight": 1.0
  },
  {
    "name": "HeronTriangle:3",
    "sat": "def sat(coords: List[List[float]], sides=[22.39325953731467, 22.640876224877417, 32.23640648363397]):\n    assert len(coords) == 3\n    sides2 = [((x - x2) ** 2 + (y - y2) ** 2) ** 0.5 for i, (x, y) in enumerate(coords) for x2, y2 in coords[:i]]\n    return all(abs(a - b) < 1e-6 for a, b in zip(sorted(sides), sorted(sides2)))",
    "ans_type": "List[List[float]]",
    "sol_header": "def sol(sides=[22.39325953731467, 22.640876224877417, 32.23640648363397]):",
    "sol_docstring": "    \"\"\"\n    Find the coordinates of a triangle with the given side lengths\n\n    Sample Input:\n    [3.0, 4.0, 5.0\n\n    Sample Output:\n    [[0.0, 0.0], [3.0, 0.0], [0.0, 4.0]]\n    \"\"\"",
    "sol_bodies": [
      "    a, b, c = sorted(sides)\n\n    s = sum(sides) / 2  # semi-perimeter\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5  # Heron's formula\n\n    y = 2 * area / a  # height\n    x = (c ** 2 - y ** 2) ** 0.5\n    return [[0.0, 0.0], [a, 0.0], [x, y]]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#71\n\nThat problem essentially asks for Heron's formula for the area of a triangle in terms of its three sides.\nIn our version, we consider the related problem (also solved by Heron's formula) of finding 2d coordinates\nof a triangle with the given sides. If one knows the area, this is a straightforward calculation.",
    "weight": 1.0
  },
  {
    "name": "HeronTriangle:4",
    "sat": "def sat(coords: List[List[float]], sides=[45.986905476840235, 79.97976343909342, 86.26149779271437]):\n    assert len(coords) == 3\n    sides2 = [((x - x2) ** 2 + (y - y2) ** 2) ** 0.5 for i, (x, y) in enumerate(coords) for x2, y2 in coords[:i]]\n    return all(abs(a - b) < 1e-6 for a, b in zip(sorted(sides), sorted(sides2)))",
    "ans_type": "List[List[float]]",
    "sol_header": "def sol(sides=[45.986905476840235, 79.97976343909342, 86.26149779271437]):",
    "sol_docstring": "    \"\"\"\n    Find the coordinates of a triangle with the given side lengths\n\n    Sample Input:\n    [3.0, 4.0, 5.0\n\n    Sample Output:\n    [[0.0, 0.0], [3.0, 0.0], [0.0, 4.0]]\n    \"\"\"",
    "sol_bodies": [
      "    a, b, c = sorted(sides)\n\n    s = sum(sides) / 2  # semi-perimeter\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5  # Heron's formula\n\n    y = 2 * area / a  # height\n    x = (c ** 2 - y ** 2) ** 0.5\n    return [[0.0, 0.0], [a, 0.0], [x, y]]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#71\n\nThat problem essentially asks for Heron's formula for the area of a triangle in terms of its three sides.\nIn our version, we consider the related problem (also solved by Heron's formula) of finding 2d coordinates\nof a triangle with the given sides. If one knows the area, this is a straightforward calculation.",
    "weight": 1.0
  },
  {
    "name": "InvestigateCrash:0",
    "sat": "def sat(problem: int, weights=[1, 2, 5, 2, 1, 17], max_weight=100):\n    if problem == -1:\n        return sum(weights) > max_weight\n    return weights[problem] != weights[- 1 - problem]",
    "ans_type": "int",
    "sol_header": "def sol(weights=[1, 2, 5, 2, 1, 17], max_weight=100):",
    "sol_docstring": "    \"\"\"\n    An object will \"fly\" if its weights are a palindrome and sum to <= max_weight. The given object won't fly.\n    You have to determine why. Find index where the weights aren't a palindrome or -1 if weights are too big.\n\n    weights=[77, 40], max_weight=100 => -1\n\n    weights=[1,2,3], max_weight=50   => 0 # because 1 != 3\n    \"\"\"",
    "sol_bodies": [
      "    if sum(weights) > max_weight:\n        return -1\n    return next(i for i, w in enumerate(weights) if weights[-i - 1] != weights[i])"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#72",
    "weight": 1.0
  },
  {
    "name": "InvestigateCrash:1",
    "sat": "def sat(problem: int, weights=[17, 97, 77, 13, 13, 77, 13, 17], max_weight=314):\n    if problem == -1:\n        return sum(weights) > max_weight\n    return weights[problem] != weights[- 1 - problem]",
    "ans_type": "int",
    "sol_header": "def sol(weights=[17, 97, 77, 13, 13, 77, 13, 17], max_weight=314):",
    "sol_docstring": "    \"\"\"\n    An object will \"fly\" if its weights are a palindrome and sum to <= max_weight. The given object won't fly.\n    You have to determine why. Find index where the weights aren't a palindrome or -1 if weights are too big.\n\n    weights=[77, 40], max_weight=100 => -1\n\n    weights=[1,2,3], max_weight=50   => 0 # because 1 != 3\n    \"\"\"",
    "sol_bodies": [
      "    if sum(weights) > max_weight:\n        return -1\n    return next(i for i, w in enumerate(weights) if weights[-i - 1] != weights[i])"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#72",
    "weight": 1.0
  },
  {
    "name": "InvestigateCrash:2",
    "sat": "def sat(problem: int, weights=[51, 23, 10, 4, 7, 56, 12, 4, 10, 23, 51], max_weight=276):\n    if problem == -1:\n        return sum(weights) > max_weight\n    return weights[problem] != weights[- 1 - problem]",
    "ans_type": "int",
    "sol_header": "def sol(weights=[51, 23, 10, 4, 7, 56, 12, 4, 10, 23, 51], max_weight=276):",
    "sol_docstring": "    \"\"\"\n    An object will \"fly\" if its weights are a palindrome and sum to <= max_weight. The given object won't fly.\n    You have to determine why. Find index where the weights aren't a palindrome or -1 if weights are too big.\n\n    weights=[77, 40], max_weight=100 => -1\n\n    weights=[1,2,3], max_weight=50   => 0 # because 1 != 3\n    \"\"\"",
    "sol_bodies": [
      "    if sum(weights) > max_weight:\n        return -1\n    return next(i for i, w in enumerate(weights) if weights[-i - 1] != weights[i])"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#72",
    "weight": 1.0
  },
  {
    "name": "InvestigateCrash:3",
    "sat": "def sat(problem: int, weights=[22, 81, 93, 22], max_weight=222):\n    if problem == -1:\n        return sum(weights) > max_weight\n    return weights[problem] != weights[- 1 - problem]",
    "ans_type": "int",
    "sol_header": "def sol(weights=[22, 81, 93, 22], max_weight=222):",
    "sol_docstring": "    \"\"\"\n    An object will \"fly\" if its weights are a palindrome and sum to <= max_weight. The given object won't fly.\n    You have to determine why. Find index where the weights aren't a palindrome or -1 if weights are too big.\n\n    weights=[77, 40], max_weight=100 => -1\n\n    weights=[1,2,3], max_weight=50   => 0 # because 1 != 3\n    \"\"\"",
    "sol_bodies": [
      "    if sum(weights) > max_weight:\n        return -1\n    return next(i for i, w in enumerate(weights) if weights[-i - 1] != weights[i])"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#72",
    "weight": 1.0
  },
  {
    "name": "InvestigateCrash:4",
    "sat": "def sat(problem: int, weights=[43, 37, 79, 37, 20], max_weight=222):\n    if problem == -1:\n        return sum(weights) > max_weight\n    return weights[problem] != weights[- 1 - problem]",
    "ans_type": "int",
    "sol_header": "def sol(weights=[43, 37, 79, 37, 20], max_weight=222):",
    "sol_docstring": "    \"\"\"\n    An object will \"fly\" if its weights are a palindrome and sum to <= max_weight. The given object won't fly.\n    You have to determine why. Find index where the weights aren't a palindrome or -1 if weights are too big.\n\n    weights=[77, 40], max_weight=100 => -1\n\n    weights=[1,2,3], max_weight=50   => 0 # because 1 != 3\n    \"\"\"",
    "sol_bodies": [
      "    if sum(weights) > max_weight:\n        return -1\n    return next(i for i, w in enumerate(weights) if weights[-i - 1] != weights[i])"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#72",
    "weight": 1.0
  },
  {
    "name": "ClosestPalindrome:0",
    "sat": "def sat(pal: str, s=\"palindromordinals\"):\n    assert pal == pal[::-1] and len(pal) == len(s)\n    return sum(a != b for a, b in zip(pal, s)) == sum(a != b for a, b in zip(s, s[::-1])) // 2",
    "ans_type": "str",
    "sol_header": "def sol(s=\"palindromordinals\"):",
    "sol_docstring": "    \"\"\"\n    Find the closest palindrome\n\n    Sample Input:\n    \"cat\"\n\n    Sample Output:\n    \"tat\"\n    \"\"\"",
    "sol_bodies": [
      "    n = len(s)\n    return s[:(n + 1) // 2] + s[:n // 2][::-1]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#73",
    "weight": 1.0
  },
  {
    "name": "ClosestPalindrome:1",
    "sat": "def sat(pal: str, s=\"ti=\"):\n    assert pal == pal[::-1] and len(pal) == len(s)\n    return sum(a != b for a, b in zip(pal, s)) == sum(a != b for a, b in zip(s, s[::-1])) // 2",
    "ans_type": "str",
    "sol_header": "def sol(s=\"ti=\"):",
    "sol_docstring": "    \"\"\"\n    Find the closest palindrome\n\n    Sample Input:\n    \"cat\"\n\n    Sample Output:\n    \"tat\"\n    \"\"\"",
    "sol_bodies": [
      "    n = len(s)\n    return s[:(n + 1) // 2] + s[:n // 2][::-1]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#73",
    "weight": 1.0
  },
  {
    "name": "ClosestPalindrome:2",
    "sat": "def sat(pal: str, s=\"bC\"):\n    assert pal == pal[::-1] and len(pal) == len(s)\n    return sum(a != b for a, b in zip(pal, s)) == sum(a != b for a, b in zip(s, s[::-1])) // 2",
    "ans_type": "str",
    "sol_header": "def sol(s=\"bC\"):",
    "sol_docstring": "    \"\"\"\n    Find the closest palindrome\n\n    Sample Input:\n    \"cat\"\n\n    Sample Output:\n    \"tat\"\n    \"\"\"",
    "sol_bodies": [
      "    n = len(s)\n    return s[:(n + 1) // 2] + s[:n // 2][::-1]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#73",
    "weight": 1.0
  },
  {
    "name": "ClosestPalindrome:3",
    "sat": "def sat(pal: str, s=\"chachatexc0vchX)e1\"):\n    assert pal == pal[::-1] and len(pal) == len(s)\n    return sum(a != b for a, b in zip(pal, s)) == sum(a != b for a, b in zip(s, s[::-1])) // 2",
    "ans_type": "str",
    "sol_header": "def sol(s=\"chachatexc0vchX)e1\"):",
    "sol_docstring": "    \"\"\"\n    Find the closest palindrome\n\n    Sample Input:\n    \"cat\"\n\n    Sample Output:\n    \"tat\"\n    \"\"\"",
    "sol_bodies": [
      "    n = len(s)\n    return s[:(n + 1) // 2] + s[:n // 2][::-1]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#73",
    "weight": 1.0
  },
  {
    "name": "ClosestPalindrome:4",
    "sat": "def sat(pal: str, s=\"w\"):\n    assert pal == pal[::-1] and len(pal) == len(s)\n    return sum(a != b for a, b in zip(pal, s)) == sum(a != b for a, b in zip(s, s[::-1])) // 2",
    "ans_type": "str",
    "sol_header": "def sol(s=\"w\"):",
    "sol_docstring": "    \"\"\"\n    Find the closest palindrome\n\n    Sample Input:\n    \"cat\"\n\n    Sample Output:\n    \"tat\"\n    \"\"\"",
    "sol_bodies": [
      "    n = len(s)\n    return s[:(n + 1) // 2] + s[:n // 2][::-1]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#73",
    "weight": 1.0
  },
  {
    "name": "NarrowerList:0",
    "sat": "def sat(li: List[str], lists=[['this', 'list', 'is', 'narrow'], ['I', 'am', 'shorter but wider']]):\n    width = sum(len(s) for s in li)\n    for li2 in lists:\n        assert width <= sum(len(s) for s in li2)\n    return li in lists",
    "ans_type": "List[str]",
    "sol_header": "def sol(lists=[['this', 'list', 'is', 'narrow'], ['I', 'am', 'shorter but wider']]):",
    "sol_docstring": "    \"\"\"\n    Find the list that has fewer total characters (including repetitions)\n\n    Sample Input:\n    [[\"sh\", \"ort\"], [\"longest\"]]\n\n    Sample Output:\n    [[\"sh\", \"ort\"]\n    \"\"\"",
    "sol_bodies": [
      "    return min(lists, key=lambda x: sum(len(i) for i in x))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#74",
    "weight": 1.0
  },
  {
    "name": "NarrowerList:1",
    "sat": "def sat(li: List[str], lists=[['gefypo', 'gomecythib'], ['vicowodasyhifeme', 'mojowu', 'poxuchuchacyweth']]):\n    width = sum(len(s) for s in li)\n    for li2 in lists:\n        assert width <= sum(len(s) for s in li2)\n    return li in lists",
    "ans_type": "List[str]",
    "sol_header": "def sol(lists=[['gefypo', 'gomecythib'], ['vicowodasyhifeme', 'mojowu', 'poxuchuchacyweth']]):",
    "sol_docstring": "    \"\"\"\n    Find the list that has fewer total characters (including repetitions)\n\n    Sample Input:\n    [[\"sh\", \"ort\"], [\"longest\"]]\n\n    Sample Output:\n    [[\"sh\", \"ort\"]\n    \"\"\"",
    "sol_bodies": [
      "    return min(lists, key=lambda x: sum(len(i) for i in x))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#74",
    "weight": 1.0
  },
  {
    "name": "NarrowerList:2",
    "sat": "def sat(li: List[str], lists=[['cil', 'vesic', 'gaquedane'], ['machetyt', 'pumepywotatofo'], ['zatex', 'gilygyxejimagiquav']]):\n    width = sum(len(s) for s in li)\n    for li2 in lists:\n        assert width <= sum(len(s) for s in li2)\n    return li in lists",
    "ans_type": "List[str]",
    "sol_header": "def sol(lists=[['cil', 'vesic', 'gaquedane'], ['machetyt', 'pumepywotatofo'], ['zatex', 'gilygyxejimagiquav']]):",
    "sol_docstring": "    \"\"\"\n    Find the list that has fewer total characters (including repetitions)\n\n    Sample Input:\n    [[\"sh\", \"ort\"], [\"longest\"]]\n\n    Sample Output:\n    [[\"sh\", \"ort\"]\n    \"\"\"",
    "sol_bodies": [
      "    return min(lists, key=lambda x: sum(len(i) for i in x))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#74",
    "weight": 1.0
  },
  {
    "name": "NarrowerList:3",
    "sat": "def sat(li: List[str], lists=[['hubibexuratezixekyl', 'todot'], ['mochokyhyzylethy', 'we'], ['sygymithajyhu', 'byziruchocetextyram', 'thizupesakocami']]):\n    width = sum(len(s) for s in li)\n    for li2 in lists:\n        assert width <= sum(len(s) for s in li2)\n    return li in lists",
    "ans_type": "List[str]",
    "sol_header": "def sol(lists=[['hubibexuratezixekyl', 'todot'], ['mochokyhyzylethy', 'we'], ['sygymithajyhu', 'byziruchocetextyram', 'thizupesakocami']]):",
    "sol_docstring": "    \"\"\"\n    Find the list that has fewer total characters (including repetitions)\n\n    Sample Input:\n    [[\"sh\", \"ort\"], [\"longest\"]]\n\n    Sample Output:\n    [[\"sh\", \"ort\"]\n    \"\"\"",
    "sol_bodies": [
      "    return min(lists, key=lambda x: sum(len(i) for i in x))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#74",
    "weight": 1.0
  },
  {
    "name": "NarrowerList:4",
    "sat": "def sat(li: List[str], lists=[['r', 'datucykokegyquazyta', 'gytextevavasochub'], ['faryjav', 'textebyquyho']]):\n    width = sum(len(s) for s in li)\n    for li2 in lists:\n        assert width <= sum(len(s) for s in li2)\n    return li in lists",
    "ans_type": "List[str]",
    "sol_header": "def sol(lists=[['r', 'datucykokegyquazyta', 'gytextevavasochub'], ['faryjav', 'textebyquyho']]):",
    "sol_docstring": "    \"\"\"\n    Find the list that has fewer total characters (including repetitions)\n\n    Sample Input:\n    [[\"sh\", \"ort\"], [\"longest\"]]\n\n    Sample Output:\n    [[\"sh\", \"ort\"]\n    \"\"\"",
    "sol_bodies": [
      "    return min(lists, key=lambda x: sum(len(i) for i in x))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#74",
    "weight": 1.0
  },
  {
    "name": "ThreePrimes:0",
    "sat": "def sat(factors: List[List[int]]):\n    primes = set(range(2, 1000))\n    for n in range(2, 1000):\n        if n in primes:\n            primes.difference_update(range(2 * n, 1000, n))\n    assert all(p in primes for f in factors for p in f), \"all factors must be prime\"\n    nums = {p * q * r for p, q, r in factors}\n    return max(nums) < 1000 and len(nums) == 247",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"\n    Find all 247 integers <= 1000 that are the product of exactly three primes.\n    Each integer should represented as the list of its three prime factors.\n    [[2, 2, 2], [2, 2, 3],  [2, 2, 5], ...\n    \"\"\"",
    "sol_bodies": [
      "    primes = set(range(2, 1000))\n    for n in range(2, 1000):\n        if n in primes:\n            primes.difference_update(range(2 * n, 1000, n))\n    return [[p, q, r] for p in primes for q in primes if p <= q for r in primes if q <= r and p * q * r < 1000]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#75",
    "weight": 1.0
  },
  {
    "name": "IntegerLog:0",
    "sat": "def sat(x: int, a=3, n=1290070078170102666248196035845070394933441741644993085810116441344597492642263849):\n    return a ** x == n",
    "ans_type": "int",
    "sol_header": "def sol(a=3, n=1290070078170102666248196035845070394933441741644993085810116441344597492642263849):",
    "sol_docstring": "    \"\"\"Find an integer exponent x such that a^x = n\n    Sample Input:\n    a=2, n=1024\n\n    Sample Output:\n    x = 10\n    \"\"\"",
    "sol_bodies": [
      "    m = 1\n    x = 0\n    while m != n:\n        x += 1\n        m *= a\n    return x"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#76",
    "weight": 1.0
  },
  {
    "name": "IntegerLog:1",
    "sat": "def sat(x: int, a=4, n=49947976805055875702105555676690660891977570282639538413746511354005947821116249921924897649015871538557230897942505966327167610868612564900642816):\n    return a ** x == n",
    "ans_type": "int",
    "sol_header": "def sol(a=4, n=49947976805055875702105555676690660891977570282639538413746511354005947821116249921924897649015871538557230897942505966327167610868612564900642816):",
    "sol_docstring": "    \"\"\"Find an integer exponent x such that a^x = n\n    Sample Input:\n    a=2, n=1024\n\n    Sample Output:\n    x = 10\n    \"\"\"",
    "sol_bodies": [
      "    m = 1\n    x = 0\n    while m != n:\n        x += 1\n        m *= a\n    return x"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#76",
    "weight": 1.0
  },
  {
    "name": "IntegerLog:2",
    "sat": "def sat(x: int, a=2, n=4611686018427387904):\n    return a ** x == n",
    "ans_type": "int",
    "sol_header": "def sol(a=2, n=4611686018427387904):",
    "sol_docstring": "    \"\"\"Find an integer exponent x such that a^x = n\n    Sample Input:\n    a=2, n=1024\n\n    Sample Output:\n    x = 10\n    \"\"\"",
    "sol_bodies": [
      "    m = 1\n    x = 0\n    while m != n:\n        x += 1\n        m *= a\n    return x"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#76",
    "weight": 1.0
  },
  {
    "name": "IntegerLog:3",
    "sat": "def sat(x: int, a=7, n=619664992585427611791050679609026893099690427802915014534984716820652776102999166869953170315965558474401):\n    return a ** x == n",
    "ans_type": "int",
    "sol_header": "def sol(a=7, n=619664992585427611791050679609026893099690427802915014534984716820652776102999166869953170315965558474401):",
    "sol_docstring": "    \"\"\"Find an integer exponent x such that a^x = n\n    Sample Input:\n    a=2, n=1024\n\n    Sample Output:\n    x = 10\n    \"\"\"",
    "sol_bodies": [
      "    m = 1\n    x = 0\n    while m != n:\n        x += 1\n        m *= a\n    return x"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#76",
    "weight": 1.0
  },
  {
    "name": "IntegerLog:4",
    "sat": "def sat(x: int, a=3, n=273892744995340833777347939263771534786080723599733441):\n    return a ** x == n",
    "ans_type": "int",
    "sol_header": "def sol(a=3, n=273892744995340833777347939263771534786080723599733441):",
    "sol_docstring": "    \"\"\"Find an integer exponent x such that a^x = n\n    Sample Input:\n    a=2, n=1024\n\n    Sample Output:\n    x = 10\n    \"\"\"",
    "sol_bodies": [
      "    m = 1\n    x = 0\n    while m != n:\n        x += 1\n        m *= a\n    return x"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#76",
    "weight": 1.0
  },
  {
    "name": "CubeRoot:0",
    "sat": "def sat(x: int, n=42714774173606970182754018064350848294149432972747296768):\n    return x ** 3 == n",
    "ans_type": "int",
    "sol_header": "def sol(n=42714774173606970182754018064350848294149432972747296768):",
    "sol_docstring": "    \"\"\"Find an integer that when cubed is n\n\n    Sample Input:\n    21\n\n    Sample Output:\n    3\n    \"\"\"",
    "sol_bodies": [
      "    # Using Newton's method\n    m = abs(n)\n    x = round(abs(n) ** (1 / 3))\n    while x ** 3 != m:\n        x += (m - x ** 3) // (3 * x ** 2)\n    return -x if n < 0 else x"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#77\n\nWe made it harder by giving very large n for which `round(n ** (1/3))`",
    "weight": 1.0
  },
  {
    "name": "CubeRoot:1",
    "sat": "def sat(x: int, n=-469541313747981125):\n    return x ** 3 == n",
    "ans_type": "int",
    "sol_header": "def sol(n=-469541313747981125):",
    "sol_docstring": "    \"\"\"Find an integer that when cubed is n\n\n    Sample Input:\n    21\n\n    Sample Output:\n    3\n    \"\"\"",
    "sol_bodies": [
      "    # Using Newton's method\n    m = abs(n)\n    x = round(abs(n) ** (1 / 3))\n    while x ** 3 != m:\n        x += (m - x ** 3) // (3 * x ** 2)\n    return -x if n < 0 else x"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#77\n\nWe made it harder by giving very large n for which `round(n ** (1/3))`",
    "weight": 1.0
  },
  {
    "name": "CubeRoot:2",
    "sat": "def sat(x: int, n=963966660871383014273727008911874274513660721639801945125024924885086622296):\n    return x ** 3 == n",
    "ans_type": "int",
    "sol_header": "def sol(n=963966660871383014273727008911874274513660721639801945125024924885086622296):",
    "sol_docstring": "    \"\"\"Find an integer that when cubed is n\n\n    Sample Input:\n    21\n\n    Sample Output:\n    3\n    \"\"\"",
    "sol_bodies": [
      "    # Using Newton's method\n    m = abs(n)\n    x = round(abs(n) ** (1 / 3))\n    while x ** 3 != m:\n        x += (m - x ** 3) // (3 * x ** 2)\n    return -x if n < 0 else x"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#77\n\nWe made it harder by giving very large n for which `round(n ** (1/3))`",
    "weight": 1.0
  },
  {
    "name": "CubeRoot:3",
    "sat": "def sat(x: int, n=-858580967744947820888627092732831059532555665642825043140896515384975483968):\n    return x ** 3 == n",
    "ans_type": "int",
    "sol_header": "def sol(n=-858580967744947820888627092732831059532555665642825043140896515384975483968):",
    "sol_docstring": "    \"\"\"Find an integer that when cubed is n\n\n    Sample Input:\n    21\n\n    Sample Output:\n    3\n    \"\"\"",
    "sol_bodies": [
      "    # Using Newton's method\n    m = abs(n)\n    x = round(abs(n) ** (1 / 3))\n    while x ** 3 != m:\n        x += (m - x ** 3) // (3 * x ** 2)\n    return -x if n < 0 else x"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#77\n\nWe made it harder by giving very large n for which `round(n ** (1/3))`",
    "weight": 1.0
  },
  {
    "name": "CubeRoot:4",
    "sat": "def sat(x: int, n=-1649412660748961726580117293638546881248424191676176072):\n    return x ** 3 == n",
    "ans_type": "int",
    "sol_header": "def sol(n=-1649412660748961726580117293638546881248424191676176072):",
    "sol_docstring": "    \"\"\"Find an integer that when cubed is n\n\n    Sample Input:\n    21\n\n    Sample Output:\n    3\n    \"\"\"",
    "sol_bodies": [
      "    # Using Newton's method\n    m = abs(n)\n    x = round(abs(n) ** (1 / 3))\n    while x ** 3 != m:\n        x += (m - x ** 3) // (3 * x ** 2)\n    return -x if n < 0 else x"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#77\n\nWe made it harder by giving very large n for which `round(n ** (1/3))`",
    "weight": 1.0
  },
  {
    "name": "HexPrimes:0",
    "sat": "def sat(primes: List[bool], n=\"A4D4455214122CE192CCBE3\"):\n    return all(primes[i] == (c in \"2357BD\") for i, c in enumerate(n))",
    "ans_type": "List[bool]",
    "sol_header": "def sol(n=\"A4D4455214122CE192CCBE3\"):",
    "sol_docstring": "    \"\"\"Determine which characters of a hexidecimal correspond to prime numbers\n\n    Sample Input:\n    \"123ABCD\"\n\n    Sample Output:\n    [False, True, True, False, True, False True]\n    \"\"\"",
    "sol_bodies": [
      "    return [c in \"2357BD\" for c in n]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#78",
    "weight": 1.0
  },
  {
    "name": "HexPrimes:1",
    "sat": "def sat(primes: List[bool], n=\"a0eebda812c4c27a97d35f1\"):\n    return all(primes[i] == (c in \"2357BD\") for i, c in enumerate(n))",
    "ans_type": "List[bool]",
    "sol_header": "def sol(n=\"a0eebda812c4c27a97d35f1\"):",
    "sol_docstring": "    \"\"\"Determine which characters of a hexidecimal correspond to prime numbers\n\n    Sample Input:\n    \"123ABCD\"\n\n    Sample Output:\n    [False, True, True, False, True, False True]\n    \"\"\"",
    "sol_bodies": [
      "    return [c in \"2357BD\" for c in n]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#78",
    "weight": 1.0
  },
  {
    "name": "HexPrimes:2",
    "sat": "def sat(primes: List[bool], n=\"4a4a5904aaa94eb2\"):\n    return all(primes[i] == (c in \"2357BD\") for i, c in enumerate(n))",
    "ans_type": "List[bool]",
    "sol_header": "def sol(n=\"4a4a5904aaa94eb2\"):",
    "sol_docstring": "    \"\"\"Determine which characters of a hexidecimal correspond to prime numbers\n\n    Sample Input:\n    \"123ABCD\"\n\n    Sample Output:\n    [False, True, True, False, True, False True]\n    \"\"\"",
    "sol_bodies": [
      "    return [c in \"2357BD\" for c in n]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#78",
    "weight": 1.0
  },
  {
    "name": "HexPrimes:3",
    "sat": "def sat(primes: List[bool], n=\"b696e7352d58ee\"):\n    return all(primes[i] == (c in \"2357BD\") for i, c in enumerate(n))",
    "ans_type": "List[bool]",
    "sol_header": "def sol(n=\"b696e7352d58ee\"):",
    "sol_docstring": "    \"\"\"Determine which characters of a hexidecimal correspond to prime numbers\n\n    Sample Input:\n    \"123ABCD\"\n\n    Sample Output:\n    [False, True, True, False, True, False True]\n    \"\"\"",
    "sol_bodies": [
      "    return [c in \"2357BD\" for c in n]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#78",
    "weight": 1.0
  },
  {
    "name": "HexPrimes:4",
    "sat": "def sat(primes: List[bool], n=\"1a8dcd03abe2cdc\"):\n    return all(primes[i] == (c in \"2357BD\") for i, c in enumerate(n))",
    "ans_type": "List[bool]",
    "sol_header": "def sol(n=\"1a8dcd03abe2cdc\"):",
    "sol_docstring": "    \"\"\"Determine which characters of a hexidecimal correspond to prime numbers\n\n    Sample Input:\n    \"123ABCD\"\n\n    Sample Output:\n    [False, True, True, False, True, False True]\n    \"\"\"",
    "sol_bodies": [
      "    return [c in \"2357BD\" for c in n]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#78",
    "weight": 1.0
  },
  {
    "name": "Binarize:0",
    "sat": "def sat(b: str, n=5324680297138495285):\n    assert b[:4] == b[-4:] == 'bits'\n    inside = b[4:-4]\n    assert all(c in \"01\" for c in inside)\n    assert inside[0] == \"1\" or len(inside) == 1\n    m = 0\n    for c in inside:\n        m = 2 * m + int(c)\n    return m == n",
    "ans_type": "str",
    "sol_header": "def sol(n=5324680297138495285):",
    "sol_docstring": "    \"\"\"Write n base 2 followed and preceded by 'bits'\n    Sample Input:\n    2\n\n    Sample Output:\n    bits10bits\n    \"\"\"",
    "sol_bodies": [
      "    s = bin(n)[2:]\n    return f'bits{s}bits'"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#79",
    "weight": 1.0
  },
  {
    "name": "Binarize:1",
    "sat": "def sat(b: str, n=88465169532890):\n    assert b[:4] == b[-4:] == 'bits'\n    inside = b[4:-4]\n    assert all(c in \"01\" for c in inside)\n    assert inside[0] == \"1\" or len(inside) == 1\n    m = 0\n    for c in inside:\n        m = 2 * m + int(c)\n    return m == n",
    "ans_type": "str",
    "sol_header": "def sol(n=88465169532890):",
    "sol_docstring": "    \"\"\"Write n base 2 followed and preceded by 'bits'\n    Sample Input:\n    2\n\n    Sample Output:\n    bits10bits\n    \"\"\"",
    "sol_bodies": [
      "    s = bin(n)[2:]\n    return f'bits{s}bits'"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#79",
    "weight": 1.0
  },
  {
    "name": "Binarize:2",
    "sat": "def sat(b: str, n=0):\n    assert b[:4] == b[-4:] == 'bits'\n    inside = b[4:-4]\n    assert all(c in \"01\" for c in inside)\n    assert inside[0] == \"1\" or len(inside) == 1\n    m = 0\n    for c in inside:\n        m = 2 * m + int(c)\n    return m == n",
    "ans_type": "str",
    "sol_header": "def sol(n=0):",
    "sol_docstring": "    \"\"\"Write n base 2 followed and preceded by 'bits'\n    Sample Input:\n    2\n\n    Sample Output:\n    bits10bits\n    \"\"\"",
    "sol_bodies": [
      "    s = bin(n)[2:]\n    return f'bits{s}bits'"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#79",
    "weight": 1.0
  },
  {
    "name": "Binarize:3",
    "sat": "def sat(b: str, n=16655679678386282):\n    assert b[:4] == b[-4:] == 'bits'\n    inside = b[4:-4]\n    assert all(c in \"01\" for c in inside)\n    assert inside[0] == \"1\" or len(inside) == 1\n    m = 0\n    for c in inside:\n        m = 2 * m + int(c)\n    return m == n",
    "ans_type": "str",
    "sol_header": "def sol(n=16655679678386282):",
    "sol_docstring": "    \"\"\"Write n base 2 followed and preceded by 'bits'\n    Sample Input:\n    2\n\n    Sample Output:\n    bits10bits\n    \"\"\"",
    "sol_bodies": [
      "    s = bin(n)[2:]\n    return f'bits{s}bits'"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#79",
    "weight": 1.0
  },
  {
    "name": "Binarize:4",
    "sat": "def sat(b: str, n=2900):\n    assert b[:4] == b[-4:] == 'bits'\n    inside = b[4:-4]\n    assert all(c in \"01\" for c in inside)\n    assert inside[0] == \"1\" or len(inside) == 1\n    m = 0\n    for c in inside:\n        m = 2 * m + int(c)\n    return m == n",
    "ans_type": "str",
    "sol_header": "def sol(n=2900):",
    "sol_docstring": "    \"\"\"Write n base 2 followed and preceded by 'bits'\n    Sample Input:\n    2\n\n    Sample Output:\n    bits10bits\n    \"\"\"",
    "sol_bodies": [
      "    s = bin(n)[2:]\n    return f'bits{s}bits'"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#79",
    "weight": 1.0
  },
  {
    "name": "NearbyDuplicates:0",
    "sat": "def sat(indices: List[int], s=\"I am an unhappy string!\"):\n    i, j = indices\n    return s[i] == s[j] and 0 <= i < j < i + 3",
    "ans_type": "List[int]",
    "sol_header": "def sol(s=\"I am an unhappy string!\"):",
    "sol_docstring": "    \"\"\"A string is happy if every three consecutive characters are distinct. Find two indices making s unhappy.\n    Sample Input:\n    \"street\"\n\n    Sample Output:\n    [3, 4]\n    \"\"\"",
    "sol_bodies": [
      "    for i in range(len(s) - 2):\n        if s[i] == s[i + 1]:\n            return [i, i + 1]\n        if s[i] == s[i + 2]:\n            return [i, i + 2]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#80",
    "weight": 1.0
  },
  {
    "name": "NearbyDuplicates:1",
    "sat": "def sat(indices: List[int], s=\"aeEm%%uIV0imR&xUvQvZf#1z4\"):\n    i, j = indices\n    return s[i] == s[j] and 0 <= i < j < i + 3",
    "ans_type": "List[int]",
    "sol_header": "def sol(s=\"aeEm%%uIV0imR&xUvQvZf#1z4\"):",
    "sol_docstring": "    \"\"\"A string is happy if every three consecutive characters are distinct. Find two indices making s unhappy.\n    Sample Input:\n    \"street\"\n\n    Sample Output:\n    [3, 4]\n    \"\"\"",
    "sol_bodies": [
      "    for i in range(len(s) - 2):\n        if s[i] == s[i + 1]:\n            return [i, i + 1]\n        if s[i] == s[i + 2]:\n            return [i, i + 2]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#80",
    "weight": 1.0
  },
  {
    "name": "NearbyDuplicates:2",
    "sat": "def sat(indices: List[int], s=\"e&S|C;;b1Nf[mmsQrQY\"):\n    i, j = indices\n    return s[i] == s[j] and 0 <= i < j < i + 3",
    "ans_type": "List[int]",
    "sol_header": "def sol(s=\"e&S|C;;b1Nf[mmsQrQY\"):",
    "sol_docstring": "    \"\"\"A string is happy if every three consecutive characters are distinct. Find two indices making s unhappy.\n    Sample Input:\n    \"street\"\n\n    Sample Output:\n    [3, 4]\n    \"\"\"",
    "sol_bodies": [
      "    for i in range(len(s) - 2):\n        if s[i] == s[i + 1]:\n            return [i, i + 1]\n        if s[i] == s[i + 2]:\n            return [i, i + 2]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#80",
    "weight": 1.0
  },
  {
    "name": "NearbyDuplicates:3",
    "sat": "def sat(indices: List[int], s=\"?EaEc/oDAm(i gP\"):\n    i, j = indices\n    return s[i] == s[j] and 0 <= i < j < i + 3",
    "ans_type": "List[int]",
    "sol_header": "def sol(s=\"?EaEc/oDAm(i gP\"):",
    "sol_docstring": "    \"\"\"A string is happy if every three consecutive characters are distinct. Find two indices making s unhappy.\n    Sample Input:\n    \"street\"\n\n    Sample Output:\n    [3, 4]\n    \"\"\"",
    "sol_bodies": [
      "    for i in range(len(s) - 2):\n        if s[i] == s[i + 1]:\n            return [i, i + 1]\n        if s[i] == s[i + 2]:\n            return [i, i + 2]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#80",
    "weight": 1.0
  },
  {
    "name": "NearbyDuplicates:4",
    "sat": "def sat(indices: List[int], s=\"pXw|EEcTKZ;:n[-tBME[[sn%fR37l;bM,t%!\"):\n    i, j = indices\n    return s[i] == s[j] and 0 <= i < j < i + 3",
    "ans_type": "List[int]",
    "sol_header": "def sol(s=\"pXw|EEcTKZ;:n[-tBME[[sn%fR37l;bM,t%!\"):",
    "sol_docstring": "    \"\"\"A string is happy if every three consecutive characters are distinct. Find two indices making s unhappy.\n    Sample Input:\n    \"street\"\n\n    Sample Output:\n    [3, 4]\n    \"\"\"",
    "sol_bodies": [
      "    for i in range(len(s) - 2):\n        if s[i] == s[i + 1]:\n            return [i, i + 1]\n        if s[i] == s[i + 2]:\n            return [i, i + 2]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#80",
    "weight": 1.0
  },
  {
    "name": "Grader:0",
    "sat": "def sat(grades: List[str], gpas=[2.8, 3.1, 4.0, 2.2, 3.1, 2.5, 0.9]):\n    assert len(grades) == len(gpas)\n    letters = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'F']\n    scores = [4.0, 3.7, 3.4, 3.0, 2.7, 2.4, 2.0, 1.7, 1.4, 0.0]\n    for grade, gpa in zip(grades, gpas):\n        i = letters.index(grade)\n        assert gpa >= scores[i]\n        assert i == 0 or gpa <= scores[i - 1]\n    return True",
    "ans_type": "List[str]",
    "sol_header": "def sol(gpas=[2.8, 3.1, 4.0, 2.2, 3.1, 2.5, 0.9]):",
    "sol_docstring": "    \"\"\"\n    Convert GPAs to letter grades according to the following table:\n    4.0: A+\n    3.7: A\n    3.4: A-\n    3.0: B+\n    2.7: B\n    2.4: B-\n    2.0: C+\n    1.7: C\n    1.4: C-\n    below: F\n\n    Sample input: [4.0, 3.5, 3.8]\n    Sample output: ['A+', 'A-', 'A']\n    \"\"\"",
    "sol_bodies": [
      "    letters = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'F']\n    scores = [4.0, 3.7, 3.4, 3.0, 2.7, 2.4, 2.0, 1.7, 1.4, 0.0]\n    ans = []\n    for gpa in gpas:\n        i = 0\n        while gpa < scores[i]:\n            i += 1\n        ans.append(letters[i])\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#81",
    "weight": 1.0
  },
  {
    "name": "Grader:1",
    "sat": "def sat(grades: List[str], gpas=[3.9759656717898215, 2.532507032264099, 3.695549189812313, 2.492545757546573, 0.9653857771911838, 1.619680869536884]):\n    assert len(grades) == len(gpas)\n    letters = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'F']\n    scores = [4.0, 3.7, 3.4, 3.0, 2.7, 2.4, 2.0, 1.7, 1.4, 0.0]\n    for grade, gpa in zip(grades, gpas):\n        i = letters.index(grade)\n        assert gpa >= scores[i]\n        assert i == 0 or gpa <= scores[i - 1]\n    return True",
    "ans_type": "List[str]",
    "sol_header": "def sol(gpas=[3.9759656717898215, 2.532507032264099, 3.695549189812313, 2.492545757546573, 0.9653857771911838, 1.619680869536884]):",
    "sol_docstring": "    \"\"\"\n    Convert GPAs to letter grades according to the following table:\n    4.0: A+\n    3.7: A\n    3.4: A-\n    3.0: B+\n    2.7: B\n    2.4: B-\n    2.0: C+\n    1.7: C\n    1.4: C-\n    below: F\n\n    Sample input: [4.0, 3.5, 3.8]\n    Sample output: ['A+', 'A-', 'A']\n    \"\"\"",
    "sol_bodies": [
      "    letters = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'F']\n    scores = [4.0, 3.7, 3.4, 3.0, 2.7, 2.4, 2.0, 1.7, 1.4, 0.0]\n    ans = []\n    for gpa in gpas:\n        i = 0\n        while gpa < scores[i]:\n            i += 1\n        ans.append(letters[i])\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#81",
    "weight": 1.0
  },
  {
    "name": "Grader:2",
    "sat": "def sat(grades: List[str], gpas=[1.0670062946539565]):\n    assert len(grades) == len(gpas)\n    letters = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'F']\n    scores = [4.0, 3.7, 3.4, 3.0, 2.7, 2.4, 2.0, 1.7, 1.4, 0.0]\n    for grade, gpa in zip(grades, gpas):\n        i = letters.index(grade)\n        assert gpa >= scores[i]\n        assert i == 0 or gpa <= scores[i - 1]\n    return True",
    "ans_type": "List[str]",
    "sol_header": "def sol(gpas=[1.0670062946539565]):",
    "sol_docstring": "    \"\"\"\n    Convert GPAs to letter grades according to the following table:\n    4.0: A+\n    3.7: A\n    3.4: A-\n    3.0: B+\n    2.7: B\n    2.4: B-\n    2.0: C+\n    1.7: C\n    1.4: C-\n    below: F\n\n    Sample input: [4.0, 3.5, 3.8]\n    Sample output: ['A+', 'A-', 'A']\n    \"\"\"",
    "sol_bodies": [
      "    letters = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'F']\n    scores = [4.0, 3.7, 3.4, 3.0, 2.7, 2.4, 2.0, 1.7, 1.4, 0.0]\n    ans = []\n    for gpa in gpas:\n        i = 0\n        while gpa < scores[i]:\n            i += 1\n        ans.append(letters[i])\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#81",
    "weight": 1.0
  },
  {
    "name": "Grader:3",
    "sat": "def sat(grades: List[str], gpas=[]):\n    assert len(grades) == len(gpas)\n    letters = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'F']\n    scores = [4.0, 3.7, 3.4, 3.0, 2.7, 2.4, 2.0, 1.7, 1.4, 0.0]\n    for grade, gpa in zip(grades, gpas):\n        i = letters.index(grade)\n        assert gpa >= scores[i]\n        assert i == 0 or gpa <= scores[i - 1]\n    return True",
    "ans_type": "List[str]",
    "sol_header": "def sol(gpas=[]):",
    "sol_docstring": "    \"\"\"\n    Convert GPAs to letter grades according to the following table:\n    4.0: A+\n    3.7: A\n    3.4: A-\n    3.0: B+\n    2.7: B\n    2.4: B-\n    2.0: C+\n    1.7: C\n    1.4: C-\n    below: F\n\n    Sample input: [4.0, 3.5, 3.8]\n    Sample output: ['A+', 'A-', 'A']\n    \"\"\"",
    "sol_bodies": [
      "    letters = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'F']\n    scores = [4.0, 3.7, 3.4, 3.0, 2.7, 2.4, 2.0, 1.7, 1.4, 0.0]\n    ans = []\n    for gpa in gpas:\n        i = 0\n        while gpa < scores[i]:\n            i += 1\n        ans.append(letters[i])\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#81",
    "weight": 1.0
  },
  {
    "name": "Grader:4",
    "sat": "def sat(grades: List[str], gpas=[2.7731700871871414, 0.5127907383392896]):\n    assert len(grades) == len(gpas)\n    letters = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'F']\n    scores = [4.0, 3.7, 3.4, 3.0, 2.7, 2.4, 2.0, 1.7, 1.4, 0.0]\n    for grade, gpa in zip(grades, gpas):\n        i = letters.index(grade)\n        assert gpa >= scores[i]\n        assert i == 0 or gpa <= scores[i - 1]\n    return True",
    "ans_type": "List[str]",
    "sol_header": "def sol(gpas=[2.7731700871871414, 0.5127907383392896]):",
    "sol_docstring": "    \"\"\"\n    Convert GPAs to letter grades according to the following table:\n    4.0: A+\n    3.7: A\n    3.4: A-\n    3.0: B+\n    2.7: B\n    2.4: B-\n    2.0: C+\n    1.7: C\n    1.4: C-\n    below: F\n\n    Sample input: [4.0, 3.5, 3.8]\n    Sample output: ['A+', 'A-', 'A']\n    \"\"\"",
    "sol_bodies": [
      "    letters = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'F']\n    scores = [4.0, 3.7, 3.4, 3.0, 2.7, 2.4, 2.0, 1.7, 1.4, 0.0]\n    ans = []\n    for gpa in gpas:\n        i = 0\n        while gpa < scores[i]:\n            i += 1\n        ans.append(letters[i])\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#81",
    "weight": 1.0
  },
  {
    "name": "FactorString:0",
    "sat": "def sat(factor: str, s=\"catscatcatscatcatscat\"):\n    return len(factor) < len(s) and s == factor * (len(s) // len(factor))",
    "ans_type": "str",
    "sol_header": "def sol(s=\"catscatcatscatcatscat\"):",
    "sol_docstring": "    \"\"\"Find a string which when repeated more than once gives s\n    Sample Input:\n    \"haha\"\n\n    Sample Output:\n    \"ha\"\n    \"\"\"",
    "sol_bodies": [
      "    n = len(s)\n    return next(s[:i] for i in range(1, len(s)) if s == s[:i] * (n // i))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#82",
    "weight": 1.0
  },
  {
    "name": "FactorString:1",
    "sat": "def sat(factor: str, s=\"pamithelozefefitextpamithelozefefitext\"):\n    return len(factor) < len(s) and s == factor * (len(s) // len(factor))",
    "ans_type": "str",
    "sol_header": "def sol(s=\"pamithelozefefitextpamithelozefefitext\"):",
    "sol_docstring": "    \"\"\"Find a string which when repeated more than once gives s\n    Sample Input:\n    \"haha\"\n\n    Sample Output:\n    \"ha\"\n    \"\"\"",
    "sol_bodies": [
      "    n = len(s)\n    return next(s[:i] for i in range(1, len(s)) if s == s[:i] * (n // i))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#82",
    "weight": 1.0
  },
  {
    "name": "FactorString:2",
    "sat": "def sat(factor: str, s=\"mahermahermahermahermahermahermahermaher\"):\n    return len(factor) < len(s) and s == factor * (len(s) // len(factor))",
    "ans_type": "str",
    "sol_header": "def sol(s=\"mahermahermahermahermahermahermahermaher\"):",
    "sol_docstring": "    \"\"\"Find a string which when repeated more than once gives s\n    Sample Input:\n    \"haha\"\n\n    Sample Output:\n    \"ha\"\n    \"\"\"",
    "sol_bodies": [
      "    n = len(s)\n    return next(s[:i] for i in range(1, len(s)) if s == s[:i] * (n // i))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#82",
    "weight": 1.0
  },
  {
    "name": "FactorString:3",
    "sat": "def sat(factor: str, s=\"mapychysmapychysmapychysmapychysmapychysmapychys\"):\n    return len(factor) < len(s) and s == factor * (len(s) // len(factor))",
    "ans_type": "str",
    "sol_header": "def sol(s=\"mapychysmapychysmapychysmapychysmapychysmapychys\"):",
    "sol_docstring": "    \"\"\"Find a string which when repeated more than once gives s\n    Sample Input:\n    \"haha\"\n\n    Sample Output:\n    \"ha\"\n    \"\"\"",
    "sol_bodies": [
      "    n = len(s)\n    return next(s[:i] for i in range(1, len(s)) if s == s[:i] * (n // i))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#82",
    "weight": 1.0
  },
  {
    "name": "FactorString:4",
    "sat": "def sat(factor: str, s=\"thihathihathihathihathihathiha\"):\n    return len(factor) < len(s) and s == factor * (len(s) // len(factor))",
    "ans_type": "str",
    "sol_header": "def sol(s=\"thihathihathihathihathihathiha\"):",
    "sol_docstring": "    \"\"\"Find a string which when repeated more than once gives s\n    Sample Input:\n    \"haha\"\n\n    Sample Output:\n    \"ha\"\n    \"\"\"",
    "sol_bodies": [
      "    n = len(s)\n    return next(s[:i] for i in range(1, len(s)) if s == s[:i] * (n // i))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#82",
    "weight": 1.0
  },
  {
    "name": "OneEnded:0",
    "sat": "def sat(nums: List[int], n=5):\n    count = 18 * (10 ** (n - 2)) if n > 1 else 1\n    strs = {str(n) for n in nums}\n    return len(strs) == count and all(s.startswith(\"1\") or s.endswith(\"1\") and len(s) == n for s in strs)",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=5):",
    "sol_docstring": "    \"\"\"Find all n-digit integers that start or end with 1\n\n    1 => [1]\"\"\"",
    "sol_bodies": [
      "    ans = []\n    for i in range(10 ** (n - 1), 10 ** n):\n        assert len(str(i)) == n\n        if str(i).startswith(\"1\") or str(i).endswith(\"1\"):\n            ans.append(i)\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#83",
    "weight": 1.0
  },
  {
    "name": "BitSum:0",
    "sat": "def sat(n: int, b=107, s=25):\n    n_str = bin(n)[2:]  # n in binary\n    return len(n_str) == b and sum(int(i) for i in n_str) == s",
    "ans_type": "int",
    "sol_header": "def sol(b=107, s=25):",
    "sol_docstring": "    \"\"\"Find an b-bit integer with a bit-sum of s\n\n    b=3, s=2 => 5 # 5 is 101 in binary\n    \"\"\"",
    "sol_bodies": [
      "    return int(\"1\" * s + \"0\" * (b - s), 2)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#84",
    "weight": 1.0
  },
  {
    "name": "BitSum:1",
    "sat": "def sat(n: int, b=59, s=51):\n    n_str = bin(n)[2:]  # n in binary\n    return len(n_str) == b and sum(int(i) for i in n_str) == s",
    "ans_type": "int",
    "sol_header": "def sol(b=59, s=51):",
    "sol_docstring": "    \"\"\"Find an b-bit integer with a bit-sum of s\n\n    b=3, s=2 => 5 # 5 is 101 in binary\n    \"\"\"",
    "sol_bodies": [
      "    return int(\"1\" * s + \"0\" * (b - s), 2)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#84",
    "weight": 1.0
  },
  {
    "name": "BitSum:2",
    "sat": "def sat(n: int, b=825, s=653):\n    n_str = bin(n)[2:]  # n in binary\n    return len(n_str) == b and sum(int(i) for i in n_str) == s",
    "ans_type": "int",
    "sol_header": "def sol(b=825, s=653):",
    "sol_docstring": "    \"\"\"Find an b-bit integer with a bit-sum of s\n\n    b=3, s=2 => 5 # 5 is 101 in binary\n    \"\"\"",
    "sol_bodies": [
      "    return int(\"1\" * s + \"0\" * (b - s), 2)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#84",
    "weight": 1.0
  },
  {
    "name": "BitSum:3",
    "sat": "def sat(n: int, b=354, s=287):\n    n_str = bin(n)[2:]  # n in binary\n    return len(n_str) == b and sum(int(i) for i in n_str) == s",
    "ans_type": "int",
    "sol_header": "def sol(b=354, s=287):",
    "sol_docstring": "    \"\"\"Find an b-bit integer with a bit-sum of s\n\n    b=3, s=2 => 5 # 5 is 101 in binary\n    \"\"\"",
    "sol_bodies": [
      "    return int(\"1\" * s + \"0\" * (b - s), 2)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#84",
    "weight": 1.0
  },
  {
    "name": "BitSum:4",
    "sat": "def sat(n: int, b=256, s=1):\n    n_str = bin(n)[2:]  # n in binary\n    return len(n_str) == b and sum(int(i) for i in n_str) == s",
    "ans_type": "int",
    "sol_header": "def sol(b=256, s=1):",
    "sol_docstring": "    \"\"\"Find an b-bit integer with a bit-sum of s\n\n    b=3, s=2 => 5 # 5 is 101 in binary\n    \"\"\"",
    "sol_bodies": [
      "    return int(\"1\" * s + \"0\" * (b - s), 2)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#84",
    "weight": 1.0
  },
  {
    "name": "EvenOddSum:0",
    "sat": "def sat(even_odd_sum: int, nums=[2341, 125146894, 12521, -12451293476325, 535284623934, 132974693614350]):\n    for i in nums[1::2]:\n        if i % 2 == 0:\n            even_odd_sum -= i\n    return even_odd_sum == 0",
    "ans_type": "int",
    "sol_header": "def sol(nums=[2341, 125146894, 12521, -12451293476325, 535284623934, 132974693614350]):",
    "sol_docstring": "    \"\"\"Find the sum of the even elements that are at odd indices\n\n    [1, 2, 8, 3, 9, 4] => 6\n    \"\"\"",
    "sol_bodies": [
      "    return sum(i for i in nums[1::2] if i % 2 == 0)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#85\n\nVery similar to OddEvenSum \\#121",
    "weight": 1.0
  },
  {
    "name": "EvenOddSum:1",
    "sat": "def sat(even_odd_sum: int, nums=[63, 11, -95, 69, 73, -43, 69, -26, -49, 36, 83, 21, -26, 11]):\n    for i in nums[1::2]:\n        if i % 2 == 0:\n            even_odd_sum -= i\n    return even_odd_sum == 0",
    "ans_type": "int",
    "sol_header": "def sol(nums=[63, 11, -95, 69, 73, -43, 69, -26, -49, 36, 83, 21, -26, 11]):",
    "sol_docstring": "    \"\"\"Find the sum of the even elements that are at odd indices\n\n    [1, 2, 8, 3, 9, 4] => 6\n    \"\"\"",
    "sol_bodies": [
      "    return sum(i for i in nums[1::2] if i % 2 == 0)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#85\n\nVery similar to OddEvenSum \\#121",
    "weight": 1.0
  },
  {
    "name": "EvenOddSum:2",
    "sat": "def sat(even_odd_sum: int, nums=[29, -100, 94, -10, -97, -70, 86, 69, -61, 44, 48, -12, 92]):\n    for i in nums[1::2]:\n        if i % 2 == 0:\n            even_odd_sum -= i\n    return even_odd_sum == 0",
    "ans_type": "int",
    "sol_header": "def sol(nums=[29, -100, 94, -10, -97, -70, 86, 69, -61, 44, 48, -12, 92]):",
    "sol_docstring": "    \"\"\"Find the sum of the even elements that are at odd indices\n\n    [1, 2, 8, 3, 9, 4] => 6\n    \"\"\"",
    "sol_bodies": [
      "    return sum(i for i in nums[1::2] if i % 2 == 0)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#85\n\nVery similar to OddEvenSum \\#121",
    "weight": 1.0
  },
  {
    "name": "EvenOddSum:3",
    "sat": "def sat(even_odd_sum: int, nums=[-75, -2, 68, 36, -4, 58, -42, -92, 28, 59, -66, 52]):\n    for i in nums[1::2]:\n        if i % 2 == 0:\n            even_odd_sum -= i\n    return even_odd_sum == 0",
    "ans_type": "int",
    "sol_header": "def sol(nums=[-75, -2, 68, 36, -4, 58, -42, -92, 28, 59, -66, 52]):",
    "sol_docstring": "    \"\"\"Find the sum of the even elements that are at odd indices\n\n    [1, 2, 8, 3, 9, 4] => 6\n    \"\"\"",
    "sol_bodies": [
      "    return sum(i for i in nums[1::2] if i % 2 == 0)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#85\n\nVery similar to OddEvenSum \\#121",
    "weight": 1.0
  },
  {
    "name": "EvenOddSum:4",
    "sat": "def sat(even_odd_sum: int, nums=[48, -42, -19, -82, -71, -57, -85, 61, 61, -86]):\n    for i in nums[1::2]:\n        if i % 2 == 0:\n            even_odd_sum -= i\n    return even_odd_sum == 0",
    "ans_type": "int",
    "sol_header": "def sol(nums=[48, -42, -19, -82, -71, -57, -85, 61, 61, -86]):",
    "sol_docstring": "    \"\"\"Find the sum of the even elements that are at odd indices\n\n    [1, 2, 8, 3, 9, 4] => 6\n    \"\"\"",
    "sol_bodies": [
      "    return sum(i for i in nums[1::2] if i % 2 == 0)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#85\n\nVery similar to OddEvenSum \\#121",
    "weight": 1.0
  },
  {
    "name": "AntiShuffle:0",
    "sat": "def sat(s: str, orig=\"Hello world!!!\"):\n    for a, b in zip(s.split(' '), orig.split(' ')):\n        for i in range(len(a) - 1):\n            assert a[i] <= a[i + 1], \"characters must s-words be in increasing order\"\n        assert len(a) == len(b) and all(a.count(c) == b.count(c) for c in b), \"must have same chars\"\n    return len(s) == len(orig)",
    "ans_type": "str",
    "sol_header": "def sol(orig=\"Hello world!!!\"):",
    "sol_docstring": "    \"\"\"Create a new string by taking s, and word by word rearranging its characters in ascii order\n    Sample input:\n    'maltos wow'\n\n    Sample output:\n    'almost oww'\n    \"\"\"",
    "sol_bodies": [
      "    return \" \".join(\"\".join(sorted(w)) for w in orig.split(' '))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#86",
    "weight": 1.0
  },
  {
    "name": "AntiShuffle:1",
    "sat": "def sat(s: str, orig=\"YOU CAN rearrange my letters, yes you can!\"):\n    for a, b in zip(s.split(' '), orig.split(' ')):\n        for i in range(len(a) - 1):\n            assert a[i] <= a[i + 1], \"characters must s-words be in increasing order\"\n        assert len(a) == len(b) and all(a.count(c) == b.count(c) for c in b), \"must have same chars\"\n    return len(s) == len(orig)",
    "ans_type": "str",
    "sol_header": "def sol(orig=\"YOU CAN rearrange my letters, yes you can!\"):",
    "sol_docstring": "    \"\"\"Create a new string by taking s, and word by word rearranging its characters in ascii order\n    Sample input:\n    'maltos wow'\n\n    Sample output:\n    'almost oww'\n    \"\"\"",
    "sol_bodies": [
      "    return \" \".join(\"\".join(sorted(w)) for w in orig.split(' '))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#86",
    "weight": 1.0
  },
  {
    "name": "AntiShuffle:2",
    "sat": "def sat(s: str, orig=\"caN you handlE LONGGGGGGGGGGGG strings?\"):\n    for a, b in zip(s.split(' '), orig.split(' ')):\n        for i in range(len(a) - 1):\n            assert a[i] <= a[i + 1], \"characters must s-words be in increasing order\"\n        assert len(a) == len(b) and all(a.count(c) == b.count(c) for c in b), \"must have same chars\"\n    return len(s) == len(orig)",
    "ans_type": "str",
    "sol_header": "def sol(orig=\"caN you handlE LONGGGGGGGGGGGG strings?\"):",
    "sol_docstring": "    \"\"\"Create a new string by taking s, and word by word rearranging its characters in ascii order\n    Sample input:\n    'maltos wow'\n\n    Sample output:\n    'almost oww'\n    \"\"\"",
    "sol_bodies": [
      "    return \" \".join(\"\".join(sorted(w)) for w in orig.split(' '))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#86",
    "weight": 1.0
  },
  {
    "name": "AntiShuffle:3",
    "sat": "def sat(s: str, orig=\"how bout    spaces and weird punctuation!?$%@#%\"):\n    for a, b in zip(s.split(' '), orig.split(' ')):\n        for i in range(len(a) - 1):\n            assert a[i] <= a[i + 1], \"characters must s-words be in increasing order\"\n        assert len(a) == len(b) and all(a.count(c) == b.count(c) for c in b), \"must have same chars\"\n    return len(s) == len(orig)",
    "ans_type": "str",
    "sol_header": "def sol(orig=\"how bout    spaces and weird punctuation!?$%@#%\"):",
    "sol_docstring": "    \"\"\"Create a new string by taking s, and word by word rearranging its characters in ascii order\n    Sample input:\n    'maltos wow'\n\n    Sample output:\n    'almost oww'\n    \"\"\"",
    "sol_bodies": [
      "    return \" \".join(\"\".join(sorted(w)) for w in orig.split(' '))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#86",
    "weight": 1.0
  },
  {
    "name": "AntiShuffle:4",
    "sat": "def sat(s: str, orig=\"ruhixuthuciji kebelobawitextythuch quozo\"):\n    for a, b in zip(s.split(' '), orig.split(' ')):\n        for i in range(len(a) - 1):\n            assert a[i] <= a[i + 1], \"characters must s-words be in increasing order\"\n        assert len(a) == len(b) and all(a.count(c) == b.count(c) for c in b), \"must have same chars\"\n    return len(s) == len(orig)",
    "ans_type": "str",
    "sol_header": "def sol(orig=\"ruhixuthuciji kebelobawitextythuch quozo\"):",
    "sol_docstring": "    \"\"\"Create a new string by taking s, and word by word rearranging its characters in ascii order\n    Sample input:\n    'maltos wow'\n\n    Sample output:\n    'almost oww'\n    \"\"\"",
    "sol_bodies": [
      "    return \" \".join(\"\".join(sorted(w)) for w in orig.split(' '))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#86",
    "weight": 1.0
  },
  {
    "name": "UnevenFind:0",
    "sat": "def sat(indices: List[List[int]], uneven=[[1, 3, 2, 32, 17], [17, 2, 48, 17], [], [9, 35, 4], [3, 17]], target=17):\n    for i, j in indices:\n        assert uneven[i][j] == target\n    for i, row in enumerate(uneven):\n        for j, n in enumerate(row):\n            assert n != target or [i, j] in indices\n    return True",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(uneven=[[1, 3, 2, 32, 17], [17, 2, 48, 17], [], [9, 35, 4], [3, 17]], target=17):",
    "sol_docstring": "    \"\"\"Find the indices of all occurrences of target in the uneven matrix\n    Sample input:\n    uneven=[[2, 3, 2], [], [9, 2]], target=2\n\n    Sample output:\n    [[0, 0], [0, 2], [2, 1]]\n    \"\"\"",
    "sol_bodies": [
      "    return [[i, j] for i, row in enumerate(uneven) for j, n in enumerate(row) if n == target]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#87",
    "weight": 1.0
  },
  {
    "name": "UnevenFind:1",
    "sat": "def sat(indices: List[List[int]], uneven=[[64, 7, 64, 64, 20], [72, 64, 22, 64, 64], [21, 35], [64, 0, 96, 27]], target=64):\n    for i, j in indices:\n        assert uneven[i][j] == target\n    for i, row in enumerate(uneven):\n        for j, n in enumerate(row):\n            assert n != target or [i, j] in indices\n    return True",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(uneven=[[64, 7, 64, 64, 20], [72, 64, 22, 64, 64], [21, 35], [64, 0, 96, 27]], target=64):",
    "sol_docstring": "    \"\"\"Find the indices of all occurrences of target in the uneven matrix\n    Sample input:\n    uneven=[[2, 3, 2], [], [9, 2]], target=2\n\n    Sample output:\n    [[0, 0], [0, 2], [2, 1]]\n    \"\"\"",
    "sol_bodies": [
      "    return [[i, j] for i, row in enumerate(uneven) for j, n in enumerate(row) if n == target]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#87",
    "weight": 1.0
  },
  {
    "name": "UnevenFind:2",
    "sat": "def sat(indices: List[List[int]], uneven=[[16, 87]], target=87):\n    for i, j in indices:\n        assert uneven[i][j] == target\n    for i, row in enumerate(uneven):\n        for j, n in enumerate(row):\n            assert n != target or [i, j] in indices\n    return True",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(uneven=[[16, 87]], target=87):",
    "sol_docstring": "    \"\"\"Find the indices of all occurrences of target in the uneven matrix\n    Sample input:\n    uneven=[[2, 3, 2], [], [9, 2]], target=2\n\n    Sample output:\n    [[0, 0], [0, 2], [2, 1]]\n    \"\"\"",
    "sol_bodies": [
      "    return [[i, j] for i, row in enumerate(uneven) for j, n in enumerate(row) if n == target]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#87",
    "weight": 1.0
  },
  {
    "name": "UnevenFind:3",
    "sat": "def sat(indices: List[List[int]], uneven=[], target=30):\n    for i, j in indices:\n        assert uneven[i][j] == target\n    for i, row in enumerate(uneven):\n        for j, n in enumerate(row):\n            assert n != target or [i, j] in indices\n    return True",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(uneven=[], target=30):",
    "sol_docstring": "    \"\"\"Find the indices of all occurrences of target in the uneven matrix\n    Sample input:\n    uneven=[[2, 3, 2], [], [9, 2]], target=2\n\n    Sample output:\n    [[0, 0], [0, 2], [2, 1]]\n    \"\"\"",
    "sol_bodies": [
      "    return [[i, j] for i, row in enumerate(uneven) for j, n in enumerate(row) if n == target]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#87",
    "weight": 1.0
  },
  {
    "name": "UnevenFind:4",
    "sat": "def sat(indices: List[List[int]], uneven=[[5, 30, 18], [53, 64, 87, 69, 64, 64, 64], [], [44], [64, 88, 68, 64, 64, 84, 64, 64, 64], [31], [64, 5, 64, 71, 42, 64, 48, 64, 27], [64, 80, 11, 64]], target=64):\n    for i, j in indices:\n        assert uneven[i][j] == target\n    for i, row in enumerate(uneven):\n        for j, n in enumerate(row):\n            assert n != target or [i, j] in indices\n    return True",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(uneven=[[5, 30, 18], [53, 64, 87, 69, 64, 64, 64], [], [44], [64, 88, 68, 64, 64, 84, 64, 64, 64], [31], [64, 5, 64, 71, 42, 64, 48, 64, 27], [64, 80, 11, 64]], target=64):",
    "sol_docstring": "    \"\"\"Find the indices of all occurrences of target in the uneven matrix\n    Sample input:\n    uneven=[[2, 3, 2], [], [9, 2]], target=2\n\n    Sample output:\n    [[0, 0], [0, 2], [2, 1]]\n    \"\"\"",
    "sol_bodies": [
      "    return [[i, j] for i, row in enumerate(uneven) for j, n in enumerate(row) if n == target]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#87",
    "weight": 1.0
  },
  {
    "name": "UpDownSort:0",
    "sat": "def sat(up_down: List[int], nums=[17, 2, 3, 523, 18, -2, 0, 2, -1]):\n    assert all(up_down.count(i) == nums.count(i) for i in set(up_down + nums)), \"not a reordering\"\n    increasing_sign = 1 if ((nums[0] + nums[-1]) % 2 == 1) else -1\n    return all((up_down[i + 1] - up_down[i]) * increasing_sign >= 0 for i in range(len(up_down) - 1))",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[17, 2, 3, 523, 18, -2, 0, 2, -1]):",
    "sol_docstring": "    \"\"\"Reorder nums in increasing/decreasing order based on whether the first plus last element is even/odd\n\n    Sample input:\n    [1, 7, 4]\n\n    Sample output:\n    [1, 4, 7] # because 1 + 4 is odd\n\n    Sample input:\n    [1, 7, 5]\n\n    Sample output:\n    [8, 5, 1] # because 1 + 5 is even\n    \"\"\"",
    "sol_bodies": [
      "    return sorted(nums, reverse=(False if (nums[0] + nums[-1]) % 2 else True))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#88",
    "weight": 1.0
  },
  {
    "name": "SubstitutionCypher:0",
    "sat": "def sat(encrypted: str, orig=\"Hello, world!\"):\n    assert len(encrypted) == len(orig)\n    return all(chr(ord(a) - 2 * 2) == b for a, b in zip(encrypted, orig))",
    "ans_type": "str",
    "sol_header": "def sol(orig=\"Hello, world!\"):",
    "sol_docstring": "    \"\"\"Apply a substitution cypher in which each character is advanced by two multiplied by two places.\n\n    'substitution cypher' => 'wyfwxmxyxmsr$g}tliv'\n    \"\"\"",
    "sol_bodies": [
      "    return \"\".join(chr(ord(b) + 2 * 2) for b in orig)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#89",
    "weight": 1.0
  },
  {
    "name": "SubstitutionCypher:1",
    "sat": "def sat(encrypted: str, orig=\"\"):\n    assert len(encrypted) == len(orig)\n    return all(chr(ord(a) - 2 * 2) == b for a, b in zip(encrypted, orig))",
    "ans_type": "str",
    "sol_header": "def sol(orig=\"\"):",
    "sol_docstring": "    \"\"\"Apply a substitution cypher in which each character is advanced by two multiplied by two places.\n\n    'substitution cypher' => 'wyfwxmxyxmsr$g}tliv'\n    \"\"\"",
    "sol_bodies": [
      "    return \"\".join(chr(ord(b) + 2 * 2) for b in orig)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#89",
    "weight": 1.0
  },
  {
    "name": "SubstitutionCypher:2",
    "sat": "def sat(encrypted: str, orig=\"byfykovevuvyxanofi lygolono pyzuh t\"):\n    assert len(encrypted) == len(orig)\n    return all(chr(ord(a) - 2 * 2) == b for a, b in zip(encrypted, orig))",
    "ans_type": "str",
    "sol_header": "def sol(orig=\"byfykovevuvyxanofi lygolono pyzuh t\"):",
    "sol_docstring": "    \"\"\"Apply a substitution cypher in which each character is advanced by two multiplied by two places.\n\n    'substitution cypher' => 'wyfwxmxyxmsr$g}tliv'\n    \"\"\"",
    "sol_bodies": [
      "    return \"\".join(chr(ord(b) + 2 * 2) for b in orig)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#89",
    "weight": 1.0
  },
  {
    "name": "SubstitutionCypher:3",
    "sat": "def sat(encrypted: str, orig=\"dogyvotitonucuxecequ jahuzowiz jyna\"):\n    assert len(encrypted) == len(orig)\n    return all(chr(ord(a) - 2 * 2) == b for a, b in zip(encrypted, orig))",
    "ans_type": "str",
    "sol_header": "def sol(orig=\"dogyvotitonucuxecequ jahuzowiz jyna\"):",
    "sol_docstring": "    \"\"\"Apply a substitution cypher in which each character is advanced by two multiplied by two places.\n\n    'substitution cypher' => 'wyfwxmxyxmsr$g}tliv'\n    \"\"\"",
    "sol_bodies": [
      "    return \"\".join(chr(ord(b) + 2 * 2) for b in orig)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#89",
    "weight": 1.0
  },
  {
    "name": "SubstitutionCypher:4",
    "sat": "def sat(encrypted: str, orig=\"chodatext quycimoquytunek\"):\n    assert len(encrypted) == len(orig)\n    return all(chr(ord(a) - 2 * 2) == b for a, b in zip(encrypted, orig))",
    "ans_type": "str",
    "sol_header": "def sol(orig=\"chodatext quycimoquytunek\"):",
    "sol_docstring": "    \"\"\"Apply a substitution cypher in which each character is advanced by two multiplied by two places.\n\n    'substitution cypher' => 'wyfwxmxyxmsr$g}tliv'\n    \"\"\"",
    "sol_bodies": [
      "    return \"\".join(chr(ord(b) + 2 * 2) for b in orig)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#89",
    "weight": 1.0
  },
  {
    "name": "SecondSmallestUnique:0",
    "sat": "def sat(n: int, nums=[17, -1023589211, -293485382500, 31, -293485382500, 105762, 94328103589]):\n    assert n in nums\n    return len({i for i in nums if i <= n}) == 2",
    "ans_type": "int",
    "sol_header": "def sol(nums=[17, -1023589211, -293485382500, 31, -293485382500, 105762, 94328103589]):",
    "sol_docstring": "    \"\"\"Find the second smallest unique number in the list nums.\n\n    Sample input:\n    [2, 5, 2, 7, 9]\n\n    Sample output:\n    5\n    \"\"\"",
    "sol_bodies": [
      "    return sorted(set(nums))[1]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#90",
    "weight": 1.0
  },
  {
    "name": "SecondSmallestUnique:1",
    "sat": "def sat(n: int, nums=[-3, -4, -3, 8, -9]):\n    assert n in nums\n    return len({i for i in nums if i <= n}) == 2",
    "ans_type": "int",
    "sol_header": "def sol(nums=[-3, -4, -3, 8, -9]):",
    "sol_docstring": "    \"\"\"Find the second smallest unique number in the list nums.\n\n    Sample input:\n    [2, 5, 2, 7, 9]\n\n    Sample output:\n    5\n    \"\"\"",
    "sol_bodies": [
      "    return sorted(set(nums))[1]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#90",
    "weight": 1.0
  },
  {
    "name": "SecondSmallestUnique:2",
    "sat": "def sat(n: int, nums=[0, -5, -7, -5, 0, -2, 6, -8]):\n    assert n in nums\n    return len({i for i in nums if i <= n}) == 2",
    "ans_type": "int",
    "sol_header": "def sol(nums=[0, -5, -7, -5, 0, -2, 6, -8]):",
    "sol_docstring": "    \"\"\"Find the second smallest unique number in the list nums.\n\n    Sample input:\n    [2, 5, 2, 7, 9]\n\n    Sample output:\n    5\n    \"\"\"",
    "sol_bodies": [
      "    return sorted(set(nums))[1]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#90",
    "weight": 1.0
  },
  {
    "name": "SecondSmallestUnique:3",
    "sat": "def sat(n: int, nums=[6, 5]):\n    assert n in nums\n    return len({i for i in nums if i <= n}) == 2",
    "ans_type": "int",
    "sol_header": "def sol(nums=[6, 5]):",
    "sol_docstring": "    \"\"\"Find the second smallest unique number in the list nums.\n\n    Sample input:\n    [2, 5, 2, 7, 9]\n\n    Sample output:\n    5\n    \"\"\"",
    "sol_bodies": [
      "    return sorted(set(nums))[1]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#90",
    "weight": 1.0
  },
  {
    "name": "SecondSmallestUnique:4",
    "sat": "def sat(n: int, nums=[4, -8, 8, 4]):\n    assert n in nums\n    return len({i for i in nums if i <= n}) == 2",
    "ans_type": "int",
    "sol_header": "def sol(nums=[4, -8, 8, 4]):",
    "sol_docstring": "    \"\"\"Find the second smallest unique number in the list nums.\n\n    Sample input:\n    [2, 5, 2, 7, 9]\n\n    Sample output:\n    5\n    \"\"\"",
    "sol_bodies": [
      "    return sorted(set(nums))[1]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#90",
    "weight": 1.0
  },
  {
    "name": "FindBored:0",
    "sat": "def sat(boring: List[str], text=\"This is not boring. I am boring! I am sooo tired.\"):\n    sentences = text.replace(\"!\", \".\").replace(\"?\", \".\").split(\".\")\n    boring_and_exciting = boring + [s for s in sentences if s.split()[:1] != [\"I\"]]\n    return sorted(boring_and_exciting) == sorted(sentences)",
    "ans_type": "List[str]",
    "sol_header": "def sol(text=\"This is not boring. I am boring! I am sooo tired.\"):",
    "sol_docstring": "    \"\"\"A bored sentence starts with the word \"I\". Find all bored sentences in s. Sentence delimiters are '.!?'\n\n    --- Example input ---\n    'I wrote this. You read it? I think I am so cool. In another time, I would be lame.'\n\n    --- Example output ---\n    ['I wrote this', ' I think I am so cool']\n\n    \"\"\"",
    "sol_bodies": [
      "    return [s for s in text.replace(\"!\", \".\").replace(\"?\", \".\").split(\".\") if s.split()[:1] == [\"I\"]]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#91",
    "weight": 1.0
  },
  {
    "name": "FindBored:1",
    "sat": "def sat(boring: List[str], text=\"dexuzuhyfac lifugerimosiwybot.hesukawycat!hawymemof pa text z.nuquyt weminubadithikanat gejetextipafex vobenekothob.reraxithechaquipapav wexamew lobihus zygijehequesatextacy jucyth?I?I wevymicygequipi cicemyte tha cetexti vuhoxadivelabyduxix?I lanusutho kuzit?nathor sopati myjamygukiwyhuje.I kacuquedewapojedu thulocho?I chezeri.thubitozogukenejugox.cytonoc tex tobaquy wiwithij!vinam rarile sibizytexta notaxithyzu?\"):\n    sentences = text.replace(\"!\", \".\").replace(\"?\", \".\").split(\".\")\n    boring_and_exciting = boring + [s for s in sentences if s.split()[:1] != [\"I\"]]\n    return sorted(boring_and_exciting) == sorted(sentences)",
    "ans_type": "List[str]",
    "sol_header": "def sol(text=\"dexuzuhyfac lifugerimosiwybot.hesukawycat!hawymemof pa text z.nuquyt weminubadithikanat gejetextipafex vobenekothob.reraxithechaquipapav wexamew lobihus zygijehequesatextacy jucyth?I?I wevymicygequipi cicemyte tha cetexti vuhoxadivelabyduxix?I lanusutho kuzit?nathor sopati myjamygukiwyhuje.I kacuquedewapojedu thulocho?I chezeri.thubitozogukenejugox.cytonoc tex tobaquy wiwithij!vinam rarile sibizytexta notaxithyzu?\"):",
    "sol_docstring": "    \"\"\"A bored sentence starts with the word \"I\". Find all bored sentences in s. Sentence delimiters are '.!?'\n\n    --- Example input ---\n    'I wrote this. You read it? I think I am so cool. In another time, I would be lame.'\n\n    --- Example output ---\n    ['I wrote this', ' I think I am so cool']\n\n    \"\"\"",
    "sol_bodies": [
      "    return [s for s in text.replace(\"!\", \".\").replace(\"?\", \".\").split(\".\") if s.split()[:1] == [\"I\"]]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#91",
    "weight": 1.0
  },
  {
    "name": "FindBored:2",
    "sat": "def sat(boring: List[str], text=\"\"):\n    sentences = text.replace(\"!\", \".\").replace(\"?\", \".\").split(\".\")\n    boring_and_exciting = boring + [s for s in sentences if s.split()[:1] != [\"I\"]]\n    return sorted(boring_and_exciting) == sorted(sentences)",
    "ans_type": "List[str]",
    "sol_header": "def sol(text=\"\"):",
    "sol_docstring": "    \"\"\"A bored sentence starts with the word \"I\". Find all bored sentences in s. Sentence delimiters are '.!?'\n\n    --- Example input ---\n    'I wrote this. You read it? I think I am so cool. In another time, I would be lame.'\n\n    --- Example output ---\n    ['I wrote this', ' I think I am so cool']\n\n    \"\"\"",
    "sol_bodies": [
      "    return [s for s in text.replace(\"!\", \".\").replace(\"?\", \".\").split(\".\") if s.split()[:1] == [\"I\"]]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#91",
    "weight": 1.0
  },
  {
    "name": "FindBored:3",
    "sat": "def sat(boring: List[str], text=\"nysydajywigi vefusivechucirochuw tipeko pogofinifyk.I textovugythecodo ruwatekat dane wachikechanequi matupisofunehac.tubicetofalat colawuhemedexeq lurytext?\"):\n    sentences = text.replace(\"!\", \".\").replace(\"?\", \".\").split(\".\")\n    boring_and_exciting = boring + [s for s in sentences if s.split()[:1] != [\"I\"]]\n    return sorted(boring_and_exciting) == sorted(sentences)",
    "ans_type": "List[str]",
    "sol_header": "def sol(text=\"nysydajywigi vefusivechucirochuw tipeko pogofinifyk.I textovugythecodo ruwatekat dane wachikechanequi matupisofunehac.tubicetofalat colawuhemedexeq lurytext?\"):",
    "sol_docstring": "    \"\"\"A bored sentence starts with the word \"I\". Find all bored sentences in s. Sentence delimiters are '.!?'\n\n    --- Example input ---\n    'I wrote this. You read it? I think I am so cool. In another time, I would be lame.'\n\n    --- Example output ---\n    ['I wrote this', ' I think I am so cool']\n\n    \"\"\"",
    "sol_bodies": [
      "    return [s for s in text.replace(\"!\", \".\").replace(\"?\", \".\").split(\".\") if s.split()[:1] == [\"I\"]]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#91",
    "weight": 1.0
  },
  {
    "name": "FindBored:4",
    "sat": "def sat(boring: List[str], text=\"?zihithi ch chithe vuluzuquidawyquo.I?I chypufomiwylojen ziwuwygawyfyg makatex?textidigefoc nyjav.I gujyduvafe gykizubam cofurythoc.coc thohifycepy tex kybiwulatextux.\"):\n    sentences = text.replace(\"!\", \".\").replace(\"?\", \".\").split(\".\")\n    boring_and_exciting = boring + [s for s in sentences if s.split()[:1] != [\"I\"]]\n    return sorted(boring_and_exciting) == sorted(sentences)",
    "ans_type": "List[str]",
    "sol_header": "def sol(text=\"?zihithi ch chithe vuluzuquidawyquo.I?I chypufomiwylojen ziwuwygawyfyg makatex?textidigefoc nyjav.I gujyduvafe gykizubam cofurythoc.coc thohifycepy tex kybiwulatextux.\"):",
    "sol_docstring": "    \"\"\"A bored sentence starts with the word \"I\". Find all bored sentences in s. Sentence delimiters are '.!?'\n\n    --- Example input ---\n    'I wrote this. You read it? I think I am so cool. In another time, I would be lame.'\n\n    --- Example output ---\n    ['I wrote this', ' I think I am so cool']\n\n    \"\"\"",
    "sol_bodies": [
      "    return [s for s in text.replace(\"!\", \".\").replace(\"?\", \".\").split(\".\") if s.split()[:1] == [\"I\"]]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#91",
    "weight": 1.0
  },
  {
    "name": "IdentifyZeroTrips:0",
    "sat": "def sat(zero_sums: List[bool], trips=[[1253532, -3920635, 332], [-24, 18, 6], [0, 5, -5], [1, 1, 1], [-20, 17, 4]]):\n    return len(zero_sums) == len(trips) and all(z == ((a + b + c) == 0) for z, (a, b, c) in zip(zero_sums, trips))",
    "ans_type": "List[bool]",
    "sol_header": "def sol(trips=[[1253532, -3920635, 332], [-24, 18, 6], [0, 5, -5], [1, 1, 1], [-20, 17, 4]]):",
    "sol_docstring": "    \"\"\"Determine which triples sum to zero\n\n    --- Example input ---\n    [1, 2, 4, -3, 5]\n\n    --- Example output ---\n    [0, 1, 3]\n    \"\"\"",
    "sol_bodies": [
      "    return [sum(t) == 0 for t in trips]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#92",
    "weight": 1.0
  },
  {
    "name": "IdentifyZeroTrips:1",
    "sat": "def sat(zero_sums: List[bool], trips=[[7, -5, -4], [-7, 1, -6], [-2, 10, 3], [-9, -1, 10]]):\n    return len(zero_sums) == len(trips) and all(z == ((a + b + c) == 0) for z, (a, b, c) in zip(zero_sums, trips))",
    "ans_type": "List[bool]",
    "sol_header": "def sol(trips=[[7, -5, -4], [-7, 1, -6], [-2, 10, 3], [-9, -1, 10]]):",
    "sol_docstring": "    \"\"\"Determine which triples sum to zero\n\n    --- Example input ---\n    [1, 2, 4, -3, 5]\n\n    --- Example output ---\n    [0, 1, 3]\n    \"\"\"",
    "sol_bodies": [
      "    return [sum(t) == 0 for t in trips]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#92",
    "weight": 1.0
  },
  {
    "name": "IdentifyZeroTrips:2",
    "sat": "def sat(zero_sums: List[bool], trips=[[-9, 9, -1], [-3, -7, -10], [0, -8, 5], [-8, -3, 3], [4, 8, 2], [-10, 8, 3]]):\n    return len(zero_sums) == len(trips) and all(z == ((a + b + c) == 0) for z, (a, b, c) in zip(zero_sums, trips))",
    "ans_type": "List[bool]",
    "sol_header": "def sol(trips=[[-9, 9, -1], [-3, -7, -10], [0, -8, 5], [-8, -3, 3], [4, 8, 2], [-10, 8, 3]]):",
    "sol_docstring": "    \"\"\"Determine which triples sum to zero\n\n    --- Example input ---\n    [1, 2, 4, -3, 5]\n\n    --- Example output ---\n    [0, 1, 3]\n    \"\"\"",
    "sol_bodies": [
      "    return [sum(t) == 0 for t in trips]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#92",
    "weight": 1.0
  },
  {
    "name": "IdentifyZeroTrips:3",
    "sat": "def sat(zero_sums: List[bool], trips=[[-9, 3, 5], [-2, 8, 6], [1, 7, 8], [-4, 3, 4], [1, -6, 10], [-5, -8, -13], [-4, 10, -8], [1, -2, -4], [7, 2, 9], [4, -4, 0], [8, -1, 2], [-6, 0, -7], [-10, -4, 8], [-2, 6, 4], [-6, 8, 2]]):\n    return len(zero_sums) == len(trips) and all(z == ((a + b + c) == 0) for z, (a, b, c) in zip(zero_sums, trips))",
    "ans_type": "List[bool]",
    "sol_header": "def sol(trips=[[-9, 3, 5], [-2, 8, 6], [1, 7, 8], [-4, 3, 4], [1, -6, 10], [-5, -8, -13], [-4, 10, -8], [1, -2, -4], [7, 2, 9], [4, -4, 0], [8, -1, 2], [-6, 0, -7], [-10, -4, 8], [-2, 6, 4], [-6, 8, 2]]):",
    "sol_docstring": "    \"\"\"Determine which triples sum to zero\n\n    --- Example input ---\n    [1, 2, 4, -3, 5]\n\n    --- Example output ---\n    [0, 1, 3]\n    \"\"\"",
    "sol_bodies": [
      "    return [sum(t) == 0 for t in trips]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#92",
    "weight": 1.0
  },
  {
    "name": "IdentifyZeroTrips:4",
    "sat": "def sat(zero_sums: List[bool], trips=[[7, -10, -3], [2, 9, 11], [-3, -10, -1], [-10, -5, 2], [-4, -5, -9], [-10, 5, -5], [1, 7, -6], [-3, -9, -12], [-5, -2, -7], [8, 10, 2], [-5, -2, 0], [-1, -6, -7], [8, 6, 2], [-8, 0, 7], [5, -5, 10], [-8, -6, -1], [-1, 1, 0], [-10, 9, -7]]):\n    return len(zero_sums) == len(trips) and all(z == ((a + b + c) == 0) for z, (a, b, c) in zip(zero_sums, trips))",
    "ans_type": "List[bool]",
    "sol_header": "def sol(trips=[[7, -10, -3], [2, 9, 11], [-3, -10, -1], [-10, -5, 2], [-4, -5, -9], [-10, 5, -5], [1, 7, -6], [-3, -9, -12], [-5, -2, -7], [8, 10, 2], [-5, -2, 0], [-1, -6, -7], [8, 6, 2], [-8, 0, 7], [5, -5, 10], [-8, -6, -1], [-1, 1, 0], [-10, 9, -7]]):",
    "sol_docstring": "    \"\"\"Determine which triples sum to zero\n\n    --- Example input ---\n    [1, 2, 4, -3, 5]\n\n    --- Example output ---\n    [0, 1, 3]\n    \"\"\"",
    "sol_bodies": [
      "    return [sum(t) == 0 for t in trips]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#92",
    "weight": 1.0
  },
  {
    "name": "WeirdDecodeVowels:0",
    "sat": "def sat(s: str, target=\"Hello, world!\"):\n    subs = {ord(c): ord(c) + 2 for c in \"aeiouAEIOU\"}\n    return s.swapcase() == target.translate(subs)",
    "ans_type": "str",
    "sol_header": "def sol(target=\"Hello, world!\"):",
    "sol_docstring": "    \"\"\"Find string s that, when case is flipped gives target where vowels are replaced by chars two later.\n    --- Example input ---\n    'THIS is a TEST'\n\n    --- Example output ---\n    'thks KS C tgst'\n    \"\"\"",
    "sol_bodies": [
      "    subs = {ord(c): ord(c) + 2 for c in \"aeiouAEIOU\"}\n    return target.translate(subs).swapcase()"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#93",
    "weight": 1.0
  },
  {
    "name": "WeirdDecodeVowels:1",
    "sat": "def sat(s: str, target=\"This is a good test\"):\n    subs = {ord(c): ord(c) + 2 for c in \"aeiouAEIOU\"}\n    return s.swapcase() == target.translate(subs)",
    "ans_type": "str",
    "sol_header": "def sol(target=\"This is a good test\"):",
    "sol_docstring": "    \"\"\"Find string s that, when case is flipped gives target where vowels are replaced by chars two later.\n    --- Example input ---\n    'THIS is a TEST'\n\n    --- Example output ---\n    'thks KS C tgst'\n    \"\"\"",
    "sol_bodies": [
      "    subs = {ord(c): ord(c) + 2 for c in \"aeiouAEIOU\"}\n    return target.translate(subs).swapcase()"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#93",
    "weight": 1.0
  },
  {
    "name": "WeirdDecodeVowels:2",
    "sat": "def sat(s: str, target=\"\"):\n    subs = {ord(c): ord(c) + 2 for c in \"aeiouAEIOU\"}\n    return s.swapcase() == target.translate(subs)",
    "ans_type": "str",
    "sol_header": "def sol(target=\"\"):",
    "sol_docstring": "    \"\"\"Find string s that, when case is flipped gives target where vowels are replaced by chars two later.\n    --- Example input ---\n    'THIS is a TEST'\n\n    --- Example output ---\n    'thks KS C tgst'\n    \"\"\"",
    "sol_bodies": [
      "    subs = {ord(c): ord(c) + 2 for c in \"aeiouAEIOU\"}\n    return target.translate(subs).swapcase()"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#93",
    "weight": 1.0
  },
  {
    "name": "WeirdDecodeVowels:3",
    "sat": "def sat(s: str, target=\"That last test was a bad test!\"):\n    subs = {ord(c): ord(c) + 2 for c in \"aeiouAEIOU\"}\n    return s.swapcase() == target.translate(subs)",
    "ans_type": "str",
    "sol_header": "def sol(target=\"That last test was a bad test!\"):",
    "sol_docstring": "    \"\"\"Find string s that, when case is flipped gives target where vowels are replaced by chars two later.\n    --- Example input ---\n    'THIS is a TEST'\n\n    --- Example output ---\n    'thks KS C tgst'\n    \"\"\"",
    "sol_bodies": [
      "    subs = {ord(c): ord(c) + 2 for c in \"aeiouAEIOU\"}\n    return target.translate(subs).swapcase()"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#93",
    "weight": 1.0
  },
  {
    "name": "WeirdDecodeVowels:4",
    "sat": "def sat(s: str, target=\"pneumonoultramicroscopicsilicovolanoconiosis\"):\n    subs = {ord(c): ord(c) + 2 for c in \"aeiouAEIOU\"}\n    return s.swapcase() == target.translate(subs)",
    "ans_type": "str",
    "sol_header": "def sol(target=\"pneumonoultramicroscopicsilicovolanoconiosis\"):",
    "sol_docstring": "    \"\"\"Find string s that, when case is flipped gives target where vowels are replaced by chars two later.\n    --- Example input ---\n    'THIS is a TEST'\n\n    --- Example output ---\n    'thks KS C tgst'\n    \"\"\"",
    "sol_bodies": [
      "    subs = {ord(c): ord(c) + 2 for c in \"aeiouAEIOU\"}\n    return target.translate(subs).swapcase()"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#93",
    "weight": 1.0
  },
  {
    "name": "LargestPrimeDigitSum:0",
    "sat": "def sat(ans: List[int], nums=[23, 17, 201, 14, 10473, 43225, 421, 423, 11, 10, 2022, 342157]):\n    i, digit_sum = ans\n    n = nums[i]\n\n    def is_prime(n):\n        return n > 1 and all(n % j for j in range(2, int(n ** 0.5) + 1))\n\n    return is_prime(n) and all(m <= n for m in nums if is_prime(m)) and digit_sum == sum(int(c) for c in str(n))",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[23, 17, 201, 14, 10473, 43225, 421, 423, 11, 10, 2022, 342157]):",
    "sol_docstring": "    \"\"\"Find the index of the largest prime in the list and the sum of its digits\n\n    --- Example input ---\n    [2, 4, 7, 19, 21]\n\n    --- Example output ---\n    [3, 10]\n    \"\"\"",
    "sol_bodies": [
      "    def is_prime(n):\n        return n > 1 and all(n % j for j in range(2, int(n ** 0.5) + 1))\n\n    n, i = max((n, i) for i, n in enumerate(nums) if is_prime(n))\n    return [i, sum(int(c) for c in str(n))]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#94",
    "weight": 1.0
  },
  {
    "name": "LargestPrimeDigitSum:1",
    "sat": "def sat(ans: List[int], nums=[84545, 52, 5755523, 666, 1984, 97315, 7, 3, 789, 427]):\n    i, digit_sum = ans\n    n = nums[i]\n\n    def is_prime(n):\n        return n > 1 and all(n % j for j in range(2, int(n ** 0.5) + 1))\n\n    return is_prime(n) and all(m <= n for m in nums if is_prime(m)) and digit_sum == sum(int(c) for c in str(n))",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[84545, 52, 5755523, 666, 1984, 97315, 7, 3, 789, 427]):",
    "sol_docstring": "    \"\"\"Find the index of the largest prime in the list and the sum of its digits\n\n    --- Example input ---\n    [2, 4, 7, 19, 21]\n\n    --- Example output ---\n    [3, 10]\n    \"\"\"",
    "sol_bodies": [
      "    def is_prime(n):\n        return n > 1 and all(n % j for j in range(2, int(n ** 0.5) + 1))\n\n    n, i = max((n, i) for i, n in enumerate(nums) if is_prime(n))\n    return [i, sum(int(c) for c in str(n))]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#94",
    "weight": 1.0
  },
  {
    "name": "LargestPrimeDigitSum:2",
    "sat": "def sat(ans: List[int], nums=[5, 7151804, 432154, 5700, 9, 8, 253, 29062, 960, 721]):\n    i, digit_sum = ans\n    n = nums[i]\n\n    def is_prime(n):\n        return n > 1 and all(n % j for j in range(2, int(n ** 0.5) + 1))\n\n    return is_prime(n) and all(m <= n for m in nums if is_prime(m)) and digit_sum == sum(int(c) for c in str(n))",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[5, 7151804, 432154, 5700, 9, 8, 253, 29062, 960, 721]):",
    "sol_docstring": "    \"\"\"Find the index of the largest prime in the list and the sum of its digits\n\n    --- Example input ---\n    [2, 4, 7, 19, 21]\n\n    --- Example output ---\n    [3, 10]\n    \"\"\"",
    "sol_bodies": [
      "    def is_prime(n):\n        return n > 1 and all(n % j for j in range(2, int(n ** 0.5) + 1))\n\n    n, i = max((n, i) for i, n in enumerate(nums) if is_prime(n))\n    return [i, sum(int(c) for c in str(n))]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#94",
    "weight": 1.0
  },
  {
    "name": "LargestPrimeDigitSum:3",
    "sat": "def sat(ans: List[int], nums=[233804, 41, 6149533, 79, 956, 317909, 8628, 248, 35086, 79]):\n    i, digit_sum = ans\n    n = nums[i]\n\n    def is_prime(n):\n        return n > 1 and all(n % j for j in range(2, int(n ** 0.5) + 1))\n\n    return is_prime(n) and all(m <= n for m in nums if is_prime(m)) and digit_sum == sum(int(c) for c in str(n))",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[233804, 41, 6149533, 79, 956, 317909, 8628, 248, 35086, 79]):",
    "sol_docstring": "    \"\"\"Find the index of the largest prime in the list and the sum of its digits\n\n    --- Example input ---\n    [2, 4, 7, 19, 21]\n\n    --- Example output ---\n    [3, 10]\n    \"\"\"",
    "sol_bodies": [
      "    def is_prime(n):\n        return n > 1 and all(n % j for j in range(2, int(n ** 0.5) + 1))\n\n    n, i = max((n, i) for i, n in enumerate(nums) if is_prime(n))\n    return [i, sum(int(c) for c in str(n))]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#94",
    "weight": 1.0
  },
  {
    "name": "LargestPrimeDigitSum:4",
    "sat": "def sat(ans: List[int], nums=[87, 2, 2883, 32665, 26115, 32, 77, 97, 717, 674175]):\n    i, digit_sum = ans\n    n = nums[i]\n\n    def is_prime(n):\n        return n > 1 and all(n % j for j in range(2, int(n ** 0.5) + 1))\n\n    return is_prime(n) and all(m <= n for m in nums if is_prime(m)) and digit_sum == sum(int(c) for c in str(n))",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[87, 2, 2883, 32665, 26115, 32, 77, 97, 717, 674175]):",
    "sol_docstring": "    \"\"\"Find the index of the largest prime in the list and the sum of its digits\n\n    --- Example input ---\n    [2, 4, 7, 19, 21]\n\n    --- Example output ---\n    [3, 10]\n    \"\"\"",
    "sol_bodies": [
      "    def is_prime(n):\n        return n > 1 and all(n % j for j in range(2, int(n ** 0.5) + 1))\n\n    n, i = max((n, i) for i, n in enumerate(nums) if is_prime(n))\n    return [i, sum(int(c) for c in str(n))]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#94",
    "weight": 1.0
  },
  {
    "name": "OddCase:0",
    "sat": "def sat(different: str, d={'cat': 'CAT', 'tree': 'T', 'pick me': 'not', 'OK': 'red', 'blah': 'blah', 'z': 'Z'}):\n    return different in d and all(k.islower() != different.islower() for k in d if k != different)",
    "ans_type": "str",
    "sol_header": "def sol(d={'cat': 'CAT', 'tree': 'T', 'pick me': 'not', 'OK': 'red', 'blah': 'blah', 'z': 'Z'}):",
    "sol_docstring": "    \"\"\"Find the dictionary key whose case is different than all other keys\n\n    --- Example input ---\n    {\"red\": \"\", \"GREEN\": \"\", \"blue\": \"orange\"}\n\n    --- Example output ---\n    \"GREEN\"\n    \"\"\"",
    "sol_bodies": [
      "    for different in d:\n        if all(k.islower() != different.islower() for k in d if k != different):\n            return different"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#95",
    "weight": 1.0
  },
  {
    "name": "OddCase:1",
    "sat": "def sat(different: str, d={'den': 'fymehihyxuro', 'madufitextuthohyv': 'sofekuhepokosixyzoza', 'xechygo': 'kythubehuzagu', 'xukefulete': 'hugevybelypyrer', 'maw': 'vaveraral', 'hichaquidyto': 'quisi', 'remenidasohijetybah': 'bukomegewisevoxoz', 'kyte': 'fonecohynipesewyth', 'cax': 'bilesequ', 'caduquetextan': 'juzedabaz', 'THEMITOTH': 'xotugythuzu'}):\n    return different in d and all(k.islower() != different.islower() for k in d if k != different)",
    "ans_type": "str",
    "sol_header": "def sol(d={'den': 'fymehihyxuro', 'madufitextuthohyv': 'sofekuhepokosixyzoza', 'xechygo': 'kythubehuzagu', 'xukefulete': 'hugevybelypyrer', 'maw': 'vaveraral', 'hichaquidyto': 'quisi', 'remenidasohijetybah': 'bukomegewisevoxoz', 'kyte': 'fonecohynipesewyth', 'cax': 'bilesequ', 'caduquetextan': 'juzedabaz', 'THEMITOTH': 'xotugythuzu'}):",
    "sol_docstring": "    \"\"\"Find the dictionary key whose case is different than all other keys\n\n    --- Example input ---\n    {\"red\": \"\", \"GREEN\": \"\", \"blue\": \"orange\"}\n\n    --- Example output ---\n    \"GREEN\"\n    \"\"\"",
    "sol_bodies": [
      "    for different in d:\n        if all(k.islower() != different.islower() for k in d if k != different):\n            return different"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#95",
    "weight": 1.0
  },
  {
    "name": "OddCase:2",
    "sat": "def sat(different: str, d={'CHIRATICHUHUQUYZYPYW': 'kopakyquotyhaquome', 'QUEBYTEXTEXUROBEK': 'tituxa', 'ZUVU': 'xupovutexti', 'NATEXTESYTUBUMY': 'ponusewaquufot', 'THUK': 'gyvy', 'CETEXTOFENAXIXANEKA': 'xyjytextecywykoquo', 'SEKAMIWEHYTHYTEXTUCU': 'jehu', 'H': 'quicyquohofowejivun', 'KYTEXTIBAXUTAV': 'nygutextin', 'LYQUA': 'biruji', 'tizenyry': 'xavyquukoc'}):\n    return different in d and all(k.islower() != different.islower() for k in d if k != different)",
    "ans_type": "str",
    "sol_header": "def sol(d={'CHIRATICHUHUQUYZYPYW': 'kopakyquotyhaquome', 'QUEBYTEXTEXUROBEK': 'tituxa', 'ZUVU': 'xupovutexti', 'NATEXTESYTUBUMY': 'ponusewaquufot', 'THUK': 'gyvy', 'CETEXTOFENAXIXANEKA': 'xyjytextecywykoquo', 'SEKAMIWEHYTHYTEXTUCU': 'jehu', 'H': 'quicyquohofowejivun', 'KYTEXTIBAXUTAV': 'nygutextin', 'LYQUA': 'biruji', 'tizenyry': 'xavyquukoc'}):",
    "sol_docstring": "    \"\"\"Find the dictionary key whose case is different than all other keys\n\n    --- Example input ---\n    {\"red\": \"\", \"GREEN\": \"\", \"blue\": \"orange\"}\n\n    --- Example output ---\n    \"GREEN\"\n    \"\"\"",
    "sol_bodies": [
      "    for different in d:\n        if all(k.islower() != different.islower() for k in d if k != different):\n            return different"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#95",
    "weight": 1.0
  },
  {
    "name": "OddCase:3",
    "sat": "def sat(different: str, d={'CHEWA': 'geratenegafa', 'WATHYHUVOTEXTINO': 'th', 'DIFUS': 'zetextatasohunibathe', 'TUBEZA': 'rajytextar', 'NEZALEQUAZAHEKAGUPU': 'bequexucoxy', 'SEBOLIZEDUL': 'wyxufyhodymube', 'ZU': 'conuhywumychogije', 'DE': 'lebemypovoke', 'DEBURUGINOC': 'gequilithyjyvymufi', 'TEXTURAFA': 'textejesyko', 'rixechy': 'fate'}):\n    return different in d and all(k.islower() != different.islower() for k in d if k != different)",
    "ans_type": "str",
    "sol_header": "def sol(d={'CHEWA': 'geratenegafa', 'WATHYHUVOTEXTINO': 'th', 'DIFUS': 'zetextatasohunibathe', 'TUBEZA': 'rajytextar', 'NEZALEQUAZAHEKAGUPU': 'bequexucoxy', 'SEBOLIZEDUL': 'wyxufyhodymube', 'ZU': 'conuhywumychogije', 'DE': 'lebemypovoke', 'DEBURUGINOC': 'gequilithyjyvymufi', 'TEXTURAFA': 'textejesyko', 'rixechy': 'fate'}):",
    "sol_docstring": "    \"\"\"Find the dictionary key whose case is different than all other keys\n\n    --- Example input ---\n    {\"red\": \"\", \"GREEN\": \"\", \"blue\": \"orange\"}\n\n    --- Example output ---\n    \"GREEN\"\n    \"\"\"",
    "sol_bodies": [
      "    for different in d:\n        if all(k.islower() != different.islower() for k in d if k != different):\n            return different"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#95",
    "weight": 1.0
  },
  {
    "name": "OddCase:4",
    "sat": "def sat(different: str, d={'quicaboguc': 'su', 'sacylir': 'tholubakypynythiryr', 'vijuchox': 'matextyquorewetytefy', 'lechi': 'nuch', 'viz': 'cheferopa', 'textowikalihehupyxi': 'quuchonasufexi', 'wuhujasi': 'f', 'tytextedoma': 'zifehabumabocate', 'gaviquolaxagihisice': 'sulywuzoquo', 'muvequo': 'juxachameje', 'B': 'quanesyfeku'}):\n    return different in d and all(k.islower() != different.islower() for k in d if k != different)",
    "ans_type": "str",
    "sol_header": "def sol(d={'quicaboguc': 'su', 'sacylir': 'tholubakypynythiryr', 'vijuchox': 'matextyquorewetytefy', 'lechi': 'nuch', 'viz': 'cheferopa', 'textowikalihehupyxi': 'quuchonasufexi', 'wuhujasi': 'f', 'tytextedoma': 'zifehabumabocate', 'gaviquolaxagihisice': 'sulywuzoquo', 'muvequo': 'juxachameje', 'B': 'quanesyfeku'}):",
    "sol_docstring": "    \"\"\"Find the dictionary key whose case is different than all other keys\n\n    --- Example input ---\n    {\"red\": \"\", \"GREEN\": \"\", \"blue\": \"orange\"}\n\n    --- Example output ---\n    \"GREEN\"\n    \"\"\"",
    "sol_bodies": [
      "    for different in d:\n        if all(k.islower() != different.islower() for k in d if k != different):\n            return different"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#95",
    "weight": 1.0
  },
  {
    "name": "PrimesUpTo:0",
    "sat": "def sat(primes: List[int], n=1234):\n    assert all(1 < p for p in primes) and all(p % q for p in primes for q in primes if q < p)\n    return len({i for p in primes for i in range(p, n, p)}) == max(n - 2, 0)",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=1234):",
    "sol_docstring": "    \"\"\"Find all primes up to n\n\n    --- Example input ---\n    9\n\n    --- Example output ---\n    [2, 3, 5, 7]\n    \"\"\"",
    "sol_bodies": [
      "    primes = []\n    candidates = set(range(2, n))\n    for i in range(2, n):\n        if i in candidates:\n            primes.append(i)\n            candidates.difference_update(range(i, n, i))\n    return primes"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#96",
    "weight": 1.0
  },
  {
    "name": "PrimesUpTo:1",
    "sat": "def sat(primes: List[int], n=10):\n    assert all(1 < p for p in primes) and all(p % q for p in primes for q in primes if q < p)\n    return len({i for p in primes for i in range(p, n, p)}) == max(n - 2, 0)",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=10):",
    "sol_docstring": "    \"\"\"Find all primes up to n\n\n    --- Example input ---\n    9\n\n    --- Example output ---\n    [2, 3, 5, 7]\n    \"\"\"",
    "sol_bodies": [
      "    primes = []\n    candidates = set(range(2, n))\n    for i in range(2, n):\n        if i in candidates:\n            primes.append(i)\n            candidates.difference_update(range(i, n, i))\n    return primes"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#96",
    "weight": 1.0
  },
  {
    "name": "PrimesUpTo:2",
    "sat": "def sat(primes: List[int], n=1000):\n    assert all(1 < p for p in primes) and all(p % q for p in primes for q in primes if q < p)\n    return len({i for p in primes for i in range(p, n, p)}) == max(n - 2, 0)",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=1000):",
    "sol_docstring": "    \"\"\"Find all primes up to n\n\n    --- Example input ---\n    9\n\n    --- Example output ---\n    [2, 3, 5, 7]\n    \"\"\"",
    "sol_bodies": [
      "    primes = []\n    candidates = set(range(2, n))\n    for i in range(2, n):\n        if i in candidates:\n            primes.append(i)\n            candidates.difference_update(range(i, n, i))\n    return primes"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#96",
    "weight": 1.0
  },
  {
    "name": "PrimesUpTo:3",
    "sat": "def sat(primes: List[int], n=-1):\n    assert all(1 < p for p in primes) and all(p % q for p in primes for q in primes if q < p)\n    return len({i for p in primes for i in range(p, n, p)}) == max(n - 2, 0)",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=-1):",
    "sol_docstring": "    \"\"\"Find all primes up to n\n\n    --- Example input ---\n    9\n\n    --- Example output ---\n    [2, 3, 5, 7]\n    \"\"\"",
    "sol_bodies": [
      "    primes = []\n    candidates = set(range(2, n))\n    for i in range(2, n):\n        if i in candidates:\n            primes.append(i)\n            candidates.difference_update(range(i, n, i))\n    return primes"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#96",
    "weight": 1.0
  },
  {
    "name": "PrimesUpTo:4",
    "sat": "def sat(primes: List[int], n=10000):\n    assert all(1 < p for p in primes) and all(p % q for p in primes for q in primes if q < p)\n    return len({i for p in primes for i in range(p, n, p)}) == max(n - 2, 0)",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=10000):",
    "sol_docstring": "    \"\"\"Find all primes up to n\n\n    --- Example input ---\n    9\n\n    --- Example output ---\n    [2, 3, 5, 7]\n    \"\"\"",
    "sol_bodies": [
      "    primes = []\n    candidates = set(range(2, n))\n    for i in range(2, n):\n        if i in candidates:\n            primes.append(i)\n            candidates.difference_update(range(i, n, i))\n    return primes"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#96",
    "weight": 1.0
  },
  {
    "name": "UnitsProduct:0",
    "sat": "def sat(prod: int, nums=[17, 24, 39, 15, 11, 201, 97, 65, 18]):\n    if not all(nums):\n        return prod == 0\n    for n in nums:\n        k = abs(n % 10)\n        if k == 0:\n            return prod == 0\n        assert prod % k == 0\n        prod //= k\n    return prod == 1",
    "ans_type": "int",
    "sol_header": "def sol(nums=[17, 24, 39, 15, 11, 201, 97, 65, 18]):",
    "sol_docstring": "    \"\"\"Find the product of the units digits in the numbers\n\n    [12, 34] => 8\n    \"\"\"",
    "sol_bodies": [
      "    prod = 1\n    for n in nums:\n        prod *= abs(n % 10)\n    return prod"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#97",
    "weight": 1.0
  },
  {
    "name": "UnitsProduct:1",
    "sat": "def sat(prod: int, nums=[1, 9, 96, 79, 86, -30, -33, 63, 39, 35]):\n    if not all(nums):\n        return prod == 0\n    for n in nums:\n        k = abs(n % 10)\n        if k == 0:\n            return prod == 0\n        assert prod % k == 0\n        prod //= k\n    return prod == 1",
    "ans_type": "int",
    "sol_header": "def sol(nums=[1, 9, 96, 79, 86, -30, -33, 63, 39, 35]):",
    "sol_docstring": "    \"\"\"Find the product of the units digits in the numbers\n\n    [12, 34] => 8\n    \"\"\"",
    "sol_bodies": [
      "    prod = 1\n    for n in nums:\n        prod *= abs(n % 10)\n    return prod"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#97",
    "weight": 1.0
  },
  {
    "name": "UnitsProduct:2",
    "sat": "def sat(prod: int, nums=[-29, -50, -4, 79, 2, 19, 34, 9, 27, -42]):\n    if not all(nums):\n        return prod == 0\n    for n in nums:\n        k = abs(n % 10)\n        if k == 0:\n            return prod == 0\n        assert prod % k == 0\n        prod //= k\n    return prod == 1",
    "ans_type": "int",
    "sol_header": "def sol(nums=[-29, -50, -4, 79, 2, 19, 34, 9, 27, -42]):",
    "sol_docstring": "    \"\"\"Find the product of the units digits in the numbers\n\n    [12, 34] => 8\n    \"\"\"",
    "sol_bodies": [
      "    prod = 1\n    for n in nums:\n        prod *= abs(n % 10)\n    return prod"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#97",
    "weight": 1.0
  },
  {
    "name": "UnitsProduct:3",
    "sat": "def sat(prod: int, nums=[-28, -34, 90, 0, -38, -39, -13, 13, 56, 50]):\n    if not all(nums):\n        return prod == 0\n    for n in nums:\n        k = abs(n % 10)\n        if k == 0:\n            return prod == 0\n        assert prod % k == 0\n        prod //= k\n    return prod == 1",
    "ans_type": "int",
    "sol_header": "def sol(nums=[-28, -34, 90, 0, -38, -39, -13, 13, 56, 50]):",
    "sol_docstring": "    \"\"\"Find the product of the units digits in the numbers\n\n    [12, 34] => 8\n    \"\"\"",
    "sol_bodies": [
      "    prod = 1\n    for n in nums:\n        prod *= abs(n % 10)\n    return prod"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#97",
    "weight": 1.0
  },
  {
    "name": "UnitsProduct:4",
    "sat": "def sat(prod: int, nums=[81, 36, -53, 17, 40, -30, -20, 13, -16, -18]):\n    if not all(nums):\n        return prod == 0\n    for n in nums:\n        k = abs(n % 10)\n        if k == 0:\n            return prod == 0\n        assert prod % k == 0\n        prod //= k\n    return prod == 1",
    "ans_type": "int",
    "sol_header": "def sol(nums=[81, 36, -53, 17, 40, -30, -20, 13, -16, -18]):",
    "sol_docstring": "    \"\"\"Find the product of the units digits in the numbers\n\n    [12, 34] => 8\n    \"\"\"",
    "sol_bodies": [
      "    prod = 1\n    for n in nums:\n        prod *= abs(n % 10)\n    return prod"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#97",
    "weight": 1.0
  },
  {
    "name": "UppercaseEven:0",
    "sat": "def sat(positions: List[int], s=\"ThIs is A tEsT, Or *IS* iT?\"):\n    assert all(s[i] in \"AEIOU\" for i in positions)\n    return all(i in positions or c not in \"AEIOU\" or i % 2 == 1 for i, c in enumerate(s))",
    "ans_type": "List[int]",
    "sol_header": "def sol(s=\"ThIs is A tEsT, Or *IS* iT?\"):",
    "sol_docstring": "    \"\"\"Find the positions of all uppercase vowels (not counting Y) in even indices\n\n    \"EAT here NOW\" => [0, 10]\n    \"\"\"",
    "sol_bodies": [
      "    return [i for i, c in enumerate(s) if i % 2 == 0 and c in \"AEIOU\"]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#98",
    "weight": 1.0
  },
  {
    "name": "UppercaseEven:1",
    "sat": "def sat(positions: List[int], s=\"j\"):\n    assert all(s[i] in \"AEIOU\" for i in positions)\n    return all(i in positions or c not in \"AEIOU\" or i % 2 == 1 for i, c in enumerate(s))",
    "ans_type": "List[int]",
    "sol_header": "def sol(s=\"j\"):",
    "sol_docstring": "    \"\"\"Find the positions of all uppercase vowels (not counting Y) in even indices\n\n    \"EAT here NOW\" => [0, 10]\n    \"\"\"",
    "sol_bodies": [
      "    return [i for i, c in enumerate(s) if i % 2 == 0 and c in \"AEIOU\"]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#98",
    "weight": 1.0
  },
  {
    "name": "UppercaseEven:2",
    "sat": "def sat(positions: List[int], s=\"FYZuLOLYcoduHUSA\"):\n    assert all(s[i] in \"AEIOU\" for i in positions)\n    return all(i in positions or c not in \"AEIOU\" or i % 2 == 1 for i, c in enumerate(s))",
    "ans_type": "List[int]",
    "sol_header": "def sol(s=\"FYZuLOLYcoduHUSA\"):",
    "sol_docstring": "    \"\"\"Find the positions of all uppercase vowels (not counting Y) in even indices\n\n    \"EAT here NOW\" => [0, 10]\n    \"\"\"",
    "sol_bodies": [
      "    return [i for i, c in enumerate(s) if i % 2 == 0 and c in \"AEIOU\"]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#98",
    "weight": 1.0
  },
  {
    "name": "UppercaseEven:3",
    "sat": "def sat(positions: List[int], s=\"vEWUquyCo\"):\n    assert all(s[i] in \"AEIOU\" for i in positions)\n    return all(i in positions or c not in \"AEIOU\" or i % 2 == 1 for i, c in enumerate(s))",
    "ans_type": "List[int]",
    "sol_header": "def sol(s=\"vEWUquyCo\"):",
    "sol_docstring": "    \"\"\"Find the positions of all uppercase vowels (not counting Y) in even indices\n\n    \"EAT here NOW\" => [0, 10]\n    \"\"\"",
    "sol_bodies": [
      "    return [i for i, c in enumerate(s) if i % 2 == 0 and c in \"AEIOU\"]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#98",
    "weight": 1.0
  },
  {
    "name": "UppercaseEven:4",
    "sat": "def sat(positions: List[int], s=\"JUtARefAzeVyruJEvAKy\"):\n    assert all(s[i] in \"AEIOU\" for i in positions)\n    return all(i in positions or c not in \"AEIOU\" or i % 2 == 1 for i, c in enumerate(s))",
    "ans_type": "List[int]",
    "sol_header": "def sol(s=\"JUtARefAzeVyruJEvAKy\"):",
    "sol_docstring": "    \"\"\"Find the positions of all uppercase vowels (not counting Y) in even indices\n\n    \"EAT here NOW\" => [0, 10]\n    \"\"\"",
    "sol_bodies": [
      "    return [i for i, c in enumerate(s) if i % 2 == 0 and c in \"AEIOU\"]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#98",
    "weight": 1.0
  },
  {
    "name": "ClosestInteger:0",
    "sat": "def sat(n: int, x=329437923.5):\n    return abs(n - x) <= 0.5",
    "ans_type": "int",
    "sol_header": "def sol(x=329437923.5):",
    "sol_docstring": "    \"\"\"Round to nearest integer\n\n    --- input ---\n    3.7\n\n    --- output ---\n    4\n    \"\"\"",
    "sol_bodies": [
      "    return round(x)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#99\n\nSince we can tolerate more than one answer per puzzle, we do not need to specify a tie-breaking rule.",
    "weight": 1.0
  },
  {
    "name": "ClosestInteger:1",
    "sat": "def sat(n: int, x=3557710970.9527555):\n    return abs(n - x) <= 0.5",
    "ans_type": "int",
    "sol_header": "def sol(x=3557710970.9527555):",
    "sol_docstring": "    \"\"\"Round to nearest integer\n\n    --- input ---\n    3.7\n\n    --- output ---\n    4\n    \"\"\"",
    "sol_bodies": [
      "    return round(x)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#99\n\nSince we can tolerate more than one answer per puzzle, we do not need to specify a tie-breaking rule.",
    "weight": 1.0
  },
  {
    "name": "ClosestInteger:2",
    "sat": "def sat(n: int, x=-250406.87146656853):\n    return abs(n - x) <= 0.5",
    "ans_type": "int",
    "sol_header": "def sol(x=-250406.87146656853):",
    "sol_docstring": "    \"\"\"Round to nearest integer\n\n    --- input ---\n    3.7\n\n    --- output ---\n    4\n    \"\"\"",
    "sol_bodies": [
      "    return round(x)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#99\n\nSince we can tolerate more than one answer per puzzle, we do not need to specify a tie-breaking rule.",
    "weight": 1.0
  },
  {
    "name": "ClosestInteger:3",
    "sat": "def sat(n: int, x=346686.79646634863):\n    return abs(n - x) <= 0.5",
    "ans_type": "int",
    "sol_header": "def sol(x=346686.79646634863):",
    "sol_docstring": "    \"\"\"Round to nearest integer\n\n    --- input ---\n    3.7\n\n    --- output ---\n    4\n    \"\"\"",
    "sol_bodies": [
      "    return round(x)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#99\n\nSince we can tolerate more than one answer per puzzle, we do not need to specify a tie-breaking rule.",
    "weight": 1.0
  },
  {
    "name": "ClosestInteger:4",
    "sat": "def sat(n: int, x=1087254.523941833):\n    return abs(n - x) <= 0.5",
    "ans_type": "int",
    "sol_header": "def sol(x=1087254.523941833):",
    "sol_docstring": "    \"\"\"Round to nearest integer\n\n    --- input ---\n    3.7\n\n    --- output ---\n    4\n    \"\"\"",
    "sol_bodies": [
      "    return round(x)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#99\n\nSince we can tolerate more than one answer per puzzle, we do not need to specify a tie-breaking rule.",
    "weight": 1.0
  },
  {
    "name": "StonePiles:0",
    "sat": "def sat(li: List[int], n=909):\n    return li[0] == n and len(li) == n and all(b - a == 2 for a, b in zip(li, li[1:]))",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=909):",
    "sol_docstring": "    \"\"\"We are making n stone piles! The first pile has n stones. If n is even, then all piles have an even\n    number of stones. If n is odd, all piles have an odd number of stones. Each pile must more stones\n    than the previous pile but as few as possible. Return the number of stones in each pile.\n\n    2 => [2, 4]\n    \"\"\"",
    "sol_bodies": [
      "    return [n + 2 * i for i in range(n)]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#100",
    "weight": 1.0
  },
  {
    "name": "StonePiles:1",
    "sat": "def sat(li: List[int], n=28694):\n    return li[0] == n and len(li) == n and all(b - a == 2 for a, b in zip(li, li[1:]))",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=28694):",
    "sol_docstring": "    \"\"\"We are making n stone piles! The first pile has n stones. If n is even, then all piles have an even\n    number of stones. If n is odd, all piles have an odd number of stones. Each pile must more stones\n    than the previous pile but as few as possible. Return the number of stones in each pile.\n\n    2 => [2, 4]\n    \"\"\"",
    "sol_bodies": [
      "    return [n + 2 * i for i in range(n)]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#100",
    "weight": 1.0
  },
  {
    "name": "StonePiles:2",
    "sat": "def sat(li: List[int], n=97916):\n    return li[0] == n and len(li) == n and all(b - a == 2 for a, b in zip(li, li[1:]))",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=97916):",
    "sol_docstring": "    \"\"\"We are making n stone piles! The first pile has n stones. If n is even, then all piles have an even\n    number of stones. If n is odd, all piles have an odd number of stones. Each pile must more stones\n    than the previous pile but as few as possible. Return the number of stones in each pile.\n\n    2 => [2, 4]\n    \"\"\"",
    "sol_bodies": [
      "    return [n + 2 * i for i in range(n)]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#100",
    "weight": 1.0
  },
  {
    "name": "StonePiles:3",
    "sat": "def sat(li: List[int], n=57991):\n    return li[0] == n and len(li) == n and all(b - a == 2 for a, b in zip(li, li[1:]))",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=57991):",
    "sol_docstring": "    \"\"\"We are making n stone piles! The first pile has n stones. If n is even, then all piles have an even\n    number of stones. If n is odd, all piles have an odd number of stones. Each pile must more stones\n    than the previous pile but as few as possible. Return the number of stones in each pile.\n\n    2 => [2, 4]\n    \"\"\"",
    "sol_bodies": [
      "    return [n + 2 * i for i in range(n)]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#100",
    "weight": 1.0
  },
  {
    "name": "StonePiles:4",
    "sat": "def sat(li: List[int], n=24997):\n    return li[0] == n and len(li) == n and all(b - a == 2 for a, b in zip(li, li[1:]))",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=24997):",
    "sol_docstring": "    \"\"\"We are making n stone piles! The first pile has n stones. If n is even, then all piles have an even\n    number of stones. If n is odd, all piles have an odd number of stones. Each pile must more stones\n    than the previous pile but as few as possible. Return the number of stones in each pile.\n\n    2 => [2, 4]\n    \"\"\"",
    "sol_bodies": [
      "    return [n + 2 * i for i in range(n)]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#100",
    "weight": 1.0
  },
  {
    "name": "CompleteSplit:0",
    "sat": "def sat(splits: List[List[str]], string=\"Hello, world!  You look like you're on turtles.\"):\n    words, separators = splits\n    assert len(words) == len(separators) + 1\n    merged = []\n    for w, s in zip(words, separators + [\" \"]):\n        assert s.count(\" \") + s.count(\",\") == len(s) > 0\n        assert w.count(\" \") + w.count(\",\") == 0\n        merged += [w, s]\n    return \"\".join(merged[:-1]) == string",
    "ans_type": "List[List[str]]",
    "sol_header": "def sol(string=\"Hello, world!  You look like you're on turtles.\"):",
    "sol_docstring": "    \"\"\"\n    Split a string of words separated by commas and spaces into 2 lists: words and separators\n\n    Sample input: \"Hi there, Anna\"\n    Sample output: [[\"Hi\", \"there\", \"Anna\"], [\" \", \", \"]]\n    \"\"\"",
    "sol_bodies": [
      "    import re\n    merged = re.split(r\"([ ,]+)\", string)\n    return [merged[::2], merged[1::2]]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#101",
    "weight": 1.0
  },
  {
    "name": "CompleteSplit:1",
    "sat": "def sat(splits: List[List[str]], string=\"    This is     a valley, so, so so,,,,\"):\n    words, separators = splits\n    assert len(words) == len(separators) + 1\n    merged = []\n    for w, s in zip(words, separators + [\" \"]):\n        assert s.count(\" \") + s.count(\",\") == len(s) > 0\n        assert w.count(\" \") + w.count(\",\") == 0\n        merged += [w, s]\n    return \"\".join(merged[:-1]) == string",
    "ans_type": "List[List[str]]",
    "sol_header": "def sol(string=\"    This is     a valley, so, so so,,,,\"):",
    "sol_docstring": "    \"\"\"\n    Split a string of words separated by commas and spaces into 2 lists: words and separators\n\n    Sample input: \"Hi there, Anna\"\n    Sample output: [[\"Hi\", \"there\", \"Anna\"], [\" \", \", \"]]\n    \"\"\"",
    "sol_bodies": [
      "    import re\n    merged = re.split(r\"([ ,]+)\", string)\n    return [merged[::2], merged[1::2]]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#101",
    "weight": 1.0
  },
  {
    "name": "CompleteSplit:2",
    "sat": "def sat(splits: List[List[str]], string=\"\"):\n    words, separators = splits\n    assert len(words) == len(separators) + 1\n    merged = []\n    for w, s in zip(words, separators + [\" \"]):\n        assert s.count(\" \") + s.count(\",\") == len(s) > 0\n        assert w.count(\" \") + w.count(\",\") == 0\n        merged += [w, s]\n    return \"\".join(merged[:-1]) == string",
    "ans_type": "List[List[str]]",
    "sol_header": "def sol(string=\"\"):",
    "sol_docstring": "    \"\"\"\n    Split a string of words separated by commas and spaces into 2 lists: words and separators\n\n    Sample input: \"Hi there, Anna\"\n    Sample output: [[\"Hi\", \"there\", \"Anna\"], [\" \", \", \"]]\n    \"\"\"",
    "sol_bodies": [
      "    import re\n    merged = re.split(r\"([ ,]+)\", string)\n    return [merged[::2], merged[1::2]]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#101",
    "weight": 1.0
  },
  {
    "name": "CompleteSplit:3",
    "sat": "def sat(splits: List[List[str]], string=\" ,,,,, , , \"):\n    words, separators = splits\n    assert len(words) == len(separators) + 1\n    merged = []\n    for w, s in zip(words, separators + [\" \"]):\n        assert s.count(\" \") + s.count(\",\") == len(s) > 0\n        assert w.count(\" \") + w.count(\",\") == 0\n        merged += [w, s]\n    return \"\".join(merged[:-1]) == string",
    "ans_type": "List[List[str]]",
    "sol_header": "def sol(string=\" ,,,,, , , \"):",
    "sol_docstring": "    \"\"\"\n    Split a string of words separated by commas and spaces into 2 lists: words and separators\n\n    Sample input: \"Hi there, Anna\"\n    Sample output: [[\"Hi\", \"there\", \"Anna\"], [\" \", \", \"]]\n    \"\"\"",
    "sol_bodies": [
      "    import re\n    merged = re.split(r\"([ ,]+)\", string)\n    return [merged[::2], merged[1::2]]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#101",
    "weight": 1.0
  },
  {
    "name": "CompleteSplit:4",
    "sat": "def sat(splits: List[List[str]], string=\"Do not worry\\nabout newlines\\n!\"):\n    words, separators = splits\n    assert len(words) == len(separators) + 1\n    merged = []\n    for w, s in zip(words, separators + [\" \"]):\n        assert s.count(\" \") + s.count(\",\") == len(s) > 0\n        assert w.count(\" \") + w.count(\",\") == 0\n        merged += [w, s]\n    return \"\".join(merged[:-1]) == string",
    "ans_type": "List[List[str]]",
    "sol_header": "def sol(string=\"Do not worry\\nabout newlines\\n!\"):",
    "sol_docstring": "    \"\"\"\n    Split a string of words separated by commas and spaces into 2 lists: words and separators\n\n    Sample input: \"Hi there, Anna\"\n    Sample output: [[\"Hi\", \"there\", \"Anna\"], [\" \", \", \"]]\n    \"\"\"",
    "sol_bodies": [
      "    import re\n    merged = re.split(r\"([ ,]+)\", string)\n    return [merged[::2], merged[1::2]]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#101",
    "weight": 1.0
  },
  {
    "name": "BiggestEven:0",
    "sat": "def sat(x: int, a=145, b=24126846790974):\n    if x == -1:\n        return all(i % 2 == 1 for i in range(a, b + 1))\n    return a <= x <= b and all(i % 2 == 1 for i in range(x + 1, b + 1))",
    "ans_type": "int",
    "sol_header": "def sol(a=145, b=24126846790974):",
    "sol_docstring": "    \"\"\"Return the biggest even number between a and b inclusive, or -1 if there is no such number\n\n    Example input:\n    a=20, b=99\n\n    Example output:\n    98\n    \"\"\"",
    "sol_bodies": [
      "    if a > b or (a == b and a % 2 == 1):\n        return -1\n    return b if b % 2 == 0 else b - 1"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#102",
    "weight": 1.0
  },
  {
    "name": "BiggestEven:1",
    "sat": "def sat(x: int, a=17, b=17):\n    if x == -1:\n        return all(i % 2 == 1 for i in range(a, b + 1))\n    return a <= x <= b and all(i % 2 == 1 for i in range(x + 1, b + 1))",
    "ans_type": "int",
    "sol_header": "def sol(a=17, b=17):",
    "sol_docstring": "    \"\"\"Return the biggest even number between a and b inclusive, or -1 if there is no such number\n\n    Example input:\n    a=20, b=99\n\n    Example output:\n    98\n    \"\"\"",
    "sol_bodies": [
      "    if a > b or (a == b and a % 2 == 1):\n        return -1\n    return b if b % 2 == 0 else b - 1"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#102",
    "weight": 1.0
  },
  {
    "name": "BiggestEven:2",
    "sat": "def sat(x: int, a=-10, b=-6):\n    if x == -1:\n        return all(i % 2 == 1 for i in range(a, b + 1))\n    return a <= x <= b and all(i % 2 == 1 for i in range(x + 1, b + 1))",
    "ans_type": "int",
    "sol_header": "def sol(a=-10, b=-6):",
    "sol_docstring": "    \"\"\"Return the biggest even number between a and b inclusive, or -1 if there is no such number\n\n    Example input:\n    a=20, b=99\n\n    Example output:\n    98\n    \"\"\"",
    "sol_bodies": [
      "    if a > b or (a == b and a % 2 == 1):\n        return -1\n    return b if b % 2 == 0 else b - 1"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#102",
    "weight": 1.0
  },
  {
    "name": "BiggestEven:3",
    "sat": "def sat(x: int, a=100, b=84):\n    if x == -1:\n        return all(i % 2 == 1 for i in range(a, b + 1))\n    return a <= x <= b and all(i % 2 == 1 for i in range(x + 1, b + 1))",
    "ans_type": "int",
    "sol_header": "def sol(a=100, b=84):",
    "sol_docstring": "    \"\"\"Return the biggest even number between a and b inclusive, or -1 if there is no such number\n\n    Example input:\n    a=20, b=99\n\n    Example output:\n    98\n    \"\"\"",
    "sol_bodies": [
      "    if a > b or (a == b and a % 2 == 1):\n        return -1\n    return b if b % 2 == 0 else b - 1"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#102",
    "weight": 1.0
  },
  {
    "name": "BiggestEven:4",
    "sat": "def sat(x: int, a=0, b=323523571223):\n    if x == -1:\n        return all(i % 2 == 1 for i in range(a, b + 1))\n    return a <= x <= b and all(i % 2 == 1 for i in range(x + 1, b + 1))",
    "ans_type": "int",
    "sol_header": "def sol(a=0, b=323523571223):",
    "sol_docstring": "    \"\"\"Return the biggest even number between a and b inclusive, or -1 if there is no such number\n\n    Example input:\n    a=20, b=99\n\n    Example output:\n    98\n    \"\"\"",
    "sol_bodies": [
      "    if a > b or (a == b and a % 2 == 1):\n        return -1\n    return b if b % 2 == 0 else b - 1"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#102",
    "weight": 1.0
  },
  {
    "name": "BinaryAverage:0",
    "sat": "def sat(s: str, a=-103252, b=10657):\n    n = int(s, 2)\n    r = range(a, b)\n    if len(r) == 0:\n        return n == -1\n    mu = sum(r) / len(r)\n    return abs(mu - n) <= min(abs(mu - n - 1), abs(mu - n + 1))",
    "ans_type": "str",
    "sol_header": "def sol(a=-103252, b=10657):",
    "sol_docstring": "    \"\"\"Return the average of the numbers a through b rounded to nearest integer, in binary\n    (or -1 if there are no such numbers)\n\n    a=4, b=7 => '110' because the mean of 4, 5, 6 is 5 which is 110 in binary\n    \"\"\"",
    "sol_bodies": [
      "    r = range(a, b)\n    if len(r) == 0:\n        return \"-1\"\n    return bin(round(sum(r) / len(r)))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#103",
    "weight": 1.0
  },
  {
    "name": "BinaryAverage:1",
    "sat": "def sat(s: str, a=70421, b=70421):\n    n = int(s, 2)\n    r = range(a, b)\n    if len(r) == 0:\n        return n == -1\n    mu = sum(r) / len(r)\n    return abs(mu - n) <= min(abs(mu - n - 1), abs(mu - n + 1))",
    "ans_type": "str",
    "sol_header": "def sol(a=70421, b=70421):",
    "sol_docstring": "    \"\"\"Return the average of the numbers a through b rounded to nearest integer, in binary\n    (or -1 if there are no such numbers)\n\n    a=4, b=7 => '110' because the mean of 4, 5, 6 is 5 which is 110 in binary\n    \"\"\"",
    "sol_bodies": [
      "    r = range(a, b)\n    if len(r) == 0:\n        return \"-1\"\n    return bin(round(sum(r) / len(r)))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#103",
    "weight": 1.0
  },
  {
    "name": "BinaryAverage:2",
    "sat": "def sat(s: str, a=-10299, b=-10300):\n    n = int(s, 2)\n    r = range(a, b)\n    if len(r) == 0:\n        return n == -1\n    mu = sum(r) / len(r)\n    return abs(mu - n) <= min(abs(mu - n - 1), abs(mu - n + 1))",
    "ans_type": "str",
    "sol_header": "def sol(a=-10299, b=-10300):",
    "sol_docstring": "    \"\"\"Return the average of the numbers a through b rounded to nearest integer, in binary\n    (or -1 if there are no such numbers)\n\n    a=4, b=7 => '110' because the mean of 4, 5, 6 is 5 which is 110 in binary\n    \"\"\"",
    "sol_bodies": [
      "    r = range(a, b)\n    if len(r) == 0:\n        return \"-1\"\n    return bin(round(sum(r) / len(r)))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#103",
    "weight": 1.0
  },
  {
    "name": "BinaryAverage:3",
    "sat": "def sat(s: str, a=0, b=52):\n    n = int(s, 2)\n    r = range(a, b)\n    if len(r) == 0:\n        return n == -1\n    mu = sum(r) / len(r)\n    return abs(mu - n) <= min(abs(mu - n - 1), abs(mu - n + 1))",
    "ans_type": "str",
    "sol_header": "def sol(a=0, b=52):",
    "sol_docstring": "    \"\"\"Return the average of the numbers a through b rounded to nearest integer, in binary\n    (or -1 if there are no such numbers)\n\n    a=4, b=7 => '110' because the mean of 4, 5, 6 is 5 which is 110 in binary\n    \"\"\"",
    "sol_bodies": [
      "    r = range(a, b)\n    if len(r) == 0:\n        return \"-1\"\n    return bin(round(sum(r) / len(r)))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#103",
    "weight": 1.0
  },
  {
    "name": "BinaryAverage:4",
    "sat": "def sat(s: str, a=-89, b=0):\n    n = int(s, 2)\n    r = range(a, b)\n    if len(r) == 0:\n        return n == -1\n    mu = sum(r) / len(r)\n    return abs(mu - n) <= min(abs(mu - n - 1), abs(mu - n + 1))",
    "ans_type": "str",
    "sol_header": "def sol(a=-89, b=0):",
    "sol_docstring": "    \"\"\"Return the average of the numbers a through b rounded to nearest integer, in binary\n    (or -1 if there are no such numbers)\n\n    a=4, b=7 => '110' because the mean of 4, 5, 6 is 5 which is 110 in binary\n    \"\"\"",
    "sol_bodies": [
      "    r = range(a, b)\n    if len(r) == 0:\n        return \"-1\"\n    return bin(round(sum(r) / len(r)))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#103",
    "weight": 1.0
  },
  {
    "name": "SortedOdds:0",
    "sat": "def sat(sub: List[int], nums=[17, 20, -100, 101, 423258, 19949, 0, 20174, 9351773, -11]):\n    for i in range(len(sub)):\n        n = sub[i]\n        assert n == min(sub[i:])\n        assert all(int(c) % 2 for c in str(abs(n)))  # all odd digits\n        assert sub.count(n) == nums.count(n)\n\n    for n in nums:\n        if n not in sub:\n            assert any(int(c) % 2 == 0 for c in str(abs(n)))\n\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[17, 20, -100, 101, 423258, 19949, 0, 20174, 9351773, -11]):",
    "sol_docstring": "    \"\"\"Find the sublist of numbers with only odd digits in increasing order\n\n    [17, 21, 18, 1, 4] => [1, 17, 21]\n    \"\"\"",
    "sol_bodies": [
      "    return sorted(n for n in nums if all(int(c) % 2 for c in str(abs(n))))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#104",
    "weight": 1.0
  },
  {
    "name": "SortedOdds:1",
    "sat": "def sat(sub: List[int], nums=[57463, -919281, 3293, 346, 319386, 14840, -423, 8892, 4689075, -4526385, 5889, 1226706, -5422, 7630106, 74198, 7835, 1050438, 602897]):\n    for i in range(len(sub)):\n        n = sub[i]\n        assert n == min(sub[i:])\n        assert all(int(c) % 2 for c in str(abs(n)))  # all odd digits\n        assert sub.count(n) == nums.count(n)\n\n    for n in nums:\n        if n not in sub:\n            assert any(int(c) % 2 == 0 for c in str(abs(n)))\n\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[57463, -919281, 3293, 346, 319386, 14840, -423, 8892, 4689075, -4526385, 5889, 1226706, -5422, 7630106, 74198, 7835, 1050438, 602897]):",
    "sol_docstring": "    \"\"\"Find the sublist of numbers with only odd digits in increasing order\n\n    [17, 21, 18, 1, 4] => [1, 17, 21]\n    \"\"\"",
    "sol_bodies": [
      "    return sorted(n for n in nums if all(int(c) % 2 for c in str(abs(n))))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#104",
    "weight": 1.0
  },
  {
    "name": "SortedOdds:2",
    "sat": "def sat(sub: List[int], nums=[0, 7888, -1156983, 67, -304732, 128, -5391, 0, 468568]):\n    for i in range(len(sub)):\n        n = sub[i]\n        assert n == min(sub[i:])\n        assert all(int(c) % 2 for c in str(abs(n)))  # all odd digits\n        assert sub.count(n) == nums.count(n)\n\n    for n in nums:\n        if n not in sub:\n            assert any(int(c) % 2 == 0 for c in str(abs(n)))\n\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[0, 7888, -1156983, 67, -304732, 128, -5391, 0, 468568]):",
    "sol_docstring": "    \"\"\"Find the sublist of numbers with only odd digits in increasing order\n\n    [17, 21, 18, 1, 4] => [1, 17, 21]\n    \"\"\"",
    "sol_bodies": [
      "    return sorted(n for n in nums if all(int(c) % 2 for c in str(abs(n))))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#104",
    "weight": 1.0
  },
  {
    "name": "SortedOdds:3",
    "sat": "def sat(sub: List[int], nums=[630253, -40, -8050056, -18536, 5847702, -90469, 290800, 0, -1431502, -5837, -945, 97582, 8673, 2729]):\n    for i in range(len(sub)):\n        n = sub[i]\n        assert n == min(sub[i:])\n        assert all(int(c) % 2 for c in str(abs(n)))  # all odd digits\n        assert sub.count(n) == nums.count(n)\n\n    for n in nums:\n        if n not in sub:\n            assert any(int(c) % 2 == 0 for c in str(abs(n)))\n\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[630253, -40, -8050056, -18536, 5847702, -90469, 290800, 0, -1431502, -5837, -945, 97582, 8673, 2729]):",
    "sol_docstring": "    \"\"\"Find the sublist of numbers with only odd digits in increasing order\n\n    [17, 21, 18, 1, 4] => [1, 17, 21]\n    \"\"\"",
    "sol_bodies": [
      "    return sorted(n for n in nums if all(int(c) % 2 for c in str(abs(n))))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#104",
    "weight": 1.0
  },
  {
    "name": "SortedOdds:4",
    "sat": "def sat(sub: List[int], nums=[]):\n    for i in range(len(sub)):\n        n = sub[i]\n        assert n == min(sub[i:])\n        assert all(int(c) % 2 for c in str(abs(n)))  # all odd digits\n        assert sub.count(n) == nums.count(n)\n\n    for n in nums:\n        if n not in sub:\n            assert any(int(c) % 2 == 0 for c in str(abs(n)))\n\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[]):",
    "sol_docstring": "    \"\"\"Find the sublist of numbers with only odd digits in increasing order\n\n    [17, 21, 18, 1, 4] => [1, 17, 21]\n    \"\"\"",
    "sol_bodies": [
      "    return sorted(n for n in nums if all(int(c) % 2 for c in str(abs(n))))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#104",
    "weight": 1.0
  },
  {
    "name": "BackwardsDigits:0",
    "sat": "def sat(backwards_digits: List[str], nums=[0, 2, 14, -2, 3, 8, 4, 5, 5, 7, 21, 101, 41, 2, 9, 6]):\n    digits = {\"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9}\n    li = [digits[s] for s in backwards_digits]\n    for i, n in enumerate(li):\n        assert n == max(li[i: i + 2])\n        assert nums.count(n) == li.count(n)\n\n    return all(n not in range(1, 10) or n in li for n in nums)",
    "ans_type": "List[str]",
    "sol_header": "def sol(nums=[0, 2, 14, -2, 3, 8, 4, 5, 5, 7, 21, 101, 41, 2, 9, 6]):",
    "sol_docstring": "    \"\"\"Return the single digits in nums sorted backwards and converted to English words\n\n    [2, 3, 4, 5, 17] => ['five', 'four', 'three', 'two']\n    \"\"\"",
    "sol_bodies": [
      "    digits = {1: \"one\", 2: \"two\", 3: \"three\", 4: \"four\", 5: \"five\", 6: \"six\", 7: \"seven\", 8: \"eight\", 9: \"nine\"}\n    return [digits[n] for n in sorted(nums, reverse=True) if n in digits]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#105",
    "weight": 1.0
  },
  {
    "name": "BackwardsDigits:1",
    "sat": "def sat(backwards_digits: List[str], nums=[98, -3]):\n    digits = {\"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9}\n    li = [digits[s] for s in backwards_digits]\n    for i, n in enumerate(li):\n        assert n == max(li[i: i + 2])\n        assert nums.count(n) == li.count(n)\n\n    return all(n not in range(1, 10) or n in li for n in nums)",
    "ans_type": "List[str]",
    "sol_header": "def sol(nums=[98, -3]):",
    "sol_docstring": "    \"\"\"Return the single digits in nums sorted backwards and converted to English words\n\n    [2, 3, 4, 5, 17] => ['five', 'four', 'three', 'two']\n    \"\"\"",
    "sol_bodies": [
      "    digits = {1: \"one\", 2: \"two\", 3: \"three\", 4: \"four\", 5: \"five\", 6: \"six\", 7: \"seven\", 8: \"eight\", 9: \"nine\"}\n    return [digits[n] for n in sorted(nums, reverse=True) if n in digits]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#105",
    "weight": 1.0
  },
  {
    "name": "BackwardsDigits:2",
    "sat": "def sat(backwards_digits: List[str], nums=[22, 5, 27, 10, 70, 9, 82, -5, 30, 51, 10, 0, 48]):\n    digits = {\"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9}\n    li = [digits[s] for s in backwards_digits]\n    for i, n in enumerate(li):\n        assert n == max(li[i: i + 2])\n        assert nums.count(n) == li.count(n)\n\n    return all(n not in range(1, 10) or n in li for n in nums)",
    "ans_type": "List[str]",
    "sol_header": "def sol(nums=[22, 5, 27, 10, 70, 9, 82, -5, 30, 51, 10, 0, 48]):",
    "sol_docstring": "    \"\"\"Return the single digits in nums sorted backwards and converted to English words\n\n    [2, 3, 4, 5, 17] => ['five', 'four', 'three', 'two']\n    \"\"\"",
    "sol_bodies": [
      "    digits = {1: \"one\", 2: \"two\", 3: \"three\", 4: \"four\", 5: \"five\", 6: \"six\", 7: \"seven\", 8: \"eight\", 9: \"nine\"}\n    return [digits[n] for n in sorted(nums, reverse=True) if n in digits]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#105",
    "weight": 1.0
  },
  {
    "name": "BackwardsDigits:3",
    "sat": "def sat(backwards_digits: List[str], nums=[-5, -3, 9, 1, 93, -1, 4]):\n    digits = {\"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9}\n    li = [digits[s] for s in backwards_digits]\n    for i, n in enumerate(li):\n        assert n == max(li[i: i + 2])\n        assert nums.count(n) == li.count(n)\n\n    return all(n not in range(1, 10) or n in li for n in nums)",
    "ans_type": "List[str]",
    "sol_header": "def sol(nums=[-5, -3, 9, 1, 93, -1, 4]):",
    "sol_docstring": "    \"\"\"Return the single digits in nums sorted backwards and converted to English words\n\n    [2, 3, 4, 5, 17] => ['five', 'four', 'three', 'two']\n    \"\"\"",
    "sol_bodies": [
      "    digits = {1: \"one\", 2: \"two\", 3: \"three\", 4: \"four\", 5: \"five\", 6: \"six\", 7: \"seven\", 8: \"eight\", 9: \"nine\"}\n    return [digits[n] for n in sorted(nums, reverse=True) if n in digits]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#105",
    "weight": 1.0
  },
  {
    "name": "BackwardsDigits:4",
    "sat": "def sat(backwards_digits: List[str], nums=[-1, 3, 75, 86, 70, -5, 31, 5, 62, 6, 92, 60, 29, 5, 7, 3]):\n    digits = {\"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9}\n    li = [digits[s] for s in backwards_digits]\n    for i, n in enumerate(li):\n        assert n == max(li[i: i + 2])\n        assert nums.count(n) == li.count(n)\n\n    return all(n not in range(1, 10) or n in li for n in nums)",
    "ans_type": "List[str]",
    "sol_header": "def sol(nums=[-1, 3, 75, 86, 70, -5, 31, 5, 62, 6, 92, 60, 29, 5, 7, 3]):",
    "sol_docstring": "    \"\"\"Return the single digits in nums sorted backwards and converted to English words\n\n    [2, 3, 4, 5, 17] => ['five', 'four', 'three', 'two']\n    \"\"\"",
    "sol_bodies": [
      "    digits = {1: \"one\", 2: \"two\", 3: \"three\", 4: \"four\", 5: \"five\", 6: \"six\", 7: \"seven\", 8: \"eight\", 9: \"nine\"}\n    return [digits[n] for n in sorted(nums, reverse=True) if n in digits]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#105",
    "weight": 1.0
  },
  {
    "name": "AlternatingFactorials:0",
    "sat": "def sat(li: List[int], n=100):\n    assert len(li) == n\n    for i, m in enumerate(li):\n        if i < 2:\n            assert m == i + 1\n        elif i % 2 == 1:\n            assert m == li[i - 2] + i + (i + 1)\n        else:\n            assert m == li[i - 2] * i * (i + 1)\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=100):",
    "sol_docstring": "    \"\"\"Output a list of n integers, where the mth entry is m! if m is even or else (1+2+...+m)\n\n    5 => [1, 2, 6, 9, 120]\n    \"\"\"",
    "sol_bodies": [
      "    ans = []\n    for i in range(n):\n        if i < 2:\n            m = i + 1\n        elif i % 2 == 1:\n            m = ans[i - 2] + i + (i + 1)\n        else:\n            m = ans[i - 2] * i * (i + 1)\n        ans.append(m)\n\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#106",
    "weight": 1.0
  },
  {
    "name": "AlternatingFactorials:1",
    "sat": "def sat(li: List[int], n=997):\n    assert len(li) == n\n    for i, m in enumerate(li):\n        if i < 2:\n            assert m == i + 1\n        elif i % 2 == 1:\n            assert m == li[i - 2] + i + (i + 1)\n        else:\n            assert m == li[i - 2] * i * (i + 1)\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=997):",
    "sol_docstring": "    \"\"\"Output a list of n integers, where the mth entry is m! if m is even or else (1+2+...+m)\n\n    5 => [1, 2, 6, 9, 120]\n    \"\"\"",
    "sol_bodies": [
      "    ans = []\n    for i in range(n):\n        if i < 2:\n            m = i + 1\n        elif i % 2 == 1:\n            m = ans[i - 2] + i + (i + 1)\n        else:\n            m = ans[i - 2] * i * (i + 1)\n        ans.append(m)\n\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#106",
    "weight": 1.0
  },
  {
    "name": "AlternatingFactorials:2",
    "sat": "def sat(li: List[int], n=825):\n    assert len(li) == n\n    for i, m in enumerate(li):\n        if i < 2:\n            assert m == i + 1\n        elif i % 2 == 1:\n            assert m == li[i - 2] + i + (i + 1)\n        else:\n            assert m == li[i - 2] * i * (i + 1)\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=825):",
    "sol_docstring": "    \"\"\"Output a list of n integers, where the mth entry is m! if m is even or else (1+2+...+m)\n\n    5 => [1, 2, 6, 9, 120]\n    \"\"\"",
    "sol_bodies": [
      "    ans = []\n    for i in range(n):\n        if i < 2:\n            m = i + 1\n        elif i % 2 == 1:\n            m = ans[i - 2] + i + (i + 1)\n        else:\n            m = ans[i - 2] * i * (i + 1)\n        ans.append(m)\n\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#106",
    "weight": 1.0
  },
  {
    "name": "AlternatingFactorials:3",
    "sat": "def sat(li: List[int], n=267):\n    assert len(li) == n\n    for i, m in enumerate(li):\n        if i < 2:\n            assert m == i + 1\n        elif i % 2 == 1:\n            assert m == li[i - 2] + i + (i + 1)\n        else:\n            assert m == li[i - 2] * i * (i + 1)\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=267):",
    "sol_docstring": "    \"\"\"Output a list of n integers, where the mth entry is m! if m is even or else (1+2+...+m)\n\n    5 => [1, 2, 6, 9, 120]\n    \"\"\"",
    "sol_bodies": [
      "    ans = []\n    for i in range(n):\n        if i < 2:\n            m = i + 1\n        elif i % 2 == 1:\n            m = ans[i - 2] + i + (i + 1)\n        else:\n            m = ans[i - 2] * i * (i + 1)\n        ans.append(m)\n\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#106",
    "weight": 1.0
  },
  {
    "name": "AlternatingFactorials:4",
    "sat": "def sat(li: List[int], n=576):\n    assert len(li) == n\n    for i, m in enumerate(li):\n        if i < 2:\n            assert m == i + 1\n        elif i % 2 == 1:\n            assert m == li[i - 2] + i + (i + 1)\n        else:\n            assert m == li[i - 2] * i * (i + 1)\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=576):",
    "sol_docstring": "    \"\"\"Output a list of n integers, where the mth entry is m! if m is even or else (1+2+...+m)\n\n    5 => [1, 2, 6, 9, 120]\n    \"\"\"",
    "sol_bodies": [
      "    ans = []\n    for i in range(n):\n        if i < 2:\n            m = i + 1\n        elif i % 2 == 1:\n            m = ans[i - 2] + i + (i + 1)\n        else:\n            m = ans[i - 2] * i * (i + 1)\n        ans.append(m)\n\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#106",
    "weight": 1.0
  },
  {
    "name": "EvenPalindromeNumbers:0",
    "sat": "def sat(pals: List[int], n=1099, count=49):\n    return all(0 <= i <= n and str(i) == str(i)[::-1] and i % 2 == 0 for i in pals) and len(set(pals)) >= count",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=1099, count=49):",
    "sol_docstring": "    \"\"\"Find all even palindromes up to n\n\n    3 => [0, 2]\n    \"\"\"",
    "sol_bodies": [
      "    return [i for i in range(0, n + 1, 2) if str(i) == str(i)[::-1]]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#107",
    "weight": 1.0
  },
  {
    "name": "EvenPalindromeNumbers:1",
    "sat": "def sat(pals: List[int], n=2737, count=56):\n    return all(0 <= i <= n and str(i) == str(i)[::-1] and i % 2 == 0 for i in pals) and len(set(pals)) >= count",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=2737, count=56):",
    "sol_docstring": "    \"\"\"Find all even palindromes up to n\n\n    3 => [0, 2]\n    \"\"\"",
    "sol_bodies": [
      "    return [i for i in range(0, n + 1, 2) if str(i) == str(i)[::-1]]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#107",
    "weight": 1.0
  },
  {
    "name": "EvenPalindromeNumbers:2",
    "sat": "def sat(pals: List[int], n=7895, count=79):\n    return all(0 <= i <= n and str(i) == str(i)[::-1] and i % 2 == 0 for i in pals) and len(set(pals)) >= count",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=7895, count=79):",
    "sol_docstring": "    \"\"\"Find all even palindromes up to n\n\n    3 => [0, 2]\n    \"\"\"",
    "sol_bodies": [
      "    return [i for i in range(0, n + 1, 2) if str(i) == str(i)[::-1]]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#107",
    "weight": 1.0
  },
  {
    "name": "EvenPalindromeNumbers:3",
    "sat": "def sat(pals: List[int], n=2645, count=55):\n    return all(0 <= i <= n and str(i) == str(i)[::-1] and i % 2 == 0 for i in pals) and len(set(pals)) >= count",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=2645, count=55):",
    "sol_docstring": "    \"\"\"Find all even palindromes up to n\n\n    3 => [0, 2]\n    \"\"\"",
    "sol_bodies": [
      "    return [i for i in range(0, n + 1, 2) if str(i) == str(i)[::-1]]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#107",
    "weight": 1.0
  },
  {
    "name": "EvenPalindromeNumbers:4",
    "sat": "def sat(pals: List[int], n=3173, count=59):\n    return all(0 <= i <= n and str(i) == str(i)[::-1] and i % 2 == 0 for i in pals) and len(set(pals)) >= count",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=3173, count=59):",
    "sol_docstring": "    \"\"\"Find all even palindromes up to n\n\n    3 => [0, 2]\n    \"\"\"",
    "sol_bodies": [
      "    return [i for i in range(0, n + 1, 2) if str(i) == str(i)[::-1]]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#107",
    "weight": 1.0
  },
  {
    "name": "PositiveDigitSums:0",
    "sat": "def sat(pos: List[int], nums=[-804, 9124, -945, 2410, 0, 21, -123]):\n    for n in pos + nums:\n        s = str(n)\n        if int(s[:2]) + sum(int(c) for c in s[2:]) <= 0:\n            assert n not in pos\n        else:\n            assert pos.count(n) == nums.count(n)\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[-804, 9124, -945, 2410, 0, 21, -123]):",
    "sol_docstring": "    \"\"\"Filter for the numbers in nums whose sum of digits is > 0, where the first digit can be negative.\n\n    [12, -7, -102, -100] => [12, -102]\n    \"\"\"",
    "sol_bodies": [
      "    def bad(n):\n        s = str(n)\n        return int(s[:2]) + sum(int(c) for c in s[2:]) <= 0\n\n    return [n for n in nums if not bad(n)]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#108",
    "weight": 1.0
  },
  {
    "name": "PositiveDigitSums:1",
    "sat": "def sat(pos: List[int], nums=[3885, -46840, -82208, 35161, -84028]):\n    for n in pos + nums:\n        s = str(n)\n        if int(s[:2]) + sum(int(c) for c in s[2:]) <= 0:\n            assert n not in pos\n        else:\n            assert pos.count(n) == nums.count(n)\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[3885, -46840, -82208, 35161, -84028]):",
    "sol_docstring": "    \"\"\"Filter for the numbers in nums whose sum of digits is > 0, where the first digit can be negative.\n\n    [12, -7, -102, -100] => [12, -102]\n    \"\"\"",
    "sol_bodies": [
      "    def bad(n):\n        s = str(n)\n        return int(s[:2]) + sum(int(c) for c in s[2:]) <= 0\n\n    return [n for n in nums if not bad(n)]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#108",
    "weight": 1.0
  },
  {
    "name": "PositiveDigitSums:2",
    "sat": "def sat(pos: List[int], nums=[42550, -7024, -90058]):\n    for n in pos + nums:\n        s = str(n)\n        if int(s[:2]) + sum(int(c) for c in s[2:]) <= 0:\n            assert n not in pos\n        else:\n            assert pos.count(n) == nums.count(n)\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[42550, -7024, -90058]):",
    "sol_docstring": "    \"\"\"Filter for the numbers in nums whose sum of digits is > 0, where the first digit can be negative.\n\n    [12, -7, -102, -100] => [12, -102]\n    \"\"\"",
    "sol_bodies": [
      "    def bad(n):\n        s = str(n)\n        return int(s[:2]) + sum(int(c) for c in s[2:]) <= 0\n\n    return [n for n in nums if not bad(n)]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#108",
    "weight": 1.0
  },
  {
    "name": "PositiveDigitSums:3",
    "sat": "def sat(pos: List[int], nums=[39739, -37931, -68285, -32414]):\n    for n in pos + nums:\n        s = str(n)\n        if int(s[:2]) + sum(int(c) for c in s[2:]) <= 0:\n            assert n not in pos\n        else:\n            assert pos.count(n) == nums.count(n)\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[39739, -37931, -68285, -32414]):",
    "sol_docstring": "    \"\"\"Filter for the numbers in nums whose sum of digits is > 0, where the first digit can be negative.\n\n    [12, -7, -102, -100] => [12, -102]\n    \"\"\"",
    "sol_bodies": [
      "    def bad(n):\n        s = str(n)\n        return int(s[:2]) + sum(int(c) for c in s[2:]) <= 0\n\n    return [n for n in nums if not bad(n)]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#108",
    "weight": 1.0
  },
  {
    "name": "PositiveDigitSums:4",
    "sat": "def sat(pos: List[int], nums=[26162, -47643, -37426]):\n    for n in pos + nums:\n        s = str(n)\n        if int(s[:2]) + sum(int(c) for c in s[2:]) <= 0:\n            assert n not in pos\n        else:\n            assert pos.count(n) == nums.count(n)\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[26162, -47643, -37426]):",
    "sol_docstring": "    \"\"\"Filter for the numbers in nums whose sum of digits is > 0, where the first digit can be negative.\n\n    [12, -7, -102, -100] => [12, -102]\n    \"\"\"",
    "sol_bodies": [
      "    def bad(n):\n        s = str(n)\n        return int(s[:2]) + sum(int(c) for c in s[2:]) <= 0\n\n    return [n for n in nums if not bad(n)]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#108",
    "weight": 1.0
  },
  {
    "name": "RotateSort:0",
    "sat": "def sat(original: List[int], arr=[2, 3, -1, -1, 0, 1, 1]):\n    assert str(original)[1:-1] in str(sorted(original) * 2), \"Not ring sorted\"\n    return any(original == arr[:i] + arr[i + 1:] for i in range(len(arr) + 1))",
    "ans_type": "List[int]",
    "sol_header": "def sol(arr=[2, 3, -1, -1, 0, 1, 1]):",
    "sol_docstring": "    \"\"\"\n    An array is ring-sorted if it is a \"rotation\" of a non-decreasing list.\n    Remove at most one element from arr to make it ring-sorted.\n\n    [1, 2, 3, -1, 6, 0] => [1, 2, 3, -1, 0]\n    \"\"\"",
    "sol_bodies": [
      "    def sat(near):\n        order_violations = 0\n        erasures = 0\n        for i, n in enumerate(near):\n            if n < near[i - 1]:  # -1 when i =0 gives last element\n                order_violations += 1\n            while n != arr[i + erasures]:\n                erasures += 1\n        return order_violations <= 1 and erasures <= 1\n\n    candidates = [arr] + [arr[:i] + arr[i + 1:] for i in range(len(arr))]\n    return next(near for near in candidates if sat(near))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#109\n\nThis puzzle (and RotateString from #154) use the fact that a string is a rotation of r if it is a substring of r+r",
    "weight": 1.0
  },
  {
    "name": "RotateSort:1",
    "sat": "def sat(original: List[int], arr=[2, 3, 3, 5, 6, 0]):\n    assert str(original)[1:-1] in str(sorted(original) * 2), \"Not ring sorted\"\n    return any(original == arr[:i] + arr[i + 1:] for i in range(len(arr) + 1))",
    "ans_type": "List[int]",
    "sol_header": "def sol(arr=[2, 3, 3, 5, 6, 0]):",
    "sol_docstring": "    \"\"\"\n    An array is ring-sorted if it is a \"rotation\" of a non-decreasing list.\n    Remove at most one element from arr to make it ring-sorted.\n\n    [1, 2, 3, -1, 6, 0] => [1, 2, 3, -1, 0]\n    \"\"\"",
    "sol_bodies": [
      "    def sat(near):\n        order_violations = 0\n        erasures = 0\n        for i, n in enumerate(near):\n            if n < near[i - 1]:  # -1 when i =0 gives last element\n                order_violations += 1\n            while n != arr[i + erasures]:\n                erasures += 1\n        return order_violations <= 1 and erasures <= 1\n\n    candidates = [arr] + [arr[:i] + arr[i + 1:] for i in range(len(arr))]\n    return next(near for near in candidates if sat(near))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#109\n\nThis puzzle (and RotateString from #154) use the fact that a string is a rotation of r if it is a substring of r+r",
    "weight": 1.0
  },
  {
    "name": "RotateSort:2",
    "sat": "def sat(original: List[int], arr=[3, 5]):\n    assert str(original)[1:-1] in str(sorted(original) * 2), \"Not ring sorted\"\n    return any(original == arr[:i] + arr[i + 1:] for i in range(len(arr) + 1))",
    "ans_type": "List[int]",
    "sol_header": "def sol(arr=[3, 5]):",
    "sol_docstring": "    \"\"\"\n    An array is ring-sorted if it is a \"rotation\" of a non-decreasing list.\n    Remove at most one element from arr to make it ring-sorted.\n\n    [1, 2, 3, -1, 6, 0] => [1, 2, 3, -1, 0]\n    \"\"\"",
    "sol_bodies": [
      "    def sat(near):\n        order_violations = 0\n        erasures = 0\n        for i, n in enumerate(near):\n            if n < near[i - 1]:  # -1 when i =0 gives last element\n                order_violations += 1\n            while n != arr[i + erasures]:\n                erasures += 1\n        return order_violations <= 1 and erasures <= 1\n\n    candidates = [arr] + [arr[:i] + arr[i + 1:] for i in range(len(arr))]\n    return next(near for near in candidates if sat(near))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#109\n\nThis puzzle (and RotateString from #154) use the fact that a string is a rotation of r if it is a substring of r+r",
    "weight": 1.0
  },
  {
    "name": "RotateSort:3",
    "sat": "def sat(original: List[int], arr=[3, 7, 3, 6, 6, 8, 9, 0, 0, 1]):\n    assert str(original)[1:-1] in str(sorted(original) * 2), \"Not ring sorted\"\n    return any(original == arr[:i] + arr[i + 1:] for i in range(len(arr) + 1))",
    "ans_type": "List[int]",
    "sol_header": "def sol(arr=[3, 7, 3, 6, 6, 8, 9, 0, 0, 1]):",
    "sol_docstring": "    \"\"\"\n    An array is ring-sorted if it is a \"rotation\" of a non-decreasing list.\n    Remove at most one element from arr to make it ring-sorted.\n\n    [1, 2, 3, -1, 6, 0] => [1, 2, 3, -1, 0]\n    \"\"\"",
    "sol_bodies": [
      "    def sat(near):\n        order_violations = 0\n        erasures = 0\n        for i, n in enumerate(near):\n            if n < near[i - 1]:  # -1 when i =0 gives last element\n                order_violations += 1\n            while n != arr[i + erasures]:\n                erasures += 1\n        return order_violations <= 1 and erasures <= 1\n\n    candidates = [arr] + [arr[:i] + arr[i + 1:] for i in range(len(arr))]\n    return next(near for near in candidates if sat(near))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#109\n\nThis puzzle (and RotateString from #154) use the fact that a string is a rotation of r if it is a substring of r+r",
    "weight": 1.0
  },
  {
    "name": "RotateSort:4",
    "sat": "def sat(original: List[int], arr=[3, 2, 6, 7, 7, 8, 3]):\n    assert str(original)[1:-1] in str(sorted(original) * 2), \"Not ring sorted\"\n    return any(original == arr[:i] + arr[i + 1:] for i in range(len(arr) + 1))",
    "ans_type": "List[int]",
    "sol_header": "def sol(arr=[3, 2, 6, 7, 7, 8, 3]):",
    "sol_docstring": "    \"\"\"\n    An array is ring-sorted if it is a \"rotation\" of a non-decreasing list.\n    Remove at most one element from arr to make it ring-sorted.\n\n    [1, 2, 3, -1, 6, 0] => [1, 2, 3, -1, 0]\n    \"\"\"",
    "sol_bodies": [
      "    def sat(near):\n        order_violations = 0\n        erasures = 0\n        for i, n in enumerate(near):\n            if n < near[i - 1]:  # -1 when i =0 gives last element\n                order_violations += 1\n            while n != arr[i + erasures]:\n                erasures += 1\n        return order_violations <= 1 and erasures <= 1\n\n    candidates = [arr] + [arr[:i] + arr[i + 1:] for i in range(len(arr))]\n    return next(near for near in candidates if sat(near))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#109\n\nThis puzzle (and RotateString from #154) use the fact that a string is a rotation of r if it is a substring of r+r",
    "weight": 1.0
  },
  {
    "name": "ParityExchange:0",
    "sat": "def sat(swaps: List[List[int]], nums1=[1, 3, 2, 4, 5, 8, 7, 11], nums2=[0, 7, 0, 8, 19, 4, 41, 43, 42]):\n    copy1 = nums1[:]\n    copy2 = nums2[:]\n    for i, j in swaps:\n        copy1[i], copy2[j] = copy2[j], copy1[i]\n    return all(n % 2 == 0 for n in copy1)",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(nums1=[1, 3, 2, 4, 5, 8, 7, 11], nums2=[0, 7, 0, 8, 19, 4, 41, 43, 42]):",
    "sol_docstring": "    \"\"\"\n    Find a sequence of swaps (indices into two lists) such that, after making those swaps, all numbers in the\n    first list are even\n\n    [1, 3, 4] [2, 4, 5] => [0, 1]\n    \"\"\"",
    "sol_bodies": [
      "    odds = [i for i, n in enumerate(nums1) if n % 2 == 1]\n    evens = [i for i, n in enumerate(nums2) if n % 2 == 0]\n    return [[i, j] for i, j in zip(odds, evens)]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#110",
    "weight": 1.0
  },
  {
    "name": "ParityExchange:1",
    "sat": "def sat(swaps: List[List[int]], nums1=[-4, -8, -10, -6, 0, -3, -7, 5], nums2=[-6, 6, -8, -7, -7]):\n    copy1 = nums1[:]\n    copy2 = nums2[:]\n    for i, j in swaps:\n        copy1[i], copy2[j] = copy2[j], copy1[i]\n    return all(n % 2 == 0 for n in copy1)",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(nums1=[-4, -8, -10, -6, 0, -3, -7, 5], nums2=[-6, 6, -8, -7, -7]):",
    "sol_docstring": "    \"\"\"\n    Find a sequence of swaps (indices into two lists) such that, after making those swaps, all numbers in the\n    first list are even\n\n    [1, 3, 4] [2, 4, 5] => [0, 1]\n    \"\"\"",
    "sol_bodies": [
      "    odds = [i for i, n in enumerate(nums1) if n % 2 == 1]\n    evens = [i for i, n in enumerate(nums2) if n % 2 == 0]\n    return [[i, j] for i, j in zip(odds, evens)]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#110",
    "weight": 1.0
  },
  {
    "name": "ParityExchange:2",
    "sat": "def sat(swaps: List[List[int]], nums1=[8, -5, -4], nums2=[3, 1, 4, -3, 5, 7]):\n    copy1 = nums1[:]\n    copy2 = nums2[:]\n    for i, j in swaps:\n        copy1[i], copy2[j] = copy2[j], copy1[i]\n    return all(n % 2 == 0 for n in copy1)",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(nums1=[8, -5, -4], nums2=[3, 1, 4, -3, 5, 7]):",
    "sol_docstring": "    \"\"\"\n    Find a sequence of swaps (indices into two lists) such that, after making those swaps, all numbers in the\n    first list are even\n\n    [1, 3, 4] [2, 4, 5] => [0, 1]\n    \"\"\"",
    "sol_bodies": [
      "    odds = [i for i, n in enumerate(nums1) if n % 2 == 1]\n    evens = [i for i, n in enumerate(nums2) if n % 2 == 0]\n    return [[i, j] for i, j in zip(odds, evens)]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#110",
    "weight": 1.0
  },
  {
    "name": "ParityExchange:3",
    "sat": "def sat(swaps: List[List[int]], nums1=[-8, -6], nums2=[9, -4, 0, 9, -6, -5, -4, 3, -3]):\n    copy1 = nums1[:]\n    copy2 = nums2[:]\n    for i, j in swaps:\n        copy1[i], copy2[j] = copy2[j], copy1[i]\n    return all(n % 2 == 0 for n in copy1)",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(nums1=[-8, -6], nums2=[9, -4, 0, 9, -6, -5, -4, 3, -3]):",
    "sol_docstring": "    \"\"\"\n    Find a sequence of swaps (indices into two lists) such that, after making those swaps, all numbers in the\n    first list are even\n\n    [1, 3, 4] [2, 4, 5] => [0, 1]\n    \"\"\"",
    "sol_bodies": [
      "    odds = [i for i, n in enumerate(nums1) if n % 2 == 1]\n    evens = [i for i, n in enumerate(nums2) if n % 2 == 0]\n    return [[i, j] for i, j in zip(odds, evens)]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#110",
    "weight": 1.0
  },
  {
    "name": "ParityExchange:4",
    "sat": "def sat(swaps: List[List[int]], nums1=[-6, -2, 8, -4, -8, 0, 8, -3, 8], nums2=[0]):\n    copy1 = nums1[:]\n    copy2 = nums2[:]\n    for i, j in swaps:\n        copy1[i], copy2[j] = copy2[j], copy1[i]\n    return all(n % 2 == 0 for n in copy1)",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(nums1=[-6, -2, 8, -4, -8, 0, 8, -3, 8], nums2=[0]):",
    "sol_docstring": "    \"\"\"\n    Find a sequence of swaps (indices into two lists) such that, after making those swaps, all numbers in the\n    first list are even\n\n    [1, 3, 4] [2, 4, 5] => [0, 1]\n    \"\"\"",
    "sol_bodies": [
      "    odds = [i for i, n in enumerate(nums1) if n % 2 == 1]\n    evens = [i for i, n in enumerate(nums2) if n % 2 == 0]\n    return [[i, j] for i, j in zip(odds, evens)]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#110",
    "weight": 1.0
  },
  {
    "name": "CharCounts:0",
    "sat": "def sat(s: str, counts={'a': 4, 'b': 17, 'd': 101, 'e': 0, 'f': 12}):\n    chars = s.split()\n    for c in chars:\n        assert chars.count(c) == counts[c]\n    return len(chars) == sum(counts.values())",
    "ans_type": "str",
    "sol_header": "def sol(counts={'a': 4, 'b': 17, 'd': 101, 'e': 0, 'f': 12}):",
    "sol_docstring": "    \"\"\"Find a string consisting of space-separated characters with given counts\n\n    {\"f\": 1, \"o\": 2} => \"oof\"\n    \"\"\"",
    "sol_bodies": [
      "    return \" \".join(c for c, i in counts.items() for _ in range(i))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#111",
    "weight": 1.0
  },
  {
    "name": "CharCounts:1",
    "sat": "def sat(s: str, counts={'z': 0, 'e': 0, 'd': 7, 'o': 3, 'y': 8, 'w': 3, 'a': 0}):\n    chars = s.split()\n    for c in chars:\n        assert chars.count(c) == counts[c]\n    return len(chars) == sum(counts.values())",
    "ans_type": "str",
    "sol_header": "def sol(counts={'z': 0, 'e': 0, 'd': 7, 'o': 3, 'y': 8, 'w': 3, 'a': 0}):",
    "sol_docstring": "    \"\"\"Find a string consisting of space-separated characters with given counts\n\n    {\"f\": 1, \"o\": 2} => \"oof\"\n    \"\"\"",
    "sol_bodies": [
      "    return \" \".join(c for c, i in counts.items() for _ in range(i))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#111",
    "weight": 1.0
  },
  {
    "name": "CharCounts:2",
    "sat": "def sat(s: str, counts={'s': 8, 'z': 6, 'd': 1, 'o': 6}):\n    chars = s.split()\n    for c in chars:\n        assert chars.count(c) == counts[c]\n    return len(chars) == sum(counts.values())",
    "ans_type": "str",
    "sol_header": "def sol(counts={'s': 8, 'z': 6, 'd': 1, 'o': 6}):",
    "sol_docstring": "    \"\"\"Find a string consisting of space-separated characters with given counts\n\n    {\"f\": 1, \"o\": 2} => \"oof\"\n    \"\"\"",
    "sol_bodies": [
      "    return \" \".join(c for c, i in counts.items() for _ in range(i))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#111",
    "weight": 1.0
  },
  {
    "name": "CharCounts:3",
    "sat": "def sat(s: str, counts={'c': 5, 'p': 6, 'j': 0, 'g': 1, 'w': 4, 'k': 8}):\n    chars = s.split()\n    for c in chars:\n        assert chars.count(c) == counts[c]\n    return len(chars) == sum(counts.values())",
    "ans_type": "str",
    "sol_header": "def sol(counts={'c': 5, 'p': 6, 'j': 0, 'g': 1, 'w': 4, 'k': 8}):",
    "sol_docstring": "    \"\"\"Find a string consisting of space-separated characters with given counts\n\n    {\"f\": 1, \"o\": 2} => \"oof\"\n    \"\"\"",
    "sol_bodies": [
      "    return \" \".join(c for c, i in counts.items() for _ in range(i))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#111",
    "weight": 1.0
  },
  {
    "name": "CharCounts:4",
    "sat": "def sat(s: str, counts={'c': 2}):\n    chars = s.split()\n    for c in chars:\n        assert chars.count(c) == counts[c]\n    return len(chars) == sum(counts.values())",
    "ans_type": "str",
    "sol_header": "def sol(counts={'c': 2}):",
    "sol_docstring": "    \"\"\"Find a string consisting of space-separated characters with given counts\n\n    {\"f\": 1, \"o\": 2} => \"oof\"\n    \"\"\"",
    "sol_bodies": [
      "    return \" \".join(c for c, i in counts.items() for _ in range(i))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#111",
    "weight": 1.0
  },
  {
    "name": "DelPalindrome:0",
    "sat": "def sat(strings: List[str], a=\"this is a test\", b=\"cat\"):\n    s, is_palindrome = strings\n    i = 0\n    for c in a:\n        if c not in b:\n            assert s[i] == c\n            i += 1\n    assert i == len(s)\n    return is_palindrome == str(s == s[::-1])",
    "ans_type": "List[str]",
    "sol_header": "def sol(a=\"this is a test\", b=\"cat\"):",
    "sol_docstring": "    \"\"\"\n    Return a pair of a strings where the first string is the same as a with all the characters of b removed,\n    and the second string is 'True' if this string is a palindrome otherwise 'False'.\n\n    a=\"madam, I'm adam.\" b = \"Yes, we're here.\" => ['madamImadam', 'True']\n    \"\"\"",
    "sol_bodies": [
      "    s = \"\".join(c for c in a if c not in b)\n    return [s, str(s == s[::-1])]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#112",
    "weight": 1.0
  },
  {
    "name": "DelPalindrome:1",
    "sat": "def sat(strings: List[str], a=\"vochemogogajesuxujefobemenepejyquizys\", b=\"te\"):\n    s, is_palindrome = strings\n    i = 0\n    for c in a:\n        if c not in b:\n            assert s[i] == c\n            i += 1\n    assert i == len(s)\n    return is_palindrome == str(s == s[::-1])",
    "ans_type": "List[str]",
    "sol_header": "def sol(a=\"vochemogogajesuxujefobemenepejyquizys\", b=\"te\"):",
    "sol_docstring": "    \"\"\"\n    Return a pair of a strings where the first string is the same as a with all the characters of b removed,\n    and the second string is 'True' if this string is a palindrome otherwise 'False'.\n\n    a=\"madam, I'm adam.\" b = \"Yes, we're here.\" => ['madamImadam', 'True']\n    \"\"\"",
    "sol_bodies": [
      "    s = \"\".join(c for c in a if c not in b)\n    return [s, str(s == s[::-1])]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#112",
    "weight": 1.0
  },
  {
    "name": "DelPalindrome:2",
    "sat": "def sat(strings: List[str], a=\"tagodecequyzafiwathegothatymuzabegelelathe\", b=\"wululizokiwa\"):\n    s, is_palindrome = strings\n    i = 0\n    for c in a:\n        if c not in b:\n            assert s[i] == c\n            i += 1\n    assert i == len(s)\n    return is_palindrome == str(s == s[::-1])",
    "ans_type": "List[str]",
    "sol_header": "def sol(a=\"tagodecequyzafiwathegothatymuzabegelelathe\", b=\"wululizokiwa\"):",
    "sol_docstring": "    \"\"\"\n    Return a pair of a strings where the first string is the same as a with all the characters of b removed,\n    and the second string is 'True' if this string is a palindrome otherwise 'False'.\n\n    a=\"madam, I'm adam.\" b = \"Yes, we're here.\" => ['madamImadam', 'True']\n    \"\"\"",
    "sol_bodies": [
      "    s = \"\".join(c for c in a if c not in b)\n    return [s, str(s == s[::-1])]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#112",
    "weight": 1.0
  },
  {
    "name": "DelPalindrome:3",
    "sat": "def sat(strings: List[str], a=\"sipylovegubequagujete\", b=\"doh\"):\n    s, is_palindrome = strings\n    i = 0\n    for c in a:\n        if c not in b:\n            assert s[i] == c\n            i += 1\n    assert i == len(s)\n    return is_palindrome == str(s == s[::-1])",
    "ans_type": "List[str]",
    "sol_header": "def sol(a=\"sipylovegubequagujete\", b=\"doh\"):",
    "sol_docstring": "    \"\"\"\n    Return a pair of a strings where the first string is the same as a with all the characters of b removed,\n    and the second string is 'True' if this string is a palindrome otherwise 'False'.\n\n    a=\"madam, I'm adam.\" b = \"Yes, we're here.\" => ['madamImadam', 'True']\n    \"\"\"",
    "sol_bodies": [
      "    s = \"\".join(c for c in a if c not in b)\n    return [s, str(s == s[::-1])]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#112",
    "weight": 1.0
  },
  {
    "name": "DelPalindrome:4",
    "sat": "def sat(strings: List[str], a=\"fodivahug\", b=\"ne\"):\n    s, is_palindrome = strings\n    i = 0\n    for c in a:\n        if c not in b:\n            assert s[i] == c\n            i += 1\n    assert i == len(s)\n    return is_palindrome == str(s == s[::-1])",
    "ans_type": "List[str]",
    "sol_header": "def sol(a=\"fodivahug\", b=\"ne\"):",
    "sol_docstring": "    \"\"\"\n    Return a pair of a strings where the first string is the same as a with all the characters of b removed,\n    and the second string is 'True' if this string is a palindrome otherwise 'False'.\n\n    a=\"madam, I'm adam.\" b = \"Yes, we're here.\" => ['madamImadam', 'True']\n    \"\"\"",
    "sol_bodies": [
      "    s = \"\".join(c for c in a if c not in b)\n    return [s, str(s == s[::-1])]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#112",
    "weight": 1.0
  },
  {
    "name": "ReplaceMe:0",
    "sat": "def sat(answers: List[str], lst=['234515', '21503', '2506236943']):\n    if len(answers) != len(lst):\n        return False\n    for a, s in zip(answers, lst):\n        if \"t\" in a:\n            return False\n        num_odds = sum(int(i) % 2 for i in s)\n        if a.replace(str(num_odds), \"t\") != \"this is a test\":\n            return False\n    return True",
    "ans_type": "List[str]",
    "sol_header": "def sol(lst=['234515', '21503', '2506236943']):",
    "sol_docstring": "    \"\"\"For each string in lst, count the number of odd digits. Find a string with no t's such that replacing\n    this number by t gives the string 'this is a test'\n\n    [\"123\", \"2\"] => [\"2his is a 2es2\", \"0his a 0es0\"]\n    \"\"\"",
    "sol_bodies": [
      "    return [\"this is a test\".replace(\"t\", str(sum(c in \"13579\" for c in s))) for s in lst]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#113",
    "weight": 1.0
  },
  {
    "name": "ReplaceMe:1",
    "sat": "def sat(answers: List[str], lst=['56', '0']):\n    if len(answers) != len(lst):\n        return False\n    for a, s in zip(answers, lst):\n        if \"t\" in a:\n            return False\n        num_odds = sum(int(i) % 2 for i in s)\n        if a.replace(str(num_odds), \"t\") != \"this is a test\":\n            return False\n    return True",
    "ans_type": "List[str]",
    "sol_header": "def sol(lst=['56', '0']):",
    "sol_docstring": "    \"\"\"For each string in lst, count the number of odd digits. Find a string with no t's such that replacing\n    this number by t gives the string 'this is a test'\n\n    [\"123\", \"2\"] => [\"2his is a 2es2\", \"0his a 0es0\"]\n    \"\"\"",
    "sol_bodies": [
      "    return [\"this is a test\".replace(\"t\", str(sum(c in \"13579\" for c in s))) for s in lst]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#113",
    "weight": 1.0
  },
  {
    "name": "ReplaceMe:2",
    "sat": "def sat(answers: List[str], lst=[]):\n    if len(answers) != len(lst):\n        return False\n    for a, s in zip(answers, lst):\n        if \"t\" in a:\n            return False\n        num_odds = sum(int(i) % 2 for i in s)\n        if a.replace(str(num_odds), \"t\") != \"this is a test\":\n            return False\n    return True",
    "ans_type": "List[str]",
    "sol_header": "def sol(lst=[]):",
    "sol_docstring": "    \"\"\"For each string in lst, count the number of odd digits. Find a string with no t's such that replacing\n    this number by t gives the string 'this is a test'\n\n    [\"123\", \"2\"] => [\"2his is a 2es2\", \"0his a 0es0\"]\n    \"\"\"",
    "sol_bodies": [
      "    return [\"this is a test\".replace(\"t\", str(sum(c in \"13579\" for c in s))) for s in lst]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#113",
    "weight": 1.0
  },
  {
    "name": "ReplaceMe:3",
    "sat": "def sat(answers: List[str], lst=['767', '5707']):\n    if len(answers) != len(lst):\n        return False\n    for a, s in zip(answers, lst):\n        if \"t\" in a:\n            return False\n        num_odds = sum(int(i) % 2 for i in s)\n        if a.replace(str(num_odds), \"t\") != \"this is a test\":\n            return False\n    return True",
    "ans_type": "List[str]",
    "sol_header": "def sol(lst=['767', '5707']):",
    "sol_docstring": "    \"\"\"For each string in lst, count the number of odd digits. Find a string with no t's such that replacing\n    this number by t gives the string 'this is a test'\n\n    [\"123\", \"2\"] => [\"2his is a 2es2\", \"0his a 0es0\"]\n    \"\"\"",
    "sol_bodies": [
      "    return [\"this is a test\".replace(\"t\", str(sum(c in \"13579\" for c in s))) for s in lst]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#113",
    "weight": 1.0
  },
  {
    "name": "ReplaceMe:4",
    "sat": "def sat(answers: List[str], lst=['856']):\n    if len(answers) != len(lst):\n        return False\n    for a, s in zip(answers, lst):\n        if \"t\" in a:\n            return False\n        num_odds = sum(int(i) % 2 for i in s)\n        if a.replace(str(num_odds), \"t\") != \"this is a test\":\n            return False\n    return True",
    "ans_type": "List[str]",
    "sol_header": "def sol(lst=['856']):",
    "sol_docstring": "    \"\"\"For each string in lst, count the number of odd digits. Find a string with no t's such that replacing\n    this number by t gives the string 'this is a test'\n\n    [\"123\", \"2\"] => [\"2his is a 2es2\", \"0his a 0es0\"]\n    \"\"\"",
    "sol_bodies": [
      "    return [\"this is a test\".replace(\"t\", str(sum(c in \"13579\" for c in s))) for s in lst]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#113",
    "weight": 1.0
  },
  {
    "name": "MinSubArraySum:0",
    "sat": "def sat(start_end: List[int], base=7, p=50741, upper=-4897754):\n    start, end = start_end\n    return sum(pow(base, i, p) - p // 2 for i in range(start, end)) <= upper",
    "ans_type": "List[int]",
    "sol_header": "def sol(base=7, p=50741, upper=-4897754):",
    "sol_docstring": "    \"\"\"Find the start and end of the smallest-sum subarray of [(base^i mod p) - p/2 for i=start,..., end]\n\n    base=3, p=7, upper =-3 => [0, 3]\n    # because -3 is the sum of the elements [0:3] of [-2, 0, -1, 3, 1, 2, -2, 0, -1, 3 ...\n    \"\"\"",
    "sol_bodies": [
      "    tot = 0\n    best_tot = 0\n    best_end = 0\n    best_start = 0\n    largest_cumulative_sum = 0\n    largest_cumulative_sum_index = 0\n\n    n = 1\n\n    for i in range(p + 1):\n        if tot > largest_cumulative_sum:\n            largest_cumulative_sum = tot\n            largest_cumulative_sum_index = i\n        if tot - largest_cumulative_sum < best_tot:\n            best_tot = tot - largest_cumulative_sum\n            best_start = largest_cumulative_sum_index\n            best_end = i\n\n        tot += (n - p // 2)\n        n = (n * base) % p\n\n    return [best_start, best_end]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#114\n\nThis is harder than \\#1114. The arrays here are chosen to be long enough that the brute-force n^2 algorithm takes\nwhile the O(n) algorithm takes milliseconds.",
    "weight": 1.0
  },
  {
    "name": "MinSubArraySum:1",
    "sat": "def sat(start_end: List[int], base=1706, p=2004, upper=-14268):\n    start, end = start_end\n    return sum(pow(base, i, p) - p // 2 for i in range(start, end)) <= upper",
    "ans_type": "List[int]",
    "sol_header": "def sol(base=1706, p=2004, upper=-14268):",
    "sol_docstring": "    \"\"\"Find the start and end of the smallest-sum subarray of [(base^i mod p) - p/2 for i=start,..., end]\n\n    base=3, p=7, upper =-3 => [0, 3]\n    # because -3 is the sum of the elements [0:3] of [-2, 0, -1, 3, 1, 2, -2, 0, -1, 3 ...\n    \"\"\"",
    "sol_bodies": [
      "    tot = 0\n    best_tot = 0\n    best_end = 0\n    best_start = 0\n    largest_cumulative_sum = 0\n    largest_cumulative_sum_index = 0\n\n    n = 1\n\n    for i in range(p + 1):\n        if tot > largest_cumulative_sum:\n            largest_cumulative_sum = tot\n            largest_cumulative_sum_index = i\n        if tot - largest_cumulative_sum < best_tot:\n            best_tot = tot - largest_cumulative_sum\n            best_start = largest_cumulative_sum_index\n            best_end = i\n\n        tot += (n - p // 2)\n        n = (n * base) % p\n\n    return [best_start, best_end]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#114\n\nThis is harder than \\#1114. The arrays here are chosen to be long enough that the brute-force n^2 algorithm takes\nwhile the O(n) algorithm takes milliseconds.",
    "weight": 1.0
  },
  {
    "name": "MinSubArraySum:2",
    "sat": "def sat(start_end: List[int], base=4595, p=7106, upper=-193758):\n    start, end = start_end\n    return sum(pow(base, i, p) - p // 2 for i in range(start, end)) <= upper",
    "ans_type": "List[int]",
    "sol_header": "def sol(base=4595, p=7106, upper=-193758):",
    "sol_docstring": "    \"\"\"Find the start and end of the smallest-sum subarray of [(base^i mod p) - p/2 for i=start,..., end]\n\n    base=3, p=7, upper =-3 => [0, 3]\n    # because -3 is the sum of the elements [0:3] of [-2, 0, -1, 3, 1, 2, -2, 0, -1, 3 ...\n    \"\"\"",
    "sol_bodies": [
      "    tot = 0\n    best_tot = 0\n    best_end = 0\n    best_start = 0\n    largest_cumulative_sum = 0\n    largest_cumulative_sum_index = 0\n\n    n = 1\n\n    for i in range(p + 1):\n        if tot > largest_cumulative_sum:\n            largest_cumulative_sum = tot\n            largest_cumulative_sum_index = i\n        if tot - largest_cumulative_sum < best_tot:\n            best_tot = tot - largest_cumulative_sum\n            best_start = largest_cumulative_sum_index\n            best_end = i\n\n        tot += (n - p // 2)\n        n = (n * base) % p\n\n    return [best_start, best_end]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#114\n\nThis is harder than \\#1114. The arrays here are chosen to be long enough that the brute-force n^2 algorithm takes\nwhile the O(n) algorithm takes milliseconds.",
    "weight": 1.0
  },
  {
    "name": "MinSubArraySum:3",
    "sat": "def sat(start_end: List[int], base=1181, p=2664, upper=-102305):\n    start, end = start_end\n    return sum(pow(base, i, p) - p // 2 for i in range(start, end)) <= upper",
    "ans_type": "List[int]",
    "sol_header": "def sol(base=1181, p=2664, upper=-102305):",
    "sol_docstring": "    \"\"\"Find the start and end of the smallest-sum subarray of [(base^i mod p) - p/2 for i=start,..., end]\n\n    base=3, p=7, upper =-3 => [0, 3]\n    # because -3 is the sum of the elements [0:3] of [-2, 0, -1, 3, 1, 2, -2, 0, -1, 3 ...\n    \"\"\"",
    "sol_bodies": [
      "    tot = 0\n    best_tot = 0\n    best_end = 0\n    best_start = 0\n    largest_cumulative_sum = 0\n    largest_cumulative_sum_index = 0\n\n    n = 1\n\n    for i in range(p + 1):\n        if tot > largest_cumulative_sum:\n            largest_cumulative_sum = tot\n            largest_cumulative_sum_index = i\n        if tot - largest_cumulative_sum < best_tot:\n            best_tot = tot - largest_cumulative_sum\n            best_start = largest_cumulative_sum_index\n            best_end = i\n\n        tot += (n - p // 2)\n        n = (n * base) % p\n\n    return [best_start, best_end]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#114\n\nThis is harder than \\#1114. The arrays here are chosen to be long enough that the brute-force n^2 algorithm takes\nwhile the O(n) algorithm takes milliseconds.",
    "weight": 1.0
  },
  {
    "name": "MinSubArraySum:4",
    "sat": "def sat(start_end: List[int], base=7160, p=7736, upper=-35852):\n    start, end = start_end\n    return sum(pow(base, i, p) - p // 2 for i in range(start, end)) <= upper",
    "ans_type": "List[int]",
    "sol_header": "def sol(base=7160, p=7736, upper=-35852):",
    "sol_docstring": "    \"\"\"Find the start and end of the smallest-sum subarray of [(base^i mod p) - p/2 for i=start,..., end]\n\n    base=3, p=7, upper =-3 => [0, 3]\n    # because -3 is the sum of the elements [0:3] of [-2, 0, -1, 3, 1, 2, -2, 0, -1, 3 ...\n    \"\"\"",
    "sol_bodies": [
      "    tot = 0\n    best_tot = 0\n    best_end = 0\n    best_start = 0\n    largest_cumulative_sum = 0\n    largest_cumulative_sum_index = 0\n\n    n = 1\n\n    for i in range(p + 1):\n        if tot > largest_cumulative_sum:\n            largest_cumulative_sum = tot\n            largest_cumulative_sum_index = i\n        if tot - largest_cumulative_sum < best_tot:\n            best_tot = tot - largest_cumulative_sum\n            best_start = largest_cumulative_sum_index\n            best_end = i\n\n        tot += (n - p // 2)\n        n = (n * base) % p\n\n    return [best_start, best_end]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#114\n\nThis is harder than \\#1114. The arrays here are chosen to be long enough that the brute-force n^2 algorithm takes\nwhile the O(n) algorithm takes milliseconds.",
    "weight": 1.0
  },
  {
    "name": "Buckets:0",
    "sat": "def sat(wells: List[List[List[int]]], grid=[[1, 1, 0, 1, 1], [0, 0, 0, 0, 0], [1, 1, 0, 0, 1]], capacity=2):\n    grid2 = [[0 for _ in row] for row in grid]\n    for group in wells:\n        assert len(group) <= capacity\n        for i, j in group:\n            assert grid2[i][j] == 0\n            grid2[i][j] = 1\n    assert sum(len(group) != capacity for group in wells) <= 1  # at most one under-capacity group\n    return grid2 == grid",
    "ans_type": "List[List[List[int]]]",
    "sol_header": "def sol(grid=[[1, 1, 0, 1, 1], [0, 0, 0, 0, 0], [1, 1, 0, 0, 1]], capacity=2):",
    "sol_docstring": "    \"\"\"Given a grid, partition the 1's into groups of capacity [x, y] pairs, with at most one incomplete group\"\"\"",
    "sol_bodies": [
      "    ans = []\n    for i, row in enumerate(grid):\n        for j, val in enumerate(row):\n            if val == 1:\n                if not ans or len(ans[-1]) == capacity:\n                    ans.append([])\n                ans[-1].append([i, j])\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#115",
    "weight": 1.0
  },
  {
    "name": "Buckets:1",
    "sat": "def sat(wells: List[List[List[int]]], grid=[[1, 0, 0, 1, 1, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 1], [0, 1, 1, 0, 1, 0, 1, 0], [0, 1, 1, 1, 0, 0, 0, 1], [1, 0, 0, 0, 1, 1, 0, 0]], capacity=6):\n    grid2 = [[0 for _ in row] for row in grid]\n    for group in wells:\n        assert len(group) <= capacity\n        for i, j in group:\n            assert grid2[i][j] == 0\n            grid2[i][j] = 1\n    assert sum(len(group) != capacity for group in wells) <= 1  # at most one under-capacity group\n    return grid2 == grid",
    "ans_type": "List[List[List[int]]]",
    "sol_header": "def sol(grid=[[1, 0, 0, 1, 1, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 1], [0, 1, 1, 0, 1, 0, 1, 0], [0, 1, 1, 1, 0, 0, 0, 1], [1, 0, 0, 0, 1, 1, 0, 0]], capacity=6):",
    "sol_docstring": "    \"\"\"Given a grid, partition the 1's into groups of capacity [x, y] pairs, with at most one incomplete group\"\"\"",
    "sol_bodies": [
      "    ans = []\n    for i, row in enumerate(grid):\n        for j, val in enumerate(row):\n            if val == 1:\n                if not ans or len(ans[-1]) == capacity:\n                    ans.append([])\n                ans[-1].append([i, j])\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#115",
    "weight": 1.0
  },
  {
    "name": "Buckets:2",
    "sat": "def sat(wells: List[List[List[int]]], grid=[[0], [1]], capacity=7):\n    grid2 = [[0 for _ in row] for row in grid]\n    for group in wells:\n        assert len(group) <= capacity\n        for i, j in group:\n            assert grid2[i][j] == 0\n            grid2[i][j] = 1\n    assert sum(len(group) != capacity for group in wells) <= 1  # at most one under-capacity group\n    return grid2 == grid",
    "ans_type": "List[List[List[int]]]",
    "sol_header": "def sol(grid=[[0], [1]], capacity=7):",
    "sol_docstring": "    \"\"\"Given a grid, partition the 1's into groups of capacity [x, y] pairs, with at most one incomplete group\"\"\"",
    "sol_bodies": [
      "    ans = []\n    for i, row in enumerate(grid):\n        for j, val in enumerate(row):\n            if val == 1:\n                if not ans or len(ans[-1]) == capacity:\n                    ans.append([])\n                ans[-1].append([i, j])\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#115",
    "weight": 1.0
  },
  {
    "name": "Buckets:3",
    "sat": "def sat(wells: List[List[List[int]]], grid=[[0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 1, 0, 1, 1, 0], [0, 1, 0, 1, 0, 1, 1, 0, 0]], capacity=5):\n    grid2 = [[0 for _ in row] for row in grid]\n    for group in wells:\n        assert len(group) <= capacity\n        for i, j in group:\n            assert grid2[i][j] == 0\n            grid2[i][j] = 1\n    assert sum(len(group) != capacity for group in wells) <= 1  # at most one under-capacity group\n    return grid2 == grid",
    "ans_type": "List[List[List[int]]]",
    "sol_header": "def sol(grid=[[0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 1, 0, 1, 1, 0], [0, 1, 0, 1, 0, 1, 1, 0, 0]], capacity=5):",
    "sol_docstring": "    \"\"\"Given a grid, partition the 1's into groups of capacity [x, y] pairs, with at most one incomplete group\"\"\"",
    "sol_bodies": [
      "    ans = []\n    for i, row in enumerate(grid):\n        for j, val in enumerate(row):\n            if val == 1:\n                if not ans or len(ans[-1]) == capacity:\n                    ans.append([])\n                ans[-1].append([i, j])\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#115",
    "weight": 1.0
  },
  {
    "name": "Buckets:4",
    "sat": "def sat(wells: List[List[List[int]]], grid=[[0, 1], [1, 0], [1, 1], [1, 0], [1, 1]], capacity=9):\n    grid2 = [[0 for _ in row] for row in grid]\n    for group in wells:\n        assert len(group) <= capacity\n        for i, j in group:\n            assert grid2[i][j] == 0\n            grid2[i][j] = 1\n    assert sum(len(group) != capacity for group in wells) <= 1  # at most one under-capacity group\n    return grid2 == grid",
    "ans_type": "List[List[List[int]]]",
    "sol_header": "def sol(grid=[[0, 1], [1, 0], [1, 1], [1, 0], [1, 1]], capacity=9):",
    "sol_docstring": "    \"\"\"Given a grid, partition the 1's into groups of capacity [x, y] pairs, with at most one incomplete group\"\"\"",
    "sol_bodies": [
      "    ans = []\n    for i, row in enumerate(grid):\n        for j, val in enumerate(row):\n            if val == 1:\n                if not ans or len(ans[-1]) == capacity:\n                    ans.append([])\n                ans[-1].append([i, j])\n    return ans"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#115",
    "weight": 1.0
  },
  {
    "name": "BinarySort:0",
    "sat": "def sat(ordered: List[int], arr=[4, 2, 3, -1, 15, 2, 6, 9, 5, 16, 1048576]):\n    if sorted(ordered) != sorted(arr):\n        return False  # not even a permutation\n    return all(bin(a).count(\"1\") <= bin(b).count(\"1\") for a, b in zip(ordered, ordered[1:]))",
    "ans_type": "List[int]",
    "sol_header": "def sol(arr=[4, 2, 3, -1, 15, 2, 6, 9, 5, 16, 1048576]):",
    "sol_docstring": "    \"\"\"Sort the numbers in arr based on the number of 1's in their binary representation.\n\n    [1, 2, 3, 4, 6] => [1, 2, 4, 3, 6]\n    \"\"\"",
    "sol_bodies": [
      "    return sorted(arr, key=lambda n: bin(n).count(\"1\"))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#116",
    "weight": 1.0
  },
  {
    "name": "BinarySort:1",
    "sat": "def sat(ordered: List[int], arr=[19, 47, -51, 40, 6, 0, 41, 57, 13, 16, -27, 7]):\n    if sorted(ordered) != sorted(arr):\n        return False  # not even a permutation\n    return all(bin(a).count(\"1\") <= bin(b).count(\"1\") for a, b in zip(ordered, ordered[1:]))",
    "ans_type": "List[int]",
    "sol_header": "def sol(arr=[19, 47, -51, 40, 6, 0, 41, 57, 13, 16, -27, 7]):",
    "sol_docstring": "    \"\"\"Sort the numbers in arr based on the number of 1's in their binary representation.\n\n    [1, 2, 3, 4, 6] => [1, 2, 4, 3, 6]\n    \"\"\"",
    "sol_bodies": [
      "    return sorted(arr, key=lambda n: bin(n).count(\"1\"))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#116",
    "weight": 1.0
  },
  {
    "name": "BinarySort:2",
    "sat": "def sat(ordered: List[int], arr=[62, 63, 1]):\n    if sorted(ordered) != sorted(arr):\n        return False  # not even a permutation\n    return all(bin(a).count(\"1\") <= bin(b).count(\"1\") for a, b in zip(ordered, ordered[1:]))",
    "ans_type": "List[int]",
    "sol_header": "def sol(arr=[62, 63, 1]):",
    "sol_docstring": "    \"\"\"Sort the numbers in arr based on the number of 1's in their binary representation.\n\n    [1, 2, 3, 4, 6] => [1, 2, 4, 3, 6]\n    \"\"\"",
    "sol_bodies": [
      "    return sorted(arr, key=lambda n: bin(n).count(\"1\"))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#116",
    "weight": 1.0
  },
  {
    "name": "BinarySort:3",
    "sat": "def sat(ordered: List[int], arr=[-9, -78, -17, 42, 85, 79, 61]):\n    if sorted(ordered) != sorted(arr):\n        return False  # not even a permutation\n    return all(bin(a).count(\"1\") <= bin(b).count(\"1\") for a, b in zip(ordered, ordered[1:]))",
    "ans_type": "List[int]",
    "sol_header": "def sol(arr=[-9, -78, -17, 42, 85, 79, 61]):",
    "sol_docstring": "    \"\"\"Sort the numbers in arr based on the number of 1's in their binary representation.\n\n    [1, 2, 3, 4, 6] => [1, 2, 4, 3, 6]\n    \"\"\"",
    "sol_bodies": [
      "    return sorted(arr, key=lambda n: bin(n).count(\"1\"))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#116",
    "weight": 1.0
  },
  {
    "name": "BinarySort:4",
    "sat": "def sat(ordered: List[int], arr=[-65, -6, 82, -85, -84, 97, 55, 54]):\n    if sorted(ordered) != sorted(arr):\n        return False  # not even a permutation\n    return all(bin(a).count(\"1\") <= bin(b).count(\"1\") for a, b in zip(ordered, ordered[1:]))",
    "ans_type": "List[int]",
    "sol_header": "def sol(arr=[-65, -6, 82, -85, -84, 97, 55, 54]):",
    "sol_docstring": "    \"\"\"Sort the numbers in arr based on the number of 1's in their binary representation.\n\n    [1, 2, 3, 4, 6] => [1, 2, 4, 3, 6]\n    \"\"\"",
    "sol_bodies": [
      "    return sorted(arr, key=lambda n: bin(n).count(\"1\"))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#116",
    "weight": 1.0
  },
  {
    "name": "ConsonantFilter:0",
    "sat": "def sat(words: List[str], s=\"This is not a very hard puzzle\", n=3):\n    i = 0\n    for w in s.split():\n        num_consonants = 0\n        for c in w.lower():\n            if c not in \"aeiou\":\n                num_consonants += 1\n        if num_consonants == n:\n            if words[i] != w:\n                return False\n            i += 1\n    return i == len(words)",
    "ans_type": "List[str]",
    "sol_header": "def sol(s=\"This is not a very hard puzzle\", n=3):",
    "sol_docstring": "    \"\"\"Find all words in the string with n consonants\n\n    Sample input:\n    s=\"An eye for an I\", n=1\n    Sample output:\n    [\"An\", \"eye\", \"an\"]\n    \"\"\"",
    "sol_bodies": [
      "    return [w for w in s.split() if sum(c.lower() not in \"aeiou\" for c in w) == n]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#117",
    "weight": 1.0
  },
  {
    "name": "ConsonantFilter:1",
    "sat": "def sat(words: List[str], s=\"xopike tha textufuzowapa xaxiweborite dutextequuch metojylucazasysebi wy\", n=5):\n    i = 0\n    for w in s.split():\n        num_consonants = 0\n        for c in w.lower():\n            if c not in \"aeiou\":\n                num_consonants += 1\n        if num_consonants == n:\n            if words[i] != w:\n                return False\n            i += 1\n    return i == len(words)",
    "ans_type": "List[str]",
    "sol_header": "def sol(s=\"xopike tha textufuzowapa xaxiweborite dutextequuch metojylucazasysebi wy\", n=5):",
    "sol_docstring": "    \"\"\"Find all words in the string with n consonants\n\n    Sample input:\n    s=\"An eye for an I\", n=1\n    Sample output:\n    [\"An\", \"eye\", \"an\"]\n    \"\"\"",
    "sol_bodies": [
      "    return [w for w in s.split() if sum(c.lower() not in \"aeiou\" for c in w) == n]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#117",
    "weight": 1.0
  },
  {
    "name": "ConsonantFilter:2",
    "sat": "def sat(words: List[str], s=\"tihyc pydykosisaroquicoc text\", n=6):\n    i = 0\n    for w in s.split():\n        num_consonants = 0\n        for c in w.lower():\n            if c not in \"aeiou\":\n                num_consonants += 1\n        if num_consonants == n:\n            if words[i] != w:\n                return False\n            i += 1\n    return i == len(words)",
    "ans_type": "List[str]",
    "sol_header": "def sol(s=\"tihyc pydykosisaroquicoc text\", n=6):",
    "sol_docstring": "    \"\"\"Find all words in the string with n consonants\n\n    Sample input:\n    s=\"An eye for an I\", n=1\n    Sample output:\n    [\"An\", \"eye\", \"an\"]\n    \"\"\"",
    "sol_bodies": [
      "    return [w for w in s.split() if sum(c.lower() not in \"aeiou\" for c in w) == n]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#117",
    "weight": 1.0
  },
  {
    "name": "ConsonantFilter:3",
    "sat": "def sat(words: List[str], s=\"chalejugedijypiq jypityvekifate mobekolupumymikana quaxizot vurikojithokasatuka teragusaculi vyceth dachaci wu\", n=1):\n    i = 0\n    for w in s.split():\n        num_consonants = 0\n        for c in w.lower():\n            if c not in \"aeiou\":\n                num_consonants += 1\n        if num_consonants == n:\n            if words[i] != w:\n                return False\n            i += 1\n    return i == len(words)",
    "ans_type": "List[str]",
    "sol_header": "def sol(s=\"chalejugedijypiq jypityvekifate mobekolupumymikana quaxizot vurikojithokasatuka teragusaculi vyceth dachaci wu\", n=1):",
    "sol_docstring": "    \"\"\"Find all words in the string with n consonants\n\n    Sample input:\n    s=\"An eye for an I\", n=1\n    Sample output:\n    [\"An\", \"eye\", \"an\"]\n    \"\"\"",
    "sol_bodies": [
      "    return [w for w in s.split() if sum(c.lower() not in \"aeiou\" for c in w) == n]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#117",
    "weight": 1.0
  },
  {
    "name": "ConsonantFilter:4",
    "sat": "def sat(words: List[str], s=\"thigafamyhuchykikoxe limyb wy textitextomyc regolathagychiby pep\", n=2):\n    i = 0\n    for w in s.split():\n        num_consonants = 0\n        for c in w.lower():\n            if c not in \"aeiou\":\n                num_consonants += 1\n        if num_consonants == n:\n            if words[i] != w:\n                return False\n            i += 1\n    return i == len(words)",
    "ans_type": "List[str]",
    "sol_header": "def sol(s=\"thigafamyhuchykikoxe limyb wy textitextomyc regolathagychiby pep\", n=2):",
    "sol_docstring": "    \"\"\"Find all words in the string with n consonants\n\n    Sample input:\n    s=\"An eye for an I\", n=1\n    Sample output:\n    [\"An\", \"eye\", \"an\"]\n    \"\"\"",
    "sol_bodies": [
      "    return [w for w in s.split() if sum(c.lower() not in \"aeiou\" for c in w) == n]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#117",
    "weight": 1.0
  },
  {
    "name": "VowelSandwich:0",
    "sat": "def sat(ham: str, s=\"Any vowel is OK\"):\n    vows = \"aeiou\"\n    cons = \"bcdfghjklmnpqrstvwxz\"\n    return ham in s and ham[0].lower() in cons and ham[1].lower() in vows and ham[2].lower() in cons",
    "ans_type": "str",
    "sol_header": "def sol(s=\"Any vowel is OK\"):",
    "sol_docstring": "    \"\"\"Find any vowel sandwich, a string consisting of a vowel between two consonants, contained in s\n\n    \"sandwhich\" => \"hic\"\n    \"\"\"",
    "sol_bodies": [
      "    vows = \"aeiou\"\n    cons = \"bcdfghjklmnpqrstvwxz\"\n    return next(s[i - 1:i + 2] for i in range(1, len(s) - 1)\n                if s[i].lower() in vows and s[i - 1].lower() in cons and s[i + 1].lower() in cons)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#118",
    "weight": 1.0
  },
  {
    "name": "VowelSandwich:1",
    "sat": "def sat(ham: str, s=\"wOwwwww!\"):\n    vows = \"aeiou\"\n    cons = \"bcdfghjklmnpqrstvwxz\"\n    return ham in s and ham[0].lower() in cons and ham[1].lower() in vows and ham[2].lower() in cons",
    "ans_type": "str",
    "sol_header": "def sol(s=\"wOwwwww!\"):",
    "sol_docstring": "    \"\"\"Find any vowel sandwich, a string consisting of a vowel between two consonants, contained in s\n\n    \"sandwhich\" => \"hic\"\n    \"\"\"",
    "sol_bodies": [
      "    vows = \"aeiou\"\n    cons = \"bcdfghjklmnpqrstvwxz\"\n    return next(s[i - 1:i + 2] for i in range(1, len(s) - 1)\n                if s[i].lower() in vows and s[i - 1].lower() in cons and s[i + 1].lower() in cons)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#118",
    "weight": 1.0
  },
  {
    "name": "VowelSandwich:2",
    "sat": "def sat(ham: str, s=\"do pyp you know ?\"):\n    vows = \"aeiou\"\n    cons = \"bcdfghjklmnpqrstvwxz\"\n    return ham in s and ham[0].lower() in cons and ham[1].lower() in vows and ham[2].lower() in cons",
    "ans_type": "str",
    "sol_header": "def sol(s=\"do pyp you know ?\"):",
    "sol_docstring": "    \"\"\"Find any vowel sandwich, a string consisting of a vowel between two consonants, contained in s\n\n    \"sandwhich\" => \"hic\"\n    \"\"\"",
    "sol_bodies": [
      "    vows = \"aeiou\"\n    cons = \"bcdfghjklmnpqrstvwxz\"\n    return next(s[i - 1:i + 2] for i in range(1, len(s) - 1)\n                if s[i].lower() in vows and s[i - 1].lower() in cons and s[i + 1].lower() in cons)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#118",
    "weight": 1.0
  },
  {
    "name": "VowelSandwich:3",
    "sat": "def sat(ham: str, s=\"zocofiwihilyfizi ku pivanydebodygawepu nyfanusocosypinezaz pune\"):\n    vows = \"aeiou\"\n    cons = \"bcdfghjklmnpqrstvwxz\"\n    return ham in s and ham[0].lower() in cons and ham[1].lower() in vows and ham[2].lower() in cons",
    "ans_type": "str",
    "sol_header": "def sol(s=\"zocofiwihilyfizi ku pivanydebodygawepu nyfanusocosypinezaz pune\"):",
    "sol_docstring": "    \"\"\"Find any vowel sandwich, a string consisting of a vowel between two consonants, contained in s\n\n    \"sandwhich\" => \"hic\"\n    \"\"\"",
    "sol_bodies": [
      "    vows = \"aeiou\"\n    cons = \"bcdfghjklmnpqrstvwxz\"\n    return next(s[i - 1:i + 2] for i in range(1, len(s) - 1)\n                if s[i].lower() in vows and s[i - 1].lower() in cons and s[i + 1].lower() in cons)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#118",
    "weight": 1.0
  },
  {
    "name": "VowelSandwich:4",
    "sat": "def sat(ham: str, s=\"citextitozuwatextoq hutextawicogylalex wi wamu\"):\n    vows = \"aeiou\"\n    cons = \"bcdfghjklmnpqrstvwxz\"\n    return ham in s and ham[0].lower() in cons and ham[1].lower() in vows and ham[2].lower() in cons",
    "ans_type": "str",
    "sol_header": "def sol(s=\"citextitozuwatextoq hutextawicogylalex wi wamu\"):",
    "sol_docstring": "    \"\"\"Find any vowel sandwich, a string consisting of a vowel between two consonants, contained in s\n\n    \"sandwhich\" => \"hic\"\n    \"\"\"",
    "sol_bodies": [
      "    vows = \"aeiou\"\n    cons = \"bcdfghjklmnpqrstvwxz\"\n    return next(s[i - 1:i + 2] for i in range(1, len(s) - 1)\n                if s[i].lower() in vows and s[i - 1].lower() in cons and s[i + 1].lower() in cons)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#118",
    "weight": 1.0
  },
  {
    "name": "ParenthesesPermutation:0",
    "sat": "def sat(perm: str, s=\"))(  )()()() )))(( ))))((( )))))(((( ))))))))((((((( ))))))((((( )))))))(((((( )))))))))(((((((  ((((((((((\"):\n    assert sorted(perm.split()) == sorted(s.split()), \"Must be a permutation of the space-delimited 'groups'\"\n    return all(perm[:i].count(\"(\") >= perm[:i].count(\")\") for i in range(len(perm)))",
    "ans_type": "str",
    "sol_header": "def sol(s=\"))(  )()()() )))(( ))))((( )))))(((( ))))))))((((((( ))))))((((( )))))))(((((( )))))))))(((((((  ((((((((((\"):",
    "sol_docstring": "    \"\"\"The string s consists of groups of parentheses separated by spaces.\n    Permute the groups such that the parentheses match.\n\n    \"( ) )(\" => \"( )( )\"\n    \"\"\"",
    "sol_bodies": [
      "    assert all(c in \"( )\" for c in s)\n    parts = s.split()\n\n    def min_depth(part):\n        \"\"\"Returns the lowest depth <= 0\"\"\"\n        ans = 0\n        depth = 0\n        for c in part:\n            if c == \")\":\n                depth -= 1\n                ans = min(ans, depth)\n            else:\n                depth += 1\n        return ans\n\n    def greedy_reorder(subs):\n        \"\"\"Reorder a bunch of parentheses substrings so as to maintain # ('s > # )'s \"\"\"\n        queue = subs[:]\n        subs[:] = []\n        height = 0\n        while queue:\n            best = max([s for s in queue if min_depth(s) + height >= 0], key=lambda s: s.count(\"(\") - s.count(\")\"))\n            height += best.count(\"(\") - best.count(\")\")\n            subs.append(best)\n            queue.remove(best)\n\n    lefts = [s for s in parts if s.count(\"(\") >= s.count(\")\")]\n\n    greedy_reorder(lefts)\n\n    def mirror(sub):\n        return \"\".join(\")\" if c == \"(\" else \"(\" for c in sub[::-1])\n\n    rights = [mirror(s) for s in parts if s.count(\"(\") < s.count(\")\")]  # mirror temporarily for reordering\n\n    greedy_reorder(rights)\n    return \" \".join(lefts + [mirror(s) for s in rights[::-1]])"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#119\n    \nThis is harder version in which you need to find a permutation of many substrings. Brute force is too slow.",
    "weight": 1.0
  },
  {
    "name": "ParenthesesPermutation:1",
    "sat": "def sat(perm: str, s=\" (( ()(())())() ())(())))(()()) (((((((()(()))(( ()()))) )())))) ()()()(((())()\"):\n    assert sorted(perm.split()) == sorted(s.split()), \"Must be a permutation of the space-delimited 'groups'\"\n    return all(perm[:i].count(\"(\") >= perm[:i].count(\")\") for i in range(len(perm)))",
    "ans_type": "str",
    "sol_header": "def sol(s=\" (( ()(())())() ())(())))(()()) (((((((()(()))(( ()()))) )())))) ()()()(((())()\"):",
    "sol_docstring": "    \"\"\"The string s consists of groups of parentheses separated by spaces.\n    Permute the groups such that the parentheses match.\n\n    \"( ) )(\" => \"( )( )\"\n    \"\"\"",
    "sol_bodies": [
      "    assert all(c in \"( )\" for c in s)\n    parts = s.split()\n\n    def min_depth(part):\n        \"\"\"Returns the lowest depth <= 0\"\"\"\n        ans = 0\n        depth = 0\n        for c in part:\n            if c == \")\":\n                depth -= 1\n                ans = min(ans, depth)\n            else:\n                depth += 1\n        return ans\n\n    def greedy_reorder(subs):\n        \"\"\"Reorder a bunch of parentheses substrings so as to maintain # ('s > # )'s \"\"\"\n        queue = subs[:]\n        subs[:] = []\n        height = 0\n        while queue:\n            best = max([s for s in queue if min_depth(s) + height >= 0], key=lambda s: s.count(\"(\") - s.count(\")\"))\n            height += best.count(\"(\") - best.count(\")\")\n            subs.append(best)\n            queue.remove(best)\n\n    lefts = [s for s in parts if s.count(\"(\") >= s.count(\")\")]\n\n    greedy_reorder(lefts)\n\n    def mirror(sub):\n        return \"\".join(\")\" if c == \"(\" else \"(\" for c in sub[::-1])\n\n    rights = [mirror(s) for s in parts if s.count(\"(\") < s.count(\")\")]  # mirror temporarily for reordering\n\n    greedy_reorder(rights)\n    return \" \".join(lefts + [mirror(s) for s in rights[::-1]])"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#119\n    \nThis is harder version in which you need to find a permutation of many substrings. Brute force is too slow.",
    "weight": 1.0
  },
  {
    "name": "ParenthesesPermutation:2",
    "sat": "def sat(perm: str, s=\"()()(( ))\"):\n    assert sorted(perm.split()) == sorted(s.split()), \"Must be a permutation of the space-delimited 'groups'\"\n    return all(perm[:i].count(\"(\") >= perm[:i].count(\")\") for i in range(len(perm)))",
    "ans_type": "str",
    "sol_header": "def sol(s=\"()()(( ))\"):",
    "sol_docstring": "    \"\"\"The string s consists of groups of parentheses separated by spaces.\n    Permute the groups such that the parentheses match.\n\n    \"( ) )(\" => \"( )( )\"\n    \"\"\"",
    "sol_bodies": [
      "    assert all(c in \"( )\" for c in s)\n    parts = s.split()\n\n    def min_depth(part):\n        \"\"\"Returns the lowest depth <= 0\"\"\"\n        ans = 0\n        depth = 0\n        for c in part:\n            if c == \")\":\n                depth -= 1\n                ans = min(ans, depth)\n            else:\n                depth += 1\n        return ans\n\n    def greedy_reorder(subs):\n        \"\"\"Reorder a bunch of parentheses substrings so as to maintain # ('s > # )'s \"\"\"\n        queue = subs[:]\n        subs[:] = []\n        height = 0\n        while queue:\n            best = max([s for s in queue if min_depth(s) + height >= 0], key=lambda s: s.count(\"(\") - s.count(\")\"))\n            height += best.count(\"(\") - best.count(\")\")\n            subs.append(best)\n            queue.remove(best)\n\n    lefts = [s for s in parts if s.count(\"(\") >= s.count(\")\")]\n\n    greedy_reorder(lefts)\n\n    def mirror(sub):\n        return \"\".join(\")\" if c == \"(\" else \"(\" for c in sub[::-1])\n\n    rights = [mirror(s) for s in parts if s.count(\"(\") < s.count(\")\")]  # mirror temporarily for reordering\n\n    greedy_reorder(rights)\n    return \" \".join(lefts + [mirror(s) for s in rights[::-1]])"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#119\n    \nThis is harder version in which you need to find a permutation of many substrings. Brute force is too slow.",
    "weight": 1.0
  },
  {
    "name": "ParenthesesPermutation:3",
    "sat": "def sat(perm: str, s=\"\"):\n    assert sorted(perm.split()) == sorted(s.split()), \"Must be a permutation of the space-delimited 'groups'\"\n    return all(perm[:i].count(\"(\") >= perm[:i].count(\")\") for i in range(len(perm)))",
    "ans_type": "str",
    "sol_header": "def sol(s=\"\"):",
    "sol_docstring": "    \"\"\"The string s consists of groups of parentheses separated by spaces.\n    Permute the groups such that the parentheses match.\n\n    \"( ) )(\" => \"( )( )\"\n    \"\"\"",
    "sol_bodies": [
      "    assert all(c in \"( )\" for c in s)\n    parts = s.split()\n\n    def min_depth(part):\n        \"\"\"Returns the lowest depth <= 0\"\"\"\n        ans = 0\n        depth = 0\n        for c in part:\n            if c == \")\":\n                depth -= 1\n                ans = min(ans, depth)\n            else:\n                depth += 1\n        return ans\n\n    def greedy_reorder(subs):\n        \"\"\"Reorder a bunch of parentheses substrings so as to maintain # ('s > # )'s \"\"\"\n        queue = subs[:]\n        subs[:] = []\n        height = 0\n        while queue:\n            best = max([s for s in queue if min_depth(s) + height >= 0], key=lambda s: s.count(\"(\") - s.count(\")\"))\n            height += best.count(\"(\") - best.count(\")\")\n            subs.append(best)\n            queue.remove(best)\n\n    lefts = [s for s in parts if s.count(\"(\") >= s.count(\")\")]\n\n    greedy_reorder(lefts)\n\n    def mirror(sub):\n        return \"\".join(\")\" if c == \"(\" else \"(\" for c in sub[::-1])\n\n    rights = [mirror(s) for s in parts if s.count(\"(\") < s.count(\")\")]  # mirror temporarily for reordering\n\n    greedy_reorder(rights)\n    return \" \".join(lefts + [mirror(s) for s in rights[::-1]])"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#119\n    \nThis is harder version in which you need to find a permutation of many substrings. Brute force is too slow.",
    "weight": 1.0
  },
  {
    "name": "ParenthesesPermutation:4",
    "sat": "def sat(perm: str, s=\"()(()())( )()\"):\n    assert sorted(perm.split()) == sorted(s.split()), \"Must be a permutation of the space-delimited 'groups'\"\n    return all(perm[:i].count(\"(\") >= perm[:i].count(\")\") for i in range(len(perm)))",
    "ans_type": "str",
    "sol_header": "def sol(s=\"()(()())( )()\"):",
    "sol_docstring": "    \"\"\"The string s consists of groups of parentheses separated by spaces.\n    Permute the groups such that the parentheses match.\n\n    \"( ) )(\" => \"( )( )\"\n    \"\"\"",
    "sol_bodies": [
      "    assert all(c in \"( )\" for c in s)\n    parts = s.split()\n\n    def min_depth(part):\n        \"\"\"Returns the lowest depth <= 0\"\"\"\n        ans = 0\n        depth = 0\n        for c in part:\n            if c == \")\":\n                depth -= 1\n                ans = min(ans, depth)\n            else:\n                depth += 1\n        return ans\n\n    def greedy_reorder(subs):\n        \"\"\"Reorder a bunch of parentheses substrings so as to maintain # ('s > # )'s \"\"\"\n        queue = subs[:]\n        subs[:] = []\n        height = 0\n        while queue:\n            best = max([s for s in queue if min_depth(s) + height >= 0], key=lambda s: s.count(\"(\") - s.count(\")\"))\n            height += best.count(\"(\") - best.count(\")\")\n            subs.append(best)\n            queue.remove(best)\n\n    lefts = [s for s in parts if s.count(\"(\") >= s.count(\")\")]\n\n    greedy_reorder(lefts)\n\n    def mirror(sub):\n        return \"\".join(\")\" if c == \"(\" else \"(\" for c in sub[::-1])\n\n    rights = [mirror(s) for s in parts if s.count(\"(\") < s.count(\")\")]  # mirror temporarily for reordering\n\n    greedy_reorder(rights)\n    return \" \".join(lefts + [mirror(s) for s in rights[::-1]])"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#119\n    \nThis is harder version in which you need to find a permutation of many substrings. Brute force is too slow.",
    "weight": 1.0
  },
  {
    "name": "BiggestK:0",
    "sat": "def sat(biggest: List[int], k=7, nums=[31, 1, 2, -10, -2, 4, 17, 18, 20, 14, 20, 21, 18, 0]):\n    if len(biggest) != k:\n        return False\n    smallest = nums[:]\n    for n in biggest:\n        smallest.remove(n)\n    return k == 0 or k == len(nums) or max(smallest) <= min(biggest)",
    "ans_type": "List[int]",
    "sol_header": "def sol(k=7, nums=[31, 1, 2, -10, -2, 4, 17, 18, 20, 14, 20, 21, 18, 0]):",
    "sol_docstring": "    \"\"\"Find the largest k numbers\n\n    k=2, [1, 2, 3, 4, 5, 5, 3, 5, 2] => [5, 5]\n    \"\"\"",
    "sol_bodies": [
      "    return sorted(nums, reverse=True)[:k]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#120",
    "weight": 1.0
  },
  {
    "name": "BiggestK:1",
    "sat": "def sat(biggest: List[int], k=3, nums=[-5, 30, 31, 32, 30, 93, 97]):\n    if len(biggest) != k:\n        return False\n    smallest = nums[:]\n    for n in biggest:\n        smallest.remove(n)\n    return k == 0 or k == len(nums) or max(smallest) <= min(biggest)",
    "ans_type": "List[int]",
    "sol_header": "def sol(k=3, nums=[-5, 30, 31, 32, 30, 93, 97]):",
    "sol_docstring": "    \"\"\"Find the largest k numbers\n\n    k=2, [1, 2, 3, 4, 5, 5, 3, 5, 2] => [5, 5]\n    \"\"\"",
    "sol_bodies": [
      "    return sorted(nums, reverse=True)[:k]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#120",
    "weight": 1.0
  },
  {
    "name": "BiggestK:2",
    "sat": "def sat(biggest: List[int], k=2, nums=[75, 30, 53, 25, 14]):\n    if len(biggest) != k:\n        return False\n    smallest = nums[:]\n    for n in biggest:\n        smallest.remove(n)\n    return k == 0 or k == len(nums) or max(smallest) <= min(biggest)",
    "ans_type": "List[int]",
    "sol_header": "def sol(k=2, nums=[75, 30, 53, 25, 14]):",
    "sol_docstring": "    \"\"\"Find the largest k numbers\n\n    k=2, [1, 2, 3, 4, 5, 5, 3, 5, 2] => [5, 5]\n    \"\"\"",
    "sol_bodies": [
      "    return sorted(nums, reverse=True)[:k]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#120",
    "weight": 1.0
  },
  {
    "name": "BiggestK:3",
    "sat": "def sat(biggest: List[int], k=1, nums=[-6, 9, 36, 36, 99, 66, 41, 38, 11, 61]):\n    if len(biggest) != k:\n        return False\n    smallest = nums[:]\n    for n in biggest:\n        smallest.remove(n)\n    return k == 0 or k == len(nums) or max(smallest) <= min(biggest)",
    "ans_type": "List[int]",
    "sol_header": "def sol(k=1, nums=[-6, 9, 36, 36, 99, 66, 41, 38, 11, 61]):",
    "sol_docstring": "    \"\"\"Find the largest k numbers\n\n    k=2, [1, 2, 3, 4, 5, 5, 3, 5, 2] => [5, 5]\n    \"\"\"",
    "sol_bodies": [
      "    return sorted(nums, reverse=True)[:k]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#120",
    "weight": 1.0
  },
  {
    "name": "BiggestK:4",
    "sat": "def sat(biggest: List[int], k=2, nums=[4, 65, 52, 41, 21, 0, 45, 71]):\n    if len(biggest) != k:\n        return False\n    smallest = nums[:]\n    for n in biggest:\n        smallest.remove(n)\n    return k == 0 or k == len(nums) or max(smallest) <= min(biggest)",
    "ans_type": "List[int]",
    "sol_header": "def sol(k=2, nums=[4, 65, 52, 41, 21, 0, 45, 71]):",
    "sol_docstring": "    \"\"\"Find the largest k numbers\n\n    k=2, [1, 2, 3, 4, 5, 5, 3, 5, 2] => [5, 5]\n    \"\"\"",
    "sol_bodies": [
      "    return sorted(nums, reverse=True)[:k]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#120",
    "weight": 1.0
  },
  {
    "name": "OddEvenSum:0",
    "sat": "def sat(tot: int, nums=[18, 42152, 125023521, -1221873620123, 17, 19]):\n    for i in nums[::2]:\n        if i % 2 == 1:\n            tot -= i\n    return tot == 0",
    "ans_type": "int",
    "sol_header": "def sol(nums=[18, 42152, 125023521, -1221873620123, 17, 19]):",
    "sol_docstring": "    \"\"\"Find the sum of the odd elements that are at even indices\n\n    [0, 1, 2, 3, 5, 6] => 5\n    \"\"\"",
    "sol_bodies": [
      "    return sum(i for i in nums[::2] if i % 2 == 1)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#121\n\nVery similar to EvenOddSum from \\#85",
    "weight": 1.0
  },
  {
    "name": "OddEvenSum:1",
    "sat": "def sat(tot: int, nums=[-52, 89, -74, -27]):\n    for i in nums[::2]:\n        if i % 2 == 1:\n            tot -= i\n    return tot == 0",
    "ans_type": "int",
    "sol_header": "def sol(nums=[-52, 89, -74, -27]):",
    "sol_docstring": "    \"\"\"Find the sum of the odd elements that are at even indices\n\n    [0, 1, 2, 3, 5, 6] => 5\n    \"\"\"",
    "sol_bodies": [
      "    return sum(i for i in nums[::2] if i % 2 == 1)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#121\n\nVery similar to EvenOddSum from \\#85",
    "weight": 1.0
  },
  {
    "name": "OddEvenSum:2",
    "sat": "def sat(tot: int, nums=[-95, -24, -50, -51, -18, -77, -61, 64, 7]):\n    for i in nums[::2]:\n        if i % 2 == 1:\n            tot -= i\n    return tot == 0",
    "ans_type": "int",
    "sol_header": "def sol(nums=[-95, -24, -50, -51, -18, -77, -61, 64, 7]):",
    "sol_docstring": "    \"\"\"Find the sum of the odd elements that are at even indices\n\n    [0, 1, 2, 3, 5, 6] => 5\n    \"\"\"",
    "sol_bodies": [
      "    return sum(i for i in nums[::2] if i % 2 == 1)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#121\n\nVery similar to EvenOddSum from \\#85",
    "weight": 1.0
  },
  {
    "name": "OddEvenSum:3",
    "sat": "def sat(tot: int, nums=[-85, -83, 62, -27, -37, -76, -10, 40, 34, -20]):\n    for i in nums[::2]:\n        if i % 2 == 1:\n            tot -= i\n    return tot == 0",
    "ans_type": "int",
    "sol_header": "def sol(nums=[-85, -83, 62, -27, -37, -76, -10, 40, 34, -20]):",
    "sol_docstring": "    \"\"\"Find the sum of the odd elements that are at even indices\n\n    [0, 1, 2, 3, 5, 6] => 5\n    \"\"\"",
    "sol_bodies": [
      "    return sum(i for i in nums[::2] if i % 2 == 1)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#121\n\nVery similar to EvenOddSum from \\#85",
    "weight": 1.0
  },
  {
    "name": "OddEvenSum:4",
    "sat": "def sat(tot: int, nums=[-11, -9, -29, 30, -70]):\n    for i in nums[::2]:\n        if i % 2 == 1:\n            tot -= i\n    return tot == 0",
    "ans_type": "int",
    "sol_header": "def sol(nums=[-11, -9, -29, 30, -70]):",
    "sol_docstring": "    \"\"\"Find the sum of the odd elements that are at even indices\n\n    [0, 1, 2, 3, 5, 6] => 5\n    \"\"\"",
    "sol_bodies": [
      "    return sum(i for i in nums[::2] if i % 2 == 1)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#121\n\nVery similar to EvenOddSum from \\#85",
    "weight": 1.0
  },
  {
    "name": "LongEarlySum:0",
    "sat": "def sat(tot: int, k=5, nums=[1252, 125273523, 0, 42, 100, 214532, 2, 0, 11, 14]):\n    for n in nums[:k]:\n        if len(str(abs(n))) > 2:\n            tot -= n\n    return tot == 0",
    "ans_type": "int",
    "sol_header": "def sol(k=5, nums=[1252, 125273523, 0, 42, 100, 214532, 2, 0, 11, 14]):",
    "sol_docstring": "    \"\"\"Find the sum of the numbers among the first k with more than 2 digits\n\n    k=3, nums=[2, 102, 12, 1000] => 102\n    \"\"\"",
    "sol_bodies": [
      "    return sum(n for n in nums[:k] if len(str(abs(n))) > 2)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#122\n    \nChanged slightly to make the answer not be a small integer.",
    "weight": 1.0
  },
  {
    "name": "LongEarlySum:1",
    "sat": "def sat(tot: int, k=5, nums=[-7157016423, 2782843150, 7219126112, -6508908448, -2700793649]):\n    for n in nums[:k]:\n        if len(str(abs(n))) > 2:\n            tot -= n\n    return tot == 0",
    "ans_type": "int",
    "sol_header": "def sol(k=5, nums=[-7157016423, 2782843150, 7219126112, -6508908448, -2700793649]):",
    "sol_docstring": "    \"\"\"Find the sum of the numbers among the first k with more than 2 digits\n\n    k=3, nums=[2, 102, 12, 1000] => 102\n    \"\"\"",
    "sol_bodies": [
      "    return sum(n for n in nums[:k] if len(str(abs(n))) > 2)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#122\n    \nChanged slightly to make the answer not be a small integer.",
    "weight": 1.0
  },
  {
    "name": "LongEarlySum:2",
    "sat": "def sat(tot: int, k=9, nums=[-5897482060, -6124803429, 460595384, -4038677051, 4034899461, 4374130613, -107107411]):\n    for n in nums[:k]:\n        if len(str(abs(n))) > 2:\n            tot -= n\n    return tot == 0",
    "ans_type": "int",
    "sol_header": "def sol(k=9, nums=[-5897482060, -6124803429, 460595384, -4038677051, 4034899461, 4374130613, -107107411]):",
    "sol_docstring": "    \"\"\"Find the sum of the numbers among the first k with more than 2 digits\n\n    k=3, nums=[2, 102, 12, 1000] => 102\n    \"\"\"",
    "sol_bodies": [
      "    return sum(n for n in nums[:k] if len(str(abs(n))) > 2)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#122\n    \nChanged slightly to make the answer not be a small integer.",
    "weight": 1.0
  },
  {
    "name": "LongEarlySum:3",
    "sat": "def sat(tot: int, k=9, nums=[-8188839170, -4196027936, 7189346049, -3904396164, -6197615761, -1925353242, 4455917604, -60399777, 2265288077, -5809369361, -1403148167, 4937241577, 6147738064, 2911928645, -3466247912]):\n    for n in nums[:k]:\n        if len(str(abs(n))) > 2:\n            tot -= n\n    return tot == 0",
    "ans_type": "int",
    "sol_header": "def sol(k=9, nums=[-8188839170, -4196027936, 7189346049, -3904396164, -6197615761, -1925353242, 4455917604, -60399777, 2265288077, -5809369361, -1403148167, 4937241577, 6147738064, 2911928645, -3466247912]):",
    "sol_docstring": "    \"\"\"Find the sum of the numbers among the first k with more than 2 digits\n\n    k=3, nums=[2, 102, 12, 1000] => 102\n    \"\"\"",
    "sol_bodies": [
      "    return sum(n for n in nums[:k] if len(str(abs(n))) > 2)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#122\n    \nChanged slightly to make the answer not be a small integer.",
    "weight": 1.0
  },
  {
    "name": "LongEarlySum:4",
    "sat": "def sat(tot: int, k=7, nums=[9205334525, 5459823374, -7169802732, 9865454706, -7321060937, 6045166493, 15149444, 1118638089, -4595115991, -3388779539]):\n    for n in nums[:k]:\n        if len(str(abs(n))) > 2:\n            tot -= n\n    return tot == 0",
    "ans_type": "int",
    "sol_header": "def sol(k=7, nums=[9205334525, 5459823374, -7169802732, 9865454706, -7321060937, 6045166493, 15149444, 1118638089, -4595115991, -3388779539]):",
    "sol_docstring": "    \"\"\"Find the sum of the numbers among the first k with more than 2 digits\n\n    k=3, nums=[2, 102, 12, 1000] => 102\n    \"\"\"",
    "sol_bodies": [
      "    return sum(n for n in nums[:k] if len(str(abs(n))) > 2)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#122\n    \nChanged slightly to make the answer not be a small integer.",
    "weight": 1.0
  },
  {
    "name": "OddCollatz:0",
    "sat": "def sat(odds: List[int], n=1243272912731):\n    num_odds = 0\n    while True:\n        if n % 2 == 1:\n            num_odds += 1\n            if n not in odds:\n                return False\n        if n <= 1:\n            return num_odds == len(odds)\n        n = (3 * n + 1) if n % 2 == 1 else n // 2",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=1243272912731):",
    "sol_docstring": "    \"\"\"Find the odd numbers in the collatz sequence starting at n\n\n    3 => [3, 5, 1]  # because the Collatz sequence starting with 3 is [3, 10, 5, 16, 8, 4, 2, 1]\n    \"\"\"",
    "sol_bodies": [
      "    ans = []\n    while True:\n        if n % 2 == 1:\n            ans.append(n)\n        if n <= 1:\n            return ans\n        n = (3 * n + 1) if n % 2 == 1 else n // 2"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#123",
    "weight": 1.0
  },
  {
    "name": "OddCollatz:1",
    "sat": "def sat(odds: List[int], n=6969429614):\n    num_odds = 0\n    while True:\n        if n % 2 == 1:\n            num_odds += 1\n            if n not in odds:\n                return False\n        if n <= 1:\n            return num_odds == len(odds)\n        n = (3 * n + 1) if n % 2 == 1 else n // 2",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=6969429614):",
    "sol_docstring": "    \"\"\"Find the odd numbers in the collatz sequence starting at n\n\n    3 => [3, 5, 1]  # because the Collatz sequence starting with 3 is [3, 10, 5, 16, 8, 4, 2, 1]\n    \"\"\"",
    "sol_bodies": [
      "    ans = []\n    while True:\n        if n % 2 == 1:\n            ans.append(n)\n        if n <= 1:\n            return ans\n        n = (3 * n + 1) if n % 2 == 1 else n // 2"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#123",
    "weight": 1.0
  },
  {
    "name": "OddCollatz:2",
    "sat": "def sat(odds: List[int], n=529):\n    num_odds = 0\n    while True:\n        if n % 2 == 1:\n            num_odds += 1\n            if n not in odds:\n                return False\n        if n <= 1:\n            return num_odds == len(odds)\n        n = (3 * n + 1) if n % 2 == 1 else n // 2",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=529):",
    "sol_docstring": "    \"\"\"Find the odd numbers in the collatz sequence starting at n\n\n    3 => [3, 5, 1]  # because the Collatz sequence starting with 3 is [3, 10, 5, 16, 8, 4, 2, 1]\n    \"\"\"",
    "sol_bodies": [
      "    ans = []\n    while True:\n        if n % 2 == 1:\n            ans.append(n)\n        if n <= 1:\n            return ans\n        n = (3 * n + 1) if n % 2 == 1 else n // 2"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#123",
    "weight": 1.0
  },
  {
    "name": "OddCollatz:3",
    "sat": "def sat(odds: List[int], n=37):\n    num_odds = 0\n    while True:\n        if n % 2 == 1:\n            num_odds += 1\n            if n not in odds:\n                return False\n        if n <= 1:\n            return num_odds == len(odds)\n        n = (3 * n + 1) if n % 2 == 1 else n // 2",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=37):",
    "sol_docstring": "    \"\"\"Find the odd numbers in the collatz sequence starting at n\n\n    3 => [3, 5, 1]  # because the Collatz sequence starting with 3 is [3, 10, 5, 16, 8, 4, 2, 1]\n    \"\"\"",
    "sol_bodies": [
      "    ans = []\n    while True:\n        if n % 2 == 1:\n            ans.append(n)\n        if n <= 1:\n            return ans\n        n = (3 * n + 1) if n % 2 == 1 else n // 2"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#123",
    "weight": 1.0
  },
  {
    "name": "OddCollatz:4",
    "sat": "def sat(odds: List[int], n=95119584):\n    num_odds = 0\n    while True:\n        if n % 2 == 1:\n            num_odds += 1\n            if n not in odds:\n                return False\n        if n <= 1:\n            return num_odds == len(odds)\n        n = (3 * n + 1) if n % 2 == 1 else n // 2",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=95119584):",
    "sol_docstring": "    \"\"\"Find the odd numbers in the collatz sequence starting at n\n\n    3 => [3, 5, 1]  # because the Collatz sequence starting with 3 is [3, 10, 5, 16, 8, 4, 2, 1]\n    \"\"\"",
    "sol_bodies": [
      "    ans = []\n    while True:\n        if n % 2 == 1:\n            ans.append(n)\n        if n <= 1:\n            return ans\n        n = (3 * n + 1) if n % 2 == 1 else n // 2"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#123",
    "weight": 1.0
  },
  {
    "name": "DateDiff:0",
    "sat": "def sat(s: str, target=-2075):\n    assert all(c in \"0123457689-\" for c in s) and s[2] == s[5] == \"-\"\n    m, d, y = [int(n) for n in s.split(\"-\")]\n    assert m in range(1, 13)\n    assert d in range(1, 32)\n    if m in [4, 6, 9, 11]:\n        assert d <= 30\n    if m == 2:\n        assert d <= 29\n    return m - d - y == target",
    "ans_type": "str",
    "sol_header": "def sol(target=-2075):",
    "sol_docstring": "    \"\"\"Find a valid date mm-dd-yyyy such that the date, viewed as a mathematical expression, evaluates to target\n\n    -2029 => \"10-18-2021\" # because 10-18-2021 == -2029\n    \"\"\"",
    "sol_bodies": [
      "    if target >= -30:\n        return \"12-01-\" + str(11 - target).zfill(4)\n    return \"01-31-\" + str(-30 - target).zfill(4)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#124",
    "weight": 1.0
  },
  {
    "name": "DateDiff:1",
    "sat": "def sat(s: str, target=11):\n    assert all(c in \"0123457689-\" for c in s) and s[2] == s[5] == \"-\"\n    m, d, y = [int(n) for n in s.split(\"-\")]\n    assert m in range(1, 13)\n    assert d in range(1, 32)\n    if m in [4, 6, 9, 11]:\n        assert d <= 30\n    if m == 2:\n        assert d <= 29\n    return m - d - y == target",
    "ans_type": "str",
    "sol_header": "def sol(target=11):",
    "sol_docstring": "    \"\"\"Find a valid date mm-dd-yyyy such that the date, viewed as a mathematical expression, evaluates to target\n\n    -2029 => \"10-18-2021\" # because 10-18-2021 == -2029\n    \"\"\"",
    "sol_bodies": [
      "    if target >= -30:\n        return \"12-01-\" + str(11 - target).zfill(4)\n    return \"01-31-\" + str(-30 - target).zfill(4)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#124",
    "weight": 1.0
  },
  {
    "name": "DateDiff:2",
    "sat": "def sat(s: str, target=-30):\n    assert all(c in \"0123457689-\" for c in s) and s[2] == s[5] == \"-\"\n    m, d, y = [int(n) for n in s.split(\"-\")]\n    assert m in range(1, 13)\n    assert d in range(1, 32)\n    if m in [4, 6, 9, 11]:\n        assert d <= 30\n    if m == 2:\n        assert d <= 29\n    return m - d - y == target",
    "ans_type": "str",
    "sol_header": "def sol(target=-30):",
    "sol_docstring": "    \"\"\"Find a valid date mm-dd-yyyy such that the date, viewed as a mathematical expression, evaluates to target\n\n    -2029 => \"10-18-2021\" # because 10-18-2021 == -2029\n    \"\"\"",
    "sol_bodies": [
      "    if target >= -30:\n        return \"12-01-\" + str(11 - target).zfill(4)\n    return \"01-31-\" + str(-30 - target).zfill(4)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#124",
    "weight": 1.0
  },
  {
    "name": "DateDiff:3",
    "sat": "def sat(s: str, target=-1999):\n    assert all(c in \"0123457689-\" for c in s) and s[2] == s[5] == \"-\"\n    m, d, y = [int(n) for n in s.split(\"-\")]\n    assert m in range(1, 13)\n    assert d in range(1, 32)\n    if m in [4, 6, 9, 11]:\n        assert d <= 30\n    if m == 2:\n        assert d <= 29\n    return m - d - y == target",
    "ans_type": "str",
    "sol_header": "def sol(target=-1999):",
    "sol_docstring": "    \"\"\"Find a valid date mm-dd-yyyy such that the date, viewed as a mathematical expression, evaluates to target\n\n    -2029 => \"10-18-2021\" # because 10-18-2021 == -2029\n    \"\"\"",
    "sol_bodies": [
      "    if target >= -30:\n        return \"12-01-\" + str(11 - target).zfill(4)\n    return \"01-31-\" + str(-30 - target).zfill(4)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#124",
    "weight": 1.0
  },
  {
    "name": "DateDiff:4",
    "sat": "def sat(s: str, target=-10029):\n    assert all(c in \"0123457689-\" for c in s) and s[2] == s[5] == \"-\"\n    m, d, y = [int(n) for n in s.split(\"-\")]\n    assert m in range(1, 13)\n    assert d in range(1, 32)\n    if m in [4, 6, 9, 11]:\n        assert d <= 30\n    if m == 2:\n        assert d <= 29\n    return m - d - y == target",
    "ans_type": "str",
    "sol_header": "def sol(target=-10029):",
    "sol_docstring": "    \"\"\"Find a valid date mm-dd-yyyy such that the date, viewed as a mathematical expression, evaluates to target\n\n    -2029 => \"10-18-2021\" # because 10-18-2021 == -2029\n    \"\"\"",
    "sol_bodies": [
      "    if target >= -30:\n        return \"12-01-\" + str(11 - target).zfill(4)\n    return \"01-31-\" + str(-30 - target).zfill(4)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#124",
    "weight": 1.0
  },
  {
    "name": "StrangeSplit:0",
    "sat": "def sat(lst: List[str], s=\"Hello, world!\"):\n    if \" \" in s:\n        return \" \".join(lst) == s\n    if \",\" in s:\n        return \",\".join(lst) == s\n    return \"\".join(lst) == \"\".join(c for c in s if c.islower() and ord(c) % 2 == 0)",
    "ans_type": "List[str]",
    "sol_header": "def sol(s=\"Hello, world!\"):",
    "sol_docstring": "    \"\"\"Split s into strings if there is a space in s, otherwise split on commas if there is a comma, otherwise\n    return the list of lowercase letters with odd order (order of a = 0, b = 1, etc.)\n\n    \"a b c\" => [\"a\", \"b\", \"c\"]\n    \"a,b\" => [\"a\", \"b\"]\n    \"\"\"",
    "sol_bodies": [
      "    if \" \" in s:\n        return s.split(\" \")\n    if \",\" in s:\n        return s.split(\",\")\n    return [c for c in s if c.islower() and ord(c) % 2 == 0]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#125",
    "weight": 1.0
  },
  {
    "name": "StrangeSplit:1",
    "sat": "def sat(lst: List[str], s=\"Goodbye,spaces!\"):\n    if \" \" in s:\n        return \" \".join(lst) == s\n    if \",\" in s:\n        return \",\".join(lst) == s\n    return \"\".join(lst) == \"\".join(c for c in s if c.islower() and ord(c) % 2 == 0)",
    "ans_type": "List[str]",
    "sol_header": "def sol(s=\"Goodbye,spaces!\"):",
    "sol_docstring": "    \"\"\"Split s into strings if there is a space in s, otherwise split on commas if there is a comma, otherwise\n    return the list of lowercase letters with odd order (order of a = 0, b = 1, etc.)\n\n    \"a b c\" => [\"a\", \"b\", \"c\"]\n    \"a,b\" => [\"a\", \"b\"]\n    \"\"\"",
    "sol_bodies": [
      "    if \" \" in s:\n        return s.split(\" \")\n    if \",\" in s:\n        return s.split(\",\")\n    return [c for c in s if c.islower() and ord(c) % 2 == 0]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#125",
    "weight": 1.0
  },
  {
    "name": "StrangeSplit:2",
    "sat": "def sat(lst: List[str], s=\"abcbcbbedfsgfakbfjghskbne[pewte\"):\n    if \" \" in s:\n        return \" \".join(lst) == s\n    if \",\" in s:\n        return \",\".join(lst) == s\n    return \"\".join(lst) == \"\".join(c for c in s if c.islower() and ord(c) % 2 == 0)",
    "ans_type": "List[str]",
    "sol_header": "def sol(s=\"abcbcbbedfsgfakbfjghskbne[pewte\"):",
    "sol_docstring": "    \"\"\"Split s into strings if there is a space in s, otherwise split on commas if there is a comma, otherwise\n    return the list of lowercase letters with odd order (order of a = 0, b = 1, etc.)\n\n    \"a b c\" => [\"a\", \"b\", \"c\"]\n    \"a,b\" => [\"a\", \"b\"]\n    \"\"\"",
    "sol_bodies": [
      "    if \" \" in s:\n        return s.split(\" \")\n    if \",\" in s:\n        return s.split(\",\")\n    return [c for c in s if c.islower() and ord(c) % 2 == 0]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#125",
    "weight": 1.0
  },
  {
    "name": "StrangeSplit:3",
    "sat": "def sat(lst: List[str], s=\"wotekitex,textarinequo,do,machoki,balecethotuwy,jarynutextopimud,dethexifythuthyc\"):\n    if \" \" in s:\n        return \" \".join(lst) == s\n    if \",\" in s:\n        return \",\".join(lst) == s\n    return \"\".join(lst) == \"\".join(c for c in s if c.islower() and ord(c) % 2 == 0)",
    "ans_type": "List[str]",
    "sol_header": "def sol(s=\"wotekitex,textarinequo,do,machoki,balecethotuwy,jarynutextopimud,dethexifythuthyc\"):",
    "sol_docstring": "    \"\"\"Split s into strings if there is a space in s, otherwise split on commas if there is a comma, otherwise\n    return the list of lowercase letters with odd order (order of a = 0, b = 1, etc.)\n\n    \"a b c\" => [\"a\", \"b\", \"c\"]\n    \"a,b\" => [\"a\", \"b\"]\n    \"\"\"",
    "sol_bodies": [
      "    if \" \" in s:\n        return s.split(\" \")\n    if \",\" in s:\n        return s.split(\",\")\n    return [c for c in s if c.islower() and ord(c) % 2 == 0]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#125",
    "weight": 1.0
  },
  {
    "name": "StrangeSplit:4",
    "sat": "def sat(lst: List[str], s=\"jitys py sepocedynechuhegu lekinihiluwefax\"):\n    if \" \" in s:\n        return \" \".join(lst) == s\n    if \",\" in s:\n        return \",\".join(lst) == s\n    return \"\".join(lst) == \"\".join(c for c in s if c.islower() and ord(c) % 2 == 0)",
    "ans_type": "List[str]",
    "sol_header": "def sol(s=\"jitys py sepocedynechuhegu lekinihiluwefax\"):",
    "sol_docstring": "    \"\"\"Split s into strings if there is a space in s, otherwise split on commas if there is a comma, otherwise\n    return the list of lowercase letters with odd order (order of a = 0, b = 1, etc.)\n\n    \"a b c\" => [\"a\", \"b\", \"c\"]\n    \"a,b\" => [\"a\", \"b\"]\n    \"\"\"",
    "sol_bodies": [
      "    if \" \" in s:\n        return s.split(\" \")\n    if \",\" in s:\n        return s.split(\",\")\n    return [c for c in s if c.islower() and ord(c) % 2 == 0]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#125",
    "weight": 1.0
  },
  {
    "name": "IncreasingViolation:0",
    "sat": "def sat(violation: List[int], nums=[1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 17, 17, 18, 19, 20, 22, 24]):\n    if not violation:\n        return all(nums[i] < nums[i + 1] for i in range(len(nums) - 1))\n    i, j = violation\n    return 0 <= i < j and nums[i] >= nums[j]",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 17, 17, 18, 19, 20, 22, 24]):",
    "sol_docstring": "    \"\"\"\n    Find the indices of two entries that show that the list is not in increasing order.\n    If there are no violations (they are increasing), return an empty list.\n\n    [1,2,3,0,4,5,6] => [1, 3]\n    \"\"\"",
    "sol_bodies": [
      "    for i in range(len(nums) - 1):\n        if nums[i] >= nums[i + 1]:\n            return [i, i + 1]\n    return []"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#126",
    "weight": 1.0
  },
  {
    "name": "IncreasingViolation:1",
    "sat": "def sat(violation: List[int], nums=[10, 16, 19, 23, 25, 27, 27, 39, 39, 44, 52, 60, 64, 1, 92, 96]):\n    if not violation:\n        return all(nums[i] < nums[i + 1] for i in range(len(nums) - 1))\n    i, j = violation\n    return 0 <= i < j and nums[i] >= nums[j]",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[10, 16, 19, 23, 25, 27, 27, 39, 39, 44, 52, 60, 64, 1, 92, 96]):",
    "sol_docstring": "    \"\"\"\n    Find the indices of two entries that show that the list is not in increasing order.\n    If there are no violations (they are increasing), return an empty list.\n\n    [1,2,3,0,4,5,6] => [1, 3]\n    \"\"\"",
    "sol_bodies": [
      "    for i in range(len(nums) - 1):\n        if nums[i] >= nums[i + 1]:\n            return [i, i + 1]\n    return []"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#126",
    "weight": 1.0
  },
  {
    "name": "IncreasingViolation:2",
    "sat": "def sat(violation: List[int], nums=[10, 10, 10, 11, 17, 22, 31, 35, 42, 48, 61, 75, 90, 92]):\n    if not violation:\n        return all(nums[i] < nums[i + 1] for i in range(len(nums) - 1))\n    i, j = violation\n    return 0 <= i < j and nums[i] >= nums[j]",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[10, 10, 10, 11, 17, 22, 31, 35, 42, 48, 61, 75, 90, 92]):",
    "sol_docstring": "    \"\"\"\n    Find the indices of two entries that show that the list is not in increasing order.\n    If there are no violations (they are increasing), return an empty list.\n\n    [1,2,3,0,4,5,6] => [1, 3]\n    \"\"\"",
    "sol_bodies": [
      "    for i in range(len(nums) - 1):\n        if nums[i] >= nums[i + 1]:\n            return [i, i + 1]\n    return []"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#126",
    "weight": 1.0
  },
  {
    "name": "IncreasingViolation:3",
    "sat": "def sat(violation: List[int], nums=[5, 5, 84]):\n    if not violation:\n        return all(nums[i] < nums[i + 1] for i in range(len(nums) - 1))\n    i, j = violation\n    return 0 <= i < j and nums[i] >= nums[j]",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[5, 5, 84]):",
    "sol_docstring": "    \"\"\"\n    Find the indices of two entries that show that the list is not in increasing order.\n    If there are no violations (they are increasing), return an empty list.\n\n    [1,2,3,0,4,5,6] => [1, 3]\n    \"\"\"",
    "sol_bodies": [
      "    for i in range(len(nums) - 1):\n        if nums[i] >= nums[i + 1]:\n            return [i, i + 1]\n    return []"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#126",
    "weight": 1.0
  },
  {
    "name": "IncreasingViolation:4",
    "sat": "def sat(violation: List[int], nums=[2, 5, 12, 40, 41, 47, 52, 53, 60, 46, 64, 66, 71]):\n    if not violation:\n        return all(nums[i] < nums[i + 1] for i in range(len(nums) - 1))\n    i, j = violation\n    return 0 <= i < j and nums[i] >= nums[j]",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[2, 5, 12, 40, 41, 47, 52, 53, 60, 46, 64, 66, 71]):",
    "sol_docstring": "    \"\"\"\n    Find the indices of two entries that show that the list is not in increasing order.\n    If there are no violations (they are increasing), return an empty list.\n\n    [1,2,3,0,4,5,6] => [1, 3]\n    \"\"\"",
    "sol_bodies": [
      "    for i in range(len(nums) - 1):\n        if nums[i] >= nums[i + 1]:\n            return [i, i + 1]\n    return []"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#126",
    "weight": 1.0
  },
  {
    "name": "PrimeIntervalIntersection:0",
    "sat": "def sat(interval2: List[int], interval1=[32157, 93210127]):\n    intersection_width = min(interval1[1], interval2[1]) - max(interval1[0], interval2[0])\n    return intersection_width > 1 and all(intersection_width % i for i in range(2, intersection_width))",
    "ans_type": "List[int]",
    "sol_header": "def sol(interval1=[32157, 93210127]):",
    "sol_docstring": "    \"\"\"Find an interval whose intersection with a given interval has a width that is a prime integer.\n\n    [7, 100] => [0, 10]  # because 10-7=3 is prime\n    \"\"\"",
    "sol_bodies": [
      "    a, b = interval1\n    assert b - a >= 2\n    return [a, a + 2]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#127",
    "weight": 1.0
  },
  {
    "name": "PrimeIntervalIntersection:1",
    "sat": "def sat(interval2: List[int], interval1=[-3367, 4628]):\n    intersection_width = min(interval1[1], interval2[1]) - max(interval1[0], interval2[0])\n    return intersection_width > 1 and all(intersection_width % i for i in range(2, intersection_width))",
    "ans_type": "List[int]",
    "sol_header": "def sol(interval1=[-3367, 4628]):",
    "sol_docstring": "    \"\"\"Find an interval whose intersection with a given interval has a width that is a prime integer.\n\n    [7, 100] => [0, 10]  # because 10-7=3 is prime\n    \"\"\"",
    "sol_bodies": [
      "    a, b = interval1\n    assert b - a >= 2\n    return [a, a + 2]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#127",
    "weight": 1.0
  },
  {
    "name": "PrimeIntervalIntersection:2",
    "sat": "def sat(interval2: List[int], interval1=[0, 2381571]):\n    intersection_width = min(interval1[1], interval2[1]) - max(interval1[0], interval2[0])\n    return intersection_width > 1 and all(intersection_width % i for i in range(2, intersection_width))",
    "ans_type": "List[int]",
    "sol_header": "def sol(interval1=[0, 2381571]):",
    "sol_docstring": "    \"\"\"Find an interval whose intersection with a given interval has a width that is a prime integer.\n\n    [7, 100] => [0, 10]  # because 10-7=3 is prime\n    \"\"\"",
    "sol_bodies": [
      "    a, b = interval1\n    assert b - a >= 2\n    return [a, a + 2]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#127",
    "weight": 1.0
  },
  {
    "name": "PrimeIntervalIntersection:3",
    "sat": "def sat(interval2: List[int], interval1=[0, 1867]):\n    intersection_width = min(interval1[1], interval2[1]) - max(interval1[0], interval2[0])\n    return intersection_width > 1 and all(intersection_width % i for i in range(2, intersection_width))",
    "ans_type": "List[int]",
    "sol_header": "def sol(interval1=[0, 1867]):",
    "sol_docstring": "    \"\"\"Find an interval whose intersection with a given interval has a width that is a prime integer.\n\n    [7, 100] => [0, 10]  # because 10-7=3 is prime\n    \"\"\"",
    "sol_bodies": [
      "    a, b = interval1\n    assert b - a >= 2\n    return [a, a + 2]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#127",
    "weight": 1.0
  },
  {
    "name": "PrimeIntervalIntersection:4",
    "sat": "def sat(interval2: List[int], interval1=[-9017, 9358096]):\n    intersection_width = min(interval1[1], interval2[1]) - max(interval1[0], interval2[0])\n    return intersection_width > 1 and all(intersection_width % i for i in range(2, intersection_width))",
    "ans_type": "List[int]",
    "sol_header": "def sol(interval1=[-9017, 9358096]):",
    "sol_docstring": "    \"\"\"Find an interval whose intersection with a given interval has a width that is a prime integer.\n\n    [7, 100] => [0, 10]  # because 10-7=3 is prime\n    \"\"\"",
    "sol_bodies": [
      "    a, b = interval1\n    assert b - a >= 2\n    return [a, a + 2]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#127",
    "weight": 1.0
  },
  {
    "name": "ProductSigns:0",
    "sat": "def sat(n: int, arr=[1, 7, -20052, 14, -3, -11, 1025235, 14]):\n    tot = 0\n\n    for i in arr:\n        if tot >= 0:\n            tot += abs(i)\n        else:\n            tot -= abs(i)\n        if i < 0:\n            tot = -tot\n        elif i == 0:\n            tot = 0\n            break\n\n    return n == tot",
    "ans_type": "int",
    "sol_header": "def sol(arr=[1, 7, -20052, 14, -3, -11, 1025235, 14]):",
    "sol_docstring": "    \"\"\"Find the sum of the magnitudes of the elements in the array with a sign that is equal to the product of\n    the signs of the entries.\n\n    [1, -2, 3] => -6  # negative because there is one negative\n    \"\"\"",
    "sol_bodies": [
      "    tot = sum(abs(i) for i in arr)\n    if all(arr):\n        return tot if sum(i < 0 for i in arr) % 2 == 0 else -tot\n    return 0"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#128\n    \nEasy puzzle since the answer is computed in the puzzle, but it is okay to have a few trivial puzzles.",
    "weight": 1.0
  },
  {
    "name": "ProductSigns:1",
    "sat": "def sat(n: int, arr=[13, 38, 57, 6, -79, 85, -96, 60, 45, 37, 66]):\n    tot = 0\n\n    for i in arr:\n        if tot >= 0:\n            tot += abs(i)\n        else:\n            tot -= abs(i)\n        if i < 0:\n            tot = -tot\n        elif i == 0:\n            tot = 0\n            break\n\n    return n == tot",
    "ans_type": "int",
    "sol_header": "def sol(arr=[13, 38, 57, 6, -79, 85, -96, 60, 45, 37, 66]):",
    "sol_docstring": "    \"\"\"Find the sum of the magnitudes of the elements in the array with a sign that is equal to the product of\n    the signs of the entries.\n\n    [1, -2, 3] => -6  # negative because there is one negative\n    \"\"\"",
    "sol_bodies": [
      "    tot = sum(abs(i) for i in arr)\n    if all(arr):\n        return tot if sum(i < 0 for i in arr) % 2 == 0 else -tot\n    return 0"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#128\n    \nEasy puzzle since the answer is computed in the puzzle, but it is okay to have a few trivial puzzles.",
    "weight": 1.0
  },
  {
    "name": "ProductSigns:2",
    "sat": "def sat(n: int, arr=[-58, -49, -56, 75, 52, -54, -95]):\n    tot = 0\n\n    for i in arr:\n        if tot >= 0:\n            tot += abs(i)\n        else:\n            tot -= abs(i)\n        if i < 0:\n            tot = -tot\n        elif i == 0:\n            tot = 0\n            break\n\n    return n == tot",
    "ans_type": "int",
    "sol_header": "def sol(arr=[-58, -49, -56, 75, 52, -54, -95]):",
    "sol_docstring": "    \"\"\"Find the sum of the magnitudes of the elements in the array with a sign that is equal to the product of\n    the signs of the entries.\n\n    [1, -2, 3] => -6  # negative because there is one negative\n    \"\"\"",
    "sol_bodies": [
      "    tot = sum(abs(i) for i in arr)\n    if all(arr):\n        return tot if sum(i < 0 for i in arr) % 2 == 0 else -tot\n    return 0"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#128\n    \nEasy puzzle since the answer is computed in the puzzle, but it is okay to have a few trivial puzzles.",
    "weight": 1.0
  },
  {
    "name": "ProductSigns:3",
    "sat": "def sat(n: int, arr=[-41, 67, -27, -41, 16, 1, 66, -91, 4, 36, 10, -95, 7, 54, -97, -87]):\n    tot = 0\n\n    for i in arr:\n        if tot >= 0:\n            tot += abs(i)\n        else:\n            tot -= abs(i)\n        if i < 0:\n            tot = -tot\n        elif i == 0:\n            tot = 0\n            break\n\n    return n == tot",
    "ans_type": "int",
    "sol_header": "def sol(arr=[-41, 67, -27, -41, 16, 1, 66, -91, 4, 36, 10, -95, 7, 54, -97, -87]):",
    "sol_docstring": "    \"\"\"Find the sum of the magnitudes of the elements in the array with a sign that is equal to the product of\n    the signs of the entries.\n\n    [1, -2, 3] => -6  # negative because there is one negative\n    \"\"\"",
    "sol_bodies": [
      "    tot = sum(abs(i) for i in arr)\n    if all(arr):\n        return tot if sum(i < 0 for i in arr) % 2 == 0 else -tot\n    return 0"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#128\n    \nEasy puzzle since the answer is computed in the puzzle, but it is okay to have a few trivial puzzles.",
    "weight": 1.0
  },
  {
    "name": "ProductSigns:4",
    "sat": "def sat(n: int, arr=[-62, 46, -83, -14]):\n    tot = 0\n\n    for i in arr:\n        if tot >= 0:\n            tot += abs(i)\n        else:\n            tot -= abs(i)\n        if i < 0:\n            tot = -tot\n        elif i == 0:\n            tot = 0\n            break\n\n    return n == tot",
    "ans_type": "int",
    "sol_header": "def sol(arr=[-62, 46, -83, -14]):",
    "sol_docstring": "    \"\"\"Find the sum of the magnitudes of the elements in the array with a sign that is equal to the product of\n    the signs of the entries.\n\n    [1, -2, 3] => -6  # negative because there is one negative\n    \"\"\"",
    "sol_bodies": [
      "    tot = sum(abs(i) for i in arr)\n    if all(arr):\n        return tot if sum(i < 0 for i in arr) % 2 == 0 else -tot\n    return 0"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#128\n    \nEasy puzzle since the answer is computed in the puzzle, but it is okay to have a few trivial puzzles.",
    "weight": 1.0
  },
  {
    "name": "LexPath:0",
    "sat": "def sat(path: List[int], k=10, edges=[[2, 4], [3], [4, 1], [4], [0]]):\n\n    def check(prefix):\n        for i, j in zip(path, prefix):\n            if i != j:\n                return i < j\n        return len(prefix) >= k or all(check(prefix + [i]) for i in edges[prefix[-1]])\n\n    return all(path[i] in edges[path[i - 1]] for i in range(1, k)) and all(check([i]) for i in range(len(edges)))",
    "ans_type": "List[int]",
    "sol_header": "def sol(k=10, edges=[[2, 4], [3], [4, 1], [4], [0]]):",
    "sol_docstring": "    \"\"\"Find the lexicographically smallest path of length k in graph with given edge matrix (and no dead ends)\n\n    k=3, edges=[[1,3], [0, 3], [2], [3]] => [0, 1, 0] # because 0-1 and 1-0 are edges\n    \"\"\"",
    "sol_bodies": [
      "    path = []\n    while len(path) < k:\n        path.append(min(edges[path[-1]]) if path else 0)\n    return path"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#129",
    "weight": 1.0
  },
  {
    "name": "LexPath:1",
    "sat": "def sat(path: List[int], k=12, edges=[[2, 1], [0], [1, 3, 0], [1, 0, 3]]):\n\n    def check(prefix):\n        for i, j in zip(path, prefix):\n            if i != j:\n                return i < j\n        return len(prefix) >= k or all(check(prefix + [i]) for i in edges[prefix[-1]])\n\n    return all(path[i] in edges[path[i - 1]] for i in range(1, k)) and all(check([i]) for i in range(len(edges)))",
    "ans_type": "List[int]",
    "sol_header": "def sol(k=12, edges=[[2, 1], [0], [1, 3, 0], [1, 0, 3]]):",
    "sol_docstring": "    \"\"\"Find the lexicographically smallest path of length k in graph with given edge matrix (and no dead ends)\n\n    k=3, edges=[[1,3], [0, 3], [2], [3]] => [0, 1, 0] # because 0-1 and 1-0 are edges\n    \"\"\"",
    "sol_bodies": [
      "    path = []\n    while len(path) < k:\n        path.append(min(edges[path[-1]]) if path else 0)\n    return path"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#129",
    "weight": 1.0
  },
  {
    "name": "LexPath:2",
    "sat": "def sat(path: List[int], k=0, edges=[[2, 0], [0, 3, 1, 2], [3, 0, 1, 2], [1, 2]]):\n\n    def check(prefix):\n        for i, j in zip(path, prefix):\n            if i != j:\n                return i < j\n        return len(prefix) >= k or all(check(prefix + [i]) for i in edges[prefix[-1]])\n\n    return all(path[i] in edges[path[i - 1]] for i in range(1, k)) and all(check([i]) for i in range(len(edges)))",
    "ans_type": "List[int]",
    "sol_header": "def sol(k=0, edges=[[2, 0], [0, 3, 1, 2], [3, 0, 1, 2], [1, 2]]):",
    "sol_docstring": "    \"\"\"Find the lexicographically smallest path of length k in graph with given edge matrix (and no dead ends)\n\n    k=3, edges=[[1,3], [0, 3], [2], [3]] => [0, 1, 0] # because 0-1 and 1-0 are edges\n    \"\"\"",
    "sol_bodies": [
      "    path = []\n    while len(path) < k:\n        path.append(min(edges[path[-1]]) if path else 0)\n    return path"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#129",
    "weight": 1.0
  },
  {
    "name": "LexPath:3",
    "sat": "def sat(path: List[int], k=14, edges=[[2], [2, 1, 0], [2, 1, 0]]):\n\n    def check(prefix):\n        for i, j in zip(path, prefix):\n            if i != j:\n                return i < j\n        return len(prefix) >= k or all(check(prefix + [i]) for i in edges[prefix[-1]])\n\n    return all(path[i] in edges[path[i - 1]] for i in range(1, k)) and all(check([i]) for i in range(len(edges)))",
    "ans_type": "List[int]",
    "sol_header": "def sol(k=14, edges=[[2], [2, 1, 0], [2, 1, 0]]):",
    "sol_docstring": "    \"\"\"Find the lexicographically smallest path of length k in graph with given edge matrix (and no dead ends)\n\n    k=3, edges=[[1,3], [0, 3], [2], [3]] => [0, 1, 0] # because 0-1 and 1-0 are edges\n    \"\"\"",
    "sol_bodies": [
      "    path = []\n    while len(path) < k:\n        path.append(min(edges[path[-1]]) if path else 0)\n    return path"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#129",
    "weight": 1.0
  },
  {
    "name": "LexPath:4",
    "sat": "def sat(path: List[int], k=1, edges=[[2, 0, 3, 1], [3, 1], [2, 0, 1], [0]]):\n\n    def check(prefix):\n        for i, j in zip(path, prefix):\n            if i != j:\n                return i < j\n        return len(prefix) >= k or all(check(prefix + [i]) for i in edges[prefix[-1]])\n\n    return all(path[i] in edges[path[i - 1]] for i in range(1, k)) and all(check([i]) for i in range(len(edges)))",
    "ans_type": "List[int]",
    "sol_header": "def sol(k=1, edges=[[2, 0, 3, 1], [3, 1], [2, 0, 1], [0]]):",
    "sol_docstring": "    \"\"\"Find the lexicographically smallest path of length k in graph with given edge matrix (and no dead ends)\n\n    k=3, edges=[[1,3], [0, 3], [2], [3]] => [0, 1, 0] # because 0-1 and 1-0 are edges\n    \"\"\"",
    "sol_bodies": [
      "    path = []\n    while len(path) < k:\n        path.append(min(edges[path[-1]]) if path else 0)\n    return path"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#129",
    "weight": 1.0
  },
  {
    "name": "Tribonacci:0",
    "sat": "def sat(seq: List[int], length=181):\n    return all(seq[n] == (seq[n - 1] + seq[n - 2] + seq[n + 1] if n % 2 else 1 + n // 2) for n in range(length))",
    "ans_type": "List[int]",
    "sol_header": "def sol(length=181):",
    "sol_docstring": "    \"\"\"Find a sequence where seq[n] == 1 + n / 2 for even n, and\n    seq[n] == seq[n - 1] + seq[n - 2] + seq[n + 1] for odd n < length.\"\"\"",
    "sol_bodies": [
      "    seq = []\n    while len(seq) <= length:\n        n = len(seq)\n        if n % 2 == 0:\n            seq.append(1 + n // 2)\n        else:\n            seq.append(sum(seq[-2:]) + (1 + (n + 1) // 2))\n    return seq + [0]  # appending 0 at the end makes it easier so that seq[n-2] == 0 for n == 1"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#130\n\nThis puzzle is a bit harder because the definition is slightly different at seq[1].",
    "weight": 1.0
  },
  {
    "name": "Tribonacci:1",
    "sat": "def sat(seq: List[int], length=412):\n    return all(seq[n] == (seq[n - 1] + seq[n - 2] + seq[n + 1] if n % 2 else 1 + n // 2) for n in range(length))",
    "ans_type": "List[int]",
    "sol_header": "def sol(length=412):",
    "sol_docstring": "    \"\"\"Find a sequence where seq[n] == 1 + n / 2 for even n, and\n    seq[n] == seq[n - 1] + seq[n - 2] + seq[n + 1] for odd n < length.\"\"\"",
    "sol_bodies": [
      "    seq = []\n    while len(seq) <= length:\n        n = len(seq)\n        if n % 2 == 0:\n            seq.append(1 + n // 2)\n        else:\n            seq.append(sum(seq[-2:]) + (1 + (n + 1) // 2))\n    return seq + [0]  # appending 0 at the end makes it easier so that seq[n-2] == 0 for n == 1"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#130\n\nThis puzzle is a bit harder because the definition is slightly different at seq[1].",
    "weight": 1.0
  },
  {
    "name": "Tribonacci:2",
    "sat": "def sat(seq: List[int], length=482):\n    return all(seq[n] == (seq[n - 1] + seq[n - 2] + seq[n + 1] if n % 2 else 1 + n // 2) for n in range(length))",
    "ans_type": "List[int]",
    "sol_header": "def sol(length=482):",
    "sol_docstring": "    \"\"\"Find a sequence where seq[n] == 1 + n / 2 for even n, and\n    seq[n] == seq[n - 1] + seq[n - 2] + seq[n + 1] for odd n < length.\"\"\"",
    "sol_bodies": [
      "    seq = []\n    while len(seq) <= length:\n        n = len(seq)\n        if n % 2 == 0:\n            seq.append(1 + n // 2)\n        else:\n            seq.append(sum(seq[-2:]) + (1 + (n + 1) // 2))\n    return seq + [0]  # appending 0 at the end makes it easier so that seq[n-2] == 0 for n == 1"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#130\n\nThis puzzle is a bit harder because the definition is slightly different at seq[1].",
    "weight": 1.0
  },
  {
    "name": "Tribonacci:3",
    "sat": "def sat(seq: List[int], length=50):\n    return all(seq[n] == (seq[n - 1] + seq[n - 2] + seq[n + 1] if n % 2 else 1 + n // 2) for n in range(length))",
    "ans_type": "List[int]",
    "sol_header": "def sol(length=50):",
    "sol_docstring": "    \"\"\"Find a sequence where seq[n] == 1 + n / 2 for even n, and\n    seq[n] == seq[n - 1] + seq[n - 2] + seq[n + 1] for odd n < length.\"\"\"",
    "sol_bodies": [
      "    seq = []\n    while len(seq) <= length:\n        n = len(seq)\n        if n % 2 == 0:\n            seq.append(1 + n // 2)\n        else:\n            seq.append(sum(seq[-2:]) + (1 + (n + 1) // 2))\n    return seq + [0]  # appending 0 at the end makes it easier so that seq[n-2] == 0 for n == 1"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#130\n\nThis puzzle is a bit harder because the definition is slightly different at seq[1].",
    "weight": 1.0
  },
  {
    "name": "Tribonacci:4",
    "sat": "def sat(seq: List[int], length=761):\n    return all(seq[n] == (seq[n - 1] + seq[n - 2] + seq[n + 1] if n % 2 else 1 + n // 2) for n in range(length))",
    "ans_type": "List[int]",
    "sol_header": "def sol(length=761):",
    "sol_docstring": "    \"\"\"Find a sequence where seq[n] == 1 + n / 2 for even n, and\n    seq[n] == seq[n - 1] + seq[n - 2] + seq[n + 1] for odd n < length.\"\"\"",
    "sol_bodies": [
      "    seq = []\n    while len(seq) <= length:\n        n = len(seq)\n        if n % 2 == 0:\n            seq.append(1 + n // 2)\n        else:\n            seq.append(sum(seq[-2:]) + (1 + (n + 1) // 2))\n    return seq + [0]  # appending 0 at the end makes it easier so that seq[n-2] == 0 for n == 1"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#130\n\nThis puzzle is a bit harder because the definition is slightly different at seq[1].",
    "weight": 1.0
  },
  {
    "name": "OddProduct:0",
    "sat": "def sat(prod: int, n=14235764939971075543215213):\n\n    for c in str(n):\n        i = int(c)\n        if i % 2 == 1:\n            assert prod % i == 0\n            prod //= i\n    return prod == any(int(c) % 2 for c in str(n))",
    "ans_type": "int",
    "sol_header": "def sol(n=14235764939971075543215213):",
    "sol_docstring": "    \"\"\"Return the product of the odd digits in n, or 0 if there aren't any\n\n    12345 => 15\n    \"\"\"",
    "sol_bodies": [
      "    if any(int(c) % 2 for c in str(n)):\n        prod = 1\n        for c in str(n):\n            if int(c) % 2 == 1:\n                prod *= int(c)\n        return prod\n    return 0"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#131",
    "weight": 1.0
  },
  {
    "name": "OddProduct:1",
    "sat": "def sat(prod: int, n=8502):\n\n    for c in str(n):\n        i = int(c)\n        if i % 2 == 1:\n            assert prod % i == 0\n            prod //= i\n    return prod == any(int(c) % 2 for c in str(n))",
    "ans_type": "int",
    "sol_header": "def sol(n=8502):",
    "sol_docstring": "    \"\"\"Return the product of the odd digits in n, or 0 if there aren't any\n\n    12345 => 15\n    \"\"\"",
    "sol_bodies": [
      "    if any(int(c) % 2 for c in str(n)):\n        prod = 1\n        for c in str(n):\n            if int(c) % 2 == 1:\n                prod *= int(c)\n        return prod\n    return 0"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#131",
    "weight": 1.0
  },
  {
    "name": "OddProduct:2",
    "sat": "def sat(prod: int, n=95973):\n\n    for c in str(n):\n        i = int(c)\n        if i % 2 == 1:\n            assert prod % i == 0\n            prod //= i\n    return prod == any(int(c) % 2 for c in str(n))",
    "ans_type": "int",
    "sol_header": "def sol(n=95973):",
    "sol_docstring": "    \"\"\"Return the product of the odd digits in n, or 0 if there aren't any\n\n    12345 => 15\n    \"\"\"",
    "sol_bodies": [
      "    if any(int(c) % 2 for c in str(n)):\n        prod = 1\n        for c in str(n):\n            if int(c) % 2 == 1:\n                prod *= int(c)\n        return prod\n    return 0"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#131",
    "weight": 1.0
  },
  {
    "name": "OddProduct:3",
    "sat": "def sat(prod: int, n=0):\n\n    for c in str(n):\n        i = int(c)\n        if i % 2 == 1:\n            assert prod % i == 0\n            prod //= i\n    return prod == any(int(c) % 2 for c in str(n))",
    "ans_type": "int",
    "sol_header": "def sol(n=0):",
    "sol_docstring": "    \"\"\"Return the product of the odd digits in n, or 0 if there aren't any\n\n    12345 => 15\n    \"\"\"",
    "sol_bodies": [
      "    if any(int(c) % 2 for c in str(n)):\n        prod = 1\n        for c in str(n):\n            if int(c) % 2 == 1:\n                prod *= int(c)\n        return prod\n    return 0"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#131",
    "weight": 1.0
  },
  {
    "name": "OddProduct:4",
    "sat": "def sat(prod: int, n=331901673137376013):\n\n    for c in str(n):\n        i = int(c)\n        if i % 2 == 1:\n            assert prod % i == 0\n            prod //= i\n    return prod == any(int(c) % 2 for c in str(n))",
    "ans_type": "int",
    "sol_header": "def sol(n=331901673137376013):",
    "sol_docstring": "    \"\"\"Return the product of the odd digits in n, or 0 if there aren't any\n\n    12345 => 15\n    \"\"\"",
    "sol_bodies": [
      "    if any(int(c) % 2 for c in str(n)):\n        prod = 1\n        for c in str(n):\n            if int(c) % 2 == 1:\n                prod *= int(c)\n        return prod\n    return 0"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#131",
    "weight": 1.0
  },
  {
    "name": "ValidBracketSubsequence:0",
    "sat": "def sat(valid: str, s=\"]]]]]]]]]]]]]]]]][][][][]]]]]]]]]]][[[][[][[[[[][][][]][[[[[[[[[[[[[[[[[[\"):\n    assert valid in s\n    depths = [0]\n    for c in valid:\n        if c == \"[\":\n            depths.append(depths[-1] + 1)\n        elif c == \"]\":\n            depths.append(depths[-1] - 1)\n    return depths[-1] == 0 and min(depths) == 0 and max(depths) > 1",
    "ans_type": "str",
    "sol_header": "def sol(s=\"]]]]]]]]]]]]]]]]][][][][]]]]]]]]]]][[[][[][[[[[][][][]][[[[[[[[[[[[[[[[[[\"):",
    "sol_docstring": "    \"\"\"Find a valid substring of s that contains matching brackets, at least one of which is nested\n\n    \"]][][[]]]\" => \"[][[]]\"\n    \"\"\"",
    "sol_bodies": [
      "    left = []\n    nested = False\n    for i, c in enumerate(s):\n        if c == \"[\":\n            if len(left) == 2:\n                left = [left[1], i]\n                nested = False\n            else:\n                left.append(i)\n        elif c == \"]\":\n            if not left:\n                continue\n            if len(left) == 1 and nested:\n                return s[left[0]:i + 1]\n            elif len(left) == 2:\n                nested = True\n            left.pop()\n    assert False",
      "    import re\n    return re.search(r\"\\[(\\[\\])+\\]\", s).group(0)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#132",
    "weight": 1.0
  },
  {
    "name": "ValidBracketSubsequence:1",
    "sat": "def sat(valid: str, s=\"[[[[][][][][][][]][[]][]][[[][]][[]]\"):\n    assert valid in s\n    depths = [0]\n    for c in valid:\n        if c == \"[\":\n            depths.append(depths[-1] + 1)\n        elif c == \"]\":\n            depths.append(depths[-1] - 1)\n    return depths[-1] == 0 and min(depths) == 0 and max(depths) > 1",
    "ans_type": "str",
    "sol_header": "def sol(s=\"[[[[][][][][][][]][[]][]][[[][]][[]]\"):",
    "sol_docstring": "    \"\"\"Find a valid substring of s that contains matching brackets, at least one of which is nested\n\n    \"]][][[]]]\" => \"[][[]]\"\n    \"\"\"",
    "sol_bodies": [
      "    left = []\n    nested = False\n    for i, c in enumerate(s):\n        if c == \"[\":\n            if len(left) == 2:\n                left = [left[1], i]\n                nested = False\n            else:\n                left.append(i)\n        elif c == \"]\":\n            if not left:\n                continue\n            if len(left) == 1 and nested:\n                return s[left[0]:i + 1]\n            elif len(left) == 2:\n                nested = True\n            left.pop()\n    assert False",
      "    import re\n    return re.search(r\"\\[(\\[\\])+\\]\", s).group(0)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#132",
    "weight": 1.0
  },
  {
    "name": "ValidBracketSubsequence:2",
    "sat": "def sat(valid: str, s=\"]][[]][[][[[[][]]][[][[[][\"):\n    assert valid in s\n    depths = [0]\n    for c in valid:\n        if c == \"[\":\n            depths.append(depths[-1] + 1)\n        elif c == \"]\":\n            depths.append(depths[-1] - 1)\n    return depths[-1] == 0 and min(depths) == 0 and max(depths) > 1",
    "ans_type": "str",
    "sol_header": "def sol(s=\"]][[]][[][[[[][]]][[][[[][\"):",
    "sol_docstring": "    \"\"\"Find a valid substring of s that contains matching brackets, at least one of which is nested\n\n    \"]][][[]]]\" => \"[][[]]\"\n    \"\"\"",
    "sol_bodies": [
      "    left = []\n    nested = False\n    for i, c in enumerate(s):\n        if c == \"[\":\n            if len(left) == 2:\n                left = [left[1], i]\n                nested = False\n            else:\n                left.append(i)\n        elif c == \"]\":\n            if not left:\n                continue\n            if len(left) == 1 and nested:\n                return s[left[0]:i + 1]\n            elif len(left) == 2:\n                nested = True\n            left.pop()\n    assert False",
      "    import re\n    return re.search(r\"\\[(\\[\\])+\\]\", s).group(0)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#132",
    "weight": 1.0
  },
  {
    "name": "ValidBracketSubsequence:3",
    "sat": "def sat(valid: str, s=\"][]]][]][[[][][][][][][][]][[]][[]]][[\"):\n    assert valid in s\n    depths = [0]\n    for c in valid:\n        if c == \"[\":\n            depths.append(depths[-1] + 1)\n        elif c == \"]\":\n            depths.append(depths[-1] - 1)\n    return depths[-1] == 0 and min(depths) == 0 and max(depths) > 1",
    "ans_type": "str",
    "sol_header": "def sol(s=\"][]]][]][[[][][][][][][][]][[]][[]]][[\"):",
    "sol_docstring": "    \"\"\"Find a valid substring of s that contains matching brackets, at least one of which is nested\n\n    \"]][][[]]]\" => \"[][[]]\"\n    \"\"\"",
    "sol_bodies": [
      "    left = []\n    nested = False\n    for i, c in enumerate(s):\n        if c == \"[\":\n            if len(left) == 2:\n                left = [left[1], i]\n                nested = False\n            else:\n                left.append(i)\n        elif c == \"]\":\n            if not left:\n                continue\n            if len(left) == 1 and nested:\n                return s[left[0]:i + 1]\n            elif len(left) == 2:\n                nested = True\n            left.pop()\n    assert False",
      "    import re\n    return re.search(r\"\\[(\\[\\])+\\]\", s).group(0)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#132",
    "weight": 1.0
  },
  {
    "name": "ValidBracketSubsequence:4",
    "sat": "def sat(valid: str, s=\"[[[][][[[[[[]][[]][[[][][][][][][][][]][\"):\n    assert valid in s\n    depths = [0]\n    for c in valid:\n        if c == \"[\":\n            depths.append(depths[-1] + 1)\n        elif c == \"]\":\n            depths.append(depths[-1] - 1)\n    return depths[-1] == 0 and min(depths) == 0 and max(depths) > 1",
    "ans_type": "str",
    "sol_header": "def sol(s=\"[[[][][[[[[[]][[]][[[][][][][][][][][]][\"):",
    "sol_docstring": "    \"\"\"Find a valid substring of s that contains matching brackets, at least one of which is nested\n\n    \"]][][[]]]\" => \"[][[]]\"\n    \"\"\"",
    "sol_bodies": [
      "    left = []\n    nested = False\n    for i, c in enumerate(s):\n        if c == \"[\":\n            if len(left) == 2:\n                left = [left[1], i]\n                nested = False\n            else:\n                left.append(i)\n        elif c == \"]\":\n            if not left:\n                continue\n            if len(left) == 1 and nested:\n                return s[left[0]:i + 1]\n            elif len(left) == 2:\n                nested = True\n            left.pop()\n    assert False",
      "    import re\n    return re.search(r\"\\[(\\[\\])+\\]\", s).group(0)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#132",
    "weight": 1.0
  },
  {
    "name": "CeilingSquares:0",
    "sat": "def sat(running_squares: List[int], x=[201.1, 301.4, -18.1, 1244122.0, 10101.0101, 10000000.0]):\n    for i, v in enumerate(x):\n        ceiling = int(v) + (v > 0 and not v.is_integer())\n        square = ceiling ** 2\n        if running_squares[i] != square + (i > 0 and running_squares[i - 1]):\n            return False\n\n    return len(running_squares) == len(x)",
    "ans_type": "List[int]",
    "sol_header": "def sol(x=[201.1, 301.4, -18.1, 1244122.0, 10101.0101, 10000000.0]):",
    "sol_docstring": "    \"\"\"Round each float in x up to the next integer and return the running total of the integer squares\n\n    [2.4, 3.7, 0.1] => [9, 25, 26]\n    \"\"\"",
    "sol_bodies": [
      "    from math import ceil\n    running_squares = []\n    tot = 0\n    for v in x:\n        tot += ceil(v) ** 2\n        running_squares.append(tot)\n    return running_squares"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#133",
    "weight": 1.0
  },
  {
    "name": "CeilingSquares:1",
    "sat": "def sat(running_squares: List[int], x=[9.650000588598111, -8.077324515062926, 2.649836251190308, 0.7153951297675469, -1.9181388431489204, 2.7112675102232675, -6.813543009125667, 7.029917456417941, -2.821293215347511]):\n    for i, v in enumerate(x):\n        ceiling = int(v) + (v > 0 and not v.is_integer())\n        square = ceiling ** 2\n        if running_squares[i] != square + (i > 0 and running_squares[i - 1]):\n            return False\n\n    return len(running_squares) == len(x)",
    "ans_type": "List[int]",
    "sol_header": "def sol(x=[9.650000588598111, -8.077324515062926, 2.649836251190308, 0.7153951297675469, -1.9181388431489204, 2.7112675102232675, -6.813543009125667, 7.029917456417941, -2.821293215347511]):",
    "sol_docstring": "    \"\"\"Round each float in x up to the next integer and return the running total of the integer squares\n\n    [2.4, 3.7, 0.1] => [9, 25, 26]\n    \"\"\"",
    "sol_bodies": [
      "    from math import ceil\n    running_squares = []\n    tot = 0\n    for v in x:\n        tot += ceil(v) ** 2\n        running_squares.append(tot)\n    return running_squares"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#133",
    "weight": 1.0
  },
  {
    "name": "CeilingSquares:2",
    "sat": "def sat(running_squares: List[int], x=[-2.6340066467560996, 4.322176523433114, -1.5079841130054472, -8.985060763252859, -9.074227436202381]):\n    for i, v in enumerate(x):\n        ceiling = int(v) + (v > 0 and not v.is_integer())\n        square = ceiling ** 2\n        if running_squares[i] != square + (i > 0 and running_squares[i - 1]):\n            return False\n\n    return len(running_squares) == len(x)",
    "ans_type": "List[int]",
    "sol_header": "def sol(x=[-2.6340066467560996, 4.322176523433114, -1.5079841130054472, -8.985060763252859, -9.074227436202381]):",
    "sol_docstring": "    \"\"\"Round each float in x up to the next integer and return the running total of the integer squares\n\n    [2.4, 3.7, 0.1] => [9, 25, 26]\n    \"\"\"",
    "sol_bodies": [
      "    from math import ceil\n    running_squares = []\n    tot = 0\n    for v in x:\n        tot += ceil(v) ** 2\n        running_squares.append(tot)\n    return running_squares"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#133",
    "weight": 1.0
  },
  {
    "name": "CeilingSquares:3",
    "sat": "def sat(running_squares: List[int], x=[8.257528417306844, -3.7315204726521944, 9.856438333047798, -7.228652980051451, -6.343263566703614, -2.5469735103334834, -3.2923884429492762, -2.991171802818804]):\n    for i, v in enumerate(x):\n        ceiling = int(v) + (v > 0 and not v.is_integer())\n        square = ceiling ** 2\n        if running_squares[i] != square + (i > 0 and running_squares[i - 1]):\n            return False\n\n    return len(running_squares) == len(x)",
    "ans_type": "List[int]",
    "sol_header": "def sol(x=[8.257528417306844, -3.7315204726521944, 9.856438333047798, -7.228652980051451, -6.343263566703614, -2.5469735103334834, -3.2923884429492762, -2.991171802818804]):",
    "sol_docstring": "    \"\"\"Round each float in x up to the next integer and return the running total of the integer squares\n\n    [2.4, 3.7, 0.1] => [9, 25, 26]\n    \"\"\"",
    "sol_bodies": [
      "    from math import ceil\n    running_squares = []\n    tot = 0\n    for v in x:\n        tot += ceil(v) ** 2\n        running_squares.append(tot)\n    return running_squares"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#133",
    "weight": 1.0
  },
  {
    "name": "CeilingSquares:4",
    "sat": "def sat(running_squares: List[int], x=[6.608264692857215, -2.204391758043112, 3.8328091843913974, 4.122558586426074, 6.79452673601816, -1.8532801154281735, 6.207567645800566]):\n    for i, v in enumerate(x):\n        ceiling = int(v) + (v > 0 and not v.is_integer())\n        square = ceiling ** 2\n        if running_squares[i] != square + (i > 0 and running_squares[i - 1]):\n            return False\n\n    return len(running_squares) == len(x)",
    "ans_type": "List[int]",
    "sol_header": "def sol(x=[6.608264692857215, -2.204391758043112, 3.8328091843913974, 4.122558586426074, 6.79452673601816, -1.8532801154281735, 6.207567645800566]):",
    "sol_docstring": "    \"\"\"Round each float in x up to the next integer and return the running total of the integer squares\n\n    [2.4, 3.7, 0.1] => [9, 25, 26]\n    \"\"\"",
    "sol_bodies": [
      "    from math import ceil\n    running_squares = []\n    tot = 0\n    for v in x:\n        tot += ceil(v) ** 2\n        running_squares.append(tot)\n    return running_squares"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#133",
    "weight": 1.0
  },
  {
    "name": "LastLetters:0",
    "sat": "def sat(y: List[bool], x=['Hello, world!', 'cat', '', 'a test', 'test a', 'i e', 'o', 'I O U', 'You and I']):\n    assert len(x) == len(y)\n    for s, b in zip(x, y):\n        if len(s.split(\" \")[-1]) == 1:\n            assert b == s[-1].isalpha()\n        else:\n            assert not b\n    return True",
    "ans_type": "List[bool]",
    "sol_header": "def sol(x=['Hello, world!', 'cat', '', 'a test', 'test a', 'i e', 'o', 'I O U', 'You and I']):",
    "sol_docstring": "    \"\"\"Determine, for each string in x, whether the last character is an isolated letter\n\n    [\"a b c\", \"abc\"] => [True, False]\n    \"\"\"",
    "sol_bodies": [
      "    return [len(s.split(\" \")[-1]) == 1 and s[-1].isalpha() for s in x]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#134",
    "weight": 1.0
  },
  {
    "name": "LastLetters:1",
    "sat": "def sat(y: List[bool], x=['bymuthuzuxanehun tuwugycyhewavazow 1', ' x', 'womavyra', 'nitex quufojythobubetexto e']):\n    assert len(x) == len(y)\n    for s, b in zip(x, y):\n        if len(s.split(\" \")[-1]) == 1:\n            assert b == s[-1].isalpha()\n        else:\n            assert not b\n    return True",
    "ans_type": "List[bool]",
    "sol_header": "def sol(x=['bymuthuzuxanehun tuwugycyhewavazow 1', ' x', 'womavyra', 'nitex quufojythobubetexto e']):",
    "sol_docstring": "    \"\"\"Determine, for each string in x, whether the last character is an isolated letter\n\n    [\"a b c\", \"abc\"] => [True, False]\n    \"\"\"",
    "sol_bodies": [
      "    return [len(s.split(\" \")[-1]) == 1 and s[-1].isalpha() for s in x]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#134",
    "weight": 1.0
  },
  {
    "name": "LastLetters:2",
    "sat": "def sat(y: List[bool], x=[' D', '', 'xamywathozuch 6', 'zulopatextathusyro *', ' y', 'wuvoguthixytexte textydytoquizazuquyt', 'texta duthu [', 'zebozegifelutaxyquix cabach d', ' C', 'rodumelidet quutaquukythusyb', ' %', 'b (', 'kabezanolipesethyba dyvechikathuwi n', 'fyzotextyhukokydihuc 8', '', 'memadapuc y', 'thavajythysojecywut g', 'wekirevajezexyfitex j', '', 'sekytextyko C', 'pe sobekujodefypo', 'dyjagiko chyfin', ' v', 'nisytextinexochych  ', '', 'ni', 'l zitufutachot R']):\n    assert len(x) == len(y)\n    for s, b in zip(x, y):\n        if len(s.split(\" \")[-1]) == 1:\n            assert b == s[-1].isalpha()\n        else:\n            assert not b\n    return True",
    "ans_type": "List[bool]",
    "sol_header": "def sol(x=[' D', '', 'xamywathozuch 6', 'zulopatextathusyro *', ' y', 'wuvoguthixytexte textydytoquizazuquyt', 'texta duthu [', 'zebozegifelutaxyquix cabach d', ' C', 'rodumelidet quutaquukythusyb', ' %', 'b (', 'kabezanolipesethyba dyvechikathuwi n', 'fyzotextyhukokydihuc 8', '', 'memadapuc y', 'thavajythysojecywut g', 'wekirevajezexyfitex j', '', 'sekytextyko C', 'pe sobekujodefypo', 'dyjagiko chyfin', ' v', 'nisytextinexochych  ', '', 'ni', 'l zitufutachot R']):",
    "sol_docstring": "    \"\"\"Determine, for each string in x, whether the last character is an isolated letter\n\n    [\"a b c\", \"abc\"] => [True, False]\n    \"\"\"",
    "sol_bodies": [
      "    return [len(s.split(\" \")[-1]) == 1 and s[-1].isalpha() for s in x]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#134",
    "weight": 1.0
  },
  {
    "name": "LastLetters:3",
    "sat": "def sat(y: List[bool], x=['ryxadec', 'pyfixotibujadyxe', 'mopubywewexi witethig 7', ' !', 'jethi sed c', 'lotextusavufubynyb', 'wuxesafetatextysima pebutextiwafufok', 'tuchonip', ' S', 'xyvovikofutex pylekazuquekedajota E', 'wik xofoxujegerigubo ?', 'gipimakude 1', ' O', ' ^', 'lakiquuvuhenugu vajyquy P', ' 6', 'fezore', 'vabithin textusichytilejocoke', ' B', 'lasuthasebuvy que &', 'mymanuzuzudyc thazufys y', '', ' ?', 'gecohywelawu', 'wath']):\n    assert len(x) == len(y)\n    for s, b in zip(x, y):\n        if len(s.split(\" \")[-1]) == 1:\n            assert b == s[-1].isalpha()\n        else:\n            assert not b\n    return True",
    "ans_type": "List[bool]",
    "sol_header": "def sol(x=['ryxadec', 'pyfixotibujadyxe', 'mopubywewexi witethig 7', ' !', 'jethi sed c', 'lotextusavufubynyb', 'wuxesafetatextysima pebutextiwafufok', 'tuchonip', ' S', 'xyvovikofutex pylekazuquekedajota E', 'wik xofoxujegerigubo ?', 'gipimakude 1', ' O', ' ^', 'lakiquuvuhenugu vajyquy P', ' 6', 'fezore', 'vabithin textusichytilejocoke', ' B', 'lasuthasebuvy que &', 'mymanuzuzudyc thazufys y', '', ' ?', 'gecohywelawu', 'wath']):",
    "sol_docstring": "    \"\"\"Determine, for each string in x, whether the last character is an isolated letter\n\n    [\"a b c\", \"abc\"] => [True, False]\n    \"\"\"",
    "sol_bodies": [
      "    return [len(s.split(\" \")[-1]) == 1 and s[-1].isalpha() for s in x]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#134",
    "weight": 1.0
  },
  {
    "name": "LastLetters:4",
    "sat": "def sat(y: List[bool], x=['ribesaquotextytazech #', '', ' Y', 'tychawicemafethupi 3', 'laz kakumynohyw', 'quotextifethixyvo pofukixa l']):\n    assert len(x) == len(y)\n    for s, b in zip(x, y):\n        if len(s.split(\" \")[-1]) == 1:\n            assert b == s[-1].isalpha()\n        else:\n            assert not b\n    return True",
    "ans_type": "List[bool]",
    "sol_header": "def sol(x=['ribesaquotextytazech #', '', ' Y', 'tychawicemafethupi 3', 'laz kakumynohyw', 'quotextifethixyvo pofukixa l']):",
    "sol_docstring": "    \"\"\"Determine, for each string in x, whether the last character is an isolated letter\n\n    [\"a b c\", \"abc\"] => [True, False]\n    \"\"\"",
    "sol_bodies": [
      "    return [len(s.split(\" \")[-1]) == 1 and s[-1].isalpha() for s in x]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#134",
    "weight": 1.0
  },
  {
    "name": "Drops:0",
    "sat": "def sat(drop_indexes: List[int], nums=[2, -1, 14, 8, 9, 9, 8, 4, 2, 4, 3, -100, 1000, 18, 4, -2, -3, -3, 1, 0]):\n    d = 0\n    for i in range(1, len(nums)):\n        if nums[i] < nums[i - 1]:\n            assert drop_indexes[d] == i\n            d += 1\n    return d == len(drop_indexes)",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[2, -1, 14, 8, 9, 9, 8, 4, 2, 4, 3, -100, 1000, 18, 4, -2, -3, -3, 1, 0]):",
    "sol_docstring": "    \"\"\"Find the indices for which the nums array drops.\n\n    [1,2,3,0,2,4,1] => [3,6]\n    \"\"\"",
    "sol_bodies": [
      "    return [i for i in range(1, len(nums)) if nums[i] < nums[i - 1]]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#135",
    "weight": 1.0
  },
  {
    "name": "LargestNegSmallestPos:0",
    "sat": "def sat(extremes: List[int], nums=[-10, -4, 100, -40, 2, 2, 3, 17, -50, -25, 18, 41, 9, 11, 15]):\n    neg, pos = extremes\n    if neg == 0:\n        assert nums == [] or min(nums) >= 0\n    else:\n        assert neg < 0 and neg in nums and all(n >= 0 or n <= neg for n in nums)\n    if pos == 0:\n        assert nums == [] or max(nums) <= 0\n    else:\n        assert pos > 0 and pos in nums and all(n <= 0 or n >= pos for n in nums)\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[-10, -4, 100, -40, 2, 2, 3, 17, -50, -25, 18, 41, 9, 11, 15]):",
    "sol_docstring": "    \"\"\"Find the largest negative ans smallest positive numbers (or 0 if none)\n\n    [-2, -4, 14, 50] => [-2, 14]\n    [3, 22] => [0, 3]\n    \"\"\"",
    "sol_bodies": [
      "    pos = [n for n in nums if n > 0]\n    neg = [n for n in nums if n < 0]\n    return [max(neg) if neg else 0, min(pos) if pos else 0]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#136",
    "weight": 1.0
  },
  {
    "name": "LargestNegSmallestPos:1",
    "sat": "def sat(extremes: List[int], nums=[-566, -114, -971]):\n    neg, pos = extremes\n    if neg == 0:\n        assert nums == [] or min(nums) >= 0\n    else:\n        assert neg < 0 and neg in nums and all(n >= 0 or n <= neg for n in nums)\n    if pos == 0:\n        assert nums == [] or max(nums) <= 0\n    else:\n        assert pos > 0 and pos in nums and all(n <= 0 or n >= pos for n in nums)\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[-566, -114, -971]):",
    "sol_docstring": "    \"\"\"Find the largest negative ans smallest positive numbers (or 0 if none)\n\n    [-2, -4, 14, 50] => [-2, 14]\n    [3, 22] => [0, 3]\n    \"\"\"",
    "sol_bodies": [
      "    pos = [n for n in nums if n > 0]\n    neg = [n for n in nums if n < 0]\n    return [max(neg) if neg else 0, min(pos) if pos else 0]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#136",
    "weight": 1.0
  },
  {
    "name": "LargestNegSmallestPos:2",
    "sat": "def sat(extremes: List[int], nums=[-90, -123, 227, 905, 613, 735, 988, -215, -190, 272, -920, 581, 212, 317]):\n    neg, pos = extremes\n    if neg == 0:\n        assert nums == [] or min(nums) >= 0\n    else:\n        assert neg < 0 and neg in nums and all(n >= 0 or n <= neg for n in nums)\n    if pos == 0:\n        assert nums == [] or max(nums) <= 0\n    else:\n        assert pos > 0 and pos in nums and all(n <= 0 or n >= pos for n in nums)\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[-90, -123, 227, 905, 613, 735, 988, -215, -190, 272, -920, 581, 212, 317]):",
    "sol_docstring": "    \"\"\"Find the largest negative ans smallest positive numbers (or 0 if none)\n\n    [-2, -4, 14, 50] => [-2, 14]\n    [3, 22] => [0, 3]\n    \"\"\"",
    "sol_bodies": [
      "    pos = [n for n in nums if n > 0]\n    neg = [n for n in nums if n < 0]\n    return [max(neg) if neg else 0, min(pos) if pos else 0]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#136",
    "weight": 1.0
  },
  {
    "name": "LargestNegSmallestPos:3",
    "sat": "def sat(extremes: List[int], nums=[]):\n    neg, pos = extremes\n    if neg == 0:\n        assert nums == [] or min(nums) >= 0\n    else:\n        assert neg < 0 and neg in nums and all(n >= 0 or n <= neg for n in nums)\n    if pos == 0:\n        assert nums == [] or max(nums) <= 0\n    else:\n        assert pos > 0 and pos in nums and all(n <= 0 or n >= pos for n in nums)\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[]):",
    "sol_docstring": "    \"\"\"Find the largest negative ans smallest positive numbers (or 0 if none)\n\n    [-2, -4, 14, 50] => [-2, 14]\n    [3, 22] => [0, 3]\n    \"\"\"",
    "sol_bodies": [
      "    pos = [n for n in nums if n > 0]\n    neg = [n for n in nums if n < 0]\n    return [max(neg) if neg else 0, min(pos) if pos else 0]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#136",
    "weight": 1.0
  },
  {
    "name": "LargestNegSmallestPos:4",
    "sat": "def sat(extremes: List[int], nums=[-719, 922, 52, -861, 495, 327, -955, -301, -542, -257, -712]):\n    neg, pos = extremes\n    if neg == 0:\n        assert nums == [] or min(nums) >= 0\n    else:\n        assert neg < 0 and neg in nums and all(n >= 0 or n <= neg for n in nums)\n    if pos == 0:\n        assert nums == [] or max(nums) <= 0\n    else:\n        assert pos > 0 and pos in nums and all(n <= 0 or n >= pos for n in nums)\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[-719, 922, 52, -861, 495, 327, -955, -301, -542, -257, -712]):",
    "sol_docstring": "    \"\"\"Find the largest negative ans smallest positive numbers (or 0 if none)\n\n    [-2, -4, 14, 50] => [-2, 14]\n    [3, 22] => [0, 3]\n    \"\"\"",
    "sol_bodies": [
      "    pos = [n for n in nums if n > 0]\n    neg = [n for n in nums if n < 0]\n    return [max(neg) if neg else 0, min(pos) if pos else 0]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#136",
    "weight": 1.0
  },
  {
    "name": "LargestStringNum:0",
    "sat": "def sat(x: float, str_nums=['1,3', '-11', '17.5', '-11', '2', '2.2', '2,2', '4', '-18,18', '99.09']):\n    found = False\n    for s in str_nums:\n        y = float(s.replace(\",\", \".\"))\n        assert y <= x\n        if y == x:\n            found = True\n    return found",
    "ans_type": "float",
    "sol_header": "def sol(str_nums=['1,3', '-11', '17.5', '-11', '2', '2.2', '2,2', '4', '-18,18', '99.09']):",
    "sol_docstring": "    \"\"\"Find the largest number where commas or periods are decimal points\n\n    [\"99,9\", \"100\"] => 100.0\n    \"\"\"",
    "sol_bodies": [
      "    return max(float(s.replace(\",\", \".\")) for s in str_nums)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#137",
    "weight": 1.0
  },
  {
    "name": "LargestStringNum:1",
    "sat": "def sat(x: float, str_nums=['31.39683666368859', '73,72440474051831', '72.34060469647804', '73']):\n    found = False\n    for s in str_nums:\n        y = float(s.replace(\",\", \".\"))\n        assert y <= x\n        if y == x:\n            found = True\n    return found",
    "ans_type": "float",
    "sol_header": "def sol(str_nums=['31.39683666368859', '73,72440474051831', '72.34060469647804', '73']):",
    "sol_docstring": "    \"\"\"Find the largest number where commas or periods are decimal points\n\n    [\"99,9\", \"100\"] => 100.0\n    \"\"\"",
    "sol_bodies": [
      "    return max(float(s.replace(\",\", \".\")) for s in str_nums)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#137",
    "weight": 1.0
  },
  {
    "name": "LargestStringNum:2",
    "sat": "def sat(x: float, str_nums=['-6', '68', '-100', '42,449764091997196', '-29,24317717823544', '-41.15991554949425', '93.91903086808122', '-40', '95,64713000645497', '10.987133348617888', '-12', '-30', '-67.5420580170809', '58', '66,77819624303987', '-37.8232752327492', '8', '-99', '98']):\n    found = False\n    for s in str_nums:\n        y = float(s.replace(\",\", \".\"))\n        assert y <= x\n        if y == x:\n            found = True\n    return found",
    "ans_type": "float",
    "sol_header": "def sol(str_nums=['-6', '68', '-100', '42,449764091997196', '-29,24317717823544', '-41.15991554949425', '93.91903086808122', '-40', '95,64713000645497', '10.987133348617888', '-12', '-30', '-67.5420580170809', '58', '66,77819624303987', '-37.8232752327492', '8', '-99', '98']):",
    "sol_docstring": "    \"\"\"Find the largest number where commas or periods are decimal points\n\n    [\"99,9\", \"100\"] => 100.0\n    \"\"\"",
    "sol_bodies": [
      "    return max(float(s.replace(\",\", \".\")) for s in str_nums)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#137",
    "weight": 1.0
  },
  {
    "name": "LargestStringNum:3",
    "sat": "def sat(x: float, str_nums=['-13', '-9,405268331489253', '86,60853263788738', '1.6303719756540573', '25,638544353710756']):\n    found = False\n    for s in str_nums:\n        y = float(s.replace(\",\", \".\"))\n        assert y <= x\n        if y == x:\n            found = True\n    return found",
    "ans_type": "float",
    "sol_header": "def sol(str_nums=['-13', '-9,405268331489253', '86,60853263788738', '1.6303719756540573', '25,638544353710756']):",
    "sol_docstring": "    \"\"\"Find the largest number where commas or periods are decimal points\n\n    [\"99,9\", \"100\"] => 100.0\n    \"\"\"",
    "sol_bodies": [
      "    return max(float(s.replace(\",\", \".\")) for s in str_nums)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#137",
    "weight": 1.0
  },
  {
    "name": "LargestStringNum:4",
    "sat": "def sat(x: float, str_nums=['-100', '43', '12,380225941003388', '-10', '55', '40,34567619114577', '45', '-26,348841728512014', '-79.01130149535118', '48', '57', '-87', '24,13286574459906', '8', '57.12265333169756', '19,864244993734175', '24', '-82', '22']):\n    found = False\n    for s in str_nums:\n        y = float(s.replace(\",\", \".\"))\n        assert y <= x\n        if y == x:\n            found = True\n    return found",
    "ans_type": "float",
    "sol_header": "def sol(str_nums=['-100', '43', '12,380225941003388', '-10', '55', '40,34567619114577', '45', '-26,348841728512014', '-79.01130149535118', '48', '57', '-87', '24,13286574459906', '8', '57.12265333169756', '19,864244993734175', '24', '-82', '22']):",
    "sol_docstring": "    \"\"\"Find the largest number where commas or periods are decimal points\n\n    [\"99,9\", \"100\"] => 100.0\n    \"\"\"",
    "sol_bodies": [
      "    return max(float(s.replace(\",\", \".\")) for s in str_nums)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#137",
    "weight": 1.0
  },
  {
    "name": "Even4Sum:0",
    "sat": "def sat(summands: List[int], n=1234567890):\n    return sum(summands) == n and min(summands) > 0 and len(summands) == 4 and all(s % 2 == 0 for s in summands)",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=1234567890):",
    "sol_docstring": "    \"\"\"Find four positive even integers whose sum is n\n\n    100 => [22, 24, 26, 28]\"\"\"",
    "sol_bodies": [
      "    return [2] * 3 + [n - 6]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#138",
    "weight": 1.0
  },
  {
    "name": "Even4Sum:1",
    "sat": "def sat(summands: List[int], n=8):\n    return sum(summands) == n and min(summands) > 0 and len(summands) == 4 and all(s % 2 == 0 for s in summands)",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=8):",
    "sol_docstring": "    \"\"\"Find four positive even integers whose sum is n\n\n    100 => [22, 24, 26, 28]\"\"\"",
    "sol_bodies": [
      "    return [2] * 3 + [n - 6]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#138",
    "weight": 1.0
  },
  {
    "name": "Even4Sum:2",
    "sat": "def sat(summands: List[int], n=10):\n    return sum(summands) == n and min(summands) > 0 and len(summands) == 4 and all(s % 2 == 0 for s in summands)",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=10):",
    "sol_docstring": "    \"\"\"Find four positive even integers whose sum is n\n\n    100 => [22, 24, 26, 28]\"\"\"",
    "sol_bodies": [
      "    return [2] * 3 + [n - 6]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#138",
    "weight": 1.0
  },
  {
    "name": "Even4Sum:3",
    "sat": "def sat(summands: List[int], n=12):\n    return sum(summands) == n and min(summands) > 0 and len(summands) == 4 and all(s % 2 == 0 for s in summands)",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=12):",
    "sol_docstring": "    \"\"\"Find four positive even integers whose sum is n\n\n    100 => [22, 24, 26, 28]\"\"\"",
    "sol_bodies": [
      "    return [2] * 3 + [n - 6]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#138",
    "weight": 1.0
  },
  {
    "name": "Even4Sum:4",
    "sat": "def sat(summands: List[int], n=465665808):\n    return sum(summands) == n and min(summands) > 0 and len(summands) == 4 and all(s % 2 == 0 for s in summands)",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=465665808):",
    "sol_docstring": "    \"\"\"Find four positive even integers whose sum is n\n\n    100 => [22, 24, 26, 28]\"\"\"",
    "sol_bodies": [
      "    return [2] * 3 + [n - 6]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#138",
    "weight": 1.0
  },
  {
    "name": "InverseSuperFactorial:0",
    "sat": "def sat(nums: List[int], super_factorials=[1, 2, 1]):\n    for i, sf in enumerate(super_factorials):\n        n = nums[i]\n        for j in range(n, 0, -1):\n            k = j ** (n - j + 1)\n            assert sf % k == 0, f\"{i} {sf} {j} {n}\"\n            sf //= k\n        assert sf == 1\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(super_factorials=[1, 2, 1]):",
    "sol_docstring": "    \"\"\"The super-factorial of n is n! (n-1)! (n-2)! ... 1!. Invert a given list of super-factorials.\n\n    [1, 2, 2, 12] => [1, 2, 2, 3]\n    \"\"\"",
    "sol_bodies": [
      "    queue = set(super_factorials)\n    cache = {}\n    n = 1\n    fact = 1\n    s_fact = 1\n    while queue:\n        fact *= n\n        s_fact *= fact\n        if s_fact in queue:\n            queue.remove(s_fact)\n            cache[s_fact] = n\n        n += 1\n    return [cache[sf] for sf in super_factorials]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#139",
    "weight": 1.0
  },
  {
    "name": "InverseSuperFactorial:1",
    "sat": "def sat(nums: List[int], super_factorials=[24883200, 288, 24883200, 1834933472251084800000, 125411328000, 5056584744960000, 2, 125411328000, 34560, 1834933472251084800000, 34560]):\n    for i, sf in enumerate(super_factorials):\n        n = nums[i]\n        for j in range(n, 0, -1):\n            k = j ** (n - j + 1)\n            assert sf % k == 0, f\"{i} {sf} {j} {n}\"\n            sf //= k\n        assert sf == 1\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(super_factorials=[24883200, 288, 24883200, 1834933472251084800000, 125411328000, 5056584744960000, 2, 125411328000, 34560, 1834933472251084800000, 34560]):",
    "sol_docstring": "    \"\"\"The super-factorial of n is n! (n-1)! (n-2)! ... 1!. Invert a given list of super-factorials.\n\n    [1, 2, 2, 12] => [1, 2, 2, 3]\n    \"\"\"",
    "sol_bodies": [
      "    queue = set(super_factorials)\n    cache = {}\n    n = 1\n    fact = 1\n    s_fact = 1\n    while queue:\n        fact *= n\n        s_fact *= fact\n        if s_fact in queue:\n            queue.remove(s_fact)\n            cache[s_fact] = n\n        n += 1\n    return [cache[sf] for sf in super_factorials]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#139",
    "weight": 1.0
  },
  {
    "name": "InverseSuperFactorial:2",
    "sat": "def sat(nums: List[int], super_factorials=[2, 2, 12, 2, 2, 1, 1834933472251084800000, 1, 24883200, 24883200, 1834933472251084800000]):\n    for i, sf in enumerate(super_factorials):\n        n = nums[i]\n        for j in range(n, 0, -1):\n            k = j ** (n - j + 1)\n            assert sf % k == 0, f\"{i} {sf} {j} {n}\"\n            sf //= k\n        assert sf == 1\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(super_factorials=[2, 2, 12, 2, 2, 1, 1834933472251084800000, 1, 24883200, 24883200, 1834933472251084800000]):",
    "sol_docstring": "    \"\"\"The super-factorial of n is n! (n-1)! (n-2)! ... 1!. Invert a given list of super-factorials.\n\n    [1, 2, 2, 12] => [1, 2, 2, 3]\n    \"\"\"",
    "sol_bodies": [
      "    queue = set(super_factorials)\n    cache = {}\n    n = 1\n    fact = 1\n    s_fact = 1\n    while queue:\n        fact *= n\n        s_fact *= fact\n        if s_fact in queue:\n            queue.remove(s_fact)\n            cache[s_fact] = n\n        n += 1\n    return [cache[sf] for sf in super_factorials]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#139",
    "weight": 1.0
  },
  {
    "name": "InverseSuperFactorial:3",
    "sat": "def sat(nums: List[int], super_factorials=[1, 1, 12, 2, 12, 12, 2, 2, 12, 2, 24883200]):\n    for i, sf in enumerate(super_factorials):\n        n = nums[i]\n        for j in range(n, 0, -1):\n            k = j ** (n - j + 1)\n            assert sf % k == 0, f\"{i} {sf} {j} {n}\"\n            sf //= k\n        assert sf == 1\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(super_factorials=[1, 1, 12, 2, 12, 12, 2, 2, 12, 2, 24883200]):",
    "sol_docstring": "    \"\"\"The super-factorial of n is n! (n-1)! (n-2)! ... 1!. Invert a given list of super-factorials.\n\n    [1, 2, 2, 12] => [1, 2, 2, 3]\n    \"\"\"",
    "sol_bodies": [
      "    queue = set(super_factorials)\n    cache = {}\n    n = 1\n    fact = 1\n    s_fact = 1\n    while queue:\n        fact *= n\n        s_fact *= fact\n        if s_fact in queue:\n            queue.remove(s_fact)\n            cache[s_fact] = n\n        n += 1\n    return [cache[sf] for sf in super_factorials]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#139",
    "weight": 1.0
  },
  {
    "name": "InverseSuperFactorial:4",
    "sat": "def sat(nums: List[int], super_factorials=[1, 125411328000, 34560, 288, 24883200, 1, 12, 2, 5056584744960000, 1834933472251084800000, 125411328000]):\n    for i, sf in enumerate(super_factorials):\n        n = nums[i]\n        for j in range(n, 0, -1):\n            k = j ** (n - j + 1)\n            assert sf % k == 0, f\"{i} {sf} {j} {n}\"\n            sf //= k\n        assert sf == 1\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(super_factorials=[1, 125411328000, 34560, 288, 24883200, 1, 12, 2, 5056584744960000, 1834933472251084800000, 125411328000]):",
    "sol_docstring": "    \"\"\"The super-factorial of n is n! (n-1)! (n-2)! ... 1!. Invert a given list of super-factorials.\n\n    [1, 2, 2, 12] => [1, 2, 2, 3]\n    \"\"\"",
    "sol_bodies": [
      "    queue = set(super_factorials)\n    cache = {}\n    n = 1\n    fact = 1\n    s_fact = 1\n    while queue:\n        fact *= n\n        s_fact *= fact\n        if s_fact in queue:\n            queue.remove(s_fact)\n            cache[s_fact] = n\n        n += 1\n    return [cache[sf] for sf in super_factorials]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#139",
    "weight": 1.0
  },
  {
    "name": "ExpandSpaces:0",
    "sat": "def sat(orig: str, target=\"-Hello,_world!__This_is-so-easy!-\"):\n    assert \"_\" not in orig and \"-\" not in orig\n    new = \"\"\n    space_count = 0\n    for c in orig:\n        if c == \" \":\n            space_count += 1\n        else:\n            new += (\"-\" if space_count > 2 else \"_\" * space_count)\n            new += c\n            space_count = 0\n    new += (\"-\" if space_count > 2 else \"_\" * space_count)\n    return new == target",
    "ans_type": "str",
    "sol_header": "def sol(target=\"-Hello,_world!__This_is-so-easy!-\"):",
    "sol_docstring": "    \"\"\"Find a string such that, when three or more spaces are compacted to a '-' and one or two spaces are\n    replaced by underscores, leads to the target.\n\n    \"_o-k__?-\" => \"  o        k  ?     \"\n    \"\"\"",
    "sol_bodies": [
      "    return target.replace(\"-\", \" \" * 3).replace(\"_\", \" \")"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#140",
    "weight": 1.0
  },
  {
    "name": "ExpandSpaces:1",
    "sat": "def sat(orig: str, target=\"H-d\"):\n    assert \"_\" not in orig and \"-\" not in orig\n    new = \"\"\n    space_count = 0\n    for c in orig:\n        if c == \" \":\n            space_count += 1\n        else:\n            new += (\"-\" if space_count > 2 else \"_\" * space_count)\n            new += c\n            space_count = 0\n    new += (\"-\" if space_count > 2 else \"_\" * space_count)\n    return new == target",
    "ans_type": "str",
    "sol_header": "def sol(target=\"H-d\"):",
    "sol_docstring": "    \"\"\"Find a string such that, when three or more spaces are compacted to a '-' and one or two spaces are\n    replaced by underscores, leads to the target.\n\n    \"_o-k__?-\" => \"  o        k  ?     \"\n    \"\"\"",
    "sol_bodies": [
      "    return target.replace(\"-\", \" \" * 3).replace(\"_\", \" \")"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#140",
    "weight": 1.0
  },
  {
    "name": "ExpandSpaces:2",
    "sat": "def sat(orig: str, target=\"\"):\n    assert \"_\" not in orig and \"-\" not in orig\n    new = \"\"\n    space_count = 0\n    for c in orig:\n        if c == \" \":\n            space_count += 1\n        else:\n            new += (\"-\" if space_count > 2 else \"_\" * space_count)\n            new += c\n            space_count = 0\n    new += (\"-\" if space_count > 2 else \"_\" * space_count)\n    return new == target",
    "ans_type": "str",
    "sol_header": "def sol(target=\"\"):",
    "sol_docstring": "    \"\"\"Find a string such that, when three or more spaces are compacted to a '-' and one or two spaces are\n    replaced by underscores, leads to the target.\n\n    \"_o-k__?-\" => \"  o        k  ?     \"\n    \"\"\"",
    "sol_bodies": [
      "    return target.replace(\"-\", \" \" * 3).replace(\"_\", \" \")"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#140",
    "weight": 1.0
  },
  {
    "name": "ExpandSpaces:3",
    "sat": "def sat(orig: str, target=\"H@zoxyquygupaxofirefavuvubadigwQ\"):\n    assert \"_\" not in orig and \"-\" not in orig\n    new = \"\"\n    space_count = 0\n    for c in orig:\n        if c == \" \":\n            space_count += 1\n        else:\n            new += (\"-\" if space_count > 2 else \"_\" * space_count)\n            new += c\n            space_count = 0\n    new += (\"-\" if space_count > 2 else \"_\" * space_count)\n    return new == target",
    "ans_type": "str",
    "sol_header": "def sol(target=\"H@zoxyquygupaxofirefavuvubadigwQ\"):",
    "sol_docstring": "    \"\"\"Find a string such that, when three or more spaces are compacted to a '-' and one or two spaces are\n    replaced by underscores, leads to the target.\n\n    \"_o-k__?-\" => \"  o        k  ?     \"\n    \"\"\"",
    "sol_bodies": [
      "    return target.replace(\"-\", \" \" * 3).replace(\"_\", \" \")"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#140",
    "weight": 1.0
  },
  {
    "name": "ExpandSpaces:4",
    "sat": "def sat(orig: str, target=\"-O!6quag\"):\n    assert \"_\" not in orig and \"-\" not in orig\n    new = \"\"\n    space_count = 0\n    for c in orig:\n        if c == \" \":\n            space_count += 1\n        else:\n            new += (\"-\" if space_count > 2 else \"_\" * space_count)\n            new += c\n            space_count = 0\n    new += (\"-\" if space_count > 2 else \"_\" * space_count)\n    return new == target",
    "ans_type": "str",
    "sol_header": "def sol(target=\"-O!6quag\"):",
    "sol_docstring": "    \"\"\"Find a string such that, when three or more spaces are compacted to a '-' and one or two spaces are\n    replaced by underscores, leads to the target.\n\n    \"_o-k__?-\" => \"  o        k  ?     \"\n    \"\"\"",
    "sol_bodies": [
      "    return target.replace(\"-\", \" \" * 3).replace(\"_\", \" \")"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#140",
    "weight": 1.0
  },
  {
    "name": "FilenameOK:0",
    "sat": "def sat(valids: List[str], filenames=['cat.txt', '!jog.dll', '31F9.html', 'Is this okay?.txt', '.exe', '']):\n    assert len(valids) == len(filenames)\n    for v, f in zip(valids, filenames):\n        n_digits = sum(c.isdigit() for c in f)\n        if v == \"Yes\":\n            prefix, ext = f.split(\".\")\n            assert ext in [\"txt\", \"dll\", \"exe\"] and prefix[0].isalpha() and n_digits < 4\n        else:\n            assert v == \"No\"\n            assert f.split(\".\")[1:] not in [['txt'], ['dll'], ['exe']] or not f[0].isalpha() or n_digits > 3\n    return True",
    "ans_type": "List[str]",
    "sol_header": "def sol(filenames=['cat.txt', '!jog.dll', '31F9.html', 'Is this okay?.txt', '.exe', '']):",
    "sol_docstring": "    \"\"\"Return a list of Yes/No strings that determine whether candidate filename is valid. A valid filename\n    should end in .txt, .exe, or .dll, and should have at most three digits, no additional periods\n\n    [\"train.jpg\", \"doc10234.txt\", \"3eadme.txt\"] = [\"No\", \"No\", \"Yes\"]\n    \"\"\"",
    "sol_bodies": [
      "    return [\"Yes\" if\n            f.split(\".\")[1:] in [['txt'], ['dll'], ['exe']] and f[0].isalpha() and sum(c.isdigit() for c in f) < 4\n            else \"No\"\n            for f in filenames]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#141",
    "weight": 1.0
  },
  {
    "name": "FilenameOK:1",
    "sat": "def sat(valids: List[str], filenames=['mtherylP.exe', 'Qbatw.mp4', 'DtextadusypykagusakoA.exe', 'Bmigusocycyth].mp4', ')kutextulelucezyQ.tar.zip', 'nchelycozitixiM.exe', 'wrichevyxi.exe', 'Nvew0.txt', 'dnochofazehaxaharop!.dll', '8mefasechuxacyxg.txt', 'isijufotextydycifu3.mp4', 'vmithujydet[.mp4']):\n    assert len(valids) == len(filenames)\n    for v, f in zip(valids, filenames):\n        n_digits = sum(c.isdigit() for c in f)\n        if v == \"Yes\":\n            prefix, ext = f.split(\".\")\n            assert ext in [\"txt\", \"dll\", \"exe\"] and prefix[0].isalpha() and n_digits < 4\n        else:\n            assert v == \"No\"\n            assert f.split(\".\")[1:] not in [['txt'], ['dll'], ['exe']] or not f[0].isalpha() or n_digits > 3\n    return True",
    "ans_type": "List[str]",
    "sol_header": "def sol(filenames=['mtherylP.exe', 'Qbatw.mp4', 'DtextadusypykagusakoA.exe', 'Bmigusocycyth].mp4', ')kutextulelucezyQ.tar.zip', 'nchelycozitixiM.exe', 'wrichevyxi.exe', 'Nvew0.txt', 'dnochofazehaxaharop!.dll', '8mefasechuxacyxg.txt', 'isijufotextydycifu3.mp4', 'vmithujydet[.mp4']):",
    "sol_docstring": "    \"\"\"Return a list of Yes/No strings that determine whether candidate filename is valid. A valid filename\n    should end in .txt, .exe, or .dll, and should have at most three digits, no additional periods\n\n    [\"train.jpg\", \"doc10234.txt\", \"3eadme.txt\"] = [\"No\", \"No\", \"Yes\"]\n    \"\"\"",
    "sol_bodies": [
      "    return [\"Yes\" if\n            f.split(\".\")[1:] in [['txt'], ['dll'], ['exe']] and f[0].isalpha() and sum(c.isdigit() for c in f) < 4\n            else \"No\"\n            for f in filenames]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#141",
    "weight": 1.0
  },
  {
    "name": "FilenameOK:2",
    "sat": "def sat(valids: List[str], filenames=['WbytyjachuquithX.tar.zip', 'Pzuzuvetextr.mp4', 'Xcymem[.tar.zip', 'AhypagacheJ.dll', 'JbubefichiwyryzydochC.exe', '8te;.dll', 'wtextoL.mp4', 'mthowexezixexuqd.exe', '^nehapu4.txt', 'Hsovap].txt', 'Cchoxe>.tar.zip', '1quobejugichewabechek#.dll']):\n    assert len(valids) == len(filenames)\n    for v, f in zip(valids, filenames):\n        n_digits = sum(c.isdigit() for c in f)\n        if v == \"Yes\":\n            prefix, ext = f.split(\".\")\n            assert ext in [\"txt\", \"dll\", \"exe\"] and prefix[0].isalpha() and n_digits < 4\n        else:\n            assert v == \"No\"\n            assert f.split(\".\")[1:] not in [['txt'], ['dll'], ['exe']] or not f[0].isalpha() or n_digits > 3\n    return True",
    "ans_type": "List[str]",
    "sol_header": "def sol(filenames=['WbytyjachuquithX.tar.zip', 'Pzuzuvetextr.mp4', 'Xcymem[.tar.zip', 'AhypagacheJ.dll', 'JbubefichiwyryzydochC.exe', '8te;.dll', 'wtextoL.mp4', 'mthowexezixexuqd.exe', '^nehapu4.txt', 'Hsovap].txt', 'Cchoxe>.tar.zip', '1quobejugichewabechek#.dll']):",
    "sol_docstring": "    \"\"\"Return a list of Yes/No strings that determine whether candidate filename is valid. A valid filename\n    should end in .txt, .exe, or .dll, and should have at most three digits, no additional periods\n\n    [\"train.jpg\", \"doc10234.txt\", \"3eadme.txt\"] = [\"No\", \"No\", \"Yes\"]\n    \"\"\"",
    "sol_bodies": [
      "    return [\"Yes\" if\n            f.split(\".\")[1:] in [['txt'], ['dll'], ['exe']] and f[0].isalpha() and sum(c.isdigit() for c in f) < 4\n            else \"No\"\n            for f in filenames]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#141",
    "weight": 1.0
  },
  {
    "name": "FilenameOK:3",
    "sat": "def sat(valids: List[str], filenames=['+thunidothytextofi..txt', 'Onithytemolysefel$.mp4', 'Clychifopozesuxijuvo.mp4']):\n    assert len(valids) == len(filenames)\n    for v, f in zip(valids, filenames):\n        n_digits = sum(c.isdigit() for c in f)\n        if v == \"Yes\":\n            prefix, ext = f.split(\".\")\n            assert ext in [\"txt\", \"dll\", \"exe\"] and prefix[0].isalpha() and n_digits < 4\n        else:\n            assert v == \"No\"\n            assert f.split(\".\")[1:] not in [['txt'], ['dll'], ['exe']] or not f[0].isalpha() or n_digits > 3\n    return True",
    "ans_type": "List[str]",
    "sol_header": "def sol(filenames=['+thunidothytextofi..txt', 'Onithytemolysefel$.mp4', 'Clychifopozesuxijuvo.mp4']):",
    "sol_docstring": "    \"\"\"Return a list of Yes/No strings that determine whether candidate filename is valid. A valid filename\n    should end in .txt, .exe, or .dll, and should have at most three digits, no additional periods\n\n    [\"train.jpg\", \"doc10234.txt\", \"3eadme.txt\"] = [\"No\", \"No\", \"Yes\"]\n    \"\"\"",
    "sol_bodies": [
      "    return [\"Yes\" if\n            f.split(\".\")[1:] in [['txt'], ['dll'], ['exe']] and f[0].isalpha() and sum(c.isdigit() for c in f) < 4\n            else \"No\"\n            for f in filenames]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#141",
    "weight": 1.0
  },
  {
    "name": "FilenameOK:4",
    "sat": "def sat(valids: List[str], filenames=['XsiwemunarytextatecY.exe', 'Dfanachofegerevojyv].dll', ')pethymula0.exe', '4dihurudyjahatextov.exe', '0hyxZ.tar.zip', 'WbywithachoxenomeW.mp4', 'rniworatuzepatapuy.txt', '6quypucocj.exe', 'Zmavifolulitek.txt', 'ywue.exe', 'QhI.txt', ')vugu^.mp4', 'ygihycogaduhalyfyzen.tar.zip', 'icubonaguchegupejuha(.exe', ']gothusodawinuwidinexD.mp4', ' wyw(.exe']):\n    assert len(valids) == len(filenames)\n    for v, f in zip(valids, filenames):\n        n_digits = sum(c.isdigit() for c in f)\n        if v == \"Yes\":\n            prefix, ext = f.split(\".\")\n            assert ext in [\"txt\", \"dll\", \"exe\"] and prefix[0].isalpha() and n_digits < 4\n        else:\n            assert v == \"No\"\n            assert f.split(\".\")[1:] not in [['txt'], ['dll'], ['exe']] or not f[0].isalpha() or n_digits > 3\n    return True",
    "ans_type": "List[str]",
    "sol_header": "def sol(filenames=['XsiwemunarytextatecY.exe', 'Dfanachofegerevojyv].dll', ')pethymula0.exe', '4dihurudyjahatextov.exe', '0hyxZ.tar.zip', 'WbywithachoxenomeW.mp4', 'rniworatuzepatapuy.txt', '6quypucocj.exe', 'Zmavifolulitek.txt', 'ywue.exe', 'QhI.txt', ')vugu^.mp4', 'ygihycogaduhalyfyzen.tar.zip', 'icubonaguchegupejuha(.exe', ']gothusodawinuwidinexD.mp4', ' wyw(.exe']):",
    "sol_docstring": "    \"\"\"Return a list of Yes/No strings that determine whether candidate filename is valid. A valid filename\n    should end in .txt, .exe, or .dll, and should have at most three digits, no additional periods\n\n    [\"train.jpg\", \"doc10234.txt\", \"3eadme.txt\"] = [\"No\", \"No\", \"Yes\"]\n    \"\"\"",
    "sol_bodies": [
      "    return [\"Yes\" if\n            f.split(\".\")[1:] in [['txt'], ['dll'], ['exe']] and f[0].isalpha() and sum(c.isdigit() for c in f) < 4\n            else \"No\"\n            for f in filenames]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#141",
    "weight": 1.0
  },
  {
    "name": "FindStrangeSum:0",
    "sat": "def sat(lst: List[int], tot=1125181293221):\n    return sum(n ** 2 if n % 3 == 0 else n ** 3 if n % 4 == 0 else n for n in lst) == tot",
    "ans_type": "List[int]",
    "sol_header": "def sol(tot=1125181293221):",
    "sol_docstring": "    \"\"\"Find a list of integers such that tot is the sum of (n^2 if 3 | n, else n^3 if 4 | n, else n)\"\"\"",
    "sol_bodies": [
      "    residue = (tot - 1) % 12\n    return [1] * residue + [tot - residue]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#142",
    "weight": 1.0
  },
  {
    "name": "FindStrangeSum:1",
    "sat": "def sat(lst: List[int], tot=704):\n    return sum(n ** 2 if n % 3 == 0 else n ** 3 if n % 4 == 0 else n for n in lst) == tot",
    "ans_type": "List[int]",
    "sol_header": "def sol(tot=704):",
    "sol_docstring": "    \"\"\"Find a list of integers such that tot is the sum of (n^2 if 3 | n, else n^3 if 4 | n, else n)\"\"\"",
    "sol_bodies": [
      "    residue = (tot - 1) % 12\n    return [1] * residue + [tot - residue]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#142",
    "weight": 1.0
  },
  {
    "name": "FindStrangeSum:2",
    "sat": "def sat(lst: List[int], tot=8849):\n    return sum(n ** 2 if n % 3 == 0 else n ** 3 if n % 4 == 0 else n for n in lst) == tot",
    "ans_type": "List[int]",
    "sol_header": "def sol(tot=8849):",
    "sol_docstring": "    \"\"\"Find a list of integers such that tot is the sum of (n^2 if 3 | n, else n^3 if 4 | n, else n)\"\"\"",
    "sol_bodies": [
      "    residue = (tot - 1) % 12\n    return [1] * residue + [tot - residue]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#142",
    "weight": 1.0
  },
  {
    "name": "FindStrangeSum:3",
    "sat": "def sat(lst: List[int], tot=-516784):\n    return sum(n ** 2 if n % 3 == 0 else n ** 3 if n % 4 == 0 else n for n in lst) == tot",
    "ans_type": "List[int]",
    "sol_header": "def sol(tot=-516784):",
    "sol_docstring": "    \"\"\"Find a list of integers such that tot is the sum of (n^2 if 3 | n, else n^3 if 4 | n, else n)\"\"\"",
    "sol_bodies": [
      "    residue = (tot - 1) % 12\n    return [1] * residue + [tot - residue]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#142",
    "weight": 1.0
  },
  {
    "name": "FindStrangeSum:4",
    "sat": "def sat(lst: List[int], tot=976643993):\n    return sum(n ** 2 if n % 3 == 0 else n ** 3 if n % 4 == 0 else n for n in lst) == tot",
    "ans_type": "List[int]",
    "sol_header": "def sol(tot=976643993):",
    "sol_docstring": "    \"\"\"Find a list of integers such that tot is the sum of (n^2 if 3 | n, else n^3 if 4 | n, else n)\"\"\"",
    "sol_bodies": [
      "    residue = (tot - 1) % 12\n    return [1] * residue + [tot - residue]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#142",
    "weight": 1.0
  },
  {
    "name": "PrimeWords:0",
    "sat": "def sat(primes: str, s=\"This is a test of whether you would want to do such strange puzzles\"):\n\n    def is_prime(n):\n        return n > 1 and all(n % j for j in range(2, int(n ** 0.5) + 1))\n\n    prime_words = primes.split()\n    i = 0\n    for word in s.split():\n        if is_prime(len(word)):\n            assert prime_words[i] == word\n            i += 1\n\n    return i == len(prime_words)",
    "ans_type": "str",
    "sol_header": "def sol(s=\"This is a test of whether you would want to do such strange puzzles\"):",
    "sol_docstring": "    \"\"\"Find the string consisting of all the words whose lengths are prime numbers\n\n    \"A bird in the hand is worth two in the bush\" => \"in the is worth two in the\"\n    \"\"\"",
    "sol_bodies": [
      "    def is_prime(n):\n        return n > 1 and all(n % j for j in range(2, int(n ** 0.5) + 1))\n\n    return \" \".join(w for w in s.split() if is_prime(len(w)))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#143",
    "weight": 1.0
  },
  {
    "name": "PrimeWords:1",
    "sat": "def sat(primes: str, s=\"t quiquitutohetextyvod thacycotextilequa thavow rygo q xythejixojubuz jufutozozat cabuthymuchyji\"):\n\n    def is_prime(n):\n        return n > 1 and all(n % j for j in range(2, int(n ** 0.5) + 1))\n\n    prime_words = primes.split()\n    i = 0\n    for word in s.split():\n        if is_prime(len(word)):\n            assert prime_words[i] == word\n            i += 1\n\n    return i == len(prime_words)",
    "ans_type": "str",
    "sol_header": "def sol(s=\"t quiquitutohetextyvod thacycotextilequa thavow rygo q xythejixojubuz jufutozozat cabuthymuchyji\"):",
    "sol_docstring": "    \"\"\"Find the string consisting of all the words whose lengths are prime numbers\n\n    \"A bird in the hand is worth two in the bush\" => \"in the is worth two in the\"\n    \"\"\"",
    "sol_bodies": [
      "    def is_prime(n):\n        return n > 1 and all(n % j for j in range(2, int(n ** 0.5) + 1))\n\n    return \" \".join(w for w in s.split() if is_prime(len(w)))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#143",
    "weight": 1.0
  },
  {
    "name": "PrimeWords:2",
    "sat": "def sat(primes: str, s=\"caquovovich keguqu tatextuhok jajabyv kibatextuchisimoz xibe sotext s helalewipixemujiwixa\"):\n\n    def is_prime(n):\n        return n > 1 and all(n % j for j in range(2, int(n ** 0.5) + 1))\n\n    prime_words = primes.split()\n    i = 0\n    for word in s.split():\n        if is_prime(len(word)):\n            assert prime_words[i] == word\n            i += 1\n\n    return i == len(prime_words)",
    "ans_type": "str",
    "sol_header": "def sol(s=\"caquovovich keguqu tatextuhok jajabyv kibatextuchisimoz xibe sotext s helalewipixemujiwixa\"):",
    "sol_docstring": "    \"\"\"Find the string consisting of all the words whose lengths are prime numbers\n\n    \"A bird in the hand is worth two in the bush\" => \"in the is worth two in the\"\n    \"\"\"",
    "sol_bodies": [
      "    def is_prime(n):\n        return n > 1 and all(n % j for j in range(2, int(n ** 0.5) + 1))\n\n    return \" \".join(w for w in s.split() if is_prime(len(w)))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#143",
    "weight": 1.0
  },
  {
    "name": "PrimeWords:3",
    "sat": "def sat(primes: str, s=\"\"):\n\n    def is_prime(n):\n        return n > 1 and all(n % j for j in range(2, int(n ** 0.5) + 1))\n\n    prime_words = primes.split()\n    i = 0\n    for word in s.split():\n        if is_prime(len(word)):\n            assert prime_words[i] == word\n            i += 1\n\n    return i == len(prime_words)",
    "ans_type": "str",
    "sol_header": "def sol(s=\"\"):",
    "sol_docstring": "    \"\"\"Find the string consisting of all the words whose lengths are prime numbers\n\n    \"A bird in the hand is worth two in the bush\" => \"in the is worth two in the\"\n    \"\"\"",
    "sol_bodies": [
      "    def is_prime(n):\n        return n > 1 and all(n % j for j in range(2, int(n ** 0.5) + 1))\n\n    return \" \".join(w for w in s.split() if is_prime(len(w)))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#143",
    "weight": 1.0
  },
  {
    "name": "PrimeWords:4",
    "sat": "def sat(primes: str, s=\"sidathochocek qualodu thugolo wywyfykyxyhewyjapeke matofamep n wemahu pesethimine\"):\n\n    def is_prime(n):\n        return n > 1 and all(n % j for j in range(2, int(n ** 0.5) + 1))\n\n    prime_words = primes.split()\n    i = 0\n    for word in s.split():\n        if is_prime(len(word)):\n            assert prime_words[i] == word\n            i += 1\n\n    return i == len(prime_words)",
    "ans_type": "str",
    "sol_header": "def sol(s=\"sidathochocek qualodu thugolo wywyfykyxyhewyjapeke matofamep n wemahu pesethimine\"):",
    "sol_docstring": "    \"\"\"Find the string consisting of all the words whose lengths are prime numbers\n\n    \"A bird in the hand is worth two in the bush\" => \"in the is worth two in the\"\n    \"\"\"",
    "sol_bodies": [
      "    def is_prime(n):\n        return n > 1 and all(n % j for j in range(2, int(n ** 0.5) + 1))\n\n    return \" \".join(w for w in s.split() if is_prime(len(w)))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#143",
    "weight": 1.0
  },
  {
    "name": "SimplifyProductFraction:0",
    "sat": "def sat(z: str, x=\"-8142432/763083\", y=\"66/-13474\", max_len=18):\n    [[a, b], [c, d], [u, v]] = [[int(n) for n in s.split(\"/\")] for s in [x, y, z]]\n    return a * c * v == b * d * u and len(z) <= max_len",
    "ans_type": "str",
    "sol_header": "def sol(x=\"-8142432/763083\", y=\"66/-13474\", max_len=18):",
    "sol_docstring": "    \"\"\"Write x * y as the shortest equivalent fraction using at most max_len chars\n\n    x=\"-2/3\", y=\"-3/8\", max_len=3 => \"1/4\"\n    \"\"\"",
    "sol_bodies": [
      "    [[a, b], [c, d]] = [[int(n) for n in s.split(\"/\")] for s in [x, y]]\n    num, den = a * c, b * d\n    if num < 0 and den < 0:\n        num, den = -num, -den\n    if num == 0:\n        return \"0/1\"\n\n    def gcd(a, b):\n        a, b = min(a, b), max(a, b)\n        if b % a == 0:\n            return a\n        return gcd(b % a, a)\n\n    d = gcd(abs(num), abs(den))\n    return f'{num // d}/{den // d}'"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#144",
    "weight": 1.0
  },
  {
    "name": "SimplifyProductFraction:1",
    "sat": "def sat(z: str, x=\"0/47460\", y=\"357/8389715\", max_len=3):\n    [[a, b], [c, d], [u, v]] = [[int(n) for n in s.split(\"/\")] for s in [x, y, z]]\n    return a * c * v == b * d * u and len(z) <= max_len",
    "ans_type": "str",
    "sol_header": "def sol(x=\"0/47460\", y=\"357/8389715\", max_len=3):",
    "sol_docstring": "    \"\"\"Write x * y as the shortest equivalent fraction using at most max_len chars\n\n    x=\"-2/3\", y=\"-3/8\", max_len=3 => \"1/4\"\n    \"\"\"",
    "sol_bodies": [
      "    [[a, b], [c, d]] = [[int(n) for n in s.split(\"/\")] for s in [x, y]]\n    num, den = a * c, b * d\n    if num < 0 and den < 0:\n        num, den = -num, -den\n    if num == 0:\n        return \"0/1\"\n\n    def gcd(a, b):\n        a, b = min(a, b), max(a, b)\n        if b % a == 0:\n            return a\n        return gcd(b % a, a)\n\n    d = gcd(abs(num), abs(den))\n    return f'{num // d}/{den // d}'"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#144",
    "weight": 1.0
  },
  {
    "name": "SimplifyProductFraction:2",
    "sat": "def sat(z: str, x=\"-20/-54383610\", y=\"7865/34\", max_len=13):\n    [[a, b], [c, d], [u, v]] = [[int(n) for n in s.split(\"/\")] for s in [x, y, z]]\n    return a * c * v == b * d * u and len(z) <= max_len",
    "ans_type": "str",
    "sol_header": "def sol(x=\"-20/-54383610\", y=\"7865/34\", max_len=13):",
    "sol_docstring": "    \"\"\"Write x * y as the shortest equivalent fraction using at most max_len chars\n\n    x=\"-2/3\", y=\"-3/8\", max_len=3 => \"1/4\"\n    \"\"\"",
    "sol_bodies": [
      "    [[a, b], [c, d]] = [[int(n) for n in s.split(\"/\")] for s in [x, y]]\n    num, den = a * c, b * d\n    if num < 0 and den < 0:\n        num, den = -num, -den\n    if num == 0:\n        return \"0/1\"\n\n    def gcd(a, b):\n        a, b = min(a, b), max(a, b)\n        if b % a == 0:\n            return a\n        return gcd(b % a, a)\n\n    d = gcd(abs(num), abs(den))\n    return f'{num // d}/{den // d}'"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#144",
    "weight": 1.0
  },
  {
    "name": "SimplifyProductFraction:3",
    "sat": "def sat(z: str, x=\"0/2\", y=\"79/45361\", max_len=3):\n    [[a, b], [c, d], [u, v]] = [[int(n) for n in s.split(\"/\")] for s in [x, y, z]]\n    return a * c * v == b * d * u and len(z) <= max_len",
    "ans_type": "str",
    "sol_header": "def sol(x=\"0/2\", y=\"79/45361\", max_len=3):",
    "sol_docstring": "    \"\"\"Write x * y as the shortest equivalent fraction using at most max_len chars\n\n    x=\"-2/3\", y=\"-3/8\", max_len=3 => \"1/4\"\n    \"\"\"",
    "sol_bodies": [
      "    [[a, b], [c, d]] = [[int(n) for n in s.split(\"/\")] for s in [x, y]]\n    num, den = a * c, b * d\n    if num < 0 and den < 0:\n        num, den = -num, -den\n    if num == 0:\n        return \"0/1\"\n\n    def gcd(a, b):\n        a, b = min(a, b), max(a, b)\n        if b % a == 0:\n            return a\n        return gcd(b % a, a)\n\n    d = gcd(abs(num), abs(den))\n    return f'{num // d}/{den // d}'"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#144",
    "weight": 1.0
  },
  {
    "name": "SimplifyProductFraction:4",
    "sat": "def sat(z: str, x=\"1316/-4820197\", y=\"0/28968\", max_len=3):\n    [[a, b], [c, d], [u, v]] = [[int(n) for n in s.split(\"/\")] for s in [x, y, z]]\n    return a * c * v == b * d * u and len(z) <= max_len",
    "ans_type": "str",
    "sol_header": "def sol(x=\"1316/-4820197\", y=\"0/28968\", max_len=3):",
    "sol_docstring": "    \"\"\"Write x * y as the shortest equivalent fraction using at most max_len chars\n\n    x=\"-2/3\", y=\"-3/8\", max_len=3 => \"1/4\"\n    \"\"\"",
    "sol_bodies": [
      "    [[a, b], [c, d]] = [[int(n) for n in s.split(\"/\")] for s in [x, y]]\n    num, den = a * c, b * d\n    if num < 0 and den < 0:\n        num, den = -num, -den\n    if num == 0:\n        return \"0/1\"\n\n    def gcd(a, b):\n        a, b = min(a, b), max(a, b)\n        if b % a == 0:\n            return a\n        return gcd(b % a, a)\n\n    d = gcd(abs(num), abs(den))\n    return f'{num // d}/{den // d}'"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#144",
    "weight": 1.0
  },
  {
    "name": "SortByDigitSum:0",
    "sat": "def sat(ordered: List[int], nums=[1, 0, -1, -100, 10, 14, 235251, 11, 10000, 2000001, -155]):\n    digit_sums = [sum(int(c) for c in str(n) if c != \"-\") for n in ordered]\n    return sorted(ordered) == sorted(nums) and digit_sums == sorted(digit_sums)",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[1, 0, -1, -100, 10, 14, 235251, 11, 10000, 2000001, -155]):",
    "sol_docstring": "    \"\"\"Sort the numbers by the sum of their digits\n\n    [17, 21, 0] => [0, 17, 21]\n    \"\"\"",
    "sol_bodies": [
      "    return sorted(nums, key=lambda n: sum(int(c) for c in str(n) if c != \"-\"))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#145",
    "weight": 1.0
  },
  {
    "name": "SortByDigitSum:1",
    "sat": "def sat(ordered: List[int], nums=[-222, -896, 914, 817]):\n    digit_sums = [sum(int(c) for c in str(n) if c != \"-\") for n in ordered]\n    return sorted(ordered) == sorted(nums) and digit_sums == sorted(digit_sums)",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[-222, -896, 914, 817]):",
    "sol_docstring": "    \"\"\"Sort the numbers by the sum of their digits\n\n    [17, 21, 0] => [0, 17, 21]\n    \"\"\"",
    "sol_bodies": [
      "    return sorted(nums, key=lambda n: sum(int(c) for c in str(n) if c != \"-\"))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#145",
    "weight": 1.0
  },
  {
    "name": "SortByDigitSum:2",
    "sat": "def sat(ordered: List[int], nums=[208]):\n    digit_sums = [sum(int(c) for c in str(n) if c != \"-\") for n in ordered]\n    return sorted(ordered) == sorted(nums) and digit_sums == sorted(digit_sums)",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[208]):",
    "sol_docstring": "    \"\"\"Sort the numbers by the sum of their digits\n\n    [17, 21, 0] => [0, 17, 21]\n    \"\"\"",
    "sol_bodies": [
      "    return sorted(nums, key=lambda n: sum(int(c) for c in str(n) if c != \"-\"))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#145",
    "weight": 1.0
  },
  {
    "name": "SortByDigitSum:3",
    "sat": "def sat(ordered: List[int], nums=[]):\n    digit_sums = [sum(int(c) for c in str(n) if c != \"-\") for n in ordered]\n    return sorted(ordered) == sorted(nums) and digit_sums == sorted(digit_sums)",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[]):",
    "sol_docstring": "    \"\"\"Sort the numbers by the sum of their digits\n\n    [17, 21, 0] => [0, 17, 21]\n    \"\"\"",
    "sol_bodies": [
      "    return sorted(nums, key=lambda n: sum(int(c) for c in str(n) if c != \"-\"))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#145",
    "weight": 1.0
  },
  {
    "name": "SortByDigitSum:4",
    "sat": "def sat(ordered: List[int], nums=[232, -710]):\n    digit_sums = [sum(int(c) for c in str(n) if c != \"-\") for n in ordered]\n    return sorted(ordered) == sorted(nums) and digit_sums == sorted(digit_sums)",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[232, -710]):",
    "sol_docstring": "    \"\"\"Sort the numbers by the sum of their digits\n\n    [17, 21, 0] => [0, 17, 21]\n    \"\"\"",
    "sol_bodies": [
      "    return sorted(nums, key=lambda n: sum(int(c) for c in str(n) if c != \"-\"))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#145",
    "weight": 1.0
  },
  {
    "name": "BigOdds:0",
    "sat": "def sat(odds: List[int], nums=[204, 109, 203, 17, 45, 11, 21, 99, 909, 16, -33, 3, 17]):\n    assert all(o > 10 and odds.count(o) == nums.count(o) and int(str(o)[i]) % 2 for o in odds for i in [-1, 0])\n    return all(n in odds or n <= 10 or int(str(n)[0]) % 2 == 0 or int(str(n)[-1]) % 2 == 0 for n in nums)",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[204, 109, 203, 17, 45, 11, 21, 99, 909, 16, -33, 3, 17]):",
    "sol_docstring": "    \"\"\"Find the numbers that are greater than 10 and have odd first and last digits\n\n    [73, 4, 72] => [73]\n    \"\"\"",
    "sol_bodies": [
      "    return [n for n in nums if n > 10 and (int(str(n)[0]) * int(str(n)[-1])) % 2]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#146",
    "weight": 1.0
  },
  {
    "name": "BigOdds:1",
    "sat": "def sat(odds: List[int], nums=[13559]):\n    assert all(o > 10 and odds.count(o) == nums.count(o) and int(str(o)[i]) % 2 for o in odds for i in [-1, 0])\n    return all(n in odds or n <= 10 or int(str(n)[0]) % 2 == 0 or int(str(n)[-1]) % 2 == 0 for n in nums)",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[13559]):",
    "sol_docstring": "    \"\"\"Find the numbers that are greater than 10 and have odd first and last digits\n\n    [73, 4, 72] => [73]\n    \"\"\"",
    "sol_bodies": [
      "    return [n for n in nums if n > 10 and (int(str(n)[0]) * int(str(n)[-1])) % 2]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#146",
    "weight": 1.0
  },
  {
    "name": "BigOdds:2",
    "sat": "def sat(odds: List[int], nums=[12320, 771, 11224, 17261]):\n    assert all(o > 10 and odds.count(o) == nums.count(o) and int(str(o)[i]) % 2 for o in odds for i in [-1, 0])\n    return all(n in odds or n <= 10 or int(str(n)[0]) % 2 == 0 or int(str(n)[-1]) % 2 == 0 for n in nums)",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[12320, 771, 11224, 17261]):",
    "sol_docstring": "    \"\"\"Find the numbers that are greater than 10 and have odd first and last digits\n\n    [73, 4, 72] => [73]\n    \"\"\"",
    "sol_bodies": [
      "    return [n for n in nums if n > 10 and (int(str(n)[0]) * int(str(n)[-1])) % 2]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#146",
    "weight": 1.0
  },
  {
    "name": "BigOdds:3",
    "sat": "def sat(odds: List[int], nums=[13251, 8503, 5595, 19712, 10196, 16271]):\n    assert all(o > 10 and odds.count(o) == nums.count(o) and int(str(o)[i]) % 2 for o in odds for i in [-1, 0])\n    return all(n in odds or n <= 10 or int(str(n)[0]) % 2 == 0 or int(str(n)[-1]) % 2 == 0 for n in nums)",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[13251, 8503, 5595, 19712, 10196, 16271]):",
    "sol_docstring": "    \"\"\"Find the numbers that are greater than 10 and have odd first and last digits\n\n    [73, 4, 72] => [73]\n    \"\"\"",
    "sol_bodies": [
      "    return [n for n in nums if n > 10 and (int(str(n)[0]) * int(str(n)[-1])) % 2]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#146",
    "weight": 1.0
  },
  {
    "name": "BigOdds:4",
    "sat": "def sat(odds: List[int], nums=[]):\n    assert all(o > 10 and odds.count(o) == nums.count(o) and int(str(o)[i]) % 2 for o in odds for i in [-1, 0])\n    return all(n in odds or n <= 10 or int(str(n)[0]) % 2 == 0 or int(str(n)[-1]) % 2 == 0 for n in nums)",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[]):",
    "sol_docstring": "    \"\"\"Find the numbers that are greater than 10 and have odd first and last digits\n\n    [73, 4, 72] => [73]\n    \"\"\"",
    "sol_bodies": [
      "    return [n for n in nums if n > 10 and (int(str(n)[0]) * int(str(n)[-1])) % 2]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#146",
    "weight": 1.0
  },
  {
    "name": "Threeples:0",
    "sat": "def sat(trips: List[List[int]], a=[1, 0, -17, 42, 321, 36, 429, 35, 10, 923, 35, 18, 0, 17, 24, 32, 8], count=221):\n    assert len({tuple(t) for t in trips}) >= count\n    return all(0 <= i < j < k and (a[i] + a[j] + a[k]) % 3 == 0 for i, j, k in trips)",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(a=[1, 0, -17, 42, 321, 36, 429, 35, 10, 923, 35, 18, 0, 17, 24, 32, 8], count=221):",
    "sol_docstring": "    \"\"\"Find all triples of increasing indices where the sum of the numbers is divisible by three\n\n    a=[1, 2, 4, 8, 14, 10], count=2 => [[0, 2, 5], [1, 3, 4]] = > because 1 + 4 + 10, 2 + 8 + 14 are divisible by 3\n    \"\"\"",
    "sol_bodies": [
      "    n = len(a)\n    return [[i, j, k] for k in range(2, n) for j in range(k) for i in range(j) if (a[i] + a[j] + a[k]) % 3 == 0]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#147",
    "weight": 1.0
  },
  {
    "name": "Threeples:1",
    "sat": "def sat(trips: List[List[int]], a=[8, 5, 9, 3, 3, 9, 2, 6, 6, 0, 8, 0, 3, 2, 5, 2, 3, -1, 6], count=221):\n    assert len({tuple(t) for t in trips}) >= count\n    return all(0 <= i < j < k and (a[i] + a[j] + a[k]) % 3 == 0 for i, j, k in trips)",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(a=[8, 5, 9, 3, 3, 9, 2, 6, 6, 0, 8, 0, 3, 2, 5, 2, 3, -1, 6], count=221):",
    "sol_docstring": "    \"\"\"Find all triples of increasing indices where the sum of the numbers is divisible by three\n\n    a=[1, 2, 4, 8, 14, 10], count=2 => [[0, 2, 5], [1, 3, 4]] = > because 1 + 4 + 10, 2 + 8 + 14 are divisible by 3\n    \"\"\"",
    "sol_bodies": [
      "    n = len(a)\n    return [[i, j, k] for k in range(2, n) for j in range(k) for i in range(j) if (a[i] + a[j] + a[k]) % 3 == 0]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#147",
    "weight": 1.0
  },
  {
    "name": "Threeples:2",
    "sat": "def sat(trips: List[List[int]], a=[6, 5, 3, 0, 1, 9, 7, 6, 6, 7, 6, 8, 4, -1, 0, 3, 6, 7, 5, 3], count=399):\n    assert len({tuple(t) for t in trips}) >= count\n    return all(0 <= i < j < k and (a[i] + a[j] + a[k]) % 3 == 0 for i, j, k in trips)",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(a=[6, 5, 3, 0, 1, 9, 7, 6, 6, 7, 6, 8, 4, -1, 0, 3, 6, 7, 5, 3], count=399):",
    "sol_docstring": "    \"\"\"Find all triples of increasing indices where the sum of the numbers is divisible by three\n\n    a=[1, 2, 4, 8, 14, 10], count=2 => [[0, 2, 5], [1, 3, 4]] = > because 1 + 4 + 10, 2 + 8 + 14 are divisible by 3\n    \"\"\"",
    "sol_bodies": [
      "    n = len(a)\n    return [[i, j, k] for k in range(2, n) for j in range(k) for i in range(j) if (a[i] + a[j] + a[k]) % 3 == 0]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#147",
    "weight": 1.0
  },
  {
    "name": "Threeples:3",
    "sat": "def sat(trips: List[List[int]], a=[6, 3, 5, -1, 8, 8], count=4):\n    assert len({tuple(t) for t in trips}) >= count\n    return all(0 <= i < j < k and (a[i] + a[j] + a[k]) % 3 == 0 for i, j, k in trips)",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(a=[6, 3, 5, -1, 8, 8], count=4):",
    "sol_docstring": "    \"\"\"Find all triples of increasing indices where the sum of the numbers is divisible by three\n\n    a=[1, 2, 4, 8, 14, 10], count=2 => [[0, 2, 5], [1, 3, 4]] = > because 1 + 4 + 10, 2 + 8 + 14 are divisible by 3\n    \"\"\"",
    "sol_bodies": [
      "    n = len(a)\n    return [[i, j, k] for k in range(2, n) for j in range(k) for i in range(j) if (a[i] + a[j] + a[k]) % 3 == 0]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#147",
    "weight": 1.0
  },
  {
    "name": "Threeples:4",
    "sat": "def sat(trips: List[List[int]], a=[7], count=0):\n    assert len({tuple(t) for t in trips}) >= count\n    return all(0 <= i < j < k and (a[i] + a[j] + a[k]) % 3 == 0 for i, j, k in trips)",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(a=[7], count=0):",
    "sol_docstring": "    \"\"\"Find all triples of increasing indices where the sum of the numbers is divisible by three\n\n    a=[1, 2, 4, 8, 14, 10], count=2 => [[0, 2, 5], [1, 3, 4]] = > because 1 + 4 + 10, 2 + 8 + 14 are divisible by 3\n    \"\"\"",
    "sol_bodies": [
      "    n = len(a)\n    return [[i, j, k] for k in range(2, n) for j in range(k) for i in range(j) if (a[i] + a[j] + a[k]) % 3 == 0]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#147",
    "weight": 1.0
  },
  {
    "name": "PlanetRange:0",
    "sat": "def sat(planets_between: List[str], a=\"Mars\", b=\"Neptune\"):\n    assert \" \" not in \"\".join(planets_between)\n    return \" \".join([a] + planets_between + [b]) in \"Venus Earth Mars Jupiter Saturn Uranus Neptune Pluto\"",
    "ans_type": "List[str]",
    "sol_header": "def sol(a=\"Mars\", b=\"Neptune\"):",
    "sol_docstring": "    \"\"\"Find all planets between the two given planets\n\n    a=\"Jupiter\", b=\"Pluto\" => [\"Saturn\" \"Uranus\" \"Neptune\"]\n    \"\"\"",
    "sol_bodies": [
      "    planets = \"Venus Earth Mars Jupiter Saturn Uranus Neptune Pluto\".split()\n    return planets[planets.index(a) + 1:planets.index(b)]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#148",
    "weight": 1.0
  },
  {
    "name": "PlanetRange:1",
    "sat": "def sat(planets_between: List[str], a=\"Venus\", b=\"Neptune\"):\n    assert \" \" not in \"\".join(planets_between)\n    return \" \".join([a] + planets_between + [b]) in \"Venus Earth Mars Jupiter Saturn Uranus Neptune Pluto\"",
    "ans_type": "List[str]",
    "sol_header": "def sol(a=\"Venus\", b=\"Neptune\"):",
    "sol_docstring": "    \"\"\"Find all planets between the two given planets\n\n    a=\"Jupiter\", b=\"Pluto\" => [\"Saturn\" \"Uranus\" \"Neptune\"]\n    \"\"\"",
    "sol_bodies": [
      "    planets = \"Venus Earth Mars Jupiter Saturn Uranus Neptune Pluto\".split()\n    return planets[planets.index(a) + 1:planets.index(b)]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#148",
    "weight": 1.0
  },
  {
    "name": "PlanetRange:2",
    "sat": "def sat(planets_between: List[str], a=\"Venus\", b=\"Earth\"):\n    assert \" \" not in \"\".join(planets_between)\n    return \" \".join([a] + planets_between + [b]) in \"Venus Earth Mars Jupiter Saturn Uranus Neptune Pluto\"",
    "ans_type": "List[str]",
    "sol_header": "def sol(a=\"Venus\", b=\"Earth\"):",
    "sol_docstring": "    \"\"\"Find all planets between the two given planets\n\n    a=\"Jupiter\", b=\"Pluto\" => [\"Saturn\" \"Uranus\" \"Neptune\"]\n    \"\"\"",
    "sol_bodies": [
      "    planets = \"Venus Earth Mars Jupiter Saturn Uranus Neptune Pluto\".split()\n    return planets[planets.index(a) + 1:planets.index(b)]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#148",
    "weight": 1.0
  },
  {
    "name": "PlanetRange:3",
    "sat": "def sat(planets_between: List[str], a=\"Earth\", b=\"Jupiter\"):\n    assert \" \" not in \"\".join(planets_between)\n    return \" \".join([a] + planets_between + [b]) in \"Venus Earth Mars Jupiter Saturn Uranus Neptune Pluto\"",
    "ans_type": "List[str]",
    "sol_header": "def sol(a=\"Earth\", b=\"Jupiter\"):",
    "sol_docstring": "    \"\"\"Find all planets between the two given planets\n\n    a=\"Jupiter\", b=\"Pluto\" => [\"Saturn\" \"Uranus\" \"Neptune\"]\n    \"\"\"",
    "sol_bodies": [
      "    planets = \"Venus Earth Mars Jupiter Saturn Uranus Neptune Pluto\".split()\n    return planets[planets.index(a) + 1:planets.index(b)]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#148",
    "weight": 1.0
  },
  {
    "name": "PlanetRange:4",
    "sat": "def sat(planets_between: List[str], a=\"Earth\", b=\"Uranus\"):\n    assert \" \" not in \"\".join(planets_between)\n    return \" \".join([a] + planets_between + [b]) in \"Venus Earth Mars Jupiter Saturn Uranus Neptune Pluto\"",
    "ans_type": "List[str]",
    "sol_header": "def sol(a=\"Earth\", b=\"Uranus\"):",
    "sol_docstring": "    \"\"\"Find all planets between the two given planets\n\n    a=\"Jupiter\", b=\"Pluto\" => [\"Saturn\" \"Uranus\" \"Neptune\"]\n    \"\"\"",
    "sol_bodies": [
      "    planets = \"Venus Earth Mars Jupiter Saturn Uranus Neptune Pluto\".split()\n    return planets[planets.index(a) + 1:planets.index(b)]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#148",
    "weight": 1.0
  },
  {
    "name": "EvenWords:0",
    "sat": "def sat(evens: List[str], words=['The', 'worm', 'ate', 'a', 'bird', 'imagine', 'that', '!', 'Absurd', '!!']):\n    lens = [len(w) for w in evens]\n    assert all(lens[i] % 2 == 0 and lens[i] == max(lens[:i + 1]) and w in words for i, w in enumerate(evens))\n    return all((len(w) % 2 == 1 or w in evens) for w in words)",
    "ans_type": "List[str]",
    "sol_header": "def sol(words=['The', 'worm', 'ate', 'a', 'bird', 'imagine', 'that', '!', 'Absurd', '!!']):",
    "sol_docstring": "    \"\"\"Find the even-length words and sort them by length.\n\n    [\"soup\", \"not\", \"splendid\"] => [\"soup\", \"splendid\"]\n    \"\"\"",
    "sol_bodies": [
      "    return sorted([w for w in words if len(w) % 2 == 0], key=lambda w: (len(w), w))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#149",
    "weight": 1.0
  },
  {
    "name": "EvenWords:1",
    "sat": "def sat(evens: List[str], words=['valafytextulu', 'quyjylixyvy', 'mavusegojysaquo']):\n    lens = [len(w) for w in evens]\n    assert all(lens[i] % 2 == 0 and lens[i] == max(lens[:i + 1]) and w in words for i, w in enumerate(evens))\n    return all((len(w) % 2 == 1 or w in evens) for w in words)",
    "ans_type": "List[str]",
    "sol_header": "def sol(words=['valafytextulu', 'quyjylixyvy', 'mavusegojysaquo']):",
    "sol_docstring": "    \"\"\"Find the even-length words and sort them by length.\n\n    [\"soup\", \"not\", \"splendid\"] => [\"soup\", \"splendid\"]\n    \"\"\"",
    "sol_bodies": [
      "    return sorted([w for w in words if len(w) % 2 == 0], key=lambda w: (len(w), w))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#149",
    "weight": 1.0
  },
  {
    "name": "EvenWords:2",
    "sat": "def sat(evens: List[str], words=['pemathubolyrav', 'mucyxavofolajig', 'm', 'zyzagynorusybef']):\n    lens = [len(w) for w in evens]\n    assert all(lens[i] % 2 == 0 and lens[i] == max(lens[:i + 1]) and w in words for i, w in enumerate(evens))\n    return all((len(w) % 2 == 1 or w in evens) for w in words)",
    "ans_type": "List[str]",
    "sol_header": "def sol(words=['pemathubolyrav', 'mucyxavofolajig', 'm', 'zyzagynorusybef']):",
    "sol_docstring": "    \"\"\"Find the even-length words and sort them by length.\n\n    [\"soup\", \"not\", \"splendid\"] => [\"soup\", \"splendid\"]\n    \"\"\"",
    "sol_bodies": [
      "    return sorted([w for w in words if len(w) % 2 == 0], key=lambda w: (len(w), w))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#149",
    "weight": 1.0
  },
  {
    "name": "EvenWords:3",
    "sat": "def sat(evens: List[str], words=['bozachogawykon', 'kywicij', 'tylegykivysequ']):\n    lens = [len(w) for w in evens]\n    assert all(lens[i] % 2 == 0 and lens[i] == max(lens[:i + 1]) and w in words for i, w in enumerate(evens))\n    return all((len(w) % 2 == 1 or w in evens) for w in words)",
    "ans_type": "List[str]",
    "sol_header": "def sol(words=['bozachogawykon', 'kywicij', 'tylegykivysequ']):",
    "sol_docstring": "    \"\"\"Find the even-length words and sort them by length.\n\n    [\"soup\", \"not\", \"splendid\"] => [\"soup\", \"splendid\"]\n    \"\"\"",
    "sol_bodies": [
      "    return sorted([w for w in words if len(w) % 2 == 0], key=lambda w: (len(w), w))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#149",
    "weight": 1.0
  },
  {
    "name": "EvenWords:4",
    "sat": "def sat(evens: List[str], words=['vanafegyfog', 'vipugohuvychu']):\n    lens = [len(w) for w in evens]\n    assert all(lens[i] % 2 == 0 and lens[i] == max(lens[:i + 1]) and w in words for i, w in enumerate(evens))\n    return all((len(w) % 2 == 1 or w in evens) for w in words)",
    "ans_type": "List[str]",
    "sol_header": "def sol(words=['vanafegyfog', 'vipugohuvychu']):",
    "sol_docstring": "    \"\"\"Find the even-length words and sort them by length.\n\n    [\"soup\", \"not\", \"splendid\"] => [\"soup\", \"splendid\"]\n    \"\"\"",
    "sol_bodies": [
      "    return sorted([w for w in words if len(w) % 2 == 0], key=lambda w: (len(w), w))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#149",
    "weight": 1.0
  },
  {
    "name": "PrimeSel:0",
    "sat": "def sat(neighbors: List[int], nums=[14, 7, 11, 13, 7, 4, 19, 2, 55, 13, 31, 14, 2, 9, -7, 0, 88, 13, 13]):\n\n    def prime(m):\n        return all(m % i for i in range(2, m - 1))\n\n    goods = set()\n    for i, n in enumerate(nums):\n        if (i > 0 and prime(nums[i - 1])) or (i < len(nums) - 1 and prime(nums[i + 1])):\n            goods.add(n)\n\n    return set(neighbors) == goods and all(n == min(neighbors[i:]) for i, n in enumerate(neighbors))",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[14, 7, 11, 13, 7, 4, 19, 2, 55, 13, 31, 14, 2, 9, -7, 0, 88, 13, 13]):",
    "sol_docstring": "    \"\"\"Find a list of all numbers that are adjacent to a prime number in the list, sorted without duplicates\n\n    [2, 17, 16, 0, 6, 4, 5] => [2, 4, 16, 17]\"\"\"",
    "sol_bodies": [
      "    def prime(m):\n        return all(m % i for i in range(2, m - 1))\n\n    return sorted({\n        n for i, n in enumerate(nums)\n        if (i > 0 and prime(nums[i - 1])) or (i < len(nums) - 1 and prime(nums[i + 1]))\n    })"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#150",
    "weight": 1.0
  },
  {
    "name": "PrimeSel:1",
    "sat": "def sat(neighbors: List[int], nums=[15, 1, 1, 11, 12, 12, 3, 3, 2, 5, 12, 0, 16, 0, 4, 14, 11, 7, 8]):\n\n    def prime(m):\n        return all(m % i for i in range(2, m - 1))\n\n    goods = set()\n    for i, n in enumerate(nums):\n        if (i > 0 and prime(nums[i - 1])) or (i < len(nums) - 1 and prime(nums[i + 1])):\n            goods.add(n)\n\n    return set(neighbors) == goods and all(n == min(neighbors[i:]) for i, n in enumerate(neighbors))",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[15, 1, 1, 11, 12, 12, 3, 3, 2, 5, 12, 0, 16, 0, 4, 14, 11, 7, 8]):",
    "sol_docstring": "    \"\"\"Find a list of all numbers that are adjacent to a prime number in the list, sorted without duplicates\n\n    [2, 17, 16, 0, 6, 4, 5] => [2, 4, 16, 17]\"\"\"",
    "sol_bodies": [
      "    def prime(m):\n        return all(m % i for i in range(2, m - 1))\n\n    return sorted({\n        n for i, n in enumerate(nums)\n        if (i > 0 and prime(nums[i - 1])) or (i < len(nums) - 1 and prime(nums[i + 1]))\n    })"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#150",
    "weight": 1.0
  },
  {
    "name": "PrimeSel:2",
    "sat": "def sat(neighbors: List[int], nums=[1, 15, 19]):\n\n    def prime(m):\n        return all(m % i for i in range(2, m - 1))\n\n    goods = set()\n    for i, n in enumerate(nums):\n        if (i > 0 and prime(nums[i - 1])) or (i < len(nums) - 1 and prime(nums[i + 1])):\n            goods.add(n)\n\n    return set(neighbors) == goods and all(n == min(neighbors[i:]) for i, n in enumerate(neighbors))",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[1, 15, 19]):",
    "sol_docstring": "    \"\"\"Find a list of all numbers that are adjacent to a prime number in the list, sorted without duplicates\n\n    [2, 17, 16, 0, 6, 4, 5] => [2, 4, 16, 17]\"\"\"",
    "sol_bodies": [
      "    def prime(m):\n        return all(m % i for i in range(2, m - 1))\n\n    return sorted({\n        n for i, n in enumerate(nums)\n        if (i > 0 and prime(nums[i - 1])) or (i < len(nums) - 1 and prime(nums[i + 1]))\n    })"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#150",
    "weight": 1.0
  },
  {
    "name": "PrimeSel:3",
    "sat": "def sat(neighbors: List[int], nums=[9, 9, 0, 2, 7, 14, 14, 2, 6, 4, -1, 7, 2, 2, 14, 8, 7, 19, 5, 9, 4, 18, 14, 8, 9, 2, -1]):\n\n    def prime(m):\n        return all(m % i for i in range(2, m - 1))\n\n    goods = set()\n    for i, n in enumerate(nums):\n        if (i > 0 and prime(nums[i - 1])) or (i < len(nums) - 1 and prime(nums[i + 1])):\n            goods.add(n)\n\n    return set(neighbors) == goods and all(n == min(neighbors[i:]) for i, n in enumerate(neighbors))",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[9, 9, 0, 2, 7, 14, 14, 2, 6, 4, -1, 7, 2, 2, 14, 8, 7, 19, 5, 9, 4, 18, 14, 8, 9, 2, -1]):",
    "sol_docstring": "    \"\"\"Find a list of all numbers that are adjacent to a prime number in the list, sorted without duplicates\n\n    [2, 17, 16, 0, 6, 4, 5] => [2, 4, 16, 17]\"\"\"",
    "sol_bodies": [
      "    def prime(m):\n        return all(m % i for i in range(2, m - 1))\n\n    return sorted({\n        n for i, n in enumerate(nums)\n        if (i > 0 and prime(nums[i - 1])) or (i < len(nums) - 1 and prime(nums[i + 1]))\n    })"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#150",
    "weight": 1.0
  },
  {
    "name": "PrimeSel:4",
    "sat": "def sat(neighbors: List[int], nums=[4, 2, 4, 7, -1, 10, 0, 10, 1, 3, 8, 3, 5, 3, 0, -1, 11, 18, 15, 2, 4, 10, 8, 14, 6, 1, 12, 14, 5]):\n\n    def prime(m):\n        return all(m % i for i in range(2, m - 1))\n\n    goods = set()\n    for i, n in enumerate(nums):\n        if (i > 0 and prime(nums[i - 1])) or (i < len(nums) - 1 and prime(nums[i + 1])):\n            goods.add(n)\n\n    return set(neighbors) == goods and all(n == min(neighbors[i:]) for i, n in enumerate(neighbors))",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[4, 2, 4, 7, -1, 10, 0, 10, 1, 3, 8, 3, 5, 3, 0, -1, 11, 18, 15, 2, 4, 10, 8, 14, 6, 1, 12, 14, 5]):",
    "sol_docstring": "    \"\"\"Find a list of all numbers that are adjacent to a prime number in the list, sorted without duplicates\n\n    [2, 17, 16, 0, 6, 4, 5] => [2, 4, 16, 17]\"\"\"",
    "sol_bodies": [
      "    def prime(m):\n        return all(m % i for i in range(2, m - 1))\n\n    return sorted({\n        n for i, n in enumerate(nums)\n        if (i > 0 and prime(nums[i - 1])) or (i < len(nums) - 1 and prime(nums[i + 1]))\n    })"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#150",
    "weight": 1.0
  },
  {
    "name": "EvenSqure:0",
    "sat": "def sat(tot: int, xs=[123.0, 872322.0, 542.2, -127.5, 18214.0, 3732.4, 12832.4, 23523800.0]):\n    for x in xs:\n        if x.is_integer() and x > 0 and x % 2 == 0:\n            tot -= int(x) ** 2\n\n    return tot == 0",
    "ans_type": "int",
    "sol_header": "def sol(xs=[123.0, 872322.0, 542.2, -127.5, 18214.0, 3732.4, 12832.4, 23523800.0]):",
    "sol_docstring": "    \"\"\"Find the sum of the squares of the positive even integers\n\n    [2.0, 3.0, 2.5, 4.0] => 20\n    \"\"\"",
    "sol_bodies": [
      "    return sum(int(x) ** 2 for x in xs if x.is_integer() and x > 0 and x % 2 == 0)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#151",
    "weight": 1.0
  },
  {
    "name": "EvenSqure:1",
    "sat": "def sat(tot: int, xs=[]):\n    for x in xs:\n        if x.is_integer() and x > 0 and x % 2 == 0:\n            tot -= int(x) ** 2\n\n    return tot == 0",
    "ans_type": "int",
    "sol_header": "def sol(xs=[]):",
    "sol_docstring": "    \"\"\"Find the sum of the squares of the positive even integers\n\n    [2.0, 3.0, 2.5, 4.0] => 20\n    \"\"\"",
    "sol_bodies": [
      "    return sum(int(x) ** 2 for x in xs if x.is_integer() and x > 0 and x % 2 == 0)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#151",
    "weight": 1.0
  },
  {
    "name": "EvenSqure:2",
    "sat": "def sat(tot: int, xs=[274797.0, 8635.410691353316, 53805.0, -51907.0, -24430.861351406824, 190577.0, 237978.0, 133989.0]):\n    for x in xs:\n        if x.is_integer() and x > 0 and x % 2 == 0:\n            tot -= int(x) ** 2\n\n    return tot == 0",
    "ans_type": "int",
    "sol_header": "def sol(xs=[274797.0, 8635.410691353316, 53805.0, -51907.0, -24430.861351406824, 190577.0, 237978.0, 133989.0]):",
    "sol_docstring": "    \"\"\"Find the sum of the squares of the positive even integers\n\n    [2.0, 3.0, 2.5, 4.0] => 20\n    \"\"\"",
    "sol_bodies": [
      "    return sum(int(x) ** 2 for x in xs if x.is_integer() and x > 0 and x % 2 == 0)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#151",
    "weight": 1.0
  },
  {
    "name": "EvenSqure:3",
    "sat": "def sat(tot: int, xs=[205685.0, 6849.8060301064015, 68569.0, 33659.85121811424, 71796.0, 183470.0, 236644.22522117657, -11658.772326982376, 155284.34795372086]):\n    for x in xs:\n        if x.is_integer() and x > 0 and x % 2 == 0:\n            tot -= int(x) ** 2\n\n    return tot == 0",
    "ans_type": "int",
    "sol_header": "def sol(xs=[205685.0, 6849.8060301064015, 68569.0, 33659.85121811424, 71796.0, 183470.0, 236644.22522117657, -11658.772326982376, 155284.34795372086]):",
    "sol_docstring": "    \"\"\"Find the sum of the squares of the positive even integers\n\n    [2.0, 3.0, 2.5, 4.0] => 20\n    \"\"\"",
    "sol_bodies": [
      "    return sum(int(x) ** 2 for x in xs if x.is_integer() and x > 0 and x % 2 == 0)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#151",
    "weight": 1.0
  },
  {
    "name": "EvenSqure:4",
    "sat": "def sat(tot: int, xs=[58607.93384068141, 26960.422714894165, 220926.0, 32993.16403323761, 36258.0, 164898.58842568452, -22047.528018042995, 283472.0, -14768.0]):\n    for x in xs:\n        if x.is_integer() and x > 0 and x % 2 == 0:\n            tot -= int(x) ** 2\n\n    return tot == 0",
    "ans_type": "int",
    "sol_header": "def sol(xs=[58607.93384068141, 26960.422714894165, 220926.0, 32993.16403323761, 36258.0, 164898.58842568452, -22047.528018042995, 283472.0, -14768.0]):",
    "sol_docstring": "    \"\"\"Find the sum of the squares of the positive even integers\n\n    [2.0, 3.0, 2.5, 4.0] => 20\n    \"\"\"",
    "sol_bodies": [
      "    return sum(int(x) ** 2 for x in xs if x.is_integer() and x > 0 and x % 2 == 0)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#151",
    "weight": 1.0
  },
  {
    "name": "ArrayDiff:0",
    "sat": "def sat(b: List[int], a=[1, 2, 3, 0, 4, 17, 2, 4, 5, 9, 8, 4], c=[1, 2, 3, 4, 0, 16, 2, 3, 5, 9, 8, 4]):\n    return len(b) == len(a) and all(i + j == k for i, j, k in zip(a, b, c))",
    "ans_type": "List[int]",
    "sol_header": "def sol(a=[1, 2, 3, 0, 4, 17, 2, 4, 5, 9, 8, 4], c=[1, 2, 3, 4, 0, 16, 2, 3, 5, 9, 8, 4]):",
    "sol_docstring": "    \"\"\"Find an array that when added to vector a gives array vector c\n\n    [1, 2, 3], [4, 17, 5] => [3, 15, 2]\n    \"\"\"",
    "sol_bodies": [
      "    return [k - i for i, k in zip(a, c)]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#152",
    "weight": 1.0
  },
  {
    "name": "ArrayDiff:1",
    "sat": "def sat(b: List[int], a=[14, -1, 12, 11, 3, -1, 18, 5, 8, 5, 6, 1], c=[15, 19, 15, 19, 4, 1, 7, 12, -1, 16, 11, 5]):\n    return len(b) == len(a) and all(i + j == k for i, j, k in zip(a, b, c))",
    "ans_type": "List[int]",
    "sol_header": "def sol(a=[14, -1, 12, 11, 3, -1, 18, 5, 8, 5, 6, 1], c=[15, 19, 15, 19, 4, 1, 7, 12, -1, 16, 11, 5]):",
    "sol_docstring": "    \"\"\"Find an array that when added to vector a gives array vector c\n\n    [1, 2, 3], [4, 17, 5] => [3, 15, 2]\n    \"\"\"",
    "sol_bodies": [
      "    return [k - i for i, k in zip(a, c)]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#152",
    "weight": 1.0
  },
  {
    "name": "ArrayDiff:2",
    "sat": "def sat(b: List[int], a=[14, 14, 2, 1, 11, 10, 15, 11, 9, 10, 4, 1, 7, 10, 16, 12], c=[5, 11, 16, 8, 19, 12, 19, 9, 10, 11, 14, 18, 2, 2, 0, 17]):\n    return len(b) == len(a) and all(i + j == k for i, j, k in zip(a, b, c))",
    "ans_type": "List[int]",
    "sol_header": "def sol(a=[14, 14, 2, 1, 11, 10, 15, 11, 9, 10, 4, 1, 7, 10, 16, 12], c=[5, 11, 16, 8, 19, 12, 19, 9, 10, 11, 14, 18, 2, 2, 0, 17]):",
    "sol_docstring": "    \"\"\"Find an array that when added to vector a gives array vector c\n\n    [1, 2, 3], [4, 17, 5] => [3, 15, 2]\n    \"\"\"",
    "sol_bodies": [
      "    return [k - i for i, k in zip(a, c)]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#152",
    "weight": 1.0
  },
  {
    "name": "ArrayDiff:3",
    "sat": "def sat(b: List[int], a=[4, 8, 14, 17, 15, -1, 17, 8, -1, 4, 3, 10, 2, 13, 1], c=[13, 14, 11, 18, 16, 8, 14, 3, 0, 9, 7, 19, 11, 15, 9]):\n    return len(b) == len(a) and all(i + j == k for i, j, k in zip(a, b, c))",
    "ans_type": "List[int]",
    "sol_header": "def sol(a=[4, 8, 14, 17, 15, -1, 17, 8, -1, 4, 3, 10, 2, 13, 1], c=[13, 14, 11, 18, 16, 8, 14, 3, 0, 9, 7, 19, 11, 15, 9]):",
    "sol_docstring": "    \"\"\"Find an array that when added to vector a gives array vector c\n\n    [1, 2, 3], [4, 17, 5] => [3, 15, 2]\n    \"\"\"",
    "sol_bodies": [
      "    return [k - i for i, k in zip(a, c)]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#152",
    "weight": 1.0
  },
  {
    "name": "ArrayDiff:4",
    "sat": "def sat(b: List[int], a=[13, 10, 7, 7, 1, 10, 0, 17, 5, 14, 10, 14], c=[13, 13, 17, 4, 18, 17, 12, 16, 0, 3, 12, 14]):\n    return len(b) == len(a) and all(i + j == k for i, j, k in zip(a, b, c))",
    "ans_type": "List[int]",
    "sol_header": "def sol(a=[13, 10, 7, 7, 1, 10, 0, 17, 5, 14, 10, 14], c=[13, 13, 17, 4, 18, 17, 12, 16, 0, 3, 12, 14]):",
    "sol_docstring": "    \"\"\"Find an array that when added to vector a gives array vector c\n\n    [1, 2, 3], [4, 17, 5] => [3, 15, 2]\n    \"\"\"",
    "sol_bodies": [
      "    return [k - i for i, k in zip(a, c)]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#152",
    "weight": 1.0
  },
  {
    "name": "StrongestExtension:0",
    "sat": "def sat(s: str, class_name=\"TestClass\", extensions=['extEnd', 'LOL', 'SuPeRbLy', 'v9ACLQWTEW', 'PickMe', 'AI']):\n    assert s.startswith(class_name + \".\")\n    ext = s[len(class_name) + 1:]\n\n    def case_delta(x: str):\n        tot = 0\n        for c in x:\n            if c.isupper():\n                tot += 1\n            elif c.islower():\n                tot -= 1\n        return tot\n\n    return ext in extensions and case_delta(ext) == max([case_delta(x) for x in extensions])",
    "ans_type": "str",
    "sol_header": "def sol(class_name=\"TestClass\", extensions=['extEnd', 'LOL', 'SuPeRbLy', 'v9ACLQWTEW', 'PickMe', 'AI']):",
    "sol_docstring": "    \"\"\"Find the class_name.extension for the extension that has the largest #capitals - #lowercase letters\"\"\"",
    "sol_bodies": [
      "    def case_delta(x: str):\n        tot = 0\n        for c in x:\n            if c.isupper():\n                tot += 1\n            elif c.islower():\n                tot -= 1\n        return tot\n\n    return class_name + \".\" + max(extensions, key=case_delta)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#153",
    "weight": 1.0
  },
  {
    "name": "StrongestExtension:1",
    "sat": "def sat(s: str, class_name=\"Lyhithywuwotu\", extensions=['moRUTExterefI', 'vItHu', 'xIWygaly', 'zONITh', 'ChinELAbiFOfywUcU', 'sywyfIFuTagAX', 'CIcECHiriQUuXuxuh', 'JUFeSA']):\n    assert s.startswith(class_name + \".\")\n    ext = s[len(class_name) + 1:]\n\n    def case_delta(x: str):\n        tot = 0\n        for c in x:\n            if c.isupper():\n                tot += 1\n            elif c.islower():\n                tot -= 1\n        return tot\n\n    return ext in extensions and case_delta(ext) == max([case_delta(x) for x in extensions])",
    "ans_type": "str",
    "sol_header": "def sol(class_name=\"Lyhithywuwotu\", extensions=['moRUTExterefI', 'vItHu', 'xIWygaly', 'zONITh', 'ChinELAbiFOfywUcU', 'sywyfIFuTagAX', 'CIcECHiriQUuXuxuh', 'JUFeSA']):",
    "sol_docstring": "    \"\"\"Find the class_name.extension for the extension that has the largest #capitals - #lowercase letters\"\"\"",
    "sol_bodies": [
      "    def case_delta(x: str):\n        tot = 0\n        for c in x:\n            if c.isupper():\n                tot += 1\n            elif c.islower():\n                tot -= 1\n        return tot\n\n    return class_name + \".\" + max(extensions, key=case_delta)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#153",
    "weight": 1.0
  },
  {
    "name": "StrongestExtension:2",
    "sat": "def sat(s: str, class_name=\"Textafarole\", extensions=['bEzETExTutheQuYCetH', 'FUFetEpaPafawIxegIbI', 'fUxuXYfOmutYM', 'HYCygiNY', 'FUnaVYcHity', 'th', 'dULUDyQui', 'rAvUJUlAchUHAsOBese', 'tefO', 'vy']):\n    assert s.startswith(class_name + \".\")\n    ext = s[len(class_name) + 1:]\n\n    def case_delta(x: str):\n        tot = 0\n        for c in x:\n            if c.isupper():\n                tot += 1\n            elif c.islower():\n                tot -= 1\n        return tot\n\n    return ext in extensions and case_delta(ext) == max([case_delta(x) for x in extensions])",
    "ans_type": "str",
    "sol_header": "def sol(class_name=\"Textafarole\", extensions=['bEzETExTutheQuYCetH', 'FUFetEpaPafawIxegIbI', 'fUxuXYfOmutYM', 'HYCygiNY', 'FUnaVYcHity', 'th', 'dULUDyQui', 'rAvUJUlAchUHAsOBese', 'tefO', 'vy']):",
    "sol_docstring": "    \"\"\"Find the class_name.extension for the extension that has the largest #capitals - #lowercase letters\"\"\"",
    "sol_bodies": [
      "    def case_delta(x: str):\n        tot = 0\n        for c in x:\n            if c.isupper():\n                tot += 1\n            elif c.islower():\n                tot -= 1\n        return tot\n\n    return class_name + \".\" + max(extensions, key=case_delta)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#153",
    "weight": 1.0
  },
  {
    "name": "StrongestExtension:3",
    "sat": "def sat(s: str, class_name=\"Gudes\", extensions=['CHOXeHeTAsUxyTe', 'QuEtHeTe', 'NOtEX', 'sehYJyFecIte', 'RySyJIFADEXETYBopUL', 'taMEcYW']):\n    assert s.startswith(class_name + \".\")\n    ext = s[len(class_name) + 1:]\n\n    def case_delta(x: str):\n        tot = 0\n        for c in x:\n            if c.isupper():\n                tot += 1\n            elif c.islower():\n                tot -= 1\n        return tot\n\n    return ext in extensions and case_delta(ext) == max([case_delta(x) for x in extensions])",
    "ans_type": "str",
    "sol_header": "def sol(class_name=\"Gudes\", extensions=['CHOXeHeTAsUxyTe', 'QuEtHeTe', 'NOtEX', 'sehYJyFecIte', 'RySyJIFADEXETYBopUL', 'taMEcYW']):",
    "sol_docstring": "    \"\"\"Find the class_name.extension for the extension that has the largest #capitals - #lowercase letters\"\"\"",
    "sol_bodies": [
      "    def case_delta(x: str):\n        tot = 0\n        for c in x:\n            if c.isupper():\n                tot += 1\n            elif c.islower():\n                tot -= 1\n        return tot\n\n    return class_name + \".\" + max(extensions, key=case_delta)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#153",
    "weight": 1.0
  },
  {
    "name": "StrongestExtension:4",
    "sat": "def sat(s: str, class_name=\"Ruxomyw\", extensions=['PUfam', 'H', 'PEVYtHAxe', 'cInyTex', 'PoJApESOch', 'teXTidaQuigUPOtho', 'TEXteSYSyWEQuy', 'C', 'ZEFutexTImyjUHi', 'CIcybAMeT', 'XIWAvaDoBe']):\n    assert s.startswith(class_name + \".\")\n    ext = s[len(class_name) + 1:]\n\n    def case_delta(x: str):\n        tot = 0\n        for c in x:\n            if c.isupper():\n                tot += 1\n            elif c.islower():\n                tot -= 1\n        return tot\n\n    return ext in extensions and case_delta(ext) == max([case_delta(x) for x in extensions])",
    "ans_type": "str",
    "sol_header": "def sol(class_name=\"Ruxomyw\", extensions=['PUfam', 'H', 'PEVYtHAxe', 'cInyTex', 'PoJApESOch', 'teXTidaQuigUPOtho', 'TEXteSYSyWEQuy', 'C', 'ZEFutexTImyjUHi', 'CIcybAMeT', 'XIWAvaDoBe']):",
    "sol_docstring": "    \"\"\"Find the class_name.extension for the extension that has the largest #capitals - #lowercase letters\"\"\"",
    "sol_bodies": [
      "    def case_delta(x: str):\n        tot = 0\n        for c in x:\n            if c.isupper():\n                tot += 1\n            elif c.islower():\n                tot -= 1\n        return tot\n\n    return class_name + \".\" + max(extensions, key=case_delta)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#153",
    "weight": 1.0
  },
  {
    "name": "RotateString:0",
    "sat": "def sat(r: str, s=\"light star\", t=\"I love to look at the starlight!\"):\n    return r in t and len(r) == len(s) and r in s + s",
    "ans_type": "str",
    "sol_header": "def sol(s=\"light star\", t=\"I love to look at the starlight!\"):",
    "sol_docstring": "    \"\"\"Find a rotation of string s that is a substring of t\n\n    Input Example:\n    s=\"test\", t=\"I love lattes\"\n\n    Output Example:\n    \"ttes\"\n    \"\"\"",
    "sol_bodies": [
      "    return next(s[i:] + s[:i] for i in range(len(s)) if s[i:] + s[:i] in t)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#154\n\nThis puzzle (and RotateSort from #109) use the fact that a string is a rotation of r if it is a substring of r+r",
    "weight": 1.0
  },
  {
    "name": "RotateString:1",
    "sat": "def sat(r: str, s=\"fuz tox banu dukukyjosuthihono\", t=\"sikysefylacywitijuz thosowehiv kiviwas girezol betext lepumarasithihonofuz tox banu dukukyjosutog kuquinecakyt\"):\n    return r in t and len(r) == len(s) and r in s + s",
    "ans_type": "str",
    "sol_header": "def sol(s=\"fuz tox banu dukukyjosuthihono\", t=\"sikysefylacywitijuz thosowehiv kiviwas girezol betext lepumarasithihonofuz tox banu dukukyjosutog kuquinecakyt\"):",
    "sol_docstring": "    \"\"\"Find a rotation of string s that is a substring of t\n\n    Input Example:\n    s=\"test\", t=\"I love lattes\"\n\n    Output Example:\n    \"ttes\"\n    \"\"\"",
    "sol_bodies": [
      "    return next(s[i:] + s[:i] for i in range(len(s)) if s[i:] + s[:i] in t)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#154\n\nThis puzzle (and RotateSort from #109) use the fact that a string is a rotation of r if it is a substring of r+r",
    "weight": 1.0
  },
  {
    "name": "RotateString:2",
    "sat": "def sat(r: str, s=\"vyquaquabuwuktus tyryrezywovimu sopikalo \", t=\"zugu benuzyca cafoca gawy sycapoxitus tyryrezywovimu sopikalo vyquaquabuwuko citextytextythakidu basikyched\"):\n    return r in t and len(r) == len(s) and r in s + s",
    "ans_type": "str",
    "sol_header": "def sol(s=\"vyquaquabuwuktus tyryrezywovimu sopikalo \", t=\"zugu benuzyca cafoca gawy sycapoxitus tyryrezywovimu sopikalo vyquaquabuwuko citextytextythakidu basikyched\"):",
    "sol_docstring": "    \"\"\"Find a rotation of string s that is a substring of t\n\n    Input Example:\n    s=\"test\", t=\"I love lattes\"\n\n    Output Example:\n    \"ttes\"\n    \"\"\"",
    "sol_bodies": [
      "    return next(s[i:] + s[:i] for i in range(len(s)) if s[i:] + s[:i] in t)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#154\n\nThis puzzle (and RotateSort from #109) use the fact that a string is a rotation of r if it is a substring of r+r",
    "weight": 1.0
  },
  {
    "name": "RotateString:3",
    "sat": "def sat(r: str, s=\"udynybu cequelynxebalu w guh\", t=\"zigoxesychujocefete nyquuquu wubupi quidoxebalu w guhudynybu cequelynuquumythaku xet syquaxatext lizevachuciconolove\"):\n    return r in t and len(r) == len(s) and r in s + s",
    "ans_type": "str",
    "sol_header": "def sol(s=\"udynybu cequelynxebalu w guh\", t=\"zigoxesychujocefete nyquuquu wubupi quidoxebalu w guhudynybu cequelynuquumythaku xet syquaxatext lizevachuciconolove\"):",
    "sol_docstring": "    \"\"\"Find a rotation of string s that is a substring of t\n\n    Input Example:\n    s=\"test\", t=\"I love lattes\"\n\n    Output Example:\n    \"ttes\"\n    \"\"\"",
    "sol_bodies": [
      "    return next(s[i:] + s[:i] for i in range(len(s)) if s[i:] + s[:i] in t)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#154\n\nThis puzzle (and RotateSort from #109) use the fact that a string is a rotation of r if it is a substring of r+r",
    "weight": 1.0
  },
  {
    "name": "RotateString:4",
    "sat": "def sat(r: str, s=\"fecajajeh b tythanenifewed quomekucybimudegicyj zos depogip kmowe\", t=\"fuch mowefecajajeh b tythanenifewed quomekucybimudegicyj zos depogip kotextu hothakatozate thyzet\"):\n    return r in t and len(r) == len(s) and r in s + s",
    "ans_type": "str",
    "sol_header": "def sol(s=\"fecajajeh b tythanenifewed quomekucybimudegicyj zos depogip kmowe\", t=\"fuch mowefecajajeh b tythanenifewed quomekucybimudegicyj zos depogip kotextu hothakatozate thyzet\"):",
    "sol_docstring": "    \"\"\"Find a rotation of string s that is a substring of t\n\n    Input Example:\n    s=\"test\", t=\"I love lattes\"\n\n    Output Example:\n    \"ttes\"\n    \"\"\"",
    "sol_bodies": [
      "    return next(s[i:] + s[:i] for i in range(len(s)) if s[i:] + s[:i] in t)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#154\n\nThis puzzle (and RotateSort from #109) use the fact that a string is a rotation of r if it is a substring of r+r",
    "weight": 1.0
  },
  {
    "name": "EvenOddDigits:0",
    "sat": "def sat(n: int, evens=17, odds=3):\n    for c in str(n):\n        if int(c) % 2 == 0:\n            evens -= 1\n        else:\n            odds -= 1\n    return evens == 0 and odds == 0",
    "ans_type": "int",
    "sol_header": "def sol(evens=17, odds=3):",
    "sol_docstring": "    \"\"\"Find an integer n >= 0 with the given number of even and odd digits.\n\n    evens=3, odds=4 => 2381695\"\"\"",
    "sol_bodies": [
      "    return int(\"2\" * evens + \"1\" * odds)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#155",
    "weight": 1.0
  },
  {
    "name": "EvenOddDigits:1",
    "sat": "def sat(n: int, evens=117, odds=56):\n    for c in str(n):\n        if int(c) % 2 == 0:\n            evens -= 1\n        else:\n            odds -= 1\n    return evens == 0 and odds == 0",
    "ans_type": "int",
    "sol_header": "def sol(evens=117, odds=56):",
    "sol_docstring": "    \"\"\"Find an integer n >= 0 with the given number of even and odd digits.\n\n    evens=3, odds=4 => 2381695\"\"\"",
    "sol_bodies": [
      "    return int(\"2\" * evens + \"1\" * odds)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#155",
    "weight": 1.0
  },
  {
    "name": "EvenOddDigits:2",
    "sat": "def sat(n: int, evens=114, odds=119):\n    for c in str(n):\n        if int(c) % 2 == 0:\n            evens -= 1\n        else:\n            odds -= 1\n    return evens == 0 and odds == 0",
    "ans_type": "int",
    "sol_header": "def sol(evens=114, odds=119):",
    "sol_docstring": "    \"\"\"Find an integer n >= 0 with the given number of even and odd digits.\n\n    evens=3, odds=4 => 2381695\"\"\"",
    "sol_bodies": [
      "    return int(\"2\" * evens + \"1\" * odds)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#155",
    "weight": 1.0
  },
  {
    "name": "EvenOddDigits:3",
    "sat": "def sat(n: int, evens=133, odds=33):\n    for c in str(n):\n        if int(c) % 2 == 0:\n            evens -= 1\n        else:\n            odds -= 1\n    return evens == 0 and odds == 0",
    "ans_type": "int",
    "sol_header": "def sol(evens=133, odds=33):",
    "sol_docstring": "    \"\"\"Find an integer n >= 0 with the given number of even and odd digits.\n\n    evens=3, odds=4 => 2381695\"\"\"",
    "sol_bodies": [
      "    return int(\"2\" * evens + \"1\" * odds)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#155",
    "weight": 1.0
  },
  {
    "name": "EvenOddDigits:4",
    "sat": "def sat(n: int, evens=8, odds=114):\n    for c in str(n):\n        if int(c) % 2 == 0:\n            evens -= 1\n        else:\n            odds -= 1\n    return evens == 0 and odds == 0",
    "ans_type": "int",
    "sol_header": "def sol(evens=8, odds=114):",
    "sol_docstring": "    \"\"\"Find an integer n >= 0 with the given number of even and odd digits.\n\n    evens=3, odds=4 => 2381695\"\"\"",
    "sol_bodies": [
      "    return int(\"2\" * evens + \"1\" * odds)"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#155",
    "weight": 1.0
  },
  {
    "name": "RomanNumerals:0",
    "sat": "def sat(roman: str, n=2414):\n    key = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n           100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n           10: 'x', 9: 'ix', 5: 'v', 4: 'iv',\n           1: 'i'}\n    m = 0\n    for base in [1000, 100, 10, 1]:\n        for mul in [9, 4, 5, 1, 1, 1]:  # up to three 1's, move on after 9 or 4\n            val = base * mul\n            if val in key and roman.startswith(key[val]):\n                m += val\n                roman = roman[len(key[val]):]\n                if mul == 9 or mul == 4:  # 9 or 4 can't be followed by anything else\n                    break\n    return m == n",
    "ans_type": "str",
    "sol_header": "def sol(n=2414):",
    "sol_docstring": "    \"\"\"Convert integer 0 < n < 4000 to roman numerals, and make it lowercase\n\n    11 => \"xi\"\n    \"\"\"",
    "sol_bodies": [
      "    units = dict(m=1000, cm=900, d=500, cd=400, c=100, xc=90, l=50, xl=40, x=10, ix=9, v=5, iv=4, i=1)\n    roman = \"\"\n    for s, i in units.items():\n        while n >= i:\n            roman += s\n            n -= i\n    return roman"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#156\n    \nDo not add a reverse puzzle converting roman numerals to arabic numbers as it would give away the solution.",
    "weight": 1.0
  },
  {
    "name": "RomanNumerals:1",
    "sat": "def sat(roman: str, n=2058):\n    key = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n           100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n           10: 'x', 9: 'ix', 5: 'v', 4: 'iv',\n           1: 'i'}\n    m = 0\n    for base in [1000, 100, 10, 1]:\n        for mul in [9, 4, 5, 1, 1, 1]:  # up to three 1's, move on after 9 or 4\n            val = base * mul\n            if val in key and roman.startswith(key[val]):\n                m += val\n                roman = roman[len(key[val]):]\n                if mul == 9 or mul == 4:  # 9 or 4 can't be followed by anything else\n                    break\n    return m == n",
    "ans_type": "str",
    "sol_header": "def sol(n=2058):",
    "sol_docstring": "    \"\"\"Convert integer 0 < n < 4000 to roman numerals, and make it lowercase\n\n    11 => \"xi\"\n    \"\"\"",
    "sol_bodies": [
      "    units = dict(m=1000, cm=900, d=500, cd=400, c=100, xc=90, l=50, xl=40, x=10, ix=9, v=5, iv=4, i=1)\n    roman = \"\"\n    for s, i in units.items():\n        while n >= i:\n            roman += s\n            n -= i\n    return roman"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#156\n    \nDo not add a reverse puzzle converting roman numerals to arabic numbers as it would give away the solution.",
    "weight": 1.0
  },
  {
    "name": "RomanNumerals:2",
    "sat": "def sat(roman: str, n=1467):\n    key = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n           100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n           10: 'x', 9: 'ix', 5: 'v', 4: 'iv',\n           1: 'i'}\n    m = 0\n    for base in [1000, 100, 10, 1]:\n        for mul in [9, 4, 5, 1, 1, 1]:  # up to three 1's, move on after 9 or 4\n            val = base * mul\n            if val in key and roman.startswith(key[val]):\n                m += val\n                roman = roman[len(key[val]):]\n                if mul == 9 or mul == 4:  # 9 or 4 can't be followed by anything else\n                    break\n    return m == n",
    "ans_type": "str",
    "sol_header": "def sol(n=1467):",
    "sol_docstring": "    \"\"\"Convert integer 0 < n < 4000 to roman numerals, and make it lowercase\n\n    11 => \"xi\"\n    \"\"\"",
    "sol_bodies": [
      "    units = dict(m=1000, cm=900, d=500, cd=400, c=100, xc=90, l=50, xl=40, x=10, ix=9, v=5, iv=4, i=1)\n    roman = \"\"\n    for s, i in units.items():\n        while n >= i:\n            roman += s\n            n -= i\n    return roman"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#156\n    \nDo not add a reverse puzzle converting roman numerals to arabic numbers as it would give away the solution.",
    "weight": 1.0
  },
  {
    "name": "RomanNumerals:3",
    "sat": "def sat(roman: str, n=1533):\n    key = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n           100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n           10: 'x', 9: 'ix', 5: 'v', 4: 'iv',\n           1: 'i'}\n    m = 0\n    for base in [1000, 100, 10, 1]:\n        for mul in [9, 4, 5, 1, 1, 1]:  # up to three 1's, move on after 9 or 4\n            val = base * mul\n            if val in key and roman.startswith(key[val]):\n                m += val\n                roman = roman[len(key[val]):]\n                if mul == 9 or mul == 4:  # 9 or 4 can't be followed by anything else\n                    break\n    return m == n",
    "ans_type": "str",
    "sol_header": "def sol(n=1533):",
    "sol_docstring": "    \"\"\"Convert integer 0 < n < 4000 to roman numerals, and make it lowercase\n\n    11 => \"xi\"\n    \"\"\"",
    "sol_bodies": [
      "    units = dict(m=1000, cm=900, d=500, cd=400, c=100, xc=90, l=50, xl=40, x=10, ix=9, v=5, iv=4, i=1)\n    roman = \"\"\n    for s, i in units.items():\n        while n >= i:\n            roman += s\n            n -= i\n    return roman"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#156\n    \nDo not add a reverse puzzle converting roman numerals to arabic numbers as it would give away the solution.",
    "weight": 1.0
  },
  {
    "name": "RomanNumerals:4",
    "sat": "def sat(roman: str, n=114):\n    key = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n           100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n           10: 'x', 9: 'ix', 5: 'v', 4: 'iv',\n           1: 'i'}\n    m = 0\n    for base in [1000, 100, 10, 1]:\n        for mul in [9, 4, 5, 1, 1, 1]:  # up to three 1's, move on after 9 or 4\n            val = base * mul\n            if val in key and roman.startswith(key[val]):\n                m += val\n                roman = roman[len(key[val]):]\n                if mul == 9 or mul == 4:  # 9 or 4 can't be followed by anything else\n                    break\n    return m == n",
    "ans_type": "str",
    "sol_header": "def sol(n=114):",
    "sol_docstring": "    \"\"\"Convert integer 0 < n < 4000 to roman numerals, and make it lowercase\n\n    11 => \"xi\"\n    \"\"\"",
    "sol_bodies": [
      "    units = dict(m=1000, cm=900, d=500, cd=400, c=100, xc=90, l=50, xl=40, x=10, ix=9, v=5, iv=4, i=1)\n    roman = \"\"\n    for s, i in units.items():\n        while n >= i:\n            roman += s\n            n -= i\n    return roman"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#156\n    \nDo not add a reverse puzzle converting roman numerals to arabic numbers as it would give away the solution.",
    "weight": 1.0
  },
  {
    "name": "PythagoreanTriples:0",
    "sat": "def sat(triples: List[List[int]], n=920, m=799):\n    for a, b, c in triples:\n        if not (a * a + b * b == c * c and 0 < a < b < c <= n):\n            return False\n    return triples == sorted(triples) and len(triples) >= m",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(n=920, m=799):",
    "sol_docstring": "    \"\"\"Find m Pythagorean triples a^2 + b^2 == c^2 for integers 0 < a < b < c <= n, in sorted order\n\n    (n=6, m=1) => [[3, 4, 5]]\n    \"\"\"",
    "sol_bodies": [
      "    return [[a, b, int((a * a + b * b) ** 0.5)]\n            for a in range(3, int(n / (2 ** 0.5)))\n            for b in range(a + 1, int((n * n - a * a) ** 0.5) + 1)\n            if ((a * a + b * b) ** 0.5).is_integer()]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#157",
    "weight": 1.0
  },
  {
    "name": "PythagoreanTriples:1",
    "sat": "def sat(triples: List[List[int]], n=847, m=721):\n    for a, b, c in triples:\n        if not (a * a + b * b == c * c and 0 < a < b < c <= n):\n            return False\n    return triples == sorted(triples) and len(triples) >= m",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(n=847, m=721):",
    "sol_docstring": "    \"\"\"Find m Pythagorean triples a^2 + b^2 == c^2 for integers 0 < a < b < c <= n, in sorted order\n\n    (n=6, m=1) => [[3, 4, 5]]\n    \"\"\"",
    "sol_bodies": [
      "    return [[a, b, int((a * a + b * b) ** 0.5)]\n            for a in range(3, int(n / (2 ** 0.5)))\n            for b in range(a + 1, int((n * n - a * a) ** 0.5) + 1)\n            if ((a * a + b * b) ** 0.5).is_integer()]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#157",
    "weight": 1.0
  },
  {
    "name": "PythagoreanTriples:2",
    "sat": "def sat(triples: List[List[int]], n=646, m=523):\n    for a, b, c in triples:\n        if not (a * a + b * b == c * c and 0 < a < b < c <= n):\n            return False\n    return triples == sorted(triples) and len(triples) >= m",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(n=646, m=523):",
    "sol_docstring": "    \"\"\"Find m Pythagorean triples a^2 + b^2 == c^2 for integers 0 < a < b < c <= n, in sorted order\n\n    (n=6, m=1) => [[3, 4, 5]]\n    \"\"\"",
    "sol_bodies": [
      "    return [[a, b, int((a * a + b * b) ** 0.5)]\n            for a in range(3, int(n / (2 ** 0.5)))\n            for b in range(a + 1, int((n * n - a * a) ** 0.5) + 1)\n            if ((a * a + b * b) ** 0.5).is_integer()]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#157",
    "weight": 1.0
  },
  {
    "name": "PythagoreanTriples:3",
    "sat": "def sat(triples: List[List[int]], n=901, m=780):\n    for a, b, c in triples:\n        if not (a * a + b * b == c * c and 0 < a < b < c <= n):\n            return False\n    return triples == sorted(triples) and len(triples) >= m",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(n=901, m=780):",
    "sol_docstring": "    \"\"\"Find m Pythagorean triples a^2 + b^2 == c^2 for integers 0 < a < b < c <= n, in sorted order\n\n    (n=6, m=1) => [[3, 4, 5]]\n    \"\"\"",
    "sol_bodies": [
      "    return [[a, b, int((a * a + b * b) ** 0.5)]\n            for a in range(3, int(n / (2 ** 0.5)))\n            for b in range(a + 1, int((n * n - a * a) ** 0.5) + 1)\n            if ((a * a + b * b) ** 0.5).is_integer()]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#157",
    "weight": 1.0
  },
  {
    "name": "PythagoreanTriples:4",
    "sat": "def sat(triples: List[List[int]], n=936, m=817):\n    for a, b, c in triples:\n        if not (a * a + b * b == c * c and 0 < a < b < c <= n):\n            return False\n    return triples == sorted(triples) and len(triples) >= m",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(n=936, m=817):",
    "sol_docstring": "    \"\"\"Find m Pythagorean triples a^2 + b^2 == c^2 for integers 0 < a < b < c <= n, in sorted order\n\n    (n=6, m=1) => [[3, 4, 5]]\n    \"\"\"",
    "sol_bodies": [
      "    return [[a, b, int((a * a + b * b) ** 0.5)]\n            for a in range(3, int(n / (2 ** 0.5)))\n            for b in range(a + 1, int((n * n - a * a) ** 0.5) + 1)\n            if ((a * a + b * b) ** 0.5).is_integer()]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#157",
    "weight": 1.0
  },
  {
    "name": "MostUnique:0",
    "sat": "def sat(s: str, pool=['cat', 'catatatatctsa', 'abcdefhijklmnop', '124259239185125', '', 'foo', 'unique']):\n    assert s in pool\n    n = len(set(s))\n    for p in pool:\n        assert len(set(p)) <= n\n    return True",
    "ans_type": "str",
    "sol_header": "def sol(pool=['cat', 'catatatatctsa', 'abcdefhijklmnop', '124259239185125', '', 'foo', 'unique']):",
    "sol_docstring": "    \"\"\"Select a string from the pool with the most unique characters\n\n    [\"woooow\", \"cow\"] => \"cow\"\n    \"\"\"",
    "sol_bodies": [
      "    return max(pool, key=lambda x: len(set(x)))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#158",
    "weight": 1.0
  },
  {
    "name": "MostUnique:1",
    "sat": "def sat(s: str, pool=['sibiloguhujuquenam', 'nyzidikedutexti', 'zatextuquyvakijahixa', 'textujig', 'cewynyrimatex', 'textusaxinypuhyheza']):\n    assert s in pool\n    n = len(set(s))\n    for p in pool:\n        assert len(set(p)) <= n\n    return True",
    "ans_type": "str",
    "sol_header": "def sol(pool=['sibiloguhujuquenam', 'nyzidikedutexti', 'zatextuquyvakijahixa', 'textujig', 'cewynyrimatex', 'textusaxinypuhyheza']):",
    "sol_docstring": "    \"\"\"Select a string from the pool with the most unique characters\n\n    [\"woooow\", \"cow\"] => \"cow\"\n    \"\"\"",
    "sol_bodies": [
      "    return max(pool, key=lambda x: len(set(x)))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#158",
    "weight": 1.0
  },
  {
    "name": "MostUnique:2",
    "sat": "def sat(s: str, pool=['gylapasugatextysar', 'zapy', 'hycokelet']):\n    assert s in pool\n    n = len(set(s))\n    for p in pool:\n        assert len(set(p)) <= n\n    return True",
    "ans_type": "str",
    "sol_header": "def sol(pool=['gylapasugatextysar', 'zapy', 'hycokelet']):",
    "sol_docstring": "    \"\"\"Select a string from the pool with the most unique characters\n\n    [\"woooow\", \"cow\"] => \"cow\"\n    \"\"\"",
    "sol_bodies": [
      "    return max(pool, key=lambda x: len(set(x)))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#158",
    "weight": 1.0
  },
  {
    "name": "MostUnique:3",
    "sat": "def sat(s: str, pool=['te', '', 'badypikyxucudil', 'fuhibatextixyburekan', 'chole']):\n    assert s in pool\n    n = len(set(s))\n    for p in pool:\n        assert len(set(p)) <= n\n    return True",
    "ans_type": "str",
    "sol_header": "def sol(pool=['te', '', 'badypikyxucudil', 'fuhibatextixyburekan', 'chole']):",
    "sol_docstring": "    \"\"\"Select a string from the pool with the most unique characters\n\n    [\"woooow\", \"cow\"] => \"cow\"\n    \"\"\"",
    "sol_bodies": [
      "    return max(pool, key=lambda x: len(set(x)))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#158",
    "weight": 1.0
  },
  {
    "name": "MostUnique:4",
    "sat": "def sat(s: str, pool=['th', 's', 'bulonu', 'r']):\n    assert s in pool\n    n = len(set(s))\n    for p in pool:\n        assert len(set(p)) <= n\n    return True",
    "ans_type": "str",
    "sol_header": "def sol(pool=['th', 's', 'bulonu', 'r']):",
    "sol_docstring": "    \"\"\"Select a string from the pool with the most unique characters\n\n    [\"woooow\", \"cow\"] => \"cow\"\n    \"\"\"",
    "sol_bodies": [
      "    return max(pool, key=lambda x: len(set(x)))"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#158",
    "weight": 1.0
  },
  {
    "name": "HungryRabbits:0",
    "sat": "def sat(results: List[List[int]], stats=[[2, 3, 18], [4, 9, 2], [2, 5, 7], [3, 8, 12], [4, 9, 106]]):\n    assert len(results) == len(stats)\n    for (tot, remaining), (eaten, need, stock) in zip(results, stats):\n        assert tot - eaten == min(need, stock)\n        assert stock < need and remaining == 0 or stock >= need and remaining + need == stock\n    return True",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(stats=[[2, 3, 18], [4, 9, 2], [2, 5, 7], [3, 8, 12], [4, 9, 106]]):",
    "sol_docstring": "    \"\"\"For each triple of eaten, need, stock return a pair of total appetite and remaining\n\n    [[2, 5, 6], [3, 9, 22]] => [[7, 1], [12, 13]]\n    \"\"\"",
    "sol_bodies": [
      "    results = []\n    for (eaten, need, stock) in stats:\n        results.append([eaten + min(need, stock), max(0, stock - need)])\n    return results"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#159",
    "weight": 1.0
  },
  {
    "name": "HungryRabbits:1",
    "sat": "def sat(results: List[List[int]], stats=[[4, 5, 3], [1, 0, 7], [3, 7, 7], [5, 3, 8], [9, 2, 4], [7, 6, 6]]):\n    assert len(results) == len(stats)\n    for (tot, remaining), (eaten, need, stock) in zip(results, stats):\n        assert tot - eaten == min(need, stock)\n        assert stock < need and remaining == 0 or stock >= need and remaining + need == stock\n    return True",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(stats=[[4, 5, 3], [1, 0, 7], [3, 7, 7], [5, 3, 8], [9, 2, 4], [7, 6, 6]]):",
    "sol_docstring": "    \"\"\"For each triple of eaten, need, stock return a pair of total appetite and remaining\n\n    [[2, 5, 6], [3, 9, 22]] => [[7, 1], [12, 13]]\n    \"\"\"",
    "sol_bodies": [
      "    results = []\n    for (eaten, need, stock) in stats:\n        results.append([eaten + min(need, stock), max(0, stock - need)])\n    return results"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#159",
    "weight": 1.0
  },
  {
    "name": "HungryRabbits:2",
    "sat": "def sat(results: List[List[int]], stats=[]):\n    assert len(results) == len(stats)\n    for (tot, remaining), (eaten, need, stock) in zip(results, stats):\n        assert tot - eaten == min(need, stock)\n        assert stock < need and remaining == 0 or stock >= need and remaining + need == stock\n    return True",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(stats=[]):",
    "sol_docstring": "    \"\"\"For each triple of eaten, need, stock return a pair of total appetite and remaining\n\n    [[2, 5, 6], [3, 9, 22]] => [[7, 1], [12, 13]]\n    \"\"\"",
    "sol_bodies": [
      "    results = []\n    for (eaten, need, stock) in stats:\n        results.append([eaten + min(need, stock), max(0, stock - need)])\n    return results"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#159",
    "weight": 1.0
  },
  {
    "name": "HungryRabbits:3",
    "sat": "def sat(results: List[List[int]], stats=[[9, 2, 2], [2, 3, 1], [9, 1, 7], [9, 2, 3], [8, 6, 9], [9, 6, 5], [8, 9, 2], [9, 8, 4]]):\n    assert len(results) == len(stats)\n    for (tot, remaining), (eaten, need, stock) in zip(results, stats):\n        assert tot - eaten == min(need, stock)\n        assert stock < need and remaining == 0 or stock >= need and remaining + need == stock\n    return True",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(stats=[[9, 2, 2], [2, 3, 1], [9, 1, 7], [9, 2, 3], [8, 6, 9], [9, 6, 5], [8, 9, 2], [9, 8, 4]]):",
    "sol_docstring": "    \"\"\"For each triple of eaten, need, stock return a pair of total appetite and remaining\n\n    [[2, 5, 6], [3, 9, 22]] => [[7, 1], [12, 13]]\n    \"\"\"",
    "sol_bodies": [
      "    results = []\n    for (eaten, need, stock) in stats:\n        results.append([eaten + min(need, stock), max(0, stock - need)])\n    return results"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#159",
    "weight": 1.0
  },
  {
    "name": "HungryRabbits:4",
    "sat": "def sat(results: List[List[int]], stats=[[1, 1, 9]]):\n    assert len(results) == len(stats)\n    for (tot, remaining), (eaten, need, stock) in zip(results, stats):\n        assert tot - eaten == min(need, stock)\n        assert stock < need and remaining == 0 or stock >= need and remaining + need == stock\n    return True",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(stats=[[1, 1, 9]]):",
    "sol_docstring": "    \"\"\"For each triple of eaten, need, stock return a pair of total appetite and remaining\n\n    [[2, 5, 6], [3, 9, 22]] => [[7, 1], [12, 13]]\n    \"\"\"",
    "sol_bodies": [
      "    results = []\n    for (eaten, need, stock) in stats:\n        results.append([eaten + min(need, stock), max(0, stock - need)])\n    return results"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#159",
    "weight": 1.0
  },
  {
    "name": "EvaluateOperators:0",
    "sat": "def sat(ops: List[str], target=2021, nums=[4, 6, 2, 1, 1, 3, 9]):\n    assert len(ops) == len(set(ops)) and set(ops) == {\"**\", \"*\", \"+\", \"-\", \"//\", \"%\"}\n    expr = str(nums[0])\n    for n, op in zip(nums[1:], ops):\n        expr += op + str(n)\n    return eval(expr) == target",
    "ans_type": "List[str]",
    "sol_header": "def sol(target=2021, nums=[4, 6, 2, 1, 1, 3, 9]):",
    "sol_docstring": "    \"\"\"Find a permutation of the operators +-*/^% which when inserted between nums evaluates to target\n\n    target=3, nums=[7, 2, 3, 4, 5, 1, 6] => [\"+\", \"*\", \"**\", \"%\", \"//\", \"-\"]\n                                            # because 7 + 2 * 3 ** 4 % 5 // 1 - 6 == 3\n    \"\"\"",
    "sol_bodies": [
      "    from itertools import permutations\n    for ops in permutations([\"**\", \"*\", \"+\", \"-\", \"//\", \"%\"]):\n        expr = str(nums[0])\n        for n, op in zip(nums[1:], ops):\n            expr += op + str(n)\n        try:\n            if eval(expr) == target:\n                return list(ops)\n        except (ZeroDivisionError, SyntaxError):\n            pass\n    assert False"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#160",
    "weight": 1.0
  },
  {
    "name": "EvaluateOperators:1",
    "sat": "def sat(ops: List[str], target=4, nums=[5, 4, 8, 9, 3, 6, 2]):\n    assert len(ops) == len(set(ops)) and set(ops) == {\"**\", \"*\", \"+\", \"-\", \"//\", \"%\"}\n    expr = str(nums[0])\n    for n, op in zip(nums[1:], ops):\n        expr += op + str(n)\n    return eval(expr) == target",
    "ans_type": "List[str]",
    "sol_header": "def sol(target=4, nums=[5, 4, 8, 9, 3, 6, 2]):",
    "sol_docstring": "    \"\"\"Find a permutation of the operators +-*/^% which when inserted between nums evaluates to target\n\n    target=3, nums=[7, 2, 3, 4, 5, 1, 6] => [\"+\", \"*\", \"**\", \"%\", \"//\", \"-\"]\n                                            # because 7 + 2 * 3 ** 4 % 5 // 1 - 6 == 3\n    \"\"\"",
    "sol_bodies": [
      "    from itertools import permutations\n    for ops in permutations([\"**\", \"*\", \"+\", \"-\", \"//\", \"%\"]):\n        expr = str(nums[0])\n        for n, op in zip(nums[1:], ops):\n            expr += op + str(n)\n        try:\n            if eval(expr) == target:\n                return list(ops)\n        except (ZeroDivisionError, SyntaxError):\n            pass\n    assert False"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#160",
    "weight": 1.0
  },
  {
    "name": "EvaluateOperators:2",
    "sat": "def sat(ops: List[str], target=-24995, nums=[1, 8, 5, 8, 5, 5, 5]):\n    assert len(ops) == len(set(ops)) and set(ops) == {\"**\", \"*\", \"+\", \"-\", \"//\", \"%\"}\n    expr = str(nums[0])\n    for n, op in zip(nums[1:], ops):\n        expr += op + str(n)\n    return eval(expr) == target",
    "ans_type": "List[str]",
    "sol_header": "def sol(target=-24995, nums=[1, 8, 5, 8, 5, 5, 5]):",
    "sol_docstring": "    \"\"\"Find a permutation of the operators +-*/^% which when inserted between nums evaluates to target\n\n    target=3, nums=[7, 2, 3, 4, 5, 1, 6] => [\"+\", \"*\", \"**\", \"%\", \"//\", \"-\"]\n                                            # because 7 + 2 * 3 ** 4 % 5 // 1 - 6 == 3\n    \"\"\"",
    "sol_bodies": [
      "    from itertools import permutations\n    for ops in permutations([\"**\", \"*\", \"+\", \"-\", \"//\", \"%\"]):\n        expr = str(nums[0])\n        for n, op in zip(nums[1:], ops):\n            expr += op + str(n)\n        try:\n            if eval(expr) == target:\n                return list(ops)\n        except (ZeroDivisionError, SyntaxError):\n            pass\n    assert False"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#160",
    "weight": 1.0
  },
  {
    "name": "EvaluateOperators:3",
    "sat": "def sat(ops: List[str], target=6, nums=[7, 4, 4, 2, 4, 1, 6]):\n    assert len(ops) == len(set(ops)) and set(ops) == {\"**\", \"*\", \"+\", \"-\", \"//\", \"%\"}\n    expr = str(nums[0])\n    for n, op in zip(nums[1:], ops):\n        expr += op + str(n)\n    return eval(expr) == target",
    "ans_type": "List[str]",
    "sol_header": "def sol(target=6, nums=[7, 4, 4, 2, 4, 1, 6]):",
    "sol_docstring": "    \"\"\"Find a permutation of the operators +-*/^% which when inserted between nums evaluates to target\n\n    target=3, nums=[7, 2, 3, 4, 5, 1, 6] => [\"+\", \"*\", \"**\", \"%\", \"//\", \"-\"]\n                                            # because 7 + 2 * 3 ** 4 % 5 // 1 - 6 == 3\n    \"\"\"",
    "sol_bodies": [
      "    from itertools import permutations\n    for ops in permutations([\"**\", \"*\", \"+\", \"-\", \"//\", \"%\"]):\n        expr = str(nums[0])\n        for n, op in zip(nums[1:], ops):\n            expr += op + str(n)\n        try:\n            if eval(expr) == target:\n                return list(ops)\n        except (ZeroDivisionError, SyntaxError):\n            pass\n    assert False"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#160",
    "weight": 1.0
  },
  {
    "name": "EvaluateOperators:4",
    "sat": "def sat(ops: List[str], target=38, nums=[6, 2, 1, 7, 1, 3, 1]):\n    assert len(ops) == len(set(ops)) and set(ops) == {\"**\", \"*\", \"+\", \"-\", \"//\", \"%\"}\n    expr = str(nums[0])\n    for n, op in zip(nums[1:], ops):\n        expr += op + str(n)\n    return eval(expr) == target",
    "ans_type": "List[str]",
    "sol_header": "def sol(target=38, nums=[6, 2, 1, 7, 1, 3, 1]):",
    "sol_docstring": "    \"\"\"Find a permutation of the operators +-*/^% which when inserted between nums evaluates to target\n\n    target=3, nums=[7, 2, 3, 4, 5, 1, 6] => [\"+\", \"*\", \"**\", \"%\", \"//\", \"-\"]\n                                            # because 7 + 2 * 3 ** 4 % 5 // 1 - 6 == 3\n    \"\"\"",
    "sol_bodies": [
      "    from itertools import permutations\n    for ops in permutations([\"**\", \"*\", \"+\", \"-\", \"//\", \"%\"]):\n        expr = str(nums[0])\n        for n, op in zip(nums[1:], ops):\n            expr += op + str(n)\n        try:\n            if eval(expr) == target:\n                return list(ops)\n        except (ZeroDivisionError, SyntaxError):\n            pass\n    assert False"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#160",
    "weight": 1.0
  },
  {
    "name": "ReverseCase:0",
    "sat": "def sat(rev: List[str], strs=['cat', 'u8u', '12532', '', '191', '4tUn8', 'ewrWQTEW', 'i', 'IoU']):\n    assert len(rev) == len(strs)\n    return all(r.swapcase() == s != r or r[::-1] == s == s.swapcase() for r, s in zip(rev, strs))",
    "ans_type": "List[str]",
    "sol_header": "def sol(strs=['cat', 'u8u', '12532', '', '191', '4tUn8', 'ewrWQTEW', 'i', 'IoU']):",
    "sol_docstring": "    \"\"\"Reverse the case of all strings. For those strings which contain no letters, reverse the strings.\n\n    [\"Test\", \"!@#\"] => [\"tEST\", \"#@!\"]\n    \"\"\"",
    "sol_bodies": [
      "    return [s.swapcase() if s.swapcase() != s else s[::-1] for s in strs]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#161",
    "weight": 1.0
  },
  {
    "name": "ReverseCase:1",
    "sat": "def sat(rev: List[str], strs=['vYWakiFoWElEnYjOfA', 'RO', '575', '943', '403', '-292', 'textY']):\n    assert len(rev) == len(strs)\n    return all(r.swapcase() == s != r or r[::-1] == s == s.swapcase() for r, s in zip(rev, strs))",
    "ans_type": "List[str]",
    "sol_header": "def sol(strs=['vYWakiFoWElEnYjOfA', 'RO', '575', '943', '403', '-292', 'textY']):",
    "sol_docstring": "    \"\"\"Reverse the case of all strings. For those strings which contain no letters, reverse the strings.\n\n    [\"Test\", \"!@#\"] => [\"tEST\", \"#@!\"]\n    \"\"\"",
    "sol_bodies": [
      "    return [s.swapcase() if s.swapcase() != s else s[::-1] for s in strs]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#161",
    "weight": 1.0
  },
  {
    "name": "ReverseCase:2",
    "sat": "def sat(rev: List[str], strs=['223', '990', '-603', 'Ma', '-963', 'kO', 'REThoFOhuVAnUCyMyhIC', '711', '-874']):\n    assert len(rev) == len(strs)\n    return all(r.swapcase() == s != r or r[::-1] == s == s.swapcase() for r, s in zip(rev, strs))",
    "ans_type": "List[str]",
    "sol_header": "def sol(strs=['223', '990', '-603', 'Ma', '-963', 'kO', 'REThoFOhuVAnUCyMyhIC', '711', '-874']):",
    "sol_docstring": "    \"\"\"Reverse the case of all strings. For those strings which contain no letters, reverse the strings.\n\n    [\"Test\", \"!@#\"] => [\"tEST\", \"#@!\"]\n    \"\"\"",
    "sol_bodies": [
      "    return [s.swapcase() if s.swapcase() != s else s[::-1] for s in strs]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#161",
    "weight": 1.0
  },
  {
    "name": "ReverseCase:3",
    "sat": "def sat(rev: List[str], strs=['-352', 'wi', '-787', '706', 'fYchUc', '542', 'JeJuzichUnaHugAc', '963']):\n    assert len(rev) == len(strs)\n    return all(r.swapcase() == s != r or r[::-1] == s == s.swapcase() for r, s in zip(rev, strs))",
    "ans_type": "List[str]",
    "sol_header": "def sol(strs=['-352', 'wi', '-787', '706', 'fYchUc', '542', 'JeJuzichUnaHugAc', '963']):",
    "sol_docstring": "    \"\"\"Reverse the case of all strings. For those strings which contain no letters, reverse the strings.\n\n    [\"Test\", \"!@#\"] => [\"tEST\", \"#@!\"]\n    \"\"\"",
    "sol_bodies": [
      "    return [s.swapcase() if s.swapcase() != s else s[::-1] for s in strs]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#161",
    "weight": 1.0
  },
  {
    "name": "ReverseCase:4",
    "sat": "def sat(rev: List[str], strs=['234', '-828', '330', 'NateXt', '-524', '-196', 'siciNUCewOCePUdiN']):\n    assert len(rev) == len(strs)\n    return all(r.swapcase() == s != r or r[::-1] == s == s.swapcase() for r, s in zip(rev, strs))",
    "ans_type": "List[str]",
    "sol_header": "def sol(strs=['234', '-828', '330', 'NateXt', '-524', '-196', 'siciNUCewOCePUdiN']):",
    "sol_docstring": "    \"\"\"Reverse the case of all strings. For those strings which contain no letters, reverse the strings.\n\n    [\"Test\", \"!@#\"] => [\"tEST\", \"#@!\"]\n    \"\"\"",
    "sol_bodies": [
      "    return [s.swapcase() if s.swapcase() != s else s[::-1] for s in strs]"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#161",
    "weight": 1.0
  },
  {
    "name": "ZobristCollision:0",
    "sat": "def sat(positions: List[List[int]]):\n\n    table = [[(i * 429436219 + j * 100239120) % 63491564 for j in range(13)] for i in range(64)]\n\n    def zobrist(pos):\n        h = 0\n        for i in range(64):\n            if pos[i]:\n                h ^= table[i][pos[i]]\n        return h\n\n    a, b = positions\n    return zobrist(a) == zobrist(b) and a != b",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"Find a collision for the given Zobrist chess board hash: https://en.wikipedia.org/wiki/Zobrist_hashing\n\n    Each of the two positions should be encoded as a list of 64 integers 0-12\"\"\"",
    "sol_bodies": [
      "    hashes = {}\n    table = [[(i * 429436219 + j * 100239120) % 63491564 for j in range(13)] for i in range(64)]\n\n    def zobrist(pos):\n        h = 0\n        for i in range(64):\n            if pos[i]:\n                h ^= table[i][pos[i]]\n        return h\n\n    for i in range(1, 100000000):\n        pos = [(i * 42 + ((i + 1) * j * 12589) % 54321) % 13 for j in range(64)]  # pseudo-random board\n        h = zobrist(pos)\n        if h in hashes:\n            return [pos, hashes[h]]\n        else:\n            hashes[h] = pos"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#162\n\nThe original problem was to compute an MD5 hash. This puzzle is a problem in the space of hashing, but of a\ndifferent nature.",
    "weight": 1.0
  },
  {
    "name": "EvenBetween:0",
    "sat": "def sat(ab: List[int], s=\"3298832990329923299432996329983300033002\"):\n    return abs(ab[0] - ab[1]) > 4 and s == \"\".join(str(i) for i in range(min(ab), max(ab) + 1) if i % 2 == 0)",
    "ans_type": "List[int]",
    "sol_header": "def sol(s=\"3298832990329923299432996329983300033002\"):",
    "sol_docstring": "    \"\"\"Find integers [a, b] that are at least 5 apart and such that concatenating the even numbers\n    between them gives the string s\n\n    \"32343638\" => [31, 38]\n    \"\"\"",
    "sol_bodies": [
      "    for i in range(1, len(s)):\n        n = int(s[:i])\n        n -= (n + 1) % 2  # make n odd\n        m = n + 1  # next even\n        t = \"\"\n        while len(t) < len(s):\n            t += str(m)\n            m += 2\n        if s == t:\n            return [n, m - 1]\n\n    assert False"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#163\n\nThe original problem was trivial to list the even single-digit numbers between two numbers:\n`a=2, b=12` => `[4, 6, 8]`. In this puzzle, we consider the string of even numbers formed when counting from\n`a` to `b`, e.g., `\"1618202224262830\"` when counting from `15` to `30`. The puzzle is, given such a string,\nfind `a` and `b`.",
    "weight": 1.0
  },
  {
    "name": "EvenBetween:1",
    "sat": "def sat(ab: List[int], s=\"38600386023860438606\"):\n    return abs(ab[0] - ab[1]) > 4 and s == \"\".join(str(i) for i in range(min(ab), max(ab) + 1) if i % 2 == 0)",
    "ans_type": "List[int]",
    "sol_header": "def sol(s=\"38600386023860438606\"):",
    "sol_docstring": "    \"\"\"Find integers [a, b] that are at least 5 apart and such that concatenating the even numbers\n    between them gives the string s\n\n    \"32343638\" => [31, 38]\n    \"\"\"",
    "sol_bodies": [
      "    for i in range(1, len(s)):\n        n = int(s[:i])\n        n -= (n + 1) % 2  # make n odd\n        m = n + 1  # next even\n        t = \"\"\n        while len(t) < len(s):\n            t += str(m)\n            m += 2\n        if s == t:\n            return [n, m - 1]\n\n    assert False"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#163\n\nThe original problem was trivial to list the even single-digit numbers between two numbers:\n`a=2, b=12` => `[4, 6, 8]`. In this puzzle, we consider the string of even numbers formed when counting from\n`a` to `b`, e.g., `\"1618202224262830\"` when counting from `15` to `30`. The puzzle is, given such a string,\nfind `a` and `b`.",
    "weight": 1.0
  },
  {
    "name": "EvenBetween:2",
    "sat": "def sat(ab: List[int], s=\"254042540625408\"):\n    return abs(ab[0] - ab[1]) > 4 and s == \"\".join(str(i) for i in range(min(ab), max(ab) + 1) if i % 2 == 0)",
    "ans_type": "List[int]",
    "sol_header": "def sol(s=\"254042540625408\"):",
    "sol_docstring": "    \"\"\"Find integers [a, b] that are at least 5 apart and such that concatenating the even numbers\n    between them gives the string s\n\n    \"32343638\" => [31, 38]\n    \"\"\"",
    "sol_bodies": [
      "    for i in range(1, len(s)):\n        n = int(s[:i])\n        n -= (n + 1) % 2  # make n odd\n        m = n + 1  # next even\n        t = \"\"\n        while len(t) < len(s):\n            t += str(m)\n            m += 2\n        if s == t:\n            return [n, m - 1]\n\n    assert False"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#163\n\nThe original problem was trivial to list the even single-digit numbers between two numbers:\n`a=2, b=12` => `[4, 6, 8]`. In this puzzle, we consider the string of even numbers formed when counting from\n`a` to `b`, e.g., `\"1618202224262830\"` when counting from `15` to `30`. The puzzle is, given such a string,\nfind `a` and `b`.",
    "weight": 1.0
  },
  {
    "name": "EvenBetween:3",
    "sat": "def sat(ab: List[int], s=\"32880328823288432886\"):\n    return abs(ab[0] - ab[1]) > 4 and s == \"\".join(str(i) for i in range(min(ab), max(ab) + 1) if i % 2 == 0)",
    "ans_type": "List[int]",
    "sol_header": "def sol(s=\"32880328823288432886\"):",
    "sol_docstring": "    \"\"\"Find integers [a, b] that are at least 5 apart and such that concatenating the even numbers\n    between them gives the string s\n\n    \"32343638\" => [31, 38]\n    \"\"\"",
    "sol_bodies": [
      "    for i in range(1, len(s)):\n        n = int(s[:i])\n        n -= (n + 1) % 2  # make n odd\n        m = n + 1  # next even\n        t = \"\"\n        while len(t) < len(s):\n            t += str(m)\n            m += 2\n        if s == t:\n            return [n, m - 1]\n\n    assert False"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#163\n\nThe original problem was trivial to list the even single-digit numbers between two numbers:\n`a=2, b=12` => `[4, 6, 8]`. In this puzzle, we consider the string of even numbers formed when counting from\n`a` to `b`, e.g., `\"1618202224262830\"` when counting from `15` to `30`. The puzzle is, given such a string,\nfind `a` and `b`.",
    "weight": 1.0
  },
  {
    "name": "EvenBetween:4",
    "sat": "def sat(ab: List[int], s=\"6062860630606326063460636\"):\n    return abs(ab[0] - ab[1]) > 4 and s == \"\".join(str(i) for i in range(min(ab), max(ab) + 1) if i % 2 == 0)",
    "ans_type": "List[int]",
    "sol_header": "def sol(s=\"6062860630606326063460636\"):",
    "sol_docstring": "    \"\"\"Find integers [a, b] that are at least 5 apart and such that concatenating the even numbers\n    between them gives the string s\n\n    \"32343638\" => [31, 38]\n    \"\"\"",
    "sol_bodies": [
      "    for i in range(1, len(s)):\n        n = int(s[:i])\n        n -= (n + 1) % 2  # make n odd\n        m = n + 1  # next even\n        t = \"\"\n        while len(t) < len(s):\n            t += str(m)\n            m += 2\n        if s == t:\n            return [n, m - 1]\n\n    assert False"
    ],
    "module": "human_eval.py",
    "notes": "Inspired by [HumanEval](https://github.com/openai/human-eval) \\#163\n\nThe original problem was trivial to list the even single-digit numbers between two numbers:\n`a=2, b=12` => `[4, 6, 8]`. In this puzzle, we consider the string of even numbers formed when counting from\n`a` to `b`, e.g., `\"1618202224262830\"` when counting from `15` to `30`. The puzzle is, given such a string,\nfind `a` and `b`.",
    "weight": 1.0
  },
  {
    "name": "IsEven:0",
    "sat": "def sat(b: bool, n=10):\n    i = 0\n    while i <= n:\n        if i + i == n:\n            return b == True\n        i += 1\n    return b == False",
    "ans_type": "bool",
    "sol_header": "def sol(n=10):",
    "sol_docstring": "    \"\"\"Determine if n can be evenly divided into two equal numbers. (Easy)\"\"\"",
    "sol_bodies": [
      "    return n % 2 == 0"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 4 A](https://codeforces.com/problemset/problem/4/A)",
    "weight": 1.0
  },
  {
    "name": "IsEven:1",
    "sat": "def sat(b: bool, n=0):\n    i = 0\n    while i <= n:\n        if i + i == n:\n            return b == True\n        i += 1\n    return b == False",
    "ans_type": "bool",
    "sol_header": "def sol(n=0):",
    "sol_docstring": "    \"\"\"Determine if n can be evenly divided into two equal numbers. (Easy)\"\"\"",
    "sol_bodies": [
      "    return n % 2 == 0"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 4 A](https://codeforces.com/problemset/problem/4/A)",
    "weight": 1.0
  },
  {
    "name": "IsEven:2",
    "sat": "def sat(b: bool, n=1):\n    i = 0\n    while i <= n:\n        if i + i == n:\n            return b == True\n        i += 1\n    return b == False",
    "ans_type": "bool",
    "sol_header": "def sol(n=1):",
    "sol_docstring": "    \"\"\"Determine if n can be evenly divided into two equal numbers. (Easy)\"\"\"",
    "sol_bodies": [
      "    return n % 2 == 0"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 4 A](https://codeforces.com/problemset/problem/4/A)",
    "weight": 1.0
  },
  {
    "name": "IsEven:3",
    "sat": "def sat(b: bool, n=2):\n    i = 0\n    while i <= n:\n        if i + i == n:\n            return b == True\n        i += 1\n    return b == False",
    "ans_type": "bool",
    "sol_header": "def sol(n=2):",
    "sol_docstring": "    \"\"\"Determine if n can be evenly divided into two equal numbers. (Easy)\"\"\"",
    "sol_bodies": [
      "    return n % 2 == 0"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 4 A](https://codeforces.com/problemset/problem/4/A)",
    "weight": 1.0
  },
  {
    "name": "IsEven:4",
    "sat": "def sat(b: bool, n=3):\n    i = 0\n    while i <= n:\n        if i + i == n:\n            return b == True\n        i += 1\n    return b == False",
    "ans_type": "bool",
    "sol_header": "def sol(n=3):",
    "sol_docstring": "    \"\"\"Determine if n can be evenly divided into two equal numbers. (Easy)\"\"\"",
    "sol_bodies": [
      "    return n % 2 == 0"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 4 A](https://codeforces.com/problemset/problem/4/A)",
    "weight": 1.0
  },
  {
    "name": "Abbreviate:0",
    "sat": "def sat(s: str, word=\"antidisestablishmentarianism\", max_len=10):\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and word[-1] == s[-1]",
    "ans_type": "str",
    "sol_header": "def sol(word=\"antidisestablishmentarianism\", max_len=10):",
    "sol_docstring": "    \"\"\"\n    Abbreviate strings longer than a given length by replacing everything but the first and last characters by\n    an integer indicating how many characters there were in between them.\n    \"\"\"",
    "sol_bodies": [
      "    if len(word) <= max_len:\n        return word\n    return f\"{word[0]}{len(word) - 2}{word[-1]}\""
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 71 A](https://codeforces.com/problemset/problem/71/A)",
    "weight": 1.0
  },
  {
    "name": "Abbreviate:1",
    "sat": "def sat(s: str, word=\"pawuzorythalirinasubyg\", max_len=12):\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and word[-1] == s[-1]",
    "ans_type": "str",
    "sol_header": "def sol(word=\"pawuzorythalirinasubyg\", max_len=12):",
    "sol_docstring": "    \"\"\"\n    Abbreviate strings longer than a given length by replacing everything but the first and last characters by\n    an integer indicating how many characters there were in between them.\n    \"\"\"",
    "sol_bodies": [
      "    if len(word) <= max_len:\n        return word\n    return f\"{word[0]}{len(word) - 2}{word[-1]}\""
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 71 A](https://codeforces.com/problemset/problem/71/A)",
    "weight": 1.0
  },
  {
    "name": "Abbreviate:2",
    "sat": "def sat(s: str, word=\"jomodosigezyfulach\", max_len=5):\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and word[-1] == s[-1]",
    "ans_type": "str",
    "sol_header": "def sol(word=\"jomodosigezyfulach\", max_len=5):",
    "sol_docstring": "    \"\"\"\n    Abbreviate strings longer than a given length by replacing everything but the first and last characters by\n    an integer indicating how many characters there were in between them.\n    \"\"\"",
    "sol_bodies": [
      "    if len(word) <= max_len:\n        return word\n    return f\"{word[0]}{len(word) - 2}{word[-1]}\""
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 71 A](https://codeforces.com/problemset/problem/71/A)",
    "weight": 1.0
  },
  {
    "name": "Abbreviate:3",
    "sat": "def sat(s: str, word=\"bybakichop\", max_len=12):\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and word[-1] == s[-1]",
    "ans_type": "str",
    "sol_header": "def sol(word=\"bybakichop\", max_len=12):",
    "sol_docstring": "    \"\"\"\n    Abbreviate strings longer than a given length by replacing everything but the first and last characters by\n    an integer indicating how many characters there were in between them.\n    \"\"\"",
    "sol_bodies": [
      "    if len(word) <= max_len:\n        return word\n    return f\"{word[0]}{len(word) - 2}{word[-1]}\""
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 71 A](https://codeforces.com/problemset/problem/71/A)",
    "weight": 1.0
  },
  {
    "name": "Abbreviate:4",
    "sat": "def sat(s: str, word=\"wywaxizodetextonigijalate\", max_len=5):\n    if len(word) <= max_len:\n        return word == s\n    return int(s[1:-1]) == len(word[1:-1]) and word[0] == s[0] and word[-1] == s[-1]",
    "ans_type": "str",
    "sol_header": "def sol(word=\"wywaxizodetextonigijalate\", max_len=5):",
    "sol_docstring": "    \"\"\"\n    Abbreviate strings longer than a given length by replacing everything but the first and last characters by\n    an integer indicating how many characters there were in between them.\n    \"\"\"",
    "sol_bodies": [
      "    if len(word) <= max_len:\n        return word\n    return f\"{word[0]}{len(word) - 2}{word[-1]}\""
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 71 A](https://codeforces.com/problemset/problem/71/A)",
    "weight": 1.0
  },
  {
    "name": "SquareTiles:0",
    "sat": "def sat(corners: List[List[int]], m=10, n=9, a=5, target=4):\n    covered = {(i + x, j + y) for i, j in corners for x in range(a) for y in range(a)}\n    assert len(covered) == len(corners) * a * a, \"Double coverage\"\n    return len(corners) <= target and covered.issuperset({(x, y) for x in range(m) for y in range(n)})",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(m=10, n=9, a=5, target=4):",
    "sol_docstring": "    \"\"\"Find a minimal list of corner locations for a\u00d7a tiles that covers [0, m] \u00d7 [0, n] and does not double-cover\n    squares.\n\n    Sample Input:\n    m = 10\n    n = 9\n    a = 5\n    target = 4\n\n    Sample Output:\n    [[0, 0], [0, 5], [5, 0], [5, 5]]\n    \"\"\"",
    "sol_bodies": [
      "    return [[x, y] for x in range(0, m, a) for y in range(0, n, a)]"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 1 A](https://codeforces.com/problemset/problem/1/A)",
    "weight": 1.0
  },
  {
    "name": "SquareTiles:1",
    "sat": "def sat(corners: List[List[int]], m=22, n=129, a=9, target=45):\n    covered = {(i + x, j + y) for i, j in corners for x in range(a) for y in range(a)}\n    assert len(covered) == len(corners) * a * a, \"Double coverage\"\n    return len(corners) <= target and covered.issuperset({(x, y) for x in range(m) for y in range(n)})",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(a=9, m=22, n=129, target=45):",
    "sol_docstring": "    \"\"\"Find a minimal list of corner locations for a\u00d7a tiles that covers [0, m] \u00d7 [0, n] and does not double-cover\n    squares.\n\n    Sample Input:\n    m = 10\n    n = 9\n    a = 5\n    target = 4\n\n    Sample Output:\n    [[0, 0], [0, 5], [5, 0], [5, 5]]\n    \"\"\"",
    "sol_bodies": [
      "    return [[x, y] for x in range(0, m, a) for y in range(0, n, a)]"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 1 A](https://codeforces.com/problemset/problem/1/A)",
    "weight": 1.0
  },
  {
    "name": "SquareTiles:2",
    "sat": "def sat(corners: List[List[int]], m=6, n=849, a=10, target=89):\n    covered = {(i + x, j + y) for i, j in corners for x in range(a) for y in range(a)}\n    assert len(covered) == len(corners) * a * a, \"Double coverage\"\n    return len(corners) <= target and covered.issuperset({(x, y) for x in range(m) for y in range(n)})",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(a=10, m=6, n=849, target=89):",
    "sol_docstring": "    \"\"\"Find a minimal list of corner locations for a\u00d7a tiles that covers [0, m] \u00d7 [0, n] and does not double-cover\n    squares.\n\n    Sample Input:\n    m = 10\n    n = 9\n    a = 5\n    target = 4\n\n    Sample Output:\n    [[0, 0], [0, 5], [5, 0], [5, 5]]\n    \"\"\"",
    "sol_bodies": [
      "    return [[x, y] for x in range(0, m, a) for y in range(0, n, a)]"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 1 A](https://codeforces.com/problemset/problem/1/A)",
    "weight": 1.0
  },
  {
    "name": "SquareTiles:3",
    "sat": "def sat(corners: List[List[int]], m=89, n=554, a=6, target=1397):\n    covered = {(i + x, j + y) for i, j in corners for x in range(a) for y in range(a)}\n    assert len(covered) == len(corners) * a * a, \"Double coverage\"\n    return len(corners) <= target and covered.issuperset({(x, y) for x in range(m) for y in range(n)})",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(a=6, m=89, n=554, target=1397):",
    "sol_docstring": "    \"\"\"Find a minimal list of corner locations for a\u00d7a tiles that covers [0, m] \u00d7 [0, n] and does not double-cover\n    squares.\n\n    Sample Input:\n    m = 10\n    n = 9\n    a = 5\n    target = 4\n\n    Sample Output:\n    [[0, 0], [0, 5], [5, 0], [5, 5]]\n    \"\"\"",
    "sol_bodies": [
      "    return [[x, y] for x in range(0, m, a) for y in range(0, n, a)]"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 1 A](https://codeforces.com/problemset/problem/1/A)",
    "weight": 1.0
  },
  {
    "name": "SquareTiles:4",
    "sat": "def sat(corners: List[List[int]], m=74, n=1, a=2, target=38):\n    covered = {(i + x, j + y) for i, j in corners for x in range(a) for y in range(a)}\n    assert len(covered) == len(corners) * a * a, \"Double coverage\"\n    return len(corners) <= target and covered.issuperset({(x, y) for x in range(m) for y in range(n)})",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(a=2, m=74, n=1, target=38):",
    "sol_docstring": "    \"\"\"Find a minimal list of corner locations for a\u00d7a tiles that covers [0, m] \u00d7 [0, n] and does not double-cover\n    squares.\n\n    Sample Input:\n    m = 10\n    n = 9\n    a = 5\n    target = 4\n\n    Sample Output:\n    [[0, 0], [0, 5], [5, 0], [5, 5]]\n    \"\"\"",
    "sol_bodies": [
      "    return [[x, y] for x in range(0, m, a) for y in range(0, n, a)]"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 1 A](https://codeforces.com/problemset/problem/1/A)",
    "weight": 1.0
  },
  {
    "name": "EasyTwos:0",
    "sat": "def sat(lb: List[bool], trips=[[1, 1, 0], [1, 0, 0], [0, 0, 0], [0, 1, 1], [0, 1, 1], [1, 1, 1], [1, 0, 1]]):\n    return len(lb) == len(trips) and all(\n        (b is True) if sum(s) >= 2 else (b is False) for b, s in zip(lb, trips))",
    "ans_type": "List[bool]",
    "sol_header": "def sol(trips=[[1, 1, 0], [1, 0, 0], [0, 0, 0], [0, 1, 1], [0, 1, 1], [1, 1, 1], [1, 0, 1]]):",
    "sol_docstring": "    \"\"\"\n    Given a list of lists of triples of integers, return True for each list with a total of at least 2 and\n    False for each other list.\n    \"\"\"",
    "sol_bodies": [
      "    return [sum(s) >= 2 for s in trips]"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 231 A](https://codeforces.com/problemset/problem/231/A)",
    "weight": 1.0
  },
  {
    "name": "EasyTwos:1",
    "sat": "def sat(lb: List[bool], trips=[[1, 1, 1], [1, 0, 0], [1, 1, 1], [0, 0, 0]]):\n    return len(lb) == len(trips) and all(\n        (b is True) if sum(s) >= 2 else (b is False) for b, s in zip(lb, trips))",
    "ans_type": "List[bool]",
    "sol_header": "def sol(trips=[[1, 1, 1], [1, 0, 0], [1, 1, 1], [0, 0, 0]]):",
    "sol_docstring": "    \"\"\"\n    Given a list of lists of triples of integers, return True for each list with a total of at least 2 and\n    False for each other list.\n    \"\"\"",
    "sol_bodies": [
      "    return [sum(s) >= 2 for s in trips]"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 231 A](https://codeforces.com/problemset/problem/231/A)",
    "weight": 1.0
  },
  {
    "name": "EasyTwos:2",
    "sat": "def sat(lb: List[bool], trips=[[0, 0, 0], [1, 0, 0], [0, 1, 1], [0, 1, 1]]):\n    return len(lb) == len(trips) and all(\n        (b is True) if sum(s) >= 2 else (b is False) for b, s in zip(lb, trips))",
    "ans_type": "List[bool]",
    "sol_header": "def sol(trips=[[0, 0, 0], [1, 0, 0], [0, 1, 1], [0, 1, 1]]):",
    "sol_docstring": "    \"\"\"\n    Given a list of lists of triples of integers, return True for each list with a total of at least 2 and\n    False for each other list.\n    \"\"\"",
    "sol_bodies": [
      "    return [sum(s) >= 2 for s in trips]"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 231 A](https://codeforces.com/problemset/problem/231/A)",
    "weight": 1.0
  },
  {
    "name": "EasyTwos:3",
    "sat": "def sat(lb: List[bool], trips=[[0, 0, 0], [0, 0, 1], [0, 1, 1], [1, 1, 1], [1, 1, 0], [0, 1, 1], [1, 0, 0], [0, 0, 0], [1, 0, 1], [1, 1, 0], [0, 0, 1], [1, 0, 1]]):\n    return len(lb) == len(trips) and all(\n        (b is True) if sum(s) >= 2 else (b is False) for b, s in zip(lb, trips))",
    "ans_type": "List[bool]",
    "sol_header": "def sol(trips=[[0, 0, 0], [0, 0, 1], [0, 1, 1], [1, 1, 1], [1, 1, 0], [0, 1, 1], [1, 0, 0], [0, 0, 0], [1, 0, 1], [1, 1, 0], [0, 0, 1], [1, 0, 1]]):",
    "sol_docstring": "    \"\"\"\n    Given a list of lists of triples of integers, return True for each list with a total of at least 2 and\n    False for each other list.\n    \"\"\"",
    "sol_bodies": [
      "    return [sum(s) >= 2 for s in trips]"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 231 A](https://codeforces.com/problemset/problem/231/A)",
    "weight": 1.0
  },
  {
    "name": "EasyTwos:4",
    "sat": "def sat(lb: List[bool], trips=[[0, 0, 1], [0, 1, 1], [0, 0, 1], [0, 1, 1]]):\n    return len(lb) == len(trips) and all(\n        (b is True) if sum(s) >= 2 else (b is False) for b, s in zip(lb, trips))",
    "ans_type": "List[bool]",
    "sol_header": "def sol(trips=[[0, 0, 1], [0, 1, 1], [0, 0, 1], [0, 1, 1]]):",
    "sol_docstring": "    \"\"\"\n    Given a list of lists of triples of integers, return True for each list with a total of at least 2 and\n    False for each other list.\n    \"\"\"",
    "sol_bodies": [
      "    return [sum(s) >= 2 for s in trips]"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 231 A](https://codeforces.com/problemset/problem/231/A)",
    "weight": 1.0
  },
  {
    "name": "DecreasingCountComparison:0",
    "sat": "def sat(n: int, scores=[100, 95, 80, 70, 65, 9, 9, 9, 4, 2, 1], k=6):\n    assert all(scores[i] >= scores[i + 1] for i in range(len(scores) - 1)), \"Hint: scores are non-decreasing\"\n    return all(s >= scores[k] and s > 0 for s in scores[:n]) and all(s < scores[k] or s <= 0 for s in scores[n:])",
    "ans_type": "int",
    "sol_header": "def sol(scores=[100, 95, 80, 70, 65, 9, 9, 9, 4, 2, 1], k=6):",
    "sol_docstring": "    \"\"\"\n    Given a list of non-increasing integers and given an integer k, determine how many positive integers in the list\n    are at least as large as the kth.\n    \"\"\"",
    "sol_bodies": [
      "    threshold = max(scores[k], 1)\n    return sum(s >= threshold for s in scores)"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 158 A](https://codeforces.com/problemset/problem/158/A)",
    "weight": 1.0
  },
  {
    "name": "DecreasingCountComparison:1",
    "sat": "def sat(n: int, scores=[32, 32, 31, 30, 25, 25, 21, 20, 17, 17, 16, 15, 15, 14, 11, 2, 0], k=4):\n    assert all(scores[i] >= scores[i + 1] for i in range(len(scores) - 1)), \"Hint: scores are non-decreasing\"\n    return all(s >= scores[k] and s > 0 for s in scores[:n]) and all(s < scores[k] or s <= 0 for s in scores[n:])",
    "ans_type": "int",
    "sol_header": "def sol(scores=[32, 32, 31, 30, 25, 25, 21, 20, 17, 17, 16, 15, 15, 14, 11, 2, 0], k=4):",
    "sol_docstring": "    \"\"\"\n    Given a list of non-increasing integers and given an integer k, determine how many positive integers in the list\n    are at least as large as the kth.\n    \"\"\"",
    "sol_bodies": [
      "    threshold = max(scores[k], 1)\n    return sum(s >= threshold for s in scores)"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 158 A](https://codeforces.com/problemset/problem/158/A)",
    "weight": 1.0
  },
  {
    "name": "DecreasingCountComparison:2",
    "sat": "def sat(n: int, scores=[44, 42, 41, 41, 40, 40, 39, 38, 38, 38, 37, 33, 32, 31, 31, 31, 30, 29, 28, 26, 25, 24, 24, 23, 23, 22, 20, 20, 20, 18, 17, 17, 16, 16, 12, 9, 9, 7, 6, 5, 4, 2], k=1):\n    assert all(scores[i] >= scores[i + 1] for i in range(len(scores) - 1)), \"Hint: scores are non-decreasing\"\n    return all(s >= scores[k] and s > 0 for s in scores[:n]) and all(s < scores[k] or s <= 0 for s in scores[n:])",
    "ans_type": "int",
    "sol_header": "def sol(scores=[44, 42, 41, 41, 40, 40, 39, 38, 38, 38, 37, 33, 32, 31, 31, 31, 30, 29, 28, 26, 25, 24, 24, 23, 23, 22, 20, 20, 20, 18, 17, 17, 16, 16, 12, 9, 9, 7, 6, 5, 4, 2], k=1):",
    "sol_docstring": "    \"\"\"\n    Given a list of non-increasing integers and given an integer k, determine how many positive integers in the list\n    are at least as large as the kth.\n    \"\"\"",
    "sol_bodies": [
      "    threshold = max(scores[k], 1)\n    return sum(s >= threshold for s in scores)"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 158 A](https://codeforces.com/problemset/problem/158/A)",
    "weight": 1.0
  },
  {
    "name": "DecreasingCountComparison:3",
    "sat": "def sat(n: int, scores=[36, 27, 24, 19, 15, 15, 8, 8, 5], k=4):\n    assert all(scores[i] >= scores[i + 1] for i in range(len(scores) - 1)), \"Hint: scores are non-decreasing\"\n    return all(s >= scores[k] and s > 0 for s in scores[:n]) and all(s < scores[k] or s <= 0 for s in scores[n:])",
    "ans_type": "int",
    "sol_header": "def sol(scores=[36, 27, 24, 19, 15, 15, 8, 8, 5], k=4):",
    "sol_docstring": "    \"\"\"\n    Given a list of non-increasing integers and given an integer k, determine how many positive integers in the list\n    are at least as large as the kth.\n    \"\"\"",
    "sol_bodies": [
      "    threshold = max(scores[k], 1)\n    return sum(s >= threshold for s in scores)"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 158 A](https://codeforces.com/problemset/problem/158/A)",
    "weight": 1.0
  },
  {
    "name": "DecreasingCountComparison:4",
    "sat": "def sat(n: int, scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2):\n    assert all(scores[i] >= scores[i + 1] for i in range(len(scores) - 1)), \"Hint: scores are non-decreasing\"\n    return all(s >= scores[k] and s > 0 for s in scores[:n]) and all(s < scores[k] or s <= 0 for s in scores[n:])",
    "ans_type": "int",
    "sol_header": "def sol(scores=[20, 19, 17, 13, 12, 11, 10, 6], k=2):",
    "sol_docstring": "    \"\"\"\n    Given a list of non-increasing integers and given an integer k, determine how many positive integers in the list\n    are at least as large as the kth.\n    \"\"\"",
    "sol_bodies": [
      "    threshold = max(scores[k], 1)\n    return sum(s >= threshold for s in scores)"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 158 A](https://codeforces.com/problemset/problem/158/A)",
    "weight": 1.0
  },
  {
    "name": "VowelDrop:0",
    "sat": "def sat(t: str, s=\"Problems\"):\n    i = 0\n    for c in s.lower():\n        if c in \"aeiouy\":\n            continue\n        assert t[i] == \".\", f\"expecting `.` at position {i}\"\n        i += 1\n        assert t[i] == c, f\"expecting `{c}`\"\n        i += 1\n    return i == len(t)",
    "ans_type": "str",
    "sol_header": "def sol(s=\"Problems\"):",
    "sol_docstring": "    \"\"\"\n    Given an alphabetic string s, remove all vowels (aeiouy/AEIOUY), insert a \".\" before each remaining letter\n    (consonant), and make everything lowercase.\n\n    Sample Input:\n    s = \"Problems\"\n\n    Sample Output:\n    .p.r.b.l.m.s\n    \"\"\"",
    "sol_bodies": [
      "    return \"\".join(\".\" + c for c in s.lower() if c not in \"aeiouy\")"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 118 A](https://codeforces.com/problemset/problem/118/A)",
    "weight": 1.0
  },
  {
    "name": "VowelDrop:1",
    "sat": "def sat(t: str, s=\"VahOjaquAlYMEcubidePYwApawAtonE\"):\n    i = 0\n    for c in s.lower():\n        if c in \"aeiouy\":\n            continue\n        assert t[i] == \".\", f\"expecting `.` at position {i}\"\n        i += 1\n        assert t[i] == c, f\"expecting `{c}`\"\n        i += 1\n    return i == len(t)",
    "ans_type": "str",
    "sol_header": "def sol(s=\"VahOjaquAlYMEcubidePYwApawAtonE\"):",
    "sol_docstring": "    \"\"\"\n    Given an alphabetic string s, remove all vowels (aeiouy/AEIOUY), insert a \".\" before each remaining letter\n    (consonant), and make everything lowercase.\n\n    Sample Input:\n    s = \"Problems\"\n\n    Sample Output:\n    .p.r.b.l.m.s\n    \"\"\"",
    "sol_bodies": [
      "    return \"\".join(\".\" + c for c in s.lower() if c not in \"aeiouy\")"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 118 A](https://codeforces.com/problemset/problem/118/A)",
    "weight": 1.0
  },
  {
    "name": "VowelDrop:2",
    "sat": "def sat(t: str, s=\"kAgIHAdiHEKoNAJubozUKaMYDETAdeZyziveL\"):\n    i = 0\n    for c in s.lower():\n        if c in \"aeiouy\":\n            continue\n        assert t[i] == \".\", f\"expecting `.` at position {i}\"\n        i += 1\n        assert t[i] == c, f\"expecting `{c}`\"\n        i += 1\n    return i == len(t)",
    "ans_type": "str",
    "sol_header": "def sol(s=\"kAgIHAdiHEKoNAJubozUKaMYDETAdeZyziveL\"):",
    "sol_docstring": "    \"\"\"\n    Given an alphabetic string s, remove all vowels (aeiouy/AEIOUY), insert a \".\" before each remaining letter\n    (consonant), and make everything lowercase.\n\n    Sample Input:\n    s = \"Problems\"\n\n    Sample Output:\n    .p.r.b.l.m.s\n    \"\"\"",
    "sol_bodies": [
      "    return \"\".join(\".\" + c for c in s.lower() if c not in \"aeiouy\")"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 118 A](https://codeforces.com/problemset/problem/118/A)",
    "weight": 1.0
  },
  {
    "name": "VowelDrop:3",
    "sat": "def sat(t: str, s=\"NOxADaNIMiReZoTeXtODUtHulyTHETextojoLeQuaNutEXtE\"):\n    i = 0\n    for c in s.lower():\n        if c in \"aeiouy\":\n            continue\n        assert t[i] == \".\", f\"expecting `.` at position {i}\"\n        i += 1\n        assert t[i] == c, f\"expecting `{c}`\"\n        i += 1\n    return i == len(t)",
    "ans_type": "str",
    "sol_header": "def sol(s=\"NOxADaNIMiReZoTeXtODUtHulyTHETextojoLeQuaNutEXtE\"):",
    "sol_docstring": "    \"\"\"\n    Given an alphabetic string s, remove all vowels (aeiouy/AEIOUY), insert a \".\" before each remaining letter\n    (consonant), and make everything lowercase.\n\n    Sample Input:\n    s = \"Problems\"\n\n    Sample Output:\n    .p.r.b.l.m.s\n    \"\"\"",
    "sol_bodies": [
      "    return \"\".join(\".\" + c for c in s.lower() if c not in \"aeiouy\")"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 118 A](https://codeforces.com/problemset/problem/118/A)",
    "weight": 1.0
  },
  {
    "name": "VowelDrop:4",
    "sat": "def sat(t: str, s=\"MEkUWonymYNAQUypEcIv\"):\n    i = 0\n    for c in s.lower():\n        if c in \"aeiouy\":\n            continue\n        assert t[i] == \".\", f\"expecting `.` at position {i}\"\n        i += 1\n        assert t[i] == c, f\"expecting `{c}`\"\n        i += 1\n    return i == len(t)",
    "ans_type": "str",
    "sol_header": "def sol(s=\"MEkUWonymYNAQUypEcIv\"):",
    "sol_docstring": "    \"\"\"\n    Given an alphabetic string s, remove all vowels (aeiouy/AEIOUY), insert a \".\" before each remaining letter\n    (consonant), and make everything lowercase.\n\n    Sample Input:\n    s = \"Problems\"\n\n    Sample Output:\n    .p.r.b.l.m.s\n    \"\"\"",
    "sol_bodies": [
      "    return \"\".join(\".\" + c for c in s.lower() if c not in \"aeiouy\")"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 118 A](https://codeforces.com/problemset/problem/118/A)",
    "weight": 1.0
  },
  {
    "name": "DominoTile:0",
    "sat": "def sat(squares: List[List[int]], m=10, n=5, target=50):\n    covered = []\n    for i1, j1, i2, j2 in squares:\n        assert (0 <= i1 <= i2 < m) and (0 <= j1 <= j2 < n) and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(m=10, n=5, target=50):",
    "sol_docstring": "    \"\"\"Tile an m x n checkerboard with 2 x 1 tiles. The solution is a list of fourtuples [i1, j1, i2, j2] with\n    i2 == i1 and j2 == j1 + 1 or i2 == i1 + 1 and j2 == j1 with no overlap.\"\"\"",
    "sol_bodies": [
      "    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 50 A](https://codeforces.com/problemset/problem/50/A)",
    "weight": 1.0
  },
  {
    "name": "DominoTile:1",
    "sat": "def sat(squares: List[List[int]], m=30, n=12, target=360):\n    covered = []\n    for i1, j1, i2, j2 in squares:\n        assert (0 <= i1 <= i2 < m) and (0 <= j1 <= j2 < n) and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(m=30, n=12, target=360):",
    "sol_docstring": "    \"\"\"Tile an m x n checkerboard with 2 x 1 tiles. The solution is a list of fourtuples [i1, j1, i2, j2] with\n    i2 == i1 and j2 == j1 + 1 or i2 == i1 + 1 and j2 == j1 with no overlap.\"\"\"",
    "sol_bodies": [
      "    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 50 A](https://codeforces.com/problemset/problem/50/A)",
    "weight": 1.0
  },
  {
    "name": "DominoTile:2",
    "sat": "def sat(squares: List[List[int]], m=34, n=25, target=850):\n    covered = []\n    for i1, j1, i2, j2 in squares:\n        assert (0 <= i1 <= i2 < m) and (0 <= j1 <= j2 < n) and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(m=34, n=25, target=850):",
    "sol_docstring": "    \"\"\"Tile an m x n checkerboard with 2 x 1 tiles. The solution is a list of fourtuples [i1, j1, i2, j2] with\n    i2 == i1 and j2 == j1 + 1 or i2 == i1 + 1 and j2 == j1 with no overlap.\"\"\"",
    "sol_bodies": [
      "    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 50 A](https://codeforces.com/problemset/problem/50/A)",
    "weight": 1.0
  },
  {
    "name": "DominoTile:3",
    "sat": "def sat(squares: List[List[int]], m=35, n=46, target=1610):\n    covered = []\n    for i1, j1, i2, j2 in squares:\n        assert (0 <= i1 <= i2 < m) and (0 <= j1 <= j2 < n) and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(m=35, n=46, target=1610):",
    "sol_docstring": "    \"\"\"Tile an m x n checkerboard with 2 x 1 tiles. The solution is a list of fourtuples [i1, j1, i2, j2] with\n    i2 == i1 and j2 == j1 + 1 or i2 == i1 + 1 and j2 == j1 with no overlap.\"\"\"",
    "sol_bodies": [
      "    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 50 A](https://codeforces.com/problemset/problem/50/A)",
    "weight": 1.0
  },
  {
    "name": "DominoTile:4",
    "sat": "def sat(squares: List[List[int]], m=41, n=12, target=492):\n    covered = []\n    for i1, j1, i2, j2 in squares:\n        assert (0 <= i1 <= i2 < m) and (0 <= j1 <= j2 < n) and (j2 - j1 + i2 - i1 == 1)\n        covered += [(i1, j1), (i2, j2)]\n    return len(set(covered)) == len(covered) == target",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(m=41, n=12, target=492):",
    "sol_docstring": "    \"\"\"Tile an m x n checkerboard with 2 x 1 tiles. The solution is a list of fourtuples [i1, j1, i2, j2] with\n    i2 == i1 and j2 == j1 + 1 or i2 == i1 + 1 and j2 == j1 with no overlap.\"\"\"",
    "sol_bodies": [
      "    if m % 2 == 0:\n        ans = [[i, j, i + 1, j] for i in range(0, m, 2) for j in range(n)]\n    elif n % 2 == 0:\n        ans = [[i, j, i, j + 1] for i in range(m) for j in range(0, n, 2)]\n    else:\n        ans = [[i, j, i + 1, j] for i in range(1, m, 2) for j in range(n)]\n        ans += [[0, j, 0, j + 1] for j in range(0, n - 1, 2)]\n    return ans"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 50 A](https://codeforces.com/problemset/problem/50/A)",
    "weight": 1.0
  },
  {
    "name": "IncDec:0",
    "sat": "def sat(n: int, ops=['x++', '--x', '--x'], target=19143212):\n    for op in ops:\n        if op in [\"++x\", \"x++\"]:\n            n += 1\n        else:\n            assert op in [\"--x\", \"x--\"]\n            n -= 1\n    return n == target",
    "ans_type": "int",
    "sol_header": "def sol(ops=['x++', '--x', '--x'], target=19143212):",
    "sol_docstring": "    \"\"\"\n    Given a sequence of operations \"++x\", \"x++\", \"--x\", \"x--\", and a target value, find initial value so that the\n    final value is the target value.\n\n    Sample Input:\n    ops = [\"x++\", \"--x\", \"--x\"]\n    target = 12\n\n    Sample Output:\n    13\n    \"\"\"",
    "sol_bodies": [
      "    return target - ops.count(\"++x\") - ops.count(\"x++\") + ops.count(\"--x\") + ops.count(\"x--\")"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 282 A](https://codeforces.com/problemset/problem/282/A)\n\nThis straightforward problem is a little harder than the Codeforces one.",
    "weight": 1.0
  },
  {
    "name": "IncDec:1",
    "sat": "def sat(n: int, ops=['x++', '++x', 'x++', 'x++', 'x--', '--x', '--x', 'x--', 'x++', 'x++', '--x', 'x--', 'x++', '++x', 'x--', '++x', '++x', 'x++', '--x', 'x++', 'x--', 'x--', 'x--', '--x', 'x++', 'x++', 'x++', 'x++', '--x', '++x', 'x++', 'x--', '--x', 'x++', '--x', '++x', 'x--', 'x--', 'x--', 'x++', 'x--', '--x', 'x++', '++x', '--x', '--x', 'x++', '++x', 'x--', 'x++', 'x--', '++x', 'x--', 'x--', '--x', 'x++', '--x', 'x--', '++x', '--x', '--x', 'x--', 'x--', 'x++', 'x--', 'x--', '--x', '++x', 'x--', '--x', 'x++', 'x--', 'x++', '++x', '++x', 'x++', '--x', '++x', '--x', 'x--', '++x', 'x--', 'x--', 'x--', 'x++', 'x++', 'x--', 'x++', 'x--', 'x--', 'x--', '--x', 'x--', 'x++', 'x--', 'x++', 'x--', '++x', 'x++', 'x--', 'x++', '++x', 'x--', '++x', 'x++', 'x++', '++x', '++x', '++x', '--x', '--x', '++x', 'x--', 'x--', '--x', '++x', 'x--', 'x--', '++x', 'x--', 'x++', 'x++', '--x', 'x++', 'x++', 'x++', '--x', '++x', 'x++', '++x', '++x', '++x', 'x--', '++x', '--x', 'x--', 'x++', '++x', 'x++', 'x--', 'x--', 'x++', 'x++', '++x', '--x', '--x', '++x', '--x', '++x', 'x++', 'x++', '++x', '++x', '--x', '--x', '--x', 'x++', 'x++', '++x', '--x', 'x++', 'x++', '++x', 'x--', '--x', '++x', '++x', '--x', 'x++', '++x', 'x++', 'x--', 'x--', '++x', '++x', 'x++', '++x', 'x--', '--x', 'x++', '--x', 'x++', '--x', 'x++', 'x++', 'x--', 'x--', 'x--', '++x', '++x', 'x--', '++x', 'x--', '--x', 'x--', '--x', 'x++', '++x', 'x++', 'x++', '++x', 'x++', '++x', '++x', '++x', '--x', 'x--', 'x--', '--x', '--x', '++x', '++x', '--x', '++x', '--x', 'x--', 'x--', '--x', '--x', '--x', '--x', '--x', 'x++', '++x', 'x++', 'x++', '--x', 'x--', 'x--', '++x', '--x', '++x', '--x', 'x--', '++x', '--x', 'x--', 'x--', 'x--', '--x', 'x++', '--x', '++x', 'x++', 'x--', '--x', 'x++', '++x', '++x', 'x--', '++x', 'x--', '--x', 'x++', '++x', 'x--', 'x++', '++x', 'x--', 'x--', 'x--', '++x', 'x++', 'x++', 'x--', '--x', '--x', '--x', '++x', '++x', 'x--', '++x', '--x', 'x--', '--x', '++x', '--x', 'x--', 'x--', 'x--'], target=88808):\n    for op in ops:\n        if op in [\"++x\", \"x++\"]:\n            n += 1\n        else:\n            assert op in [\"--x\", \"x--\"]\n            n -= 1\n    return n == target",
    "ans_type": "int",
    "sol_header": "def sol(ops=['x++', '++x', 'x++', 'x++', 'x--', '--x', '--x', 'x--', 'x++', 'x++', '--x', 'x--', 'x++', '++x', 'x--', '++x', '++x', 'x++', '--x', 'x++', 'x--', 'x--', 'x--', '--x', 'x++', 'x++', 'x++', 'x++', '--x', '++x', 'x++', 'x--', '--x', 'x++', '--x', '++x', 'x--', 'x--', 'x--', 'x++', 'x--', '--x', 'x++', '++x', '--x', '--x', 'x++', '++x', 'x--', 'x++', 'x--', '++x', 'x--', 'x--', '--x', 'x++', '--x', 'x--', '++x', '--x', '--x', 'x--', 'x--', 'x++', 'x--', 'x--', '--x', '++x', 'x--', '--x', 'x++', 'x--', 'x++', '++x', '++x', 'x++', '--x', '++x', '--x', 'x--', '++x', 'x--', 'x--', 'x--', 'x++', 'x++', 'x--', 'x++', 'x--', 'x--', 'x--', '--x', 'x--', 'x++', 'x--', 'x++', 'x--', '++x', 'x++', 'x--', 'x++', '++x', 'x--', '++x', 'x++', 'x++', '++x', '++x', '++x', '--x', '--x', '++x', 'x--', 'x--', '--x', '++x', 'x--', 'x--', '++x', 'x--', 'x++', 'x++', '--x', 'x++', 'x++', 'x++', '--x', '++x', 'x++', '++x', '++x', '++x', 'x--', '++x', '--x', 'x--', 'x++', '++x', 'x++', 'x--', 'x--', 'x++', 'x++', '++x', '--x', '--x', '++x', '--x', '++x', 'x++', 'x++', '++x', '++x', '--x', '--x', '--x', 'x++', 'x++', '++x', '--x', 'x++', 'x++', '++x', 'x--', '--x', '++x', '++x', '--x', 'x++', '++x', 'x++', 'x--', 'x--', '++x', '++x', 'x++', '++x', 'x--', '--x', 'x++', '--x', 'x++', '--x', 'x++', 'x++', 'x--', 'x--', 'x--', '++x', '++x', 'x--', '++x', 'x--', '--x', 'x--', '--x', 'x++', '++x', 'x++', 'x++', '++x', 'x++', '++x', '++x', '++x', '--x', 'x--', 'x--', '--x', '--x', '++x', '++x', '--x', '++x', '--x', 'x--', 'x--', '--x', '--x', '--x', '--x', '--x', 'x++', '++x', 'x++', 'x++', '--x', 'x--', 'x--', '++x', '--x', '++x', '--x', 'x--', '++x', '--x', 'x--', 'x--', 'x--', '--x', 'x++', '--x', '++x', 'x++', 'x--', '--x', 'x++', '++x', '++x', 'x--', '++x', 'x--', '--x', 'x++', '++x', 'x--', 'x++', '++x', 'x--', 'x--', 'x--', '++x', 'x++', 'x++', 'x--', '--x', '--x', '--x', '++x', '++x', 'x--', '++x', '--x', 'x--', '--x', '++x', '--x', 'x--', 'x--', 'x--'], target=88808):",
    "sol_docstring": "    \"\"\"\n    Given a sequence of operations \"++x\", \"x++\", \"--x\", \"x--\", and a target value, find initial value so that the\n    final value is the target value.\n\n    Sample Input:\n    ops = [\"x++\", \"--x\", \"--x\"]\n    target = 12\n\n    Sample Output:\n    13\n    \"\"\"",
    "sol_bodies": [
      "    return target - ops.count(\"++x\") - ops.count(\"x++\") + ops.count(\"--x\") + ops.count(\"x--\")"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 282 A](https://codeforces.com/problemset/problem/282/A)\n\nThis straightforward problem is a little harder than the Codeforces one.",
    "weight": 1.0
  },
  {
    "name": "IncDec:2",
    "sat": "def sat(n: int, ops=['x--', 'x--', '++x', '--x', '--x', 'x--', '--x', '++x', 'x++', 'x++', 'x--', 'x++', '++x', '--x', '++x', '--x', 'x++', 'x++', '++x', 'x++', '--x', '--x', '--x', 'x++', '--x', '--x', 'x--', '--x', '--x', '--x', 'x--', 'x++', '++x', '--x', '--x', '++x', '--x', '--x', 'x++', 'x--', 'x--', 'x--', '++x', 'x--', '++x', 'x++', '--x', 'x--', 'x--', 'x--', '++x', 'x++', 'x++', 'x++', '--x', 'x--', 'x++', '++x', 'x--', '++x', '++x', 'x--', '++x', '++x', 'x--', '--x', '++x', '--x', '++x', 'x++', '++x', 'x++', 'x++', 'x++', 'x--', '++x', '--x', '--x', 'x++', '--x', '++x', '--x', '++x', 'x--', '--x', 'x--', '--x', '++x', 'x--', 'x--', '--x', 'x++', 'x++', '--x', '--x', 'x--', '++x', 'x++', '++x', 'x++', 'x--', 'x--', '--x', '++x', 'x++', '--x', 'x--', 'x--', '--x', '++x', 'x++', '++x', 'x++', 'x--', 'x--', 'x++', 'x++', 'x--', '++x', '--x', '++x', 'x++', 'x++', 'x--', 'x--', '++x', 'x++', 'x++', 'x--', '--x', 'x++', 'x++', 'x++', '--x', 'x--', '--x', 'x++', '++x', '--x', 'x--', 'x--', '++x', '++x', '--x', 'x++', '++x', 'x--', '--x', 'x--', '++x', 'x--', '--x', '--x', 'x--', '++x', '++x', 'x++', '--x', '++x', 'x--', '--x', 'x--', '++x', 'x--', 'x--', '++x', '++x', 'x++', 'x--', '++x', 'x++', 'x++', 'x++', 'x++', 'x--', 'x++', 'x--', '++x', 'x++', 'x--', 'x++', '++x', 'x--', '--x', '++x', 'x--', 'x--', 'x++', '++x', 'x--', 'x--', 'x--', '++x', '--x', '++x', 'x--', '--x', '++x', 'x--', '++x', 'x--', 'x--', '++x', '--x', '--x', '++x', '--x', 'x++', 'x--', '++x', 'x--', 'x++', 'x--', '++x', '--x', '--x', '--x', 'x++', '--x', 'x--', 'x++', 'x++', '--x', '--x', 'x++', 'x++', '--x', 'x--', '--x', 'x--', '++x', 'x++', '--x', 'x++', 'x++', 'x--', 'x++', 'x--', '++x', '--x', 'x++', 'x++', '--x', 'x--', '--x', 'x--', '++x', 'x--', 'x++', '--x', 'x--', 'x++', '++x', 'x--', 'x++', '--x', '++x', '++x', '++x', 'x--', 'x--', 'x++', 'x--', '++x', '++x', '++x', 'x--', 'x--', '++x', 'x--', 'x--', '--x', 'x--', 'x++', '--x', 'x++', 'x++', '--x', 'x--', 'x++', 'x--', 'x--', '++x', 'x--', '--x', 'x++', '++x', '++x', '--x', 'x--', 'x--', '++x', '--x', 'x--', 'x++', '--x', '++x', '--x', 'x++', 'x++', 'x++', 'x--', 'x++', '++x', 'x--', 'x--', '--x', '++x', 'x--', 'x++', '++x', 'x++', '++x', 'x--', '++x', '--x', '--x', 'x--', '++x', 'x--', 'x++', '--x', 'x++', '++x', 'x++', '++x', '++x', '--x', 'x++', '--x', 'x--', '++x', '++x', '--x', 'x--', '++x', '++x', 'x--', '--x', 'x--', '--x', 'x++', 'x--', '++x', 'x--', '++x', 'x--', '++x', '++x', 'x--', 'x--', '++x', 'x--', 'x++', 'x++', '--x', 'x--', '++x', 'x++', 'x++', '--x', '++x', '++x', '--x', '++x', 'x--', 'x++', '++x', 'x--', 'x--', 'x++', 'x++', '++x', '++x', '++x', '++x', '++x', '++x', 'x++', 'x++', '--x', '++x', '++x', '--x', '--x', 'x++', '++x', '++x', '--x', '--x', 'x--', 'x--', '--x', 'x++', '++x', '--x', 'x++', '--x', '--x', 'x++', '++x', 'x--', 'x--', 'x--', '--x', '++x', '--x', 'x--', 'x--', 'x++', '++x', '--x', 'x++', '--x', 'x++', 'x--', 'x--', 'x++', '--x', 'x++', '--x', '--x', 'x--', '++x', '++x', '++x', '++x', '++x', 'x++', '--x', '++x', 'x--', '++x', '++x', '--x', 'x--', 'x++', 'x--', 'x--', '++x', '++x', 'x++', 'x--', 'x--', '++x', '--x', '--x', '--x', 'x--', '--x', 'x++', 'x++', 'x--', 'x++', '--x', '--x', '++x', '++x', '--x', '--x', 'x++', '++x', '--x', 'x--', 'x++', '++x', '++x', 'x--', '--x', '--x', '++x', 'x++', '--x', 'x--', 'x--', 'x--', 'x--', '++x', 'x++', '++x', 'x--', '--x', '++x', 'x--', 'x++', 'x++', 'x++', '--x', 'x--', 'x--', 'x--', '++x', 'x--', '++x', 'x--', 'x--', '++x', 'x--', '++x', 'x++', 'x++', 'x++', 'x--', '--x', 'x++', 'x--', 'x++', 'x++', '--x', '--x', '++x', 'x--', 'x--', '++x', 'x++', '--x', 'x++', 'x++', 'x--', 'x++', '--x', 'x--', '--x', '--x', 'x++', 'x++', 'x--', '--x', '--x', 'x--', 'x--', '++x', 'x++', 'x++', 'x--', '++x', 'x++', 'x++', 'x--', '++x', 'x++', '--x', 'x--', 'x--', 'x--', '++x', '++x', '--x', 'x--', 'x++', 'x--', 'x++', 'x--', '--x', '++x', '++x', '++x', 'x++', '--x', 'x++', 'x--', 'x--', 'x++', '--x', 'x++', 'x++', '++x', '++x', '++x', 'x++', 'x++', 'x--', 'x--', 'x++', 'x++', 'x--', '++x', '--x', '--x', '--x', 'x++', '++x', '--x', 'x--', 'x--', 'x--', 'x--', 'x--', '++x', 'x--', '++x', '--x', 'x--', 'x--', 'x--', '--x', 'x++', '--x', 'x++', 'x--', '--x', 'x++', '++x', '--x', '--x', '--x', 'x--', '--x', '++x', '--x', 'x--', '++x', 'x++', 'x++', '--x', 'x--', 'x++', '++x', '++x', '++x', 'x--', 'x--', 'x++', '--x', 'x++', 'x--', '++x', '--x', 'x--', 'x--', 'x++', 'x--', '++x', '++x', 'x--', '++x', 'x--', 'x++', '--x', '--x', '++x', '--x', 'x--', 'x++', 'x++', '--x', 'x--', 'x--', 'x++', 'x++', '++x', 'x++', 'x++', 'x++', 'x++', '++x', 'x--', 'x++', 'x--', 'x--', 'x++', '--x', 'x++', '++x', 'x--', '++x', 'x--', 'x++', '++x', 'x++', 'x++', '++x', '++x', '--x', '--x', '--x', '--x', '--x', '++x', 'x++', 'x--', '++x', 'x--', 'x--', 'x--', '--x', 'x--', '--x', '++x', 'x--', 'x--', '--x', '--x', 'x++', 'x--', '--x', 'x--', '--x', '--x', 'x++', '++x', '++x', '--x', 'x--', '++x', 'x--', 'x--', 'x--', 'x--', 'x--', 'x--', '++x', 'x--', 'x--', 'x++', '--x', '--x', '++x', 'x--', 'x++', 'x++', '++x', 'x--', '++x', '--x', '++x', '--x', 'x--', '++x', 'x++', '--x', 'x--', '--x', '--x', '--x', 'x++', 'x++', 'x++', '++x', '--x', 'x--', '--x', 'x++', '++x', '++x', 'x++', '++x', 'x++', '--x', 'x--', 'x--', '++x', 'x--', '--x', 'x--', '++x', 'x++', 'x--', 'x--', 'x++', '++x', '++x', 'x--', '++x', '++x', 'x++', 'x++', 'x--', 'x--', 'x--', '--x', 'x++', 'x--', 'x++', '--x', 'x--', '--x', '--x', '--x', 'x--', 'x--', '++x', '--x', 'x--', 'x++', 'x--', '++x', 'x--', '--x', '++x', '--x', 'x--', 'x++', 'x++', '--x', '--x', 'x++'], target=28110):\n    for op in ops:\n        if op in [\"++x\", \"x++\"]:\n            n += 1\n        else:\n            assert op in [\"--x\", \"x--\"]\n            n -= 1\n    return n == target",
    "ans_type": "int",
    "sol_header": "def sol(ops=['x--', 'x--', '++x', '--x', '--x', 'x--', '--x', '++x', 'x++', 'x++', 'x--', 'x++', '++x', '--x', '++x', '--x', 'x++', 'x++', '++x', 'x++', '--x', '--x', '--x', 'x++', '--x', '--x', 'x--', '--x', '--x', '--x', 'x--', 'x++', '++x', '--x', '--x', '++x', '--x', '--x', 'x++', 'x--', 'x--', 'x--', '++x', 'x--', '++x', 'x++', '--x', 'x--', 'x--', 'x--', '++x', 'x++', 'x++', 'x++', '--x', 'x--', 'x++', '++x', 'x--', '++x', '++x', 'x--', '++x', '++x', 'x--', '--x', '++x', '--x', '++x', 'x++', '++x', 'x++', 'x++', 'x++', 'x--', '++x', '--x', '--x', 'x++', '--x', '++x', '--x', '++x', 'x--', '--x', 'x--', '--x', '++x', 'x--', 'x--', '--x', 'x++', 'x++', '--x', '--x', 'x--', '++x', 'x++', '++x', 'x++', 'x--', 'x--', '--x', '++x', 'x++', '--x', 'x--', 'x--', '--x', '++x', 'x++', '++x', 'x++', 'x--', 'x--', 'x++', 'x++', 'x--', '++x', '--x', '++x', 'x++', 'x++', 'x--', 'x--', '++x', 'x++', 'x++', 'x--', '--x', 'x++', 'x++', 'x++', '--x', 'x--', '--x', 'x++', '++x', '--x', 'x--', 'x--', '++x', '++x', '--x', 'x++', '++x', 'x--', '--x', 'x--', '++x', 'x--', '--x', '--x', 'x--', '++x', '++x', 'x++', '--x', '++x', 'x--', '--x', 'x--', '++x', 'x--', 'x--', '++x', '++x', 'x++', 'x--', '++x', 'x++', 'x++', 'x++', 'x++', 'x--', 'x++', 'x--', '++x', 'x++', 'x--', 'x++', '++x', 'x--', '--x', '++x', 'x--', 'x--', 'x++', '++x', 'x--', 'x--', 'x--', '++x', '--x', '++x', 'x--', '--x', '++x', 'x--', '++x', 'x--', 'x--', '++x', '--x', '--x', '++x', '--x', 'x++', 'x--', '++x', 'x--', 'x++', 'x--', '++x', '--x', '--x', '--x', 'x++', '--x', 'x--', 'x++', 'x++', '--x', '--x', 'x++', 'x++', '--x', 'x--', '--x', 'x--', '++x', 'x++', '--x', 'x++', 'x++', 'x--', 'x++', 'x--', '++x', '--x', 'x++', 'x++', '--x', 'x--', '--x', 'x--', '++x', 'x--', 'x++', '--x', 'x--', 'x++', '++x', 'x--', 'x++', '--x', '++x', '++x', '++x', 'x--', 'x--', 'x++', 'x--', '++x', '++x', '++x', 'x--', 'x--', '++x', 'x--', 'x--', '--x', 'x--', 'x++', '--x', 'x++', 'x++', '--x', 'x--', 'x++', 'x--', 'x--', '++x', 'x--', '--x', 'x++', '++x', '++x', '--x', 'x--', 'x--', '++x', '--x', 'x--', 'x++', '--x', '++x', '--x', 'x++', 'x++', 'x++', 'x--', 'x++', '++x', 'x--', 'x--', '--x', '++x', 'x--', 'x++', '++x', 'x++', '++x', 'x--', '++x', '--x', '--x', 'x--', '++x', 'x--', 'x++', '--x', 'x++', '++x', 'x++', '++x', '++x', '--x', 'x++', '--x', 'x--', '++x', '++x', '--x', 'x--', '++x', '++x', 'x--', '--x', 'x--', '--x', 'x++', 'x--', '++x', 'x--', '++x', 'x--', '++x', '++x', 'x--', 'x--', '++x', 'x--', 'x++', 'x++', '--x', 'x--', '++x', 'x++', 'x++', '--x', '++x', '++x', '--x', '++x', 'x--', 'x++', '++x', 'x--', 'x--', 'x++', 'x++', '++x', '++x', '++x', '++x', '++x', '++x', 'x++', 'x++', '--x', '++x', '++x', '--x', '--x', 'x++', '++x', '++x', '--x', '--x', 'x--', 'x--', '--x', 'x++', '++x', '--x', 'x++', '--x', '--x', 'x++', '++x', 'x--', 'x--', 'x--', '--x', '++x', '--x', 'x--', 'x--', 'x++', '++x', '--x', 'x++', '--x', 'x++', 'x--', 'x--', 'x++', '--x', 'x++', '--x', '--x', 'x--', '++x', '++x', '++x', '++x', '++x', 'x++', '--x', '++x', 'x--', '++x', '++x', '--x', 'x--', 'x++', 'x--', 'x--', '++x', '++x', 'x++', 'x--', 'x--', '++x', '--x', '--x', '--x', 'x--', '--x', 'x++', 'x++', 'x--', 'x++', '--x', '--x', '++x', '++x', '--x', '--x', 'x++', '++x', '--x', 'x--', 'x++', '++x', '++x', 'x--', '--x', '--x', '++x', 'x++', '--x', 'x--', 'x--', 'x--', 'x--', '++x', 'x++', '++x', 'x--', '--x', '++x', 'x--', 'x++', 'x++', 'x++', '--x', 'x--', 'x--', 'x--', '++x', 'x--', '++x', 'x--', 'x--', '++x', 'x--', '++x', 'x++', 'x++', 'x++', 'x--', '--x', 'x++', 'x--', 'x++', 'x++', '--x', '--x', '++x', 'x--', 'x--', '++x', 'x++', '--x', 'x++', 'x++', 'x--', 'x++', '--x', 'x--', '--x', '--x', 'x++', 'x++', 'x--', '--x', '--x', 'x--', 'x--', '++x', 'x++', 'x++', 'x--', '++x', 'x++', 'x++', 'x--', '++x', 'x++', '--x', 'x--', 'x--', 'x--', '++x', '++x', '--x', 'x--', 'x++', 'x--', 'x++', 'x--', '--x', '++x', '++x', '++x', 'x++', '--x', 'x++', 'x--', 'x--', 'x++', '--x', 'x++', 'x++', '++x', '++x', '++x', 'x++', 'x++', 'x--', 'x--', 'x++', 'x++', 'x--', '++x', '--x', '--x', '--x', 'x++', '++x', '--x', 'x--', 'x--', 'x--', 'x--', 'x--', '++x', 'x--', '++x', '--x', 'x--', 'x--', 'x--', '--x', 'x++', '--x', 'x++', 'x--', '--x', 'x++', '++x', '--x', '--x', '--x', 'x--', '--x', '++x', '--x', 'x--', '++x', 'x++', 'x++', '--x', 'x--', 'x++', '++x', '++x', '++x', 'x--', 'x--', 'x++', '--x', 'x++', 'x--', '++x', '--x', 'x--', 'x--', 'x++', 'x--', '++x', '++x', 'x--', '++x', 'x--', 'x++', '--x', '--x', '++x', '--x', 'x--', 'x++', 'x++', '--x', 'x--', 'x--', 'x++', 'x++', '++x', 'x++', 'x++', 'x++', 'x++', '++x', 'x--', 'x++', 'x--', 'x--', 'x++', '--x', 'x++', '++x', 'x--', '++x', 'x--', 'x++', '++x', 'x++', 'x++', '++x', '++x', '--x', '--x', '--x', '--x', '--x', '++x', 'x++', 'x--', '++x', 'x--', 'x--', 'x--', '--x', 'x--', '--x', '++x', 'x--', 'x--', '--x', '--x', 'x++', 'x--', '--x', 'x--', '--x', '--x', 'x++', '++x', '++x', '--x', 'x--', '++x', 'x--', 'x--', 'x--', 'x--', 'x--', 'x--', '++x', 'x--', 'x--', 'x++', '--x', '--x', '++x', 'x--', 'x++', 'x++', '++x', 'x--', '++x', '--x', '++x', '--x', 'x--', '++x', 'x++', '--x', 'x--', '--x', '--x', '--x', 'x++', 'x++', 'x++', '++x', '--x', 'x--', '--x', 'x++', '++x', '++x', 'x++', '++x', 'x++', '--x', 'x--', 'x--', '++x', 'x--', '--x', 'x--', '++x', 'x++', 'x--', 'x--', 'x++', '++x', '++x', 'x--', '++x', '++x', 'x++', 'x++', 'x--', 'x--', 'x--', '--x', 'x++', 'x--', 'x++', '--x', 'x--', '--x', '--x', '--x', 'x--', 'x--', '++x', '--x', 'x--', 'x++', 'x--', '++x', 'x--', '--x', '++x', '--x', 'x--', 'x++', 'x++', '--x', '--x', 'x++'], target=28110):",
    "sol_docstring": "    \"\"\"\n    Given a sequence of operations \"++x\", \"x++\", \"--x\", \"x--\", and a target value, find initial value so that the\n    final value is the target value.\n\n    Sample Input:\n    ops = [\"x++\", \"--x\", \"--x\"]\n    target = 12\n\n    Sample Output:\n    13\n    \"\"\"",
    "sol_bodies": [
      "    return target - ops.count(\"++x\") - ops.count(\"x++\") + ops.count(\"--x\") + ops.count(\"x--\")"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 282 A](https://codeforces.com/problemset/problem/282/A)\n\nThis straightforward problem is a little harder than the Codeforces one.",
    "weight": 1.0
  },
  {
    "name": "IncDec:3",
    "sat": "def sat(n: int, ops=['--x', 'x--', 'x--', 'x--', 'x--', 'x--', 'x--', '++x', '++x', 'x--', 'x--', '--x', '--x', '--x', 'x--', '--x', '--x', '++x', '++x', '++x', 'x++', '--x', 'x--', '++x', 'x--', 'x--', 'x++', 'x--', 'x++', 'x++', 'x--', 'x--', 'x++', '--x', '++x', 'x++', 'x--', '--x', 'x--', 'x++', 'x--', 'x++', 'x++', '--x', '++x', 'x++', '--x', '--x', '--x', 'x++', 'x--', 'x++', '++x', 'x++', '--x', '--x', '++x', '++x', 'x++', 'x++', 'x--', '--x', 'x++', 'x++', 'x--', 'x++', '--x', 'x--', 'x--', '++x', '++x', '++x', 'x++', '++x', '--x', '--x', 'x++', '++x', '++x', 'x++', '++x', '--x', '++x', '--x', 'x--', '++x', '++x', '++x', '++x', 'x--', 'x--', '++x', '++x', 'x--', 'x--', '++x', 'x++', 'x--', 'x--', 'x++', '++x', 'x++', 'x--', '++x', 'x--', 'x--', 'x--', '++x', 'x--', '++x', 'x++', 'x--', 'x++', '++x', 'x++', '--x', '--x', '--x', 'x++', 'x++', '--x', '--x', '++x', '--x', 'x--', 'x--', '--x', 'x--', '++x', 'x--', '--x', '--x', '++x', '--x', 'x++', 'x--', 'x++', '--x', '--x', '++x', '--x', 'x--', '--x', 'x++', '--x', 'x--', '--x', '++x', 'x--', '++x', 'x++', 'x--', '--x', '++x', '--x', 'x++', '++x', '++x', 'x++', '++x', 'x++', 'x--', 'x--', 'x--', '++x', '--x', '--x', '--x', '++x', 'x--', 'x--', '++x', 'x++', '++x', 'x--', '--x', '--x', '++x', 'x--', 'x--', '--x', 'x--', 'x--', 'x++', '--x', 'x++', '++x', '--x', 'x--', '--x', '--x', 'x--', 'x--', '--x', '++x', 'x--', '++x', '++x', '++x', 'x--', 'x--', '--x', '++x', 'x++', 'x--', 'x--', 'x++', '--x', 'x--', 'x++', 'x--', 'x--', 'x++', '++x', 'x++', '++x', 'x++', '--x', 'x++', 'x--', '--x', 'x++', 'x++', '++x', '--x', '++x', 'x++', 'x--', 'x++', 'x--', 'x--', 'x--', 'x++', 'x++', '--x', '--x', 'x--', 'x++', '++x', 'x--', '--x', 'x++', 'x++', 'x++', '++x', '--x', 'x++', 'x++', '++x', 'x--', 'x++', 'x++', 'x++', '++x', '++x', '--x', 'x++', '--x', '--x', 'x--', '--x', 'x++', 'x--', 'x++', '--x', 'x--', 'x++', 'x++', 'x--', '--x', '--x', 'x++', '--x', 'x--', 'x++', 'x++', '++x', 'x--', '++x', '++x', 'x++', 'x--', '--x', '++x', '--x', 'x--', '--x', '++x', '--x', '--x', '++x', 'x++', '--x', 'x++', '--x', 'x--', '++x', '--x', 'x--', 'x--', 'x++', '++x', 'x++', '++x', 'x--', '--x', 'x++', '--x', '++x', 'x++', 'x++', 'x++', '++x', '++x', 'x++', '++x', '++x', '++x', 'x--', '++x', 'x--', 'x--', 'x++', '--x', '++x', 'x++', 'x++', 'x--', '++x', '++x', 'x--', 'x--', '--x', 'x--', '--x', 'x--', 'x--', '++x', '++x', 'x--', '--x', 'x++', '--x', '--x', 'x++', 'x++', 'x++', 'x++', '++x', '--x', 'x++', 'x++', '--x', '++x', 'x++', '--x', '--x', 'x--', '--x', 'x++'], target=82823):\n    for op in ops:\n        if op in [\"++x\", \"x++\"]:\n            n += 1\n        else:\n            assert op in [\"--x\", \"x--\"]\n            n -= 1\n    return n == target",
    "ans_type": "int",
    "sol_header": "def sol(ops=['--x', 'x--', 'x--', 'x--', 'x--', 'x--', 'x--', '++x', '++x', 'x--', 'x--', '--x', '--x', '--x', 'x--', '--x', '--x', '++x', '++x', '++x', 'x++', '--x', 'x--', '++x', 'x--', 'x--', 'x++', 'x--', 'x++', 'x++', 'x--', 'x--', 'x++', '--x', '++x', 'x++', 'x--', '--x', 'x--', 'x++', 'x--', 'x++', 'x++', '--x', '++x', 'x++', '--x', '--x', '--x', 'x++', 'x--', 'x++', '++x', 'x++', '--x', '--x', '++x', '++x', 'x++', 'x++', 'x--', '--x', 'x++', 'x++', 'x--', 'x++', '--x', 'x--', 'x--', '++x', '++x', '++x', 'x++', '++x', '--x', '--x', 'x++', '++x', '++x', 'x++', '++x', '--x', '++x', '--x', 'x--', '++x', '++x', '++x', '++x', 'x--', 'x--', '++x', '++x', 'x--', 'x--', '++x', 'x++', 'x--', 'x--', 'x++', '++x', 'x++', 'x--', '++x', 'x--', 'x--', 'x--', '++x', 'x--', '++x', 'x++', 'x--', 'x++', '++x', 'x++', '--x', '--x', '--x', 'x++', 'x++', '--x', '--x', '++x', '--x', 'x--', 'x--', '--x', 'x--', '++x', 'x--', '--x', '--x', '++x', '--x', 'x++', 'x--', 'x++', '--x', '--x', '++x', '--x', 'x--', '--x', 'x++', '--x', 'x--', '--x', '++x', 'x--', '++x', 'x++', 'x--', '--x', '++x', '--x', 'x++', '++x', '++x', 'x++', '++x', 'x++', 'x--', 'x--', 'x--', '++x', '--x', '--x', '--x', '++x', 'x--', 'x--', '++x', 'x++', '++x', 'x--', '--x', '--x', '++x', 'x--', 'x--', '--x', 'x--', 'x--', 'x++', '--x', 'x++', '++x', '--x', 'x--', '--x', '--x', 'x--', 'x--', '--x', '++x', 'x--', '++x', '++x', '++x', 'x--', 'x--', '--x', '++x', 'x++', 'x--', 'x--', 'x++', '--x', 'x--', 'x++', 'x--', 'x--', 'x++', '++x', 'x++', '++x', 'x++', '--x', 'x++', 'x--', '--x', 'x++', 'x++', '++x', '--x', '++x', 'x++', 'x--', 'x++', 'x--', 'x--', 'x--', 'x++', 'x++', '--x', '--x', 'x--', 'x++', '++x', 'x--', '--x', 'x++', 'x++', 'x++', '++x', '--x', 'x++', 'x++', '++x', 'x--', 'x++', 'x++', 'x++', '++x', '++x', '--x', 'x++', '--x', '--x', 'x--', '--x', 'x++', 'x--', 'x++', '--x', 'x--', 'x++', 'x++', 'x--', '--x', '--x', 'x++', '--x', 'x--', 'x++', 'x++', '++x', 'x--', '++x', '++x', 'x++', 'x--', '--x', '++x', '--x', 'x--', '--x', '++x', '--x', '--x', '++x', 'x++', '--x', 'x++', '--x', 'x--', '++x', '--x', 'x--', 'x--', 'x++', '++x', 'x++', '++x', 'x--', '--x', 'x++', '--x', '++x', 'x++', 'x++', 'x++', '++x', '++x', 'x++', '++x', '++x', '++x', 'x--', '++x', 'x--', 'x--', 'x++', '--x', '++x', 'x++', 'x++', 'x--', '++x', '++x', 'x--', 'x--', '--x', 'x--', '--x', 'x--', 'x--', '++x', '++x', 'x--', '--x', 'x++', '--x', '--x', 'x++', 'x++', 'x++', 'x++', '++x', '--x', 'x++', 'x++', '--x', '++x', 'x++', '--x', '--x', 'x--', '--x', 'x++'], target=82823):",
    "sol_docstring": "    \"\"\"\n    Given a sequence of operations \"++x\", \"x++\", \"--x\", \"x--\", and a target value, find initial value so that the\n    final value is the target value.\n\n    Sample Input:\n    ops = [\"x++\", \"--x\", \"--x\"]\n    target = 12\n\n    Sample Output:\n    13\n    \"\"\"",
    "sol_bodies": [
      "    return target - ops.count(\"++x\") - ops.count(\"x++\") + ops.count(\"--x\") + ops.count(\"x--\")"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 282 A](https://codeforces.com/problemset/problem/282/A)\n\nThis straightforward problem is a little harder than the Codeforces one.",
    "weight": 1.0
  },
  {
    "name": "IncDec:4",
    "sat": "def sat(n: int, ops=['x--', 'x++', '++x', '--x', 'x++', '--x', 'x--'], target=61813):\n    for op in ops:\n        if op in [\"++x\", \"x++\"]:\n            n += 1\n        else:\n            assert op in [\"--x\", \"x--\"]\n            n -= 1\n    return n == target",
    "ans_type": "int",
    "sol_header": "def sol(ops=['x--', 'x++', '++x', '--x', 'x++', '--x', 'x--'], target=61813):",
    "sol_docstring": "    \"\"\"\n    Given a sequence of operations \"++x\", \"x++\", \"--x\", \"x--\", and a target value, find initial value so that the\n    final value is the target value.\n\n    Sample Input:\n    ops = [\"x++\", \"--x\", \"--x\"]\n    target = 12\n\n    Sample Output:\n    13\n    \"\"\"",
    "sol_bodies": [
      "    return target - ops.count(\"++x\") - ops.count(\"x++\") + ops.count(\"--x\") + ops.count(\"x--\")"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 282 A](https://codeforces.com/problemset/problem/282/A)\n\nThis straightforward problem is a little harder than the Codeforces one.",
    "weight": 1.0
  },
  {
    "name": "CompareInAnyCase:0",
    "sat": "def sat(n: int, s=\"aaAab\", t=\"aAaaB\"):\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False",
    "ans_type": "int",
    "sol_header": "def sol(s=\"aaAab\", t=\"aAaaB\"):",
    "sol_docstring": "    \"\"\"Ignoring case, compare s, t lexicographically. Output 0 if they are =, -1 if s < t, 1 if s > t.\"\"\"",
    "sol_bodies": [
      "    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 112 A](https://codeforces.com/problemset/problem/112/A)",
    "weight": 1.0
  },
  {
    "name": "CompareInAnyCase:1",
    "sat": "def sat(n: int, s=\"JyNuTexTETiGAVIC\", t=\"JynUTEXTetigAViC\"):\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False",
    "ans_type": "int",
    "sol_header": "def sol(s=\"JyNuTexTETiGAVIC\", t=\"JynUTEXTetigAViC\"):",
    "sol_docstring": "    \"\"\"Ignoring case, compare s, t lexicographically. Output 0 if they are =, -1 if s < t, 1 if s > t.\"\"\"",
    "sol_bodies": [
      "    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 112 A](https://codeforces.com/problemset/problem/112/A)",
    "weight": 1.0
  },
  {
    "name": "CompareInAnyCase:2",
    "sat": "def sat(n: int, s=\"tExTYtOHahekomArof\", t=\"TExTYTohaHeKomryGUSeteXTUrYgir\"):\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False",
    "ans_type": "int",
    "sol_header": "def sol(s=\"tExTYtOHahekomArof\", t=\"TExTYTohaHeKomryGUSeteXTUrYgir\"):",
    "sol_docstring": "    \"\"\"Ignoring case, compare s, t lexicographically. Output 0 if they are =, -1 if s < t, 1 if s > t.\"\"\"",
    "sol_bodies": [
      "    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 112 A](https://codeforces.com/problemset/problem/112/A)",
    "weight": 1.0
  },
  {
    "name": "CompareInAnyCase:3",
    "sat": "def sat(n: int, s=\"RObAQuYK\", t=\"robaQUYKkuLY\"):\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False",
    "ans_type": "int",
    "sol_header": "def sol(s=\"RObAQuYK\", t=\"robaQUYKkuLY\"):",
    "sol_docstring": "    \"\"\"Ignoring case, compare s, t lexicographically. Output 0 if they are =, -1 if s < t, 1 if s > t.\"\"\"",
    "sol_bodies": [
      "    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 112 A](https://codeforces.com/problemset/problem/112/A)",
    "weight": 1.0
  },
  {
    "name": "CompareInAnyCase:4",
    "sat": "def sat(n: int, s=\"DUTeX\", t=\"dutdE\"):\n    if n == 0:\n        return s.lower() == t.lower()\n    if n == 1:\n        return s.lower() > t.lower()\n    if n == -1:\n        return s.lower() < t.lower()\n    return False",
    "ans_type": "int",
    "sol_header": "def sol(s=\"DUTeX\", t=\"dutdE\"):",
    "sol_docstring": "    \"\"\"Ignoring case, compare s, t lexicographically. Output 0 if they are =, -1 if s < t, 1 if s > t.\"\"\"",
    "sol_bodies": [
      "    if s.lower() == t.lower():\n        return 0\n    if s.lower() > t.lower():\n        return 1\n    return -1"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 112 A](https://codeforces.com/problemset/problem/112/A)",
    "weight": 1.0
  },
  {
    "name": "SlidingOne:0",
    "sat": "def sat(s: str, matrix=[[0, 0, 0, 0, 0], [0, 0, 0, 0, 1], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], max_moves=3):\n    matrix = [m[:] for m in matrix]  # copy\n    for c in s:\n        if c in \"01234\":\n            i = \"01234\".index(c)\n            matrix[i], matrix[i + 1] = matrix[i + 1], matrix[i]\n        if c in \"abcde\":\n            j = \"abcde\".index(c)\n            for row in matrix:\n                row[j], row[j + 1] = row[j + 1], row[j]\n\n    return len(s) <= max_moves and matrix[2][2] == 1",
    "ans_type": "str",
    "sol_header": "def sol(matrix=[[0, 0, 0, 0, 0], [0, 0, 0, 0, 1], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], max_moves=3):",
    "sol_docstring": "    \"\"\"\n    We are given a 5x5 matrix with a single 1 like:\n\n    0 0 0 0 0\n    0 0 0 0 1\n    0 0 0 0 0\n    0 0 0 0 0\n    0 0 0 0 0\n\n    Find a (minimal) sequence of row and column swaps to move the 1 to the center. A move is a string\n    in \"0\"-\"4\" indicating a row swap and \"a\"-\"e\" indicating a column swap\n    \"\"\"",
    "sol_bodies": [
      "    i = [sum(row) for row in matrix].index(1)\n    j = matrix[i].index(1)\n    ans = \"\"\n    while i > 2:\n        ans += str(i - 1)\n        i -= 1\n    while i < 2:\n        ans += str(i)\n        i += 1\n    while j > 2:\n        ans += \"abcde\"[j - 1]\n        j -= 1\n    while j < 2:\n        ans += \"abcde\"[j]\n        j += 1\n    return ans"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 263 A](https://codeforces.com/problemset/problem/263/A)",
    "weight": 1.0
  },
  {
    "name": "SlidingOne:1",
    "sat": "def sat(s: str, matrix=[[1, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], max_moves=4):\n    matrix = [m[:] for m in matrix]  # copy\n    for c in s:\n        if c in \"01234\":\n            i = \"01234\".index(c)\n            matrix[i], matrix[i + 1] = matrix[i + 1], matrix[i]\n        if c in \"abcde\":\n            j = \"abcde\".index(c)\n            for row in matrix:\n                row[j], row[j + 1] = row[j + 1], row[j]\n\n    return len(s) <= max_moves and matrix[2][2] == 1",
    "ans_type": "str",
    "sol_header": "def sol(matrix=[[1, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], max_moves=4):",
    "sol_docstring": "    \"\"\"\n    We are given a 5x5 matrix with a single 1 like:\n\n    0 0 0 0 0\n    0 0 0 0 1\n    0 0 0 0 0\n    0 0 0 0 0\n    0 0 0 0 0\n\n    Find a (minimal) sequence of row and column swaps to move the 1 to the center. A move is a string\n    in \"0\"-\"4\" indicating a row swap and \"a\"-\"e\" indicating a column swap\n    \"\"\"",
    "sol_bodies": [
      "    i = [sum(row) for row in matrix].index(1)\n    j = matrix[i].index(1)\n    ans = \"\"\n    while i > 2:\n        ans += str(i - 1)\n        i -= 1\n    while i < 2:\n        ans += str(i)\n        i += 1\n    while j > 2:\n        ans += \"abcde\"[j - 1]\n        j -= 1\n    while j < 2:\n        ans += \"abcde\"[j]\n        j += 1\n    return ans"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 263 A](https://codeforces.com/problemset/problem/263/A)",
    "weight": 1.0
  },
  {
    "name": "SlidingOne:2",
    "sat": "def sat(s: str, matrix=[[0, 1, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], max_moves=3):\n    matrix = [m[:] for m in matrix]  # copy\n    for c in s:\n        if c in \"01234\":\n            i = \"01234\".index(c)\n            matrix[i], matrix[i + 1] = matrix[i + 1], matrix[i]\n        if c in \"abcde\":\n            j = \"abcde\".index(c)\n            for row in matrix:\n                row[j], row[j + 1] = row[j + 1], row[j]\n\n    return len(s) <= max_moves and matrix[2][2] == 1",
    "ans_type": "str",
    "sol_header": "def sol(matrix=[[0, 1, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], max_moves=3):",
    "sol_docstring": "    \"\"\"\n    We are given a 5x5 matrix with a single 1 like:\n\n    0 0 0 0 0\n    0 0 0 0 1\n    0 0 0 0 0\n    0 0 0 0 0\n    0 0 0 0 0\n\n    Find a (minimal) sequence of row and column swaps to move the 1 to the center. A move is a string\n    in \"0\"-\"4\" indicating a row swap and \"a\"-\"e\" indicating a column swap\n    \"\"\"",
    "sol_bodies": [
      "    i = [sum(row) for row in matrix].index(1)\n    j = matrix[i].index(1)\n    ans = \"\"\n    while i > 2:\n        ans += str(i - 1)\n        i -= 1\n    while i < 2:\n        ans += str(i)\n        i += 1\n    while j > 2:\n        ans += \"abcde\"[j - 1]\n        j -= 1\n    while j < 2:\n        ans += \"abcde\"[j]\n        j += 1\n    return ans"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 263 A](https://codeforces.com/problemset/problem/263/A)",
    "weight": 1.0
  },
  {
    "name": "SlidingOne:3",
    "sat": "def sat(s: str, matrix=[[0, 0, 1, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], max_moves=2):\n    matrix = [m[:] for m in matrix]  # copy\n    for c in s:\n        if c in \"01234\":\n            i = \"01234\".index(c)\n            matrix[i], matrix[i + 1] = matrix[i + 1], matrix[i]\n        if c in \"abcde\":\n            j = \"abcde\".index(c)\n            for row in matrix:\n                row[j], row[j + 1] = row[j + 1], row[j]\n\n    return len(s) <= max_moves and matrix[2][2] == 1",
    "ans_type": "str",
    "sol_header": "def sol(matrix=[[0, 0, 1, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], max_moves=2):",
    "sol_docstring": "    \"\"\"\n    We are given a 5x5 matrix with a single 1 like:\n\n    0 0 0 0 0\n    0 0 0 0 1\n    0 0 0 0 0\n    0 0 0 0 0\n    0 0 0 0 0\n\n    Find a (minimal) sequence of row and column swaps to move the 1 to the center. A move is a string\n    in \"0\"-\"4\" indicating a row swap and \"a\"-\"e\" indicating a column swap\n    \"\"\"",
    "sol_bodies": [
      "    i = [sum(row) for row in matrix].index(1)\n    j = matrix[i].index(1)\n    ans = \"\"\n    while i > 2:\n        ans += str(i - 1)\n        i -= 1\n    while i < 2:\n        ans += str(i)\n        i += 1\n    while j > 2:\n        ans += \"abcde\"[j - 1]\n        j -= 1\n    while j < 2:\n        ans += \"abcde\"[j]\n        j += 1\n    return ans"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 263 A](https://codeforces.com/problemset/problem/263/A)",
    "weight": 1.0
  },
  {
    "name": "SortPlusPlus:0",
    "sat": "def sat(s: str, inp=\"1+1+3+1+3+2+2+1+3+1+2\"):\n    return all(s.count(c) == inp.count(c) for c in inp + s) and all(s[i - 2] <= s[i] for i in range(2, len(s), 2))",
    "ans_type": "str",
    "sol_header": "def sol(inp=\"1+1+3+1+3+2+2+1+3+1+2\"):",
    "sol_docstring": "    \"\"\"Sort numbers in a sum of digits, e.g., 1+3+2+1 -> 1+1+2+3\"\"\"",
    "sol_bodies": [
      "    return \"+\".join(sorted(inp.split(\"+\")))"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 339 A](https://codeforces.com/problemset/problem/339/A)",
    "weight": 1.0
  },
  {
    "name": "SortPlusPlus:1",
    "sat": "def sat(s: str, inp=\"2+3+1+2+2+2+1+1+1+3+2+3+3+3+2+3+1+3+3+2+1+2+3+1+2+1+3+2+3+1+1+2+2+3+1+2+2+1+3+2+3+2+3+2+2\"):\n    return all(s.count(c) == inp.count(c) for c in inp + s) and all(s[i - 2] <= s[i] for i in range(2, len(s), 2))",
    "ans_type": "str",
    "sol_header": "def sol(inp=\"2+3+1+2+2+2+1+1+1+3+2+3+3+3+2+3+1+3+3+2+1+2+3+1+2+1+3+2+3+1+1+2+2+3+1+2+2+1+3+2+3+2+3+2+2\"):",
    "sol_docstring": "    \"\"\"Sort numbers in a sum of digits, e.g., 1+3+2+1 -> 1+1+2+3\"\"\"",
    "sol_bodies": [
      "    return \"+\".join(sorted(inp.split(\"+\")))"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 339 A](https://codeforces.com/problemset/problem/339/A)",
    "weight": 1.0
  },
  {
    "name": "SortPlusPlus:2",
    "sat": "def sat(s: str, inp=\"3+2+2\"):\n    return all(s.count(c) == inp.count(c) for c in inp + s) and all(s[i - 2] <= s[i] for i in range(2, len(s), 2))",
    "ans_type": "str",
    "sol_header": "def sol(inp=\"3+2+2\"):",
    "sol_docstring": "    \"\"\"Sort numbers in a sum of digits, e.g., 1+3+2+1 -> 1+1+2+3\"\"\"",
    "sol_bodies": [
      "    return \"+\".join(sorted(inp.split(\"+\")))"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 339 A](https://codeforces.com/problemset/problem/339/A)",
    "weight": 1.0
  },
  {
    "name": "SortPlusPlus:3",
    "sat": "def sat(s: str, inp=\"3+2+1+1+3+3+2+2+2+3+2+3+3+1+1\"):\n    return all(s.count(c) == inp.count(c) for c in inp + s) and all(s[i - 2] <= s[i] for i in range(2, len(s), 2))",
    "ans_type": "str",
    "sol_header": "def sol(inp=\"3+2+1+1+3+3+2+2+2+3+2+3+3+1+1\"):",
    "sol_docstring": "    \"\"\"Sort numbers in a sum of digits, e.g., 1+3+2+1 -> 1+1+2+3\"\"\"",
    "sol_bodies": [
      "    return \"+\".join(sorted(inp.split(\"+\")))"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 339 A](https://codeforces.com/problemset/problem/339/A)",
    "weight": 1.0
  },
  {
    "name": "SortPlusPlus:4",
    "sat": "def sat(s: str, inp=\"2+2+2+1+1+1+2+1+3+3+3+3+2+2+2+1+2+3+3+1+3+2+3+2+3+2+2+3+2+3+1+2+1+3+3+2+3+1+1+3+3+1\"):\n    return all(s.count(c) == inp.count(c) for c in inp + s) and all(s[i - 2] <= s[i] for i in range(2, len(s), 2))",
    "ans_type": "str",
    "sol_header": "def sol(inp=\"2+2+2+1+1+1+2+1+3+3+3+3+2+2+2+1+2+3+3+1+3+2+3+2+3+2+2+3+2+3+1+2+1+3+3+2+3+1+1+3+3+1\"):",
    "sol_docstring": "    \"\"\"Sort numbers in a sum of digits, e.g., 1+3+2+1 -> 1+1+2+3\"\"\"",
    "sol_bodies": [
      "    return \"+\".join(sorted(inp.split(\"+\")))"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 339 A](https://codeforces.com/problemset/problem/339/A)",
    "weight": 1.0
  },
  {
    "name": "CapitalizeFirstLetter:0",
    "sat": "def sat(s: str, word=\"konjac\"):\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        else:\n            if s[i] != word[i]:\n                return False\n    return True",
    "ans_type": "str",
    "sol_header": "def sol(word=\"konjac\"):",
    "sol_docstring": "    \"\"\"Capitalize the first letter of word\"\"\"",
    "sol_bodies": [
      "    return word[0].upper() + word[1:]"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 281 A](https://codeforces.com/problemset/problem/281/A)",
    "weight": 1.0
  },
  {
    "name": "CapitalizeFirstLetter:1",
    "sat": "def sat(s: str, word=\"nojapoxe\"):\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        else:\n            if s[i] != word[i]:\n                return False\n    return True",
    "ans_type": "str",
    "sol_header": "def sol(word=\"nojapoxe\"):",
    "sol_docstring": "    \"\"\"Capitalize the first letter of word\"\"\"",
    "sol_bodies": [
      "    return word[0].upper() + word[1:]"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 281 A](https://codeforces.com/problemset/problem/281/A)",
    "weight": 1.0
  },
  {
    "name": "CapitalizeFirstLetter:2",
    "sat": "def sat(s: str, word=\"silon\"):\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        else:\n            if s[i] != word[i]:\n                return False\n    return True",
    "ans_type": "str",
    "sol_header": "def sol(word=\"silon\"):",
    "sol_docstring": "    \"\"\"Capitalize the first letter of word\"\"\"",
    "sol_bodies": [
      "    return word[0].upper() + word[1:]"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 281 A](https://codeforces.com/problemset/problem/281/A)",
    "weight": 1.0
  },
  {
    "name": "CapitalizeFirstLetter:3",
    "sat": "def sat(s: str, word=\"fekovo\"):\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        else:\n            if s[i] != word[i]:\n                return False\n    return True",
    "ans_type": "str",
    "sol_header": "def sol(word=\"fekovo\"):",
    "sol_docstring": "    \"\"\"Capitalize the first letter of word\"\"\"",
    "sol_bodies": [
      "    return word[0].upper() + word[1:]"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 281 A](https://codeforces.com/problemset/problem/281/A)",
    "weight": 1.0
  },
  {
    "name": "CapitalizeFirstLetter:4",
    "sat": "def sat(s: str, word=\"mo\"):\n    for i in range(len(word)):\n        if i == 0:\n            if s[i] != word[i].upper():\n                return False\n        else:\n            if s[i] != word[i]:\n                return False\n    return True",
    "ans_type": "str",
    "sol_header": "def sol(word=\"mo\"):",
    "sol_docstring": "    \"\"\"Capitalize the first letter of word\"\"\"",
    "sol_bodies": [
      "    return word[0].upper() + word[1:]"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 281 A](https://codeforces.com/problemset/problem/281/A)",
    "weight": 1.0
  },
  {
    "name": "LongestSubsetString:0",
    "sat": "def sat(t: str, s=\"abbbcabbac\", target=7):\n    i = 0\n    for c in t:\n        while c != s[i]:\n            i += 1\n        i += 1\n    return len(t) >= target and all(t[i] != t[i + 1] for i in range(len(t) - 1))",
    "ans_type": "str",
    "sol_header": "def sol(s=\"abbbcabbac\", target=7):",
    "sol_docstring": "    \"\"\"\n    You are given a string consisting of a's, b's and c's, find any longest substring containing no repeated\n    consecutive characters.\n\n    Sample Input:\n    `\"abbbc\"`\n\n    Sample Output:\n    `\"abc\"`\n    \"\"\"",
    "sol_bodies": [
      "    # target is ignored\n    return s[:1] + \"\".join([b for a, b in zip(s, s[1:]) if b != a])"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 266 A](https://codeforces.com/problemset/problem/266/A)",
    "weight": 1.0
  },
  {
    "name": "LongestSubsetString:1",
    "sat": "def sat(t: str, s=\"cbbbbbcbbbbbbbaccacacaacbbcaaacbbaacbabacabccbbbcaacbbacaabcabbaacbbaa\", target=43):\n    i = 0\n    for c in t:\n        while c != s[i]:\n            i += 1\n        i += 1\n    return len(t) >= target and all(t[i] != t[i + 1] for i in range(len(t) - 1))",
    "ans_type": "str",
    "sol_header": "def sol(s=\"cbbbbbcbbbbbbbaccacacaacbbcaaacbbaacbabacabccbbbcaacbbacaabcabbaacbbaa\", target=43):",
    "sol_docstring": "    \"\"\"\n    You are given a string consisting of a's, b's and c's, find any longest substring containing no repeated\n    consecutive characters.\n\n    Sample Input:\n    `\"abbbc\"`\n\n    Sample Output:\n    `\"abc\"`\n    \"\"\"",
    "sol_bodies": [
      "    # target is ignored\n    return s[:1] + \"\".join([b for a, b in zip(s, s[1:]) if b != a])"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 266 A](https://codeforces.com/problemset/problem/266/A)",
    "weight": 1.0
  },
  {
    "name": "LongestSubsetString:2",
    "sat": "def sat(t: str, s=\"bcb\", target=3):\n    i = 0\n    for c in t:\n        while c != s[i]:\n            i += 1\n        i += 1\n    return len(t) >= target and all(t[i] != t[i + 1] for i in range(len(t) - 1))",
    "ans_type": "str",
    "sol_header": "def sol(s=\"bcb\", target=3):",
    "sol_docstring": "    \"\"\"\n    You are given a string consisting of a's, b's and c's, find any longest substring containing no repeated\n    consecutive characters.\n\n    Sample Input:\n    `\"abbbc\"`\n\n    Sample Output:\n    `\"abc\"`\n    \"\"\"",
    "sol_bodies": [
      "    # target is ignored\n    return s[:1] + \"\".join([b for a, b in zip(s, s[1:]) if b != a])"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 266 A](https://codeforces.com/problemset/problem/266/A)",
    "weight": 1.0
  },
  {
    "name": "LongestSubsetString:3",
    "sat": "def sat(t: str, s=\"c\", target=1):\n    i = 0\n    for c in t:\n        while c != s[i]:\n            i += 1\n        i += 1\n    return len(t) >= target and all(t[i] != t[i + 1] for i in range(len(t) - 1))",
    "ans_type": "str",
    "sol_header": "def sol(s=\"c\", target=1):",
    "sol_docstring": "    \"\"\"\n    You are given a string consisting of a's, b's and c's, find any longest substring containing no repeated\n    consecutive characters.\n\n    Sample Input:\n    `\"abbbc\"`\n\n    Sample Output:\n    `\"abc\"`\n    \"\"\"",
    "sol_bodies": [
      "    # target is ignored\n    return s[:1] + \"\".join([b for a, b in zip(s, s[1:]) if b != a])"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 266 A](https://codeforces.com/problemset/problem/266/A)",
    "weight": 1.0
  },
  {
    "name": "LongestSubsetString:4",
    "sat": "def sat(t: str, s=\"bcbcabba\", target=7):\n    i = 0\n    for c in t:\n        while c != s[i]:\n            i += 1\n        i += 1\n    return len(t) >= target and all(t[i] != t[i + 1] for i in range(len(t) - 1))",
    "ans_type": "str",
    "sol_header": "def sol(s=\"bcbcabba\", target=7):",
    "sol_docstring": "    \"\"\"\n    You are given a string consisting of a's, b's and c's, find any longest substring containing no repeated\n    consecutive characters.\n\n    Sample Input:\n    `\"abbbc\"`\n\n    Sample Output:\n    `\"abc\"`\n    \"\"\"",
    "sol_bodies": [
      "    # target is ignored\n    return s[:1] + \"\".join([b for a, b in zip(s, s[1:]) if b != a])"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 266 A](https://codeforces.com/problemset/problem/266/A)",
    "weight": 1.0
  },
  {
    "name": "FindHomogeneousSubstring:0",
    "sat": "def sat(n: int, s=\"0000101111111000010\", k=5):\n    return s[n:n + k] == s[n] * k",
    "ans_type": "int",
    "sol_header": "def sol(s=\"0000101111111000010\", k=5):",
    "sol_docstring": "    \"\"\"\n    You are given a string consisting of 0's and 1's. Find an index after which the subsequent k characters are\n    all 0's or all 1's.\n\n    Sample Input:\n    s = 0000111111100000, k = 5\n\n    Sample Output:\n    4\n    (or 5 or 6 or 11)\n    \"\"\"",
    "sol_bodies": [
      "    return s.index(\"0\" * k if \"0\" * k in s else \"1\" * k)",
      "    import re\n    return re.search(r\"([01])\\1{\" + str(k - 1) + \"}\", s).span()[0]",
      "    if \"0\" * k in s:\n        return s.index(\"0\" * k)\n    else:\n        return s.index(\"1\" * k)",
      "    try:\n        return s.index(\"0\" * k)\n    except:\n        return s.index(\"1\" * k)"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 96 A](https://codeforces.com/problemset/problem/96/A)",
    "weight": 1.0
  },
  {
    "name": "FindHomogeneousSubstring:1",
    "sat": "def sat(n: int, s=\"000000\", k=4):\n    return s[n:n + k] == s[n] * k",
    "ans_type": "int",
    "sol_header": "def sol(s=\"000000\", k=4):",
    "sol_docstring": "    \"\"\"\n    You are given a string consisting of 0's and 1's. Find an index after which the subsequent k characters are\n    all 0's or all 1's.\n\n    Sample Input:\n    s = 0000111111100000, k = 5\n\n    Sample Output:\n    4\n    (or 5 or 6 or 11)\n    \"\"\"",
    "sol_bodies": [
      "    return s.index(\"0\" * k if \"0\" * k in s else \"1\" * k)",
      "    import re\n    return re.search(r\"([01])\\1{\" + str(k - 1) + \"}\", s).span()[0]",
      "    if \"0\" * k in s:\n        return s.index(\"0\" * k)\n    else:\n        return s.index(\"1\" * k)",
      "    try:\n        return s.index(\"0\" * k)\n    except:\n        return s.index(\"1\" * k)"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 96 A](https://codeforces.com/problemset/problem/96/A)",
    "weight": 1.0
  },
  {
    "name": "FindHomogeneousSubstring:2",
    "sat": "def sat(n: int, s=\"001100000000000000000000101010100111101110000100\", k=18):\n    return s[n:n + k] == s[n] * k",
    "ans_type": "int",
    "sol_header": "def sol(s=\"001100000000000000000000101010100111101110000100\", k=18):",
    "sol_docstring": "    \"\"\"\n    You are given a string consisting of 0's and 1's. Find an index after which the subsequent k characters are\n    all 0's or all 1's.\n\n    Sample Input:\n    s = 0000111111100000, k = 5\n\n    Sample Output:\n    4\n    (or 5 or 6 or 11)\n    \"\"\"",
    "sol_bodies": [
      "    return s.index(\"0\" * k if \"0\" * k in s else \"1\" * k)",
      "    import re\n    return re.search(r\"([01])\\1{\" + str(k - 1) + \"}\", s).span()[0]",
      "    if \"0\" * k in s:\n        return s.index(\"0\" * k)\n    else:\n        return s.index(\"1\" * k)",
      "    try:\n        return s.index(\"0\" * k)\n    except:\n        return s.index(\"1\" * k)"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 96 A](https://codeforces.com/problemset/problem/96/A)",
    "weight": 1.0
  },
  {
    "name": "FindHomogeneousSubstring:3",
    "sat": "def sat(n: int, s=\"10100111100110001010011110100111010110010000101101110100010\", k=3):\n    return s[n:n + k] == s[n] * k",
    "ans_type": "int",
    "sol_header": "def sol(s=\"10100111100110001010011110100111010110010000101101110100010\", k=3):",
    "sol_docstring": "    \"\"\"\n    You are given a string consisting of 0's and 1's. Find an index after which the subsequent k characters are\n    all 0's or all 1's.\n\n    Sample Input:\n    s = 0000111111100000, k = 5\n\n    Sample Output:\n    4\n    (or 5 or 6 or 11)\n    \"\"\"",
    "sol_bodies": [
      "    return s.index(\"0\" * k if \"0\" * k in s else \"1\" * k)",
      "    import re\n    return re.search(r\"([01])\\1{\" + str(k - 1) + \"}\", s).span()[0]",
      "    if \"0\" * k in s:\n        return s.index(\"0\" * k)\n    else:\n        return s.index(\"1\" * k)",
      "    try:\n        return s.index(\"0\" * k)\n    except:\n        return s.index(\"1\" * k)"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 96 A](https://codeforces.com/problemset/problem/96/A)",
    "weight": 1.0
  },
  {
    "name": "FindHomogeneousSubstring:4",
    "sat": "def sat(n: int, s=\"010110011110100000001010010010001101001110110001111011000000000000000000000011101010111000111011001100111101101\", k=18):\n    return s[n:n + k] == s[n] * k",
    "ans_type": "int",
    "sol_header": "def sol(s=\"010110011110100000001010010010001101001110110001111011000000000000000000000011101010111000111011001100111101101\", k=18):",
    "sol_docstring": "    \"\"\"\n    You are given a string consisting of 0's and 1's. Find an index after which the subsequent k characters are\n    all 0's or all 1's.\n\n    Sample Input:\n    s = 0000111111100000, k = 5\n\n    Sample Output:\n    4\n    (or 5 or 6 or 11)\n    \"\"\"",
    "sol_bodies": [
      "    return s.index(\"0\" * k if \"0\" * k in s else \"1\" * k)",
      "    import re\n    return re.search(r\"([01])\\1{\" + str(k - 1) + \"}\", s).span()[0]",
      "    if \"0\" * k in s:\n        return s.index(\"0\" * k)\n    else:\n        return s.index(\"1\" * k)",
      "    try:\n        return s.index(\"0\" * k)\n    except:\n        return s.index(\"1\" * k)"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 96 A](https://codeforces.com/problemset/problem/96/A)",
    "weight": 1.0
  },
  {
    "name": "Triple0:0",
    "sat": "def sat(delta: List[int], nums=[[1, 2, 3], [9, -2, 8], [17, 2, 50]]):\n    return all(sum(vec[i] for vec in nums) + delta[i] == 0 for i in range(3))",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[[1, 2, 3], [9, -2, 8], [17, 2, 50]]):",
    "sol_docstring": "    \"\"\"Find the missing triple of integers to make them all add up to 0 coordinatewise\"\"\"",
    "sol_bodies": [
      "    return [-sum(vec[i] for vec in nums) for i in range(3)]"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 630 A](https://codeforces.com/problemset/problem/69/A)",
    "weight": 1.0
  },
  {
    "name": "Triple0:1",
    "sat": "def sat(delta: List[int], nums=[[-48, -64, 10], [-6, 46, 95], [89, 95, 20], [-96, 45, 74], [-78, 19, 47], [-6, -69, 55]]):\n    return all(sum(vec[i] for vec in nums) + delta[i] == 0 for i in range(3))",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[[-48, -64, 10], [-6, 46, 95], [89, 95, 20], [-96, 45, 74], [-78, 19, 47], [-6, -69, 55]]):",
    "sol_docstring": "    \"\"\"Find the missing triple of integers to make them all add up to 0 coordinatewise\"\"\"",
    "sol_bodies": [
      "    return [-sum(vec[i] for vec in nums) for i in range(3)]"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 630 A](https://codeforces.com/problemset/problem/69/A)",
    "weight": 1.0
  },
  {
    "name": "Triple0:2",
    "sat": "def sat(delta: List[int], nums=[[-17, -87, 34], [-8, -47, -68], [92, -14, -18], [18, 89, 85], [52, 89, -56], [-38, -19, -53], [-78, -25, -34]]):\n    return all(sum(vec[i] for vec in nums) + delta[i] == 0 for i in range(3))",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[[-17, -87, 34], [-8, -47, -68], [92, -14, -18], [18, 89, 85], [52, 89, -56], [-38, -19, -53], [-78, -25, -34]]):",
    "sol_docstring": "    \"\"\"Find the missing triple of integers to make them all add up to 0 coordinatewise\"\"\"",
    "sol_bodies": [
      "    return [-sum(vec[i] for vec in nums) for i in range(3)]"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 630 A](https://codeforces.com/problemset/problem/69/A)",
    "weight": 1.0
  },
  {
    "name": "Triple0:3",
    "sat": "def sat(delta: List[int], nums=[[35, -53, 59], [78, -51, 93], [-20, -17, -17], [64, 46, -24], [-81, -100, 47], [-98, -21, 47], [48, -85, -55], [-82, -29, 65]]):\n    return all(sum(vec[i] for vec in nums) + delta[i] == 0 for i in range(3))",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[[35, -53, 59], [78, -51, 93], [-20, -17, -17], [64, 46, -24], [-81, -100, 47], [-98, -21, 47], [48, -85, -55], [-82, -29, 65]]):",
    "sol_docstring": "    \"\"\"Find the missing triple of integers to make them all add up to 0 coordinatewise\"\"\"",
    "sol_bodies": [
      "    return [-sum(vec[i] for vec in nums) for i in range(3)]"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 630 A](https://codeforces.com/problemset/problem/69/A)",
    "weight": 1.0
  },
  {
    "name": "Triple0:4",
    "sat": "def sat(delta: List[int], nums=[[-16, 53, 37], [-54, -85, 65], [-46, 49, -81], [88, -47, -35], [53, -82, 4], [45, 94, 39], [72, -57, 27], [40, 35, -44], [-15, 32, 21]]):\n    return all(sum(vec[i] for vec in nums) + delta[i] == 0 for i in range(3))",
    "ans_type": "List[int]",
    "sol_header": "def sol(nums=[[-16, 53, 37], [-54, -85, 65], [-46, 49, -81], [88, -47, -35], [53, -82, 4], [45, 94, 39], [72, -57, 27], [40, 35, -44], [-15, 32, 21]]):",
    "sol_docstring": "    \"\"\"Find the missing triple of integers to make them all add up to 0 coordinatewise\"\"\"",
    "sol_bodies": [
      "    return [-sum(vec[i] for vec in nums) for i in range(3)]"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 630 A](https://codeforces.com/problemset/problem/69/A)",
    "weight": 1.0
  },
  {
    "name": "TotalDifference:0",
    "sat": "def sat(n: int, a=17, b=100, c=20):\n    return n + a == sum([b * i for i in range(c)])",
    "ans_type": "int",
    "sol_header": "def sol(a=17, b=100, c=20):",
    "sol_docstring": "    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"",
    "sol_bodies": [
      "    return -a + sum([b * i for i in range(c)])"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 546 A](https://codeforces.com/problemset/problem/546/A)",
    "weight": 1.0
  },
  {
    "name": "TotalDifference:1",
    "sat": "def sat(n: int, a=62, b=92, c=24):\n    return n + a == sum([b * i for i in range(c)])",
    "ans_type": "int",
    "sol_header": "def sol(a=62, b=92, c=24):",
    "sol_docstring": "    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"",
    "sol_bodies": [
      "    return -a + sum([b * i for i in range(c)])"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 546 A](https://codeforces.com/problemset/problem/546/A)",
    "weight": 1.0
  },
  {
    "name": "TotalDifference:2",
    "sat": "def sat(n: int, a=14, b=50, c=47):\n    return n + a == sum([b * i for i in range(c)])",
    "ans_type": "int",
    "sol_header": "def sol(a=14, b=50, c=47):",
    "sol_docstring": "    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"",
    "sol_bodies": [
      "    return -a + sum([b * i for i in range(c)])"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 546 A](https://codeforces.com/problemset/problem/546/A)",
    "weight": 1.0
  },
  {
    "name": "TotalDifference:3",
    "sat": "def sat(n: int, a=62, b=63, c=13):\n    return n + a == sum([b * i for i in range(c)])",
    "ans_type": "int",
    "sol_header": "def sol(a=62, b=63, c=13):",
    "sol_docstring": "    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"",
    "sol_bodies": [
      "    return -a + sum([b * i for i in range(c)])"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 546 A](https://codeforces.com/problemset/problem/546/A)",
    "weight": 1.0
  },
  {
    "name": "TotalDifference:4",
    "sat": "def sat(n: int, a=5, b=31, c=37):\n    return n + a == sum([b * i for i in range(c)])",
    "ans_type": "int",
    "sol_header": "def sol(a=5, b=31, c=37):",
    "sol_docstring": "    \"\"\"Find n such that n + a == b * (the sum of the first c integers)\"\"\"",
    "sol_bodies": [
      "    return -a + sum([b * i for i in range(c)])"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 546 A](https://codeforces.com/problemset/problem/546/A)",
    "weight": 1.0
  },
  {
    "name": "TripleDouble:0",
    "sat": "def sat(n: int, v=17, w=100):\n    for i in range(n):\n        assert v <= w\n        v *= 3\n        w *= 2\n    return v > w",
    "ans_type": "int",
    "sol_header": "def sol(v=17, w=100):",
    "sol_docstring": "    \"\"\"Find the smallest n such that if v is tripled n times and w is doubled n times, v exceeds w.\"\"\"",
    "sol_bodies": [
      "    i = 0\n    while v <= w:\n        v *= 3\n        w *= 2\n        i += 1\n    return i"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 791 A](https://codeforces.com/problemset/problem/791/A)",
    "weight": 1.0
  },
  {
    "name": "TripleDouble:1",
    "sat": "def sat(n: int, v=75129500, w=979292947):\n    for i in range(n):\n        assert v <= w\n        v *= 3\n        w *= 2\n    return v > w",
    "ans_type": "int",
    "sol_header": "def sol(v=75129500, w=979292947):",
    "sol_docstring": "    \"\"\"Find the smallest n such that if v is tripled n times and w is doubled n times, v exceeds w.\"\"\"",
    "sol_bodies": [
      "    i = 0\n    while v <= w:\n        v *= 3\n        w *= 2\n        i += 1\n    return i"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 791 A](https://codeforces.com/problemset/problem/791/A)",
    "weight": 1.0
  },
  {
    "name": "TripleDouble:2",
    "sat": "def sat(n: int, v=609909721, w=872375011):\n    for i in range(n):\n        assert v <= w\n        v *= 3\n        w *= 2\n    return v > w",
    "ans_type": "int",
    "sol_header": "def sol(v=609909721, w=872375011):",
    "sol_docstring": "    \"\"\"Find the smallest n such that if v is tripled n times and w is doubled n times, v exceeds w.\"\"\"",
    "sol_bodies": [
      "    i = 0\n    while v <= w:\n        v *= 3\n        w *= 2\n        i += 1\n    return i"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 791 A](https://codeforces.com/problemset/problem/791/A)",
    "weight": 1.0
  },
  {
    "name": "TripleDouble:3",
    "sat": "def sat(n: int, v=313946483, w=806690290):\n    for i in range(n):\n        assert v <= w\n        v *= 3\n        w *= 2\n    return v > w",
    "ans_type": "int",
    "sol_header": "def sol(v=313946483, w=806690290):",
    "sol_docstring": "    \"\"\"Find the smallest n such that if v is tripled n times and w is doubled n times, v exceeds w.\"\"\"",
    "sol_bodies": [
      "    i = 0\n    while v <= w:\n        v *= 3\n        w *= 2\n        i += 1\n    return i"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 791 A](https://codeforces.com/problemset/problem/791/A)",
    "weight": 1.0
  },
  {
    "name": "TripleDouble:4",
    "sat": "def sat(n: int, v=54888266, w=670740803):\n    for i in range(n):\n        assert v <= w\n        v *= 3\n        w *= 2\n    return v > w",
    "ans_type": "int",
    "sol_header": "def sol(v=54888266, w=670740803):",
    "sol_docstring": "    \"\"\"Find the smallest n such that if v is tripled n times and w is doubled n times, v exceeds w.\"\"\"",
    "sol_bodies": [
      "    i = 0\n    while v <= w:\n        v *= 3\n        w *= 2\n        i += 1\n    return i"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 791 A](https://codeforces.com/problemset/problem/791/A)",
    "weight": 1.0
  },
  {
    "name": "RepeatDec:0",
    "sat": "def sat(res: int, m=1234578987654321, n=4):\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return res == m",
    "ans_type": "int",
    "sol_header": "def sol(m=1234578987654321, n=4):",
    "sol_docstring": "    \"\"\"\n    Find the result of applying the following operation to integer m, n times: if the last digit is zero, remove\n    the zero, otherwise subtract 1.\n    \"\"\"",
    "sol_bodies": [
      "    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return m"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 977 A](https://codeforces.com/problemset/problem/977/A)",
    "weight": 1.0
  },
  {
    "name": "RepeatDec:1",
    "sat": "def sat(res: int, m=52891398375817839454, n=3):\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return res == m",
    "ans_type": "int",
    "sol_header": "def sol(m=52891398375817839454, n=3):",
    "sol_docstring": "    \"\"\"\n    Find the result of applying the following operation to integer m, n times: if the last digit is zero, remove\n    the zero, otherwise subtract 1.\n    \"\"\"",
    "sol_bodies": [
      "    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return m"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 977 A](https://codeforces.com/problemset/problem/977/A)",
    "weight": 1.0
  },
  {
    "name": "RepeatDec:2",
    "sat": "def sat(res: int, m=22262059435814874058, n=6):\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return res == m",
    "ans_type": "int",
    "sol_header": "def sol(m=22262059435814874058, n=6):",
    "sol_docstring": "    \"\"\"\n    Find the result of applying the following operation to integer m, n times: if the last digit is zero, remove\n    the zero, otherwise subtract 1.\n    \"\"\"",
    "sol_bodies": [
      "    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return m"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 977 A](https://codeforces.com/problemset/problem/977/A)",
    "weight": 1.0
  },
  {
    "name": "RepeatDec:3",
    "sat": "def sat(res: int, m=23602903522227899062, n=2):\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return res == m",
    "ans_type": "int",
    "sol_header": "def sol(m=23602903522227899062, n=2):",
    "sol_docstring": "    \"\"\"\n    Find the result of applying the following operation to integer m, n times: if the last digit is zero, remove\n    the zero, otherwise subtract 1.\n    \"\"\"",
    "sol_bodies": [
      "    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return m"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 977 A](https://codeforces.com/problemset/problem/977/A)",
    "weight": 1.0
  },
  {
    "name": "RepeatDec:4",
    "sat": "def sat(res: int, m=27368816582234104063, n=4):\n    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return res == m",
    "ans_type": "int",
    "sol_header": "def sol(m=27368816582234104063, n=4):",
    "sol_docstring": "    \"\"\"\n    Find the result of applying the following operation to integer m, n times: if the last digit is zero, remove\n    the zero, otherwise subtract 1.\n    \"\"\"",
    "sol_bodies": [
      "    for i in range(n):\n        m = (m - 1 if m % 10 else m // 10)\n    return m"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 977 A](https://codeforces.com/problemset/problem/977/A)",
    "weight": 1.0
  },
  {
    "name": "ShortestDecDelta:0",
    "sat": "def sat(li: List[int], n=149432, upper=14943):\n    return len(li) <= upper and all(abs(a - b) <= 10 for a, b in zip([1] + li, li + [n]))",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=149432, upper=14943):",
    "sol_docstring": "    \"\"\"\n    Find a the shortest sequence of integers going from 1 to n where each difference is at most 10.\n    Do not include 1 or n in the sequence.\n    \"\"\"",
    "sol_bodies": [
      "    m = 1\n    ans = []\n    while True:\n        m = min(n, m + 10)\n        if m >= n:\n            return ans\n        ans.append(m)"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 617 A](https://codeforces.com/problemset/problem/617/A)",
    "weight": 1.0
  },
  {
    "name": "ShortestDecDelta:1",
    "sat": "def sat(li: List[int], n=493863, upper=49386):\n    return len(li) <= upper and all(abs(a - b) <= 10 for a, b in zip([1] + li, li + [n]))",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=493863, upper=49386):",
    "sol_docstring": "    \"\"\"\n    Find a the shortest sequence of integers going from 1 to n where each difference is at most 10.\n    Do not include 1 or n in the sequence.\n    \"\"\"",
    "sol_bodies": [
      "    m = 1\n    ans = []\n    while True:\n        m = min(n, m + 10)\n        if m >= n:\n            return ans\n        ans.append(m)"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 617 A](https://codeforces.com/problemset/problem/617/A)",
    "weight": 1.0
  },
  {
    "name": "ShortestDecDelta:2",
    "sat": "def sat(li: List[int], n=827208, upper=82720):\n    return len(li) <= upper and all(abs(a - b) <= 10 for a, b in zip([1] + li, li + [n]))",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=827208, upper=82720):",
    "sol_docstring": "    \"\"\"\n    Find a the shortest sequence of integers going from 1 to n where each difference is at most 10.\n    Do not include 1 or n in the sequence.\n    \"\"\"",
    "sol_bodies": [
      "    m = 1\n    ans = []\n    while True:\n        m = min(n, m + 10)\n        if m >= n:\n            return ans\n        ans.append(m)"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 617 A](https://codeforces.com/problemset/problem/617/A)",
    "weight": 1.0
  },
  {
    "name": "ShortestDecDelta:3",
    "sat": "def sat(li: List[int], n=176183, upper=17618):\n    return len(li) <= upper and all(abs(a - b) <= 10 for a, b in zip([1] + li, li + [n]))",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=176183, upper=17618):",
    "sol_docstring": "    \"\"\"\n    Find a the shortest sequence of integers going from 1 to n where each difference is at most 10.\n    Do not include 1 or n in the sequence.\n    \"\"\"",
    "sol_bodies": [
      "    m = 1\n    ans = []\n    while True:\n        m = min(n, m + 10)\n        if m >= n:\n            return ans\n        ans.append(m)"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 617 A](https://codeforces.com/problemset/problem/617/A)",
    "weight": 1.0
  },
  {
    "name": "ShortestDecDelta:4",
    "sat": "def sat(li: List[int], n=483088, upper=48308):\n    return len(li) <= upper and all(abs(a - b) <= 10 for a, b in zip([1] + li, li + [n]))",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=483088, upper=48308):",
    "sol_docstring": "    \"\"\"\n    Find a the shortest sequence of integers going from 1 to n where each difference is at most 10.\n    Do not include 1 or n in the sequence.\n    \"\"\"",
    "sol_bodies": [
      "    m = 1\n    ans = []\n    while True:\n        m = min(n, m + 10)\n        if m >= n:\n            return ans\n        ans.append(m)"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 617 A](https://codeforces.com/problemset/problem/617/A)",
    "weight": 1.0
  },
  {
    "name": "MaxDelta:0",
    "sat": "def sat(n: int, pairs=[[3, 0], [17, 1], [9254359, 19], [123, 9254359], [0, 123]]):\n    assert sum(p - m for p, m in pairs) == 0, \"oo\"\n    tot = 0\n    success = False\n    for p, m in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success",
    "ans_type": "int",
    "sol_header": "def sol(pairs=[[3, 0], [17, 1], [9254359, 19], [123, 9254359], [0, 123]]):",
    "sol_docstring": "    \"\"\"\n    Given a sequence of integer pairs, p_i, m_i, where \\sum p_i-m_i = 0, find the maximum value, over t, of\n    p_{t+1} + \\sum_{i=1}^t p_i - m_i\n    \"\"\"",
    "sol_bodies": [
      "    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 116 A](https://codeforces.com/problemset/problem/116/A)",
    "weight": 1.0
  },
  {
    "name": "MaxDelta:1",
    "sat": "def sat(n: int, pairs=[[735272, 0], [959403, 509925], [627622, 420078], [26718, 90062], [175999, 98715], [428400, 1098754], [958640, 543606], [983032, 181754], [143406, 1301552], [183299, 437141], [133206, 199853], [679951, 366700], [383704, 737787], [476200, 226078], [923093, 81263], [574756, 679331], [766050, 5511], [214260, 445680], [434074, 747765], [769774, 209386], [512796, 2095723], [0, 612991]]):\n    assert sum(p - m for p, m in pairs) == 0, \"oo\"\n    tot = 0\n    success = False\n    for p, m in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success",
    "ans_type": "int",
    "sol_header": "def sol(pairs=[[735272, 0], [959403, 509925], [627622, 420078], [26718, 90062], [175999, 98715], [428400, 1098754], [958640, 543606], [983032, 181754], [143406, 1301552], [183299, 437141], [133206, 199853], [679951, 366700], [383704, 737787], [476200, 226078], [923093, 81263], [574756, 679331], [766050, 5511], [214260, 445680], [434074, 747765], [769774, 209386], [512796, 2095723], [0, 612991]]):",
    "sol_docstring": "    \"\"\"\n    Given a sequence of integer pairs, p_i, m_i, where \\sum p_i-m_i = 0, find the maximum value, over t, of\n    p_{t+1} + \\sum_{i=1}^t p_i - m_i\n    \"\"\"",
    "sol_bodies": [
      "    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 116 A](https://codeforces.com/problemset/problem/116/A)",
    "weight": 1.0
  },
  {
    "name": "MaxDelta:2",
    "sat": "def sat(n: int, pairs=[[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]):\n    assert sum(p - m for p, m in pairs) == 0, \"oo\"\n    tot = 0\n    success = False\n    for p, m in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success",
    "ans_type": "int",
    "sol_header": "def sol(pairs=[[266519, 0], [548032, 32788], [612482, 632311], [465240, 376403], [123288, 475698], [962873, 439482], [193531, 258475], [747616, 319130], [592192, 824307], [508933, 296745], [411467, 566648], [905981, 19854], [805465, 657818], [802088, 325540], [127441, 1703553], [19150, 964316], [0, 199230]]):",
    "sol_docstring": "    \"\"\"\n    Given a sequence of integer pairs, p_i, m_i, where \\sum p_i-m_i = 0, find the maximum value, over t, of\n    p_{t+1} + \\sum_{i=1}^t p_i - m_i\n    \"\"\"",
    "sol_bodies": [
      "    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 116 A](https://codeforces.com/problemset/problem/116/A)",
    "weight": 1.0
  },
  {
    "name": "MaxDelta:3",
    "sat": "def sat(n: int, pairs=[[0, 0]]):\n    assert sum(p - m for p, m in pairs) == 0, \"oo\"\n    tot = 0\n    success = False\n    for p, m in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success",
    "ans_type": "int",
    "sol_header": "def sol(pairs=[[0, 0]]):",
    "sol_docstring": "    \"\"\"\n    Given a sequence of integer pairs, p_i, m_i, where \\sum p_i-m_i = 0, find the maximum value, over t, of\n    p_{t+1} + \\sum_{i=1}^t p_i - m_i\n    \"\"\"",
    "sol_bodies": [
      "    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 116 A](https://codeforces.com/problemset/problem/116/A)",
    "weight": 1.0
  },
  {
    "name": "MaxDelta:4",
    "sat": "def sat(n: int, pairs=[[459604, 0], [364611, 68505], [562652, 512251], [668655, 471975], [464486, 626280], [138684, 177065], [163296, 68630], [188271, 104677], [367839, 338137], [73022, 362103], [464143, 484458], [214935, 189299], [643725, 283515], [908210, 541732], [710201, 234839], [854230, 34479], [3288, 675724], [846637, 396244], [0, 2526576]]):\n    assert sum(p - m for p, m in pairs) == 0, \"oo\"\n    tot = 0\n    success = False\n    for p, m in pairs:\n        tot -= m\n        tot += p\n        assert tot <= n\n        if tot == n:\n            success = True\n    return success",
    "ans_type": "int",
    "sol_header": "def sol(pairs=[[459604, 0], [364611, 68505], [562652, 512251], [668655, 471975], [464486, 626280], [138684, 177065], [163296, 68630], [188271, 104677], [367839, 338137], [73022, 362103], [464143, 484458], [214935, 189299], [643725, 283515], [908210, 541732], [710201, 234839], [854230, 34479], [3288, 675724], [846637, 396244], [0, 2526576]]):",
    "sol_docstring": "    \"\"\"\n    Given a sequence of integer pairs, p_i, m_i, where \\sum p_i-m_i = 0, find the maximum value, over t, of\n    p_{t+1} + \\sum_{i=1}^t p_i - m_i\n    \"\"\"",
    "sol_bodies": [
      "    tot = 0\n    n = 0\n    for p, m in pairs:\n        tot += p - m\n        if tot > n:\n            n = tot\n    return n"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 116 A](https://codeforces.com/problemset/problem/116/A)",
    "weight": 1.0
  },
  {
    "name": "CommonCase:0",
    "sat": "def sat(s_case: str, s=\"CanYouTellIfItHASmoreCAPITALS\"):\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return s_case == (s.upper() if caps > len(s) // 2 else s.lower())",
    "ans_type": "str",
    "sol_header": "def sol(s=\"CanYouTellIfItHASmoreCAPITALS\"):",
    "sol_docstring": "    \"\"\"\n    Given a word, replace it either with an upper-case or lower-case depending on whether or not it has more\n    capitals or lower-case letters. If it has strictly more capitals, use upper-case, otherwise, use lower-case.\n    \"\"\"",
    "sol_bodies": [
      "    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return (s.upper() if caps > len(s) // 2 else s.lower())  # duh, just take sat and return the answer checked for"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 59 A](https://codeforces.com/problemset/problem/59/A)\n\nThis is a trivial puzzle, especially if the AI realizes that it can can just copy the solution from\nthe problem",
    "weight": 1.0
  },
  {
    "name": "CommonCase:1",
    "sat": "def sat(s_case: str, s=\"ThUcynICHiHIc\"):\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return s_case == (s.upper() if caps > len(s) // 2 else s.lower())",
    "ans_type": "str",
    "sol_header": "def sol(s=\"ThUcynICHiHIc\"):",
    "sol_docstring": "    \"\"\"\n    Given a word, replace it either with an upper-case or lower-case depending on whether or not it has more\n    capitals or lower-case letters. If it has strictly more capitals, use upper-case, otherwise, use lower-case.\n    \"\"\"",
    "sol_bodies": [
      "    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return (s.upper() if caps > len(s) // 2 else s.lower())  # duh, just take sat and return the answer checked for"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 59 A](https://codeforces.com/problemset/problem/59/A)\n\nThis is a trivial puzzle, especially if the AI realizes that it can can just copy the solution from\nthe problem",
    "weight": 1.0
  },
  {
    "name": "CommonCase:2",
    "sat": "def sat(s_case: str, s=\"riziP\"):\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return s_case == (s.upper() if caps > len(s) // 2 else s.lower())",
    "ans_type": "str",
    "sol_header": "def sol(s=\"riziP\"):",
    "sol_docstring": "    \"\"\"\n    Given a word, replace it either with an upper-case or lower-case depending on whether or not it has more\n    capitals or lower-case letters. If it has strictly more capitals, use upper-case, otherwise, use lower-case.\n    \"\"\"",
    "sol_bodies": [
      "    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return (s.upper() if caps > len(s) // 2 else s.lower())  # duh, just take sat and return the answer checked for"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 59 A](https://codeforces.com/problemset/problem/59/A)\n\nThis is a trivial puzzle, especially if the AI realizes that it can can just copy the solution from\nthe problem",
    "weight": 1.0
  },
  {
    "name": "CommonCase:3",
    "sat": "def sat(s_case: str, s=\"KANExAjoHiBotipomyVOkATuMY\"):\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return s_case == (s.upper() if caps > len(s) // 2 else s.lower())",
    "ans_type": "str",
    "sol_header": "def sol(s=\"KANExAjoHiBotipomyVOkATuMY\"):",
    "sol_docstring": "    \"\"\"\n    Given a word, replace it either with an upper-case or lower-case depending on whether or not it has more\n    capitals or lower-case letters. If it has strictly more capitals, use upper-case, otherwise, use lower-case.\n    \"\"\"",
    "sol_bodies": [
      "    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return (s.upper() if caps > len(s) // 2 else s.lower())  # duh, just take sat and return the answer checked for"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 59 A](https://codeforces.com/problemset/problem/59/A)\n\nThis is a trivial puzzle, especially if the AI realizes that it can can just copy the solution from\nthe problem",
    "weight": 1.0
  },
  {
    "name": "CommonCase:4",
    "sat": "def sat(s_case: str, s=\"rAC\"):\n    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return s_case == (s.upper() if caps > len(s) // 2 else s.lower())",
    "ans_type": "str",
    "sol_header": "def sol(s=\"rAC\"):",
    "sol_docstring": "    \"\"\"\n    Given a word, replace it either with an upper-case or lower-case depending on whether or not it has more\n    capitals or lower-case letters. If it has strictly more capitals, use upper-case, otherwise, use lower-case.\n    \"\"\"",
    "sol_bodies": [
      "    caps = 0\n    for c in s:\n        if c != c.lower():\n            caps += 1\n    return (s.upper() if caps > len(s) // 2 else s.lower())  # duh, just take sat and return the answer checked for"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 59 A](https://codeforces.com/problemset/problem/59/A)\n\nThis is a trivial puzzle, especially if the AI realizes that it can can just copy the solution from\nthe problem",
    "weight": 1.0
  },
  {
    "name": "Sssuubbstriiingg:0",
    "sat": "def sat(inds: List[int], string=\"Sssuubbstrissiingg\"):\n    return inds == sorted(inds) and \"\".join(string[i] for i in inds) == \"substring\"",
    "ans_type": "List[int]",
    "sol_header": "def sol(string=\"Sssuubbstrissiingg\"):",
    "sol_docstring": "    \"\"\"Find increasing indices to make the substring \"substring\"\"\"",
    "sol_bodies": [
      "    target = \"substring\"\n    j = 0\n    ans = []\n    for i in range(len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 58 A](https://codeforces.com/problemset/problem/58/A)",
    "weight": 1.0
  },
  {
    "name": "Sssuubbstriiingg:1",
    "sat": "def sat(inds: List[int], string=\"su absItIstrilnvgenw\"):\n    return inds == sorted(inds) and \"\".join(string[i] for i in inds) == \"substring\"",
    "ans_type": "List[int]",
    "sol_header": "def sol(string=\"su absItIstrilnvgenw\"):",
    "sol_docstring": "    \"\"\"Find increasing indices to make the substring \"substring\"\"\"",
    "sol_bodies": [
      "    target = \"substring\"\n    j = 0\n    ans = []\n    for i in range(len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 58 A](https://codeforces.com/problemset/problem/58/A)",
    "weight": 1.0
  },
  {
    "name": "Sssuubbstriiingg:2",
    "sat": "def sat(inds: List[int], string=\"sKubssB  tzCzPrZiL inCgN\"):\n    return inds == sorted(inds) and \"\".join(string[i] for i in inds) == \"substring\"",
    "ans_type": "List[int]",
    "sol_header": "def sol(string=\"sKubssB  tzCzPrZiL inCgN\"):",
    "sol_docstring": "    \"\"\"Find increasing indices to make the substring \"substring\"\"\"",
    "sol_bodies": [
      "    target = \"substring\"\n    j = 0\n    ans = []\n    for i in range(len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 58 A](https://codeforces.com/problemset/problem/58/A)",
    "weight": 1.0
  },
  {
    "name": "Sssuubbstriiingg:3",
    "sat": "def sat(inds: List[int], string=\"suUbstriPng\"):\n    return inds == sorted(inds) and \"\".join(string[i] for i in inds) == \"substring\"",
    "ans_type": "List[int]",
    "sol_header": "def sol(string=\"suUbstriPng\"):",
    "sol_docstring": "    \"\"\"Find increasing indices to make the substring \"substring\"\"\"",
    "sol_bodies": [
      "    target = \"substring\"\n    j = 0\n    ans = []\n    for i in range(len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 58 A](https://codeforces.com/problemset/problem/58/A)",
    "weight": 1.0
  },
  {
    "name": "Sssuubbstriiingg:4",
    "sat": "def sat(inds: List[int], string=\"stuqb VqsMJptxriWYe nmfgNfW\"):\n    return inds == sorted(inds) and \"\".join(string[i] for i in inds) == \"substring\"",
    "ans_type": "List[int]",
    "sol_header": "def sol(string=\"stuqb VqsMJptxriWYe nmfgNfW\"):",
    "sol_docstring": "    \"\"\"Find increasing indices to make the substring \"substring\"\"\"",
    "sol_bodies": [
      "    target = \"substring\"\n    j = 0\n    ans = []\n    for i in range(len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 58 A](https://codeforces.com/problemset/problem/58/A)",
    "weight": 1.0
  },
  {
    "name": "Sstriiinggssuubb:0",
    "sat": "def sat(inds: List[int], string=\"enlightenment\"):\n    return inds == sorted(inds) and \"\".join(string[i] for i in inds) == \"intelligent\"",
    "ans_type": "List[int]",
    "sol_header": "def sol(string=\"enlightenment\"):",
    "sol_docstring": "    \"\"\"Find increasing indices to make the substring \"intelligent\" (with a surprise twist)\"\"\"",
    "sol_bodies": [
      "    target = \"intelligent\"\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 58 A](https://codeforces.com/problemset/problem/58/A)",
    "weight": 1.0
  },
  {
    "name": "Sstriiinggssuubb:1",
    "sat": "def sat(inds: List[int], string=\"inntGetlige\"):\n    return inds == sorted(inds) and \"\".join(string[i] for i in inds) == \"intelligent\"",
    "ans_type": "List[int]",
    "sol_header": "def sol(string=\"inntGetlige\"):",
    "sol_docstring": "    \"\"\"Find increasing indices to make the substring \"intelligent\" (with a surprise twist)\"\"\"",
    "sol_bodies": [
      "    target = \"intelligent\"\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 58 A](https://codeforces.com/problemset/problem/58/A)",
    "weight": 1.0
  },
  {
    "name": "Sstriiinggssuubb:2",
    "sat": "def sat(inds: List[int], string=\"gteliikeenGgqIHent\"):\n    return inds == sorted(inds) and \"\".join(string[i] for i in inds) == \"intelligent\"",
    "ans_type": "List[int]",
    "sol_header": "def sol(string=\"gteliikeenGgqIHent\"):",
    "sol_docstring": "    \"\"\"Find increasing indices to make the substring \"intelligent\" (with a surprise twist)\"\"\"",
    "sol_bodies": [
      "    target = \"intelligent\"\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 58 A](https://codeforces.com/problemset/problem/58/A)",
    "weight": 1.0
  },
  {
    "name": "Sstriiinggssuubb:3",
    "sat": "def sat(inds: List[int], string=\"xaGliigNntJfeeSm  nnEyt\"):\n    return inds == sorted(inds) and \"\".join(string[i] for i in inds) == \"intelligent\"",
    "ans_type": "List[int]",
    "sol_header": "def sol(string=\"xaGliigNntJfeeSm  nnEyt\"):",
    "sol_docstring": "    \"\"\"Find increasing indices to make the substring \"intelligent\" (with a surprise twist)\"\"\"",
    "sol_bodies": [
      "    target = \"intelligent\"\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 58 A](https://codeforces.com/problemset/problem/58/A)",
    "weight": 1.0
  },
  {
    "name": "Sstriiinggssuubb:4",
    "sat": "def sat(inds: List[int], string=\"  einliJSgeteq ne CAlti\"):\n    return inds == sorted(inds) and \"\".join(string[i] for i in inds) == \"intelligent\"",
    "ans_type": "List[int]",
    "sol_header": "def sol(string=\"  einliJSgeteq ne CAlti\"):",
    "sol_docstring": "    \"\"\"Find increasing indices to make the substring \"intelligent\" (with a surprise twist)\"\"\"",
    "sol_bodies": [
      "    target = \"intelligent\"\n    j = 0\n    ans = []\n    for i in range(-len(string), len(string)):\n        while string[i] == target[j]:\n            ans.append(i)\n            j += 1\n            if j == len(target):\n                return ans"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 58 A](https://codeforces.com/problemset/problem/58/A)",
    "weight": 1.0
  },
  {
    "name": "Moving0s:0",
    "sat": "def sat(seq: List[int], target=[1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], n_steps=4):\n    s = seq[:]  # copy\n    for step in range(n_steps):\n        for i in range(len(seq) - 1):\n            if (s[i], s[i + 1]) == (0, 1):\n                (s[i], s[i + 1]) = (1, 0)\n    return s == target",
    "ans_type": "List[int]",
    "sol_header": "def sol(target=[1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], n_steps=4):",
    "sol_docstring": "    \"\"\"\n    Find a sequence of 0's and 1's so that, after n_steps of swapping each adjacent (0, 1), the target sequence\n    is achieved.\n    \"\"\"",
    "sol_bodies": [
      "    s = target[:]  # copy\n    for step in range(n_steps):\n        for i in range(len(target) - 2, -1, -1):\n            if (s[i], s[i + 1]) == (1, 0):\n                (s[i], s[i + 1]) = (0, 1)\n    return s"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 266 B](https://codeforces.com/problemset/problem/266/B)",
    "weight": 1.0
  },
  {
    "name": "Moving0s:1",
    "sat": "def sat(seq: List[int], target=[1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], n_steps=9):\n    s = seq[:]  # copy\n    for step in range(n_steps):\n        for i in range(len(seq) - 1):\n            if (s[i], s[i + 1]) == (0, 1):\n                (s[i], s[i + 1]) = (1, 0)\n    return s == target",
    "ans_type": "List[int]",
    "sol_header": "def sol(target=[1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], n_steps=9):",
    "sol_docstring": "    \"\"\"\n    Find a sequence of 0's and 1's so that, after n_steps of swapping each adjacent (0, 1), the target sequence\n    is achieved.\n    \"\"\"",
    "sol_bodies": [
      "    s = target[:]  # copy\n    for step in range(n_steps):\n        for i in range(len(target) - 2, -1, -1):\n            if (s[i], s[i + 1]) == (1, 0):\n                (s[i], s[i + 1]) = (0, 1)\n    return s"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 266 B](https://codeforces.com/problemset/problem/266/B)",
    "weight": 1.0
  },
  {
    "name": "Moving0s:2",
    "sat": "def sat(seq: List[int], target=[1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0], n_steps=4):\n    s = seq[:]  # copy\n    for step in range(n_steps):\n        for i in range(len(seq) - 1):\n            if (s[i], s[i + 1]) == (0, 1):\n                (s[i], s[i + 1]) = (1, 0)\n    return s == target",
    "ans_type": "List[int]",
    "sol_header": "def sol(target=[1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0], n_steps=4):",
    "sol_docstring": "    \"\"\"\n    Find a sequence of 0's and 1's so that, after n_steps of swapping each adjacent (0, 1), the target sequence\n    is achieved.\n    \"\"\"",
    "sol_bodies": [
      "    s = target[:]  # copy\n    for step in range(n_steps):\n        for i in range(len(target) - 2, -1, -1):\n            if (s[i], s[i + 1]) == (1, 0):\n                (s[i], s[i + 1]) = (0, 1)\n    return s"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 266 B](https://codeforces.com/problemset/problem/266/B)",
    "weight": 1.0
  },
  {
    "name": "Moving0s:3",
    "sat": "def sat(seq: List[int], target=[1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], n_steps=12):\n    s = seq[:]  # copy\n    for step in range(n_steps):\n        for i in range(len(seq) - 1):\n            if (s[i], s[i + 1]) == (0, 1):\n                (s[i], s[i + 1]) = (1, 0)\n    return s == target",
    "ans_type": "List[int]",
    "sol_header": "def sol(target=[1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], n_steps=12):",
    "sol_docstring": "    \"\"\"\n    Find a sequence of 0's and 1's so that, after n_steps of swapping each adjacent (0, 1), the target sequence\n    is achieved.\n    \"\"\"",
    "sol_bodies": [
      "    s = target[:]  # copy\n    for step in range(n_steps):\n        for i in range(len(target) - 2, -1, -1):\n            if (s[i], s[i + 1]) == (1, 0):\n                (s[i], s[i + 1]) = (0, 1)\n    return s"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 266 B](https://codeforces.com/problemset/problem/266/B)",
    "weight": 1.0
  },
  {
    "name": "Moving0s:4",
    "sat": "def sat(seq: List[int], target=[1, 1, 1, 0, 0, 0, 0], n_steps=3):\n    s = seq[:]  # copy\n    for step in range(n_steps):\n        for i in range(len(seq) - 1):\n            if (s[i], s[i + 1]) == (0, 1):\n                (s[i], s[i + 1]) = (1, 0)\n    return s == target",
    "ans_type": "List[int]",
    "sol_header": "def sol(target=[1, 1, 1, 0, 0, 0, 0], n_steps=3):",
    "sol_docstring": "    \"\"\"\n    Find a sequence of 0's and 1's so that, after n_steps of swapping each adjacent (0, 1), the target sequence\n    is achieved.\n    \"\"\"",
    "sol_bodies": [
      "    s = target[:]  # copy\n    for step in range(n_steps):\n        for i in range(len(target) - 2, -1, -1):\n            if (s[i], s[i + 1]) == (1, 0):\n                (s[i], s[i + 1]) = (0, 1)\n    return s"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 266 B](https://codeforces.com/problemset/problem/266/B)",
    "weight": 1.0
  },
  {
    "name": "Factor47:0",
    "sat": "def sat(d: int, n=6002685529):\n    return n % d == 0 and all(i in \"47\" for i in str(d))",
    "ans_type": "int",
    "sol_header": "def sol(n=6002685529):",
    "sol_docstring": "    \"\"\"Find a integer factor of n whose decimal representation consists only of 7's and 4's.\"\"\"",
    "sol_bodies": [
      "    def helper(so_far, k):\n        if k > 0:\n            return helper(so_far * 10 + 4, k - 1) or helper(so_far * 10 + 7, k - 1)\n        return (n % so_far == 0) and so_far\n\n    for length in range(1, len(str(n)) // 2 + 2):\n        ans = helper(0, length)\n        if ans:\n            return ans"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 122 A](https://codeforces.com/problemset/problem/122/A)",
    "weight": 1.0
  },
  {
    "name": "Factor47:1",
    "sat": "def sat(d: int, n=16):\n    return n % d == 0 and all(i in \"47\" for i in str(d))",
    "ans_type": "int",
    "sol_header": "def sol(n=16):",
    "sol_docstring": "    \"\"\"Find a integer factor of n whose decimal representation consists only of 7's and 4's.\"\"\"",
    "sol_bodies": [
      "    def helper(so_far, k):\n        if k > 0:\n            return helper(so_far * 10 + 4, k - 1) or helper(so_far * 10 + 7, k - 1)\n        return (n % so_far == 0) and so_far\n\n    for length in range(1, len(str(n)) // 2 + 2):\n        ans = helper(0, length)\n        if ans:\n            return ans"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 122 A](https://codeforces.com/problemset/problem/122/A)",
    "weight": 1.0
  },
  {
    "name": "Factor47:2",
    "sat": "def sat(d: int, n=433459952851983617609247):\n    return n % d == 0 and all(i in \"47\" for i in str(d))",
    "ans_type": "int",
    "sol_header": "def sol(n=433459952851983617609247):",
    "sol_docstring": "    \"\"\"Find a integer factor of n whose decimal representation consists only of 7's and 4's.\"\"\"",
    "sol_bodies": [
      "    def helper(so_far, k):\n        if k > 0:\n            return helper(so_far * 10 + 4, k - 1) or helper(so_far * 10 + 7, k - 1)\n        return (n % so_far == 0) and so_far\n\n    for length in range(1, len(str(n)) // 2 + 2):\n        ans = helper(0, length)\n        if ans:\n            return ans"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 122 A](https://codeforces.com/problemset/problem/122/A)",
    "weight": 1.0
  },
  {
    "name": "Factor47:3",
    "sat": "def sat(d: int, n=738195924589532712188415):\n    return n % d == 0 and all(i in \"47\" for i in str(d))",
    "ans_type": "int",
    "sol_header": "def sol(n=738195924589532712188415):",
    "sol_docstring": "    \"\"\"Find a integer factor of n whose decimal representation consists only of 7's and 4's.\"\"\"",
    "sol_bodies": [
      "    def helper(so_far, k):\n        if k > 0:\n            return helper(so_far * 10 + 4, k - 1) or helper(so_far * 10 + 7, k - 1)\n        return (n % so_far == 0) and so_far\n\n    for length in range(1, len(str(n)) // 2 + 2):\n        ans = helper(0, length)\n        if ans:\n            return ans"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 122 A](https://codeforces.com/problemset/problem/122/A)",
    "weight": 1.0
  },
  {
    "name": "Factor47:4",
    "sat": "def sat(d: int, n=323190690645573746957862):\n    return n % d == 0 and all(i in \"47\" for i in str(d))",
    "ans_type": "int",
    "sol_header": "def sol(n=323190690645573746957862):",
    "sol_docstring": "    \"\"\"Find a integer factor of n whose decimal representation consists only of 7's and 4's.\"\"\"",
    "sol_bodies": [
      "    def helper(so_far, k):\n        if k > 0:\n            return helper(so_far * 10 + 4, k - 1) or helper(so_far * 10 + 7, k - 1)\n        return (n % so_far == 0) and so_far\n\n    for length in range(1, len(str(n)) // 2 + 2):\n        ans = helper(0, length)\n        if ans:\n            return ans"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 122 A](https://codeforces.com/problemset/problem/122/A)",
    "weight": 1.0
  },
  {
    "name": "Count47:0",
    "sat": "def sat(d: int, n=123456789):\n    return d > n and all(i in \"47\" for i in str(str(d).count(\"4\") + str(d).count(\"7\")))",
    "ans_type": "int",
    "sol_header": "def sol(n=123456789):",
    "sol_docstring": "    \"\"\"\n    Find a number bigger than n whose decimal representation has k 4's and 7's where k's decimal representation\n    consists only of 4's and 7's\n    \"\"\"",
    "sol_bodies": [
      "    return int(\"4444\" + \"0\" * (len(str(n)) - 3))"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 110 A](https://codeforces.com/problemset/problem/110/A)",
    "weight": 1.0
  },
  {
    "name": "Count47:1",
    "sat": "def sat(d: int, n=659104579100082212):\n    return d > n and all(i in \"47\" for i in str(str(d).count(\"4\") + str(d).count(\"7\")))",
    "ans_type": "int",
    "sol_header": "def sol(n=659104579100082212):",
    "sol_docstring": "    \"\"\"\n    Find a number bigger than n whose decimal representation has k 4's and 7's where k's decimal representation\n    consists only of 4's and 7's\n    \"\"\"",
    "sol_bodies": [
      "    return int(\"4444\" + \"0\" * (len(str(n)) - 3))"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 110 A](https://codeforces.com/problemset/problem/110/A)",
    "weight": 1.0
  },
  {
    "name": "Count47:2",
    "sat": "def sat(d: int, n=476988101965):\n    return d > n and all(i in \"47\" for i in str(str(d).count(\"4\") + str(d).count(\"7\")))",
    "ans_type": "int",
    "sol_header": "def sol(n=476988101965):",
    "sol_docstring": "    \"\"\"\n    Find a number bigger than n whose decimal representation has k 4's and 7's where k's decimal representation\n    consists only of 4's and 7's\n    \"\"\"",
    "sol_bodies": [
      "    return int(\"4444\" + \"0\" * (len(str(n)) - 3))"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 110 A](https://codeforces.com/problemset/problem/110/A)",
    "weight": 1.0
  },
  {
    "name": "Count47:3",
    "sat": "def sat(d: int, n=3169877099077541094754):\n    return d > n and all(i in \"47\" for i in str(str(d).count(\"4\") + str(d).count(\"7\")))",
    "ans_type": "int",
    "sol_header": "def sol(n=3169877099077541094754):",
    "sol_docstring": "    \"\"\"\n    Find a number bigger than n whose decimal representation has k 4's and 7's where k's decimal representation\n    consists only of 4's and 7's\n    \"\"\"",
    "sol_bodies": [
      "    return int(\"4444\" + \"0\" * (len(str(n)) - 3))"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 110 A](https://codeforces.com/problemset/problem/110/A)",
    "weight": 1.0
  },
  {
    "name": "Count47:4",
    "sat": "def sat(d: int, n=707):\n    return d > n and all(i in \"47\" for i in str(str(d).count(\"4\") + str(d).count(\"7\")))",
    "ans_type": "int",
    "sol_header": "def sol(n=707):",
    "sol_docstring": "    \"\"\"\n    Find a number bigger than n whose decimal representation has k 4's and 7's where k's decimal representation\n    consists only of 4's and 7's\n    \"\"\"",
    "sol_bodies": [
      "    return int(\"4444\" + \"0\" * (len(str(n)) - 3))"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 110 A](https://codeforces.com/problemset/problem/110/A)",
    "weight": 1.0
  },
  {
    "name": "MaybeReversed:0",
    "sat": "def sat(s: str, target=\"reverse me\", reverse=True):\n    return (s[::-1] == target) == reverse",
    "ans_type": "str",
    "sol_header": "def sol(target=\"reverse me\", reverse=True):",
    "sol_docstring": "    \"\"\"Either reverse a string or don't based on the reverse flag\"\"\"",
    "sol_bodies": [
      "    return target[::-1] if reverse else target + \"x\""
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 41 A](https://codeforces.com/problemset/problem/41/A)",
    "weight": 1.0
  },
  {
    "name": "MaybeReversed:1",
    "sat": "def sat(s: str, target=\"thubonyna\", reverse=True):\n    return (s[::-1] == target) == reverse",
    "ans_type": "str",
    "sol_header": "def sol(target=\"thubonyna\", reverse=True):",
    "sol_docstring": "    \"\"\"Either reverse a string or don't based on the reverse flag\"\"\"",
    "sol_bodies": [
      "    return target[::-1] if reverse else target + \"x\""
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 41 A](https://codeforces.com/problemset/problem/41/A)",
    "weight": 1.0
  },
  {
    "name": "MaybeReversed:2",
    "sat": "def sat(s: str, target=\"nivosypetextyzavalag\", reverse=False):\n    return (s[::-1] == target) == reverse",
    "ans_type": "str",
    "sol_header": "def sol(target=\"nivosypetextyzavalag\", reverse=False):",
    "sol_docstring": "    \"\"\"Either reverse a string or don't based on the reverse flag\"\"\"",
    "sol_bodies": [
      "    return target[::-1] if reverse else target + \"x\""
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 41 A](https://codeforces.com/problemset/problem/41/A)",
    "weight": 1.0
  },
  {
    "name": "MaybeReversed:3",
    "sat": "def sat(s: str, target=\"l\", reverse=False):\n    return (s[::-1] == target) == reverse",
    "ans_type": "str",
    "sol_header": "def sol(target=\"l\", reverse=False):",
    "sol_docstring": "    \"\"\"Either reverse a string or don't based on the reverse flag\"\"\"",
    "sol_bodies": [
      "    return target[::-1] if reverse else target + \"x\""
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 41 A](https://codeforces.com/problemset/problem/41/A)",
    "weight": 1.0
  },
  {
    "name": "MaybeReversed:4",
    "sat": "def sat(s: str, target=\"rechawewivetextovy\", reverse=True):\n    return (s[::-1] == target) == reverse",
    "ans_type": "str",
    "sol_header": "def sol(target=\"rechawewivetextovy\", reverse=True):",
    "sol_docstring": "    \"\"\"Either reverse a string or don't based on the reverse flag\"\"\"",
    "sol_bodies": [
      "    return target[::-1] if reverse else target + \"x\""
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 41 A](https://codeforces.com/problemset/problem/41/A)",
    "weight": 1.0
  },
  {
    "name": "MinBigger:0",
    "sat": "def sat(taken: List[int], val_counts=[[4, 3], [5, 2], [9, 3], [13, 13], [8, 11], [56, 1]], upper=11):\n    advantage = 0\n    assert len(taken) == len(val_counts) and sum(taken) <= upper\n    for i, (val, count) in zip(taken, val_counts):\n        assert 0 <= i <= count\n        advantage += val * i - val * count / 2\n    return advantage > 0",
    "ans_type": "List[int]",
    "sol_header": "def sol(val_counts=[[4, 3], [5, 2], [9, 3], [13, 13], [8, 11], [56, 1]], upper=11):",
    "sol_docstring": "    \"\"\"\n    The list of numbers val_counts represents multiple copies of integers, e.g.,\n    val_counts=[[3, 2], [4, 6]] corresponds to 3, 3, 4, 4, 4, 4, 4, 4\n    For each number, decide how many to take so that the total number taken is <= upper and the sum of those\n    taken exceeds half the total sum.\n    \"\"\"",
    "sol_bodies": [
      "    n = len(val_counts)\n    pi = sorted(range(n), key=lambda i: val_counts[i][0])\n    needed = sum(a * b for a, b in val_counts) / 2 + 0.1\n    ans = [0] * n\n    while needed > 0:\n        while val_counts[pi[-1]][1] == ans[pi[-1]]:\n            pi.pop()\n        i = pi[-1]\n        ans[i] += 1\n        needed -= val_counts[i][0]\n    return ans"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 160 A](https://codeforces.com/problemset/problem/160/A)",
    "weight": 1.0
  },
  {
    "name": "MinBigger:1",
    "sat": "def sat(taken: List[int], val_counts=[[51, 67], [78, 13], [7, 68], [84, 54], [39, 38]], upper=66):\n    advantage = 0\n    assert len(taken) == len(val_counts) and sum(taken) <= upper\n    for i, (val, count) in zip(taken, val_counts):\n        assert 0 <= i <= count\n        advantage += val * i - val * count / 2\n    return advantage > 0",
    "ans_type": "List[int]",
    "sol_header": "def sol(val_counts=[[51, 67], [78, 13], [7, 68], [84, 54], [39, 38]], upper=66):",
    "sol_docstring": "    \"\"\"\n    The list of numbers val_counts represents multiple copies of integers, e.g.,\n    val_counts=[[3, 2], [4, 6]] corresponds to 3, 3, 4, 4, 4, 4, 4, 4\n    For each number, decide how many to take so that the total number taken is <= upper and the sum of those\n    taken exceeds half the total sum.\n    \"\"\"",
    "sol_bodies": [
      "    n = len(val_counts)\n    pi = sorted(range(n), key=lambda i: val_counts[i][0])\n    needed = sum(a * b for a, b in val_counts) / 2 + 0.1\n    ans = [0] * n\n    while needed > 0:\n        while val_counts[pi[-1]][1] == ans[pi[-1]]:\n            pi.pop()\n        i = pi[-1]\n        ans[i] += 1\n        needed -= val_counts[i][0]\n    return ans"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 160 A](https://codeforces.com/problemset/problem/160/A)",
    "weight": 1.0
  },
  {
    "name": "MinBigger:2",
    "sat": "def sat(taken: List[int], val_counts=[[28, 29], [42, 54], [62, 85], [42, 95], [92, 32], [36, 35], [78, 56], [43, 20], [49, 17]], upper=153):\n    advantage = 0\n    assert len(taken) == len(val_counts) and sum(taken) <= upper\n    for i, (val, count) in zip(taken, val_counts):\n        assert 0 <= i <= count\n        advantage += val * i - val * count / 2\n    return advantage > 0",
    "ans_type": "List[int]",
    "sol_header": "def sol(val_counts=[[28, 29], [42, 54], [62, 85], [42, 95], [92, 32], [36, 35], [78, 56], [43, 20], [49, 17]], upper=153):",
    "sol_docstring": "    \"\"\"\n    The list of numbers val_counts represents multiple copies of integers, e.g.,\n    val_counts=[[3, 2], [4, 6]] corresponds to 3, 3, 4, 4, 4, 4, 4, 4\n    For each number, decide how many to take so that the total number taken is <= upper and the sum of those\n    taken exceeds half the total sum.\n    \"\"\"",
    "sol_bodies": [
      "    n = len(val_counts)\n    pi = sorted(range(n), key=lambda i: val_counts[i][0])\n    needed = sum(a * b for a, b in val_counts) / 2 + 0.1\n    ans = [0] * n\n    while needed > 0:\n        while val_counts[pi[-1]][1] == ans[pi[-1]]:\n            pi.pop()\n        i = pi[-1]\n        ans[i] += 1\n        needed -= val_counts[i][0]\n    return ans"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 160 A](https://codeforces.com/problemset/problem/160/A)",
    "weight": 1.0
  },
  {
    "name": "MinBigger:3",
    "sat": "def sat(taken: List[int], val_counts=[[44, 92], [28, 7], [56, 37], [37, 66]], upper=90):\n    advantage = 0\n    assert len(taken) == len(val_counts) and sum(taken) <= upper\n    for i, (val, count) in zip(taken, val_counts):\n        assert 0 <= i <= count\n        advantage += val * i - val * count / 2\n    return advantage > 0",
    "ans_type": "List[int]",
    "sol_header": "def sol(val_counts=[[44, 92], [28, 7], [56, 37], [37, 66]], upper=90):",
    "sol_docstring": "    \"\"\"\n    The list of numbers val_counts represents multiple copies of integers, e.g.,\n    val_counts=[[3, 2], [4, 6]] corresponds to 3, 3, 4, 4, 4, 4, 4, 4\n    For each number, decide how many to take so that the total number taken is <= upper and the sum of those\n    taken exceeds half the total sum.\n    \"\"\"",
    "sol_bodies": [
      "    n = len(val_counts)\n    pi = sorted(range(n), key=lambda i: val_counts[i][0])\n    needed = sum(a * b for a, b in val_counts) / 2 + 0.1\n    ans = [0] * n\n    while needed > 0:\n        while val_counts[pi[-1]][1] == ans[pi[-1]]:\n            pi.pop()\n        i = pi[-1]\n        ans[i] += 1\n        needed -= val_counts[i][0]\n    return ans"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 160 A](https://codeforces.com/problemset/problem/160/A)",
    "weight": 1.0
  },
  {
    "name": "MinBigger:4",
    "sat": "def sat(taken: List[int], val_counts=[[23, 93], [64, 14], [36, 8], [89, 92]], upper=65):\n    advantage = 0\n    assert len(taken) == len(val_counts) and sum(taken) <= upper\n    for i, (val, count) in zip(taken, val_counts):\n        assert 0 <= i <= count\n        advantage += val * i - val * count / 2\n    return advantage > 0",
    "ans_type": "List[int]",
    "sol_header": "def sol(val_counts=[[23, 93], [64, 14], [36, 8], [89, 92]], upper=65):",
    "sol_docstring": "    \"\"\"\n    The list of numbers val_counts represents multiple copies of integers, e.g.,\n    val_counts=[[3, 2], [4, 6]] corresponds to 3, 3, 4, 4, 4, 4, 4, 4\n    For each number, decide how many to take so that the total number taken is <= upper and the sum of those\n    taken exceeds half the total sum.\n    \"\"\"",
    "sol_bodies": [
      "    n = len(val_counts)\n    pi = sorted(range(n), key=lambda i: val_counts[i][0])\n    needed = sum(a * b for a, b in val_counts) / 2 + 0.1\n    ans = [0] * n\n    while needed > 0:\n        while val_counts[pi[-1]][1] == ans[pi[-1]]:\n            pi.pop()\n        i = pi[-1]\n        ans[i] += 1\n        needed -= val_counts[i][0]\n    return ans"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 160 A](https://codeforces.com/problemset/problem/160/A)",
    "weight": 1.0
  },
  {
    "name": "Dada:0",
    "sat": "def sat(s: str, a=5129, d=17):\n    return s.count(\"a\") == a and s.count(\"d\") == d and len(s) == a + d",
    "ans_type": "str",
    "sol_header": "def sol(a=5129, d=17):",
    "sol_docstring": "    \"\"\"Find a string with a given number of a's and d's\"\"\"",
    "sol_bodies": [
      "    return \"a\" * a + \"d\" * d"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 734 A](https://codeforces.com/problemset/problem/734/A)",
    "weight": 1.0
  },
  {
    "name": "Dada:1",
    "sat": "def sat(s: str, a=5798, d=1873):\n    return s.count(\"a\") == a and s.count(\"d\") == d and len(s) == a + d",
    "ans_type": "str",
    "sol_header": "def sol(a=5798, d=1873):",
    "sol_docstring": "    \"\"\"Find a string with a given number of a's and d's\"\"\"",
    "sol_bodies": [
      "    return \"a\" * a + \"d\" * d"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 734 A](https://codeforces.com/problemset/problem/734/A)",
    "weight": 1.0
  },
  {
    "name": "Dada:2",
    "sat": "def sat(s: str, a=2645, d=1270):\n    return s.count(\"a\") == a and s.count(\"d\") == d and len(s) == a + d",
    "ans_type": "str",
    "sol_header": "def sol(a=2645, d=1270):",
    "sol_docstring": "    \"\"\"Find a string with a given number of a's and d's\"\"\"",
    "sol_bodies": [
      "    return \"a\" * a + \"d\" * d"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 734 A](https://codeforces.com/problemset/problem/734/A)",
    "weight": 1.0
  },
  {
    "name": "Dada:3",
    "sat": "def sat(s: str, a=2996, d=6808):\n    return s.count(\"a\") == a and s.count(\"d\") == d and len(s) == a + d",
    "ans_type": "str",
    "sol_header": "def sol(a=2996, d=6808):",
    "sol_docstring": "    \"\"\"Find a string with a given number of a's and d's\"\"\"",
    "sol_bodies": [
      "    return \"a\" * a + \"d\" * d"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 734 A](https://codeforces.com/problemset/problem/734/A)",
    "weight": 1.0
  },
  {
    "name": "Dada:4",
    "sat": "def sat(s: str, a=4763, d=8408):\n    return s.count(\"a\") == a and s.count(\"d\") == d and len(s) == a + d",
    "ans_type": "str",
    "sol_header": "def sol(a=4763, d=8408):",
    "sol_docstring": "    \"\"\"Find a string with a given number of a's and d's\"\"\"",
    "sol_bodies": [
      "    return \"a\" * a + \"d\" * d"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 734 A](https://codeforces.com/problemset/problem/734/A)",
    "weight": 1.0
  },
  {
    "name": "DistinctDigits:0",
    "sat": "def sat(nums: List[int], a=100, b=1000, count=648):\n    assert all(len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums)\n    return len(set(nums)) >= count",
    "ans_type": "List[int]",
    "sol_header": "def sol(a=100, b=1000, count=648):",
    "sol_docstring": "    \"\"\"Find a list of count or more different numbers each between a and b that each have no repeated digits\"\"\"",
    "sol_bodies": [
      "    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 271 A](https://codeforces.com/problemset/problem/271/A)",
    "weight": 1.0
  },
  {
    "name": "DistinctDigits:1",
    "sat": "def sat(nums: List[int], a=79, b=169, count=67):\n    assert all(len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums)\n    return len(set(nums)) >= count",
    "ans_type": "List[int]",
    "sol_header": "def sol(a=79, b=169, count=67):",
    "sol_docstring": "    \"\"\"Find a list of count or more different numbers each between a and b that each have no repeated digits\"\"\"",
    "sol_bodies": [
      "    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 271 A](https://codeforces.com/problemset/problem/271/A)",
    "weight": 1.0
  },
  {
    "name": "DistinctDigits:2",
    "sat": "def sat(nums: List[int], a=31, b=105, count=66):\n    assert all(len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums)\n    return len(set(nums)) >= count",
    "ans_type": "List[int]",
    "sol_header": "def sol(a=31, b=105, count=66):",
    "sol_docstring": "    \"\"\"Find a list of count or more different numbers each between a and b that each have no repeated digits\"\"\"",
    "sol_bodies": [
      "    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 271 A](https://codeforces.com/problemset/problem/271/A)",
    "weight": 1.0
  },
  {
    "name": "DistinctDigits:3",
    "sat": "def sat(nums: List[int], a=52, b=95, count=40):\n    assert all(len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums)\n    return len(set(nums)) >= count",
    "ans_type": "List[int]",
    "sol_header": "def sol(a=52, b=95, count=40):",
    "sol_docstring": "    \"\"\"Find a list of count or more different numbers each between a and b that each have no repeated digits\"\"\"",
    "sol_bodies": [
      "    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 271 A](https://codeforces.com/problemset/problem/271/A)",
    "weight": 1.0
  },
  {
    "name": "DistinctDigits:4",
    "sat": "def sat(nums: List[int], a=136, b=176, count=34):\n    assert all(len(str(n)) == len(set(str(n))) and a <= n <= b for n in nums)\n    return len(set(nums)) >= count",
    "ans_type": "List[int]",
    "sol_header": "def sol(a=136, b=176, count=34):",
    "sol_docstring": "    \"\"\"Find a list of count or more different numbers each between a and b that each have no repeated digits\"\"\"",
    "sol_bodies": [
      "    return [n for n in range(a, b + 1) if len(str(n)) == len(set(str(n)))]"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 271 A](https://codeforces.com/problemset/problem/271/A)",
    "weight": 1.0
  },
  {
    "name": "EasySum:0",
    "sat": "def sat(tot: int, nums=[2, 8, 25, 18, 99, 11, 17, 16], thresh=17):\n    return tot == sum(1 if i < thresh else 2 for i in nums)",
    "ans_type": "int",
    "sol_header": "def sol(nums=[2, 8, 25, 18, 99, 11, 17, 16], thresh=17):",
    "sol_docstring": "    \"\"\"Add up 1 or 2 for numbers in a list depending on whether they exceed a threshold\"\"\"",
    "sol_bodies": [
      "    return sum(1 if i < thresh else 2 for i in nums)"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 677 A](https://codeforces.com/problemset/problem/677/A)",
    "weight": 1.0
  },
  {
    "name": "EasySum:1",
    "sat": "def sat(tot: int, nums=[60, 63, 11], thresh=99):\n    return tot == sum(1 if i < thresh else 2 for i in nums)",
    "ans_type": "int",
    "sol_header": "def sol(nums=[60, 63, 11], thresh=99):",
    "sol_docstring": "    \"\"\"Add up 1 or 2 for numbers in a list depending on whether they exceed a threshold\"\"\"",
    "sol_bodies": [
      "    return sum(1 if i < thresh else 2 for i in nums)"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 677 A](https://codeforces.com/problemset/problem/677/A)",
    "weight": 1.0
  },
  {
    "name": "EasySum:2",
    "sat": "def sat(tot: int, nums=[32, 24, 19, 88, 6, 33, 13], thresh=33):\n    return tot == sum(1 if i < thresh else 2 for i in nums)",
    "ans_type": "int",
    "sol_header": "def sol(nums=[32, 24, 19, 88, 6, 33, 13], thresh=33):",
    "sol_docstring": "    \"\"\"Add up 1 or 2 for numbers in a list depending on whether they exceed a threshold\"\"\"",
    "sol_bodies": [
      "    return sum(1 if i < thresh else 2 for i in nums)"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 677 A](https://codeforces.com/problemset/problem/677/A)",
    "weight": 1.0
  },
  {
    "name": "EasySum:3",
    "sat": "def sat(tot: int, nums=[60, 72, 32, 29, 90, 9, 39, 67, 31, 71, 68, 72, 28, 85, 75, 60, 42, 66, 4, 71, 57, 45, 88, 20, 66, 97, 33, 43, 48], thresh=30):\n    return tot == sum(1 if i < thresh else 2 for i in nums)",
    "ans_type": "int",
    "sol_header": "def sol(nums=[60, 72, 32, 29, 90, 9, 39, 67, 31, 71, 68, 72, 28, 85, 75, 60, 42, 66, 4, 71, 57, 45, 88, 20, 66, 97, 33, 43, 48], thresh=30):",
    "sol_docstring": "    \"\"\"Add up 1 or 2 for numbers in a list depending on whether they exceed a threshold\"\"\"",
    "sol_bodies": [
      "    return sum(1 if i < thresh else 2 for i in nums)"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 677 A](https://codeforces.com/problemset/problem/677/A)",
    "weight": 1.0
  },
  {
    "name": "EasySum:4",
    "sat": "def sat(tot: int, nums=[61, 98, 33, 32, 4, 99, 91, 63, 76, 83, 52, 0, 19, 49, 85, 5, 54, 71, 41, 93, 54, 78, 92], thresh=91):\n    return tot == sum(1 if i < thresh else 2 for i in nums)",
    "ans_type": "int",
    "sol_header": "def sol(nums=[61, 98, 33, 32, 4, 99, 91, 63, 76, 83, 52, 0, 19, 49, 85, 5, 54, 71, 41, 93, 54, 78, 92], thresh=91):",
    "sol_docstring": "    \"\"\"Add up 1 or 2 for numbers in a list depending on whether they exceed a threshold\"\"\"",
    "sol_bodies": [
      "    return sum(1 if i < thresh else 2 for i in nums)"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 677 A](https://codeforces.com/problemset/problem/677/A)",
    "weight": 1.0
  },
  {
    "name": "GimmeChars:0",
    "sat": "def sat(s: str, chars=['o', 'h', 'e', 'l', ' ', 'w', '!', 'r', 'd']):\n    for c in chars:\n        if c not in s:\n            return False\n    return True",
    "ans_type": "str",
    "sol_header": "def sol(chars=['o', 'h', 'e', 'l', ' ', 'w', '!', 'r', 'd']):",
    "sol_docstring": "    \"\"\"Find a string with certain characters\"\"\"",
    "sol_bodies": [],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 133 A](https://codeforces.com/problemset/problem/133/A), easy",
    "weight": 1.0
  },
  {
    "name": "GimmeChars:1",
    "sat": "def sat(s: str, chars=['1', 'j', '3', 'Q', 'e']):\n    for c in chars:\n        if c not in s:\n            return False\n    return True",
    "ans_type": "str",
    "sol_header": "def sol(chars=['1', 'j', '3', 'Q', 'e']):",
    "sol_docstring": "    \"\"\"Find a string with certain characters\"\"\"",
    "sol_bodies": [],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 133 A](https://codeforces.com/problemset/problem/133/A), easy",
    "weight": 1.0
  },
  {
    "name": "GimmeChars:2",
    "sat": "def sat(s: str, chars=['[', '/', 'g']):\n    for c in chars:\n        if c not in s:\n            return False\n    return True",
    "ans_type": "str",
    "sol_header": "def sol(chars=['[', '/', 'g']):",
    "sol_docstring": "    \"\"\"Find a string with certain characters\"\"\"",
    "sol_bodies": [],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 133 A](https://codeforces.com/problemset/problem/133/A), easy",
    "weight": 1.0
  },
  {
    "name": "GimmeChars:3",
    "sat": "def sat(s: str, chars=[' ', 'e', '%', '1', 'f']):\n    for c in chars:\n        if c not in s:\n            return False\n    return True",
    "ans_type": "str",
    "sol_header": "def sol(chars=[' ', 'e', '%', '1', 'f']):",
    "sol_docstring": "    \"\"\"Find a string with certain characters\"\"\"",
    "sol_bodies": [],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 133 A](https://codeforces.com/problemset/problem/133/A), easy",
    "weight": 1.0
  },
  {
    "name": "GimmeChars:4",
    "sat": "def sat(s: str, chars=['W', '@', 'S']):\n    for c in chars:\n        if c not in s:\n            return False\n    return True",
    "ans_type": "str",
    "sol_header": "def sol(chars=['W', '@', 'S']):",
    "sol_docstring": "    \"\"\"Find a string with certain characters\"\"\"",
    "sol_bodies": [],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 133 A](https://codeforces.com/problemset/problem/133/A), easy",
    "weight": 1.0
  },
  {
    "name": "HalfPairs:0",
    "sat": "def sat(ans: List[List[int]], target=17):\n    for i in range(len(ans)):\n        a, b = ans[i]\n        if b - a >= 2:\n            target -= 1\n    return target == 0",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(target=17):",
    "sol_docstring": "    \"\"\"\n    Find a list of pairs of integers where the number of pairs in which the second number is more than\n    two greater than the first number is a given constant\n    \"\"\"",
    "sol_bodies": [
      "    return [[0, 2]] * target"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 467 A](https://codeforces.com/problemset/problem/467/A)",
    "weight": 1.0
  },
  {
    "name": "HalfPairs:1",
    "sat": "def sat(ans: List[List[int]], target=0):\n    for i in range(len(ans)):\n        a, b = ans[i]\n        if b - a >= 2:\n            target -= 1\n    return target == 0",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(target=0):",
    "sol_docstring": "    \"\"\"\n    Find a list of pairs of integers where the number of pairs in which the second number is more than\n    two greater than the first number is a given constant\n    \"\"\"",
    "sol_bodies": [
      "    return [[0, 2]] * target"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 467 A](https://codeforces.com/problemset/problem/467/A)",
    "weight": 1.0
  },
  {
    "name": "HalfPairs:2",
    "sat": "def sat(ans: List[List[int]], target=1):\n    for i in range(len(ans)):\n        a, b = ans[i]\n        if b - a >= 2:\n            target -= 1\n    return target == 0",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(target=1):",
    "sol_docstring": "    \"\"\"\n    Find a list of pairs of integers where the number of pairs in which the second number is more than\n    two greater than the first number is a given constant\n    \"\"\"",
    "sol_bodies": [
      "    return [[0, 2]] * target"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 467 A](https://codeforces.com/problemset/problem/467/A)",
    "weight": 1.0
  },
  {
    "name": "HalfPairs:3",
    "sat": "def sat(ans: List[List[int]], target=2):\n    for i in range(len(ans)):\n        a, b = ans[i]\n        if b - a >= 2:\n            target -= 1\n    return target == 0",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(target=2):",
    "sol_docstring": "    \"\"\"\n    Find a list of pairs of integers where the number of pairs in which the second number is more than\n    two greater than the first number is a given constant\n    \"\"\"",
    "sol_bodies": [
      "    return [[0, 2]] * target"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 467 A](https://codeforces.com/problemset/problem/467/A)",
    "weight": 1.0
  },
  {
    "name": "InvertIndices:0",
    "sat": "def sat(indexes: List[int], target=[1, 3, 4, 2, 5, 6, 7, 13, 12, 11, 9, 10, 8]):\n    for i in range(1, len(target) + 1):\n        if target[indexes[i - 1] - 1] != i:\n            return False\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(target=[1, 3, 4, 2, 5, 6, 7, 13, 12, 11, 9, 10, 8]):",
    "sol_docstring": "    \"\"\"Given a list of integers representing a permutation, invert the permutation.\"\"\"",
    "sol_bodies": [],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 136 A](https://codeforces.com/problemset/problem/136/A)",
    "weight": 1.0
  },
  {
    "name": "InvertIndices:1",
    "sat": "def sat(indexes: List[int], target=[16, 12, 67, 77, 23, 47, 24, 45, 61, 80, 43, 50, 57, 81, 21, 55, 9, 28, 14, 87, 58, 35, 37, 63, 41, 38, 6, 86, 59, 13, 49, 68, 83, 30, 40, 73, 15, 11, 85, 70, 33, 22, 76, 5, 82, 52, 27, 26, 34, 89, 1, 48, 64, 88, 19, 29, 65, 69, 31, 2, 74, 32, 60, 7, 46, 56, 78, 79, 36, 51, 72, 71, 54, 20, 90, 8, 53, 75, 39, 4, 17, 62, 25, 3, 84, 42, 44, 10, 66, 18]):\n    for i in range(1, len(target) + 1):\n        if target[indexes[i - 1] - 1] != i:\n            return False\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(target=[16, 12, 67, 77, 23, 47, 24, 45, 61, 80, 43, 50, 57, 81, 21, 55, 9, 28, 14, 87, 58, 35, 37, 63, 41, 38, 6, 86, 59, 13, 49, 68, 83, 30, 40, 73, 15, 11, 85, 70, 33, 22, 76, 5, 82, 52, 27, 26, 34, 89, 1, 48, 64, 88, 19, 29, 65, 69, 31, 2, 74, 32, 60, 7, 46, 56, 78, 79, 36, 51, 72, 71, 54, 20, 90, 8, 53, 75, 39, 4, 17, 62, 25, 3, 84, 42, 44, 10, 66, 18]):",
    "sol_docstring": "    \"\"\"Given a list of integers representing a permutation, invert the permutation.\"\"\"",
    "sol_bodies": [],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 136 A](https://codeforces.com/problemset/problem/136/A)",
    "weight": 1.0
  },
  {
    "name": "InvertIndices:2",
    "sat": "def sat(indexes: List[int], target=[4, 66, 52, 28, 11, 59, 15, 37, 32, 71, 48, 23, 41, 7, 68, 30, 2, 44, 33, 3, 14, 63, 40, 22, 35, 6, 27, 58, 36, 38, 53, 9, 24, 49, 54, 50, 72, 64, 69, 77, 25, 31, 42, 17, 57, 67, 55, 70, 47, 46, 10, 75, 20, 61, 34, 39, 18, 12, 56, 29, 62, 26, 73, 21, 5, 1, 8, 19, 51, 45, 74, 13, 43, 16, 76, 65, 60]):\n    for i in range(1, len(target) + 1):\n        if target[indexes[i - 1] - 1] != i:\n            return False\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(target=[4, 66, 52, 28, 11, 59, 15, 37, 32, 71, 48, 23, 41, 7, 68, 30, 2, 44, 33, 3, 14, 63, 40, 22, 35, 6, 27, 58, 36, 38, 53, 9, 24, 49, 54, 50, 72, 64, 69, 77, 25, 31, 42, 17, 57, 67, 55, 70, 47, 46, 10, 75, 20, 61, 34, 39, 18, 12, 56, 29, 62, 26, 73, 21, 5, 1, 8, 19, 51, 45, 74, 13, 43, 16, 76, 65, 60]):",
    "sol_docstring": "    \"\"\"Given a list of integers representing a permutation, invert the permutation.\"\"\"",
    "sol_bodies": [],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 136 A](https://codeforces.com/problemset/problem/136/A)",
    "weight": 1.0
  },
  {
    "name": "InvertIndices:3",
    "sat": "def sat(indexes: List[int], target=[47, 10, 38, 39, 63, 9, 20, 31, 3, 42, 24, 4, 48, 25, 40, 52, 33, 58, 12, 5, 35, 51, 17, 6, 57, 60, 56, 61, 32, 64, 13, 59, 27, 50, 43, 11, 55, 29, 16, 19, 45, 7, 26, 1, 49, 53, 36, 18, 34, 22, 41, 46, 23, 15, 2, 14, 21, 28, 44, 54, 62, 30, 37, 8]):\n    for i in range(1, len(target) + 1):\n        if target[indexes[i - 1] - 1] != i:\n            return False\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(target=[47, 10, 38, 39, 63, 9, 20, 31, 3, 42, 24, 4, 48, 25, 40, 52, 33, 58, 12, 5, 35, 51, 17, 6, 57, 60, 56, 61, 32, 64, 13, 59, 27, 50, 43, 11, 55, 29, 16, 19, 45, 7, 26, 1, 49, 53, 36, 18, 34, 22, 41, 46, 23, 15, 2, 14, 21, 28, 44, 54, 62, 30, 37, 8]):",
    "sol_docstring": "    \"\"\"Given a list of integers representing a permutation, invert the permutation.\"\"\"",
    "sol_bodies": [],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 136 A](https://codeforces.com/problemset/problem/136/A)",
    "weight": 1.0
  },
  {
    "name": "InvertIndices:4",
    "sat": "def sat(indexes: List[int], target=[3, 1, 6, 5, 4, 2]):\n    for i in range(1, len(target) + 1):\n        if target[indexes[i - 1] - 1] != i:\n            return False\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(target=[3, 1, 6, 5, 4, 2]):",
    "sol_docstring": "    \"\"\"Given a list of integers representing a permutation, invert the permutation.\"\"\"",
    "sol_bodies": [],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 136 A](https://codeforces.com/problemset/problem/136/A)",
    "weight": 1.0
  },
  {
    "name": "FivePowers:0",
    "sat": "def sat(s: str, n=7012):\n    return int(str(5 ** n)[:-2] + s) == 5 ** n",
    "ans_type": "str",
    "sol_header": "def sol(n=7012):",
    "sol_docstring": "    \"\"\"What are the last two digits of 5^n?\"\"\"",
    "sol_bodies": [
      "    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 630 A](https://codeforces.com/problemset/problem/630/A)",
    "weight": 1.0
  },
  {
    "name": "FivePowers:1",
    "sat": "def sat(s: str, n=0):\n    return int(str(5 ** n)[:-2] + s) == 5 ** n",
    "ans_type": "str",
    "sol_header": "def sol(n=0):",
    "sol_docstring": "    \"\"\"What are the last two digits of 5^n?\"\"\"",
    "sol_bodies": [
      "    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 630 A](https://codeforces.com/problemset/problem/630/A)",
    "weight": 1.0
  },
  {
    "name": "FivePowers:2",
    "sat": "def sat(s: str, n=1):\n    return int(str(5 ** n)[:-2] + s) == 5 ** n",
    "ans_type": "str",
    "sol_header": "def sol(n=1):",
    "sol_docstring": "    \"\"\"What are the last two digits of 5^n?\"\"\"",
    "sol_bodies": [
      "    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 630 A](https://codeforces.com/problemset/problem/630/A)",
    "weight": 1.0
  },
  {
    "name": "FivePowers:3",
    "sat": "def sat(s: str, n=2):\n    return int(str(5 ** n)[:-2] + s) == 5 ** n",
    "ans_type": "str",
    "sol_header": "def sol(n=2):",
    "sol_docstring": "    \"\"\"What are the last two digits of 5^n?\"\"\"",
    "sol_bodies": [
      "    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 630 A](https://codeforces.com/problemset/problem/630/A)",
    "weight": 1.0
  },
  {
    "name": "FivePowers:4",
    "sat": "def sat(s: str, n=3):\n    return int(str(5 ** n)[:-2] + s) == 5 ** n",
    "ans_type": "str",
    "sol_header": "def sol(n=3):",
    "sol_docstring": "    \"\"\"What are the last two digits of 5^n?\"\"\"",
    "sol_bodies": [
      "    return (\"1\" if n == 0 else \"5\" if n == 1 else \"25\")"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 630 A](https://codeforces.com/problemset/problem/630/A)",
    "weight": 1.0
  },
  {
    "name": "CombinationLock:0",
    "sat": "def sat(states: List[str], start=\"424\", combo=\"778\", target_len=12):\n    assert all(len(s) == len(start) for s in states) and all(c in \"0123456789\" for s in states for c in s)\n    for a, b in zip([start] + states, states + [combo]):\n        assert sum(i != j for i, j in zip(a, b)) == 1\n        assert all(abs(int(i) - int(j)) in {0, 1, 9} for i, j in zip(a, b))\n\n    return len(states) <= target_len",
    "ans_type": "List[str]",
    "sol_header": "def sol(start=\"424\", combo=\"778\", target_len=12):",
    "sol_docstring": "    \"\"\"\n    Shortest Combination Lock Path\n\n    Given a starting a final lock position, find the (minimal) intermediate states, where each transition\n    involves increasing or decreasing a single digit (mod 10).\n\n    Example:\n    start = \"012\"\n    combo = \"329\"\n    output: ['112', '212', '312', '322', '321', '320']\n    \"\"\"",
    "sol_bodies": [
      "    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 540 A](https://codeforces.com/problemset/problem/540/A)",
    "weight": 1.0
  },
  {
    "name": "CombinationLock:1",
    "sat": "def sat(states: List[str], start=\"77872\", combo=\"43506\", target_len=16):\n    assert all(len(s) == len(start) for s in states) and all(c in \"0123456789\" for s in states for c in s)\n    for a, b in zip([start] + states, states + [combo]):\n        assert sum(i != j for i, j in zip(a, b)) == 1\n        assert all(abs(int(i) - int(j)) in {0, 1, 9} for i, j in zip(a, b))\n\n    return len(states) <= target_len",
    "ans_type": "List[str]",
    "sol_header": "def sol(start=\"77872\", combo=\"43506\", target_len=16):",
    "sol_docstring": "    \"\"\"\n    Shortest Combination Lock Path\n\n    Given a starting a final lock position, find the (minimal) intermediate states, where each transition\n    involves increasing or decreasing a single digit (mod 10).\n\n    Example:\n    start = \"012\"\n    combo = \"329\"\n    output: ['112', '212', '312', '322', '321', '320']\n    \"\"\"",
    "sol_bodies": [
      "    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 540 A](https://codeforces.com/problemset/problem/540/A)",
    "weight": 1.0
  },
  {
    "name": "CombinationLock:2",
    "sat": "def sat(states: List[str], start=\"268\", combo=\"180\", target_len=4):\n    assert all(len(s) == len(start) for s in states) and all(c in \"0123456789\" for s in states for c in s)\n    for a, b in zip([start] + states, states + [combo]):\n        assert sum(i != j for i, j in zip(a, b)) == 1\n        assert all(abs(int(i) - int(j)) in {0, 1, 9} for i, j in zip(a, b))\n\n    return len(states) <= target_len",
    "ans_type": "List[str]",
    "sol_header": "def sol(start=\"268\", combo=\"180\", target_len=4):",
    "sol_docstring": "    \"\"\"\n    Shortest Combination Lock Path\n\n    Given a starting a final lock position, find the (minimal) intermediate states, where each transition\n    involves increasing or decreasing a single digit (mod 10).\n\n    Example:\n    start = \"012\"\n    combo = \"329\"\n    output: ['112', '212', '312', '322', '321', '320']\n    \"\"\"",
    "sol_bodies": [
      "    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 540 A](https://codeforces.com/problemset/problem/540/A)",
    "weight": 1.0
  },
  {
    "name": "CombinationLock:3",
    "sat": "def sat(states: List[str], start=\"4675159714\", combo=\"9758013840\", target_len=27):\n    assert all(len(s) == len(start) for s in states) and all(c in \"0123456789\" for s in states for c in s)\n    for a, b in zip([start] + states, states + [combo]):\n        assert sum(i != j for i, j in zip(a, b)) == 1\n        assert all(abs(int(i) - int(j)) in {0, 1, 9} for i, j in zip(a, b))\n\n    return len(states) <= target_len",
    "ans_type": "List[str]",
    "sol_header": "def sol(start=\"4675159714\", combo=\"9758013840\", target_len=27):",
    "sol_docstring": "    \"\"\"\n    Shortest Combination Lock Path\n\n    Given a starting a final lock position, find the (minimal) intermediate states, where each transition\n    involves increasing or decreasing a single digit (mod 10).\n\n    Example:\n    start = \"012\"\n    combo = \"329\"\n    output: ['112', '212', '312', '322', '321', '320']\n    \"\"\"",
    "sol_bodies": [
      "    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 540 A](https://codeforces.com/problemset/problem/540/A)",
    "weight": 1.0
  },
  {
    "name": "CombinationLock:4",
    "sat": "def sat(states: List[str], start=\"242716\", combo=\"891245\", target_len=18):\n    assert all(len(s) == len(start) for s in states) and all(c in \"0123456789\" for s in states for c in s)\n    for a, b in zip([start] + states, states + [combo]):\n        assert sum(i != j for i, j in zip(a, b)) == 1\n        assert all(abs(int(i) - int(j)) in {0, 1, 9} for i, j in zip(a, b))\n\n    return len(states) <= target_len",
    "ans_type": "List[str]",
    "sol_header": "def sol(start=\"242716\", combo=\"891245\", target_len=18):",
    "sol_docstring": "    \"\"\"\n    Shortest Combination Lock Path\n\n    Given a starting a final lock position, find the (minimal) intermediate states, where each transition\n    involves increasing or decreasing a single digit (mod 10).\n\n    Example:\n    start = \"012\"\n    combo = \"329\"\n    output: ['112', '212', '312', '322', '321', '320']\n    \"\"\"",
    "sol_bodies": [
      "    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 540 A](https://codeforces.com/problemset/problem/540/A)",
    "weight": 1.0
  },
  {
    "name": "CombinationLockObfuscated:0",
    "sat": "def sat(states: List[str], start=\"424\", combo=\"778\", target_len=12):\n    return all(sum((int(a[i]) - int(b[i])) ** 2 % 10 for i in range(len(start))) == 1\n               for a, b in zip([start] + states, states[:target_len] + [combo]))",
    "ans_type": "List[str]",
    "sol_header": "def sol(start=\"424\", combo=\"778\", target_len=12):",
    "sol_docstring": "    \"\"\"Figure out what this does only from the code\"\"\"",
    "sol_bodies": [
      "    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 540 A](https://codeforces.com/problemset/problem/540/A)\nThis an obfuscated version of CombinationLock above, can the AI figure out what is being asked or that\nit is the same puzzle?",
    "weight": 1.0
  },
  {
    "name": "CombinationLockObfuscated:1",
    "sat": "def sat(states: List[str], start=\"50\", combo=\"59\", target_len=0):\n    return all(sum((int(a[i]) - int(b[i])) ** 2 % 10 for i in range(len(start))) == 1\n               for a, b in zip([start] + states, states[:target_len] + [combo]))",
    "ans_type": "List[str]",
    "sol_header": "def sol(start=\"50\", combo=\"59\", target_len=0):",
    "sol_docstring": "    \"\"\"Figure out what this does only from the code\"\"\"",
    "sol_bodies": [
      "    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 540 A](https://codeforces.com/problemset/problem/540/A)\nThis an obfuscated version of CombinationLock above, can the AI figure out what is being asked or that\nit is the same puzzle?",
    "weight": 1.0
  },
  {
    "name": "CombinationLockObfuscated:2",
    "sat": "def sat(states: List[str], start=\"23\", combo=\"12\", target_len=1):\n    return all(sum((int(a[i]) - int(b[i])) ** 2 % 10 for i in range(len(start))) == 1\n               for a, b in zip([start] + states, states[:target_len] + [combo]))",
    "ans_type": "List[str]",
    "sol_header": "def sol(start=\"23\", combo=\"12\", target_len=1):",
    "sol_docstring": "    \"\"\"Figure out what this does only from the code\"\"\"",
    "sol_bodies": [
      "    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 540 A](https://codeforces.com/problemset/problem/540/A)\nThis an obfuscated version of CombinationLock above, can the AI figure out what is being asked or that\nit is the same puzzle?",
    "weight": 1.0
  },
  {
    "name": "CombinationLockObfuscated:3",
    "sat": "def sat(states: List[str], start=\"4\", combo=\"3\", target_len=0):\n    return all(sum((int(a[i]) - int(b[i])) ** 2 % 10 for i in range(len(start))) == 1\n               for a, b in zip([start] + states, states[:target_len] + [combo]))",
    "ans_type": "List[str]",
    "sol_header": "def sol(start=\"4\", combo=\"3\", target_len=0):",
    "sol_docstring": "    \"\"\"Figure out what this does only from the code\"\"\"",
    "sol_bodies": [
      "    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 540 A](https://codeforces.com/problemset/problem/540/A)\nThis an obfuscated version of CombinationLock above, can the AI figure out what is being asked or that\nit is the same puzzle?",
    "weight": 1.0
  },
  {
    "name": "CombinationLockObfuscated:4",
    "sat": "def sat(states: List[str], start=\"2184377\", combo=\"7002994\", target_len=18):\n    return all(sum((int(a[i]) - int(b[i])) ** 2 % 10 for i in range(len(start))) == 1\n               for a, b in zip([start] + states, states[:target_len] + [combo]))",
    "ans_type": "List[str]",
    "sol_header": "def sol(start=\"2184377\", combo=\"7002994\", target_len=18):",
    "sol_docstring": "    \"\"\"Figure out what this does only from the code\"\"\"",
    "sol_bodies": [
      "    n = len(start)\n    ans = []\n    a, b = [[int(c) for c in x] for x in [start, combo]]\n    for i in range(n):\n        while a[i] != b[i]:\n            a[i] = (a[i] - 1 if (a[i] - b[i]) % 10 < 5 else a[i] + 1) % 10\n            if a != b:\n                ans.append(\"\".join(str(i) for i in a))\n    return ans"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 540 A](https://codeforces.com/problemset/problem/540/A)\nThis an obfuscated version of CombinationLock above, can the AI figure out what is being asked or that\nit is the same puzzle?",
    "weight": 1.0
  },
  {
    "name": "InvertPermutation:0",
    "sat": "def sat(s: str, perm=\"qwertyuiopasdfghjklzxcvbnm\", target=\"hello are you there?\"):\n    return \"\".join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c) for c in s) == target",
    "ans_type": "str",
    "sol_header": "def sol(perm=\"qwertyuiopasdfghjklzxcvbnm\", target=\"hello are you there?\"):",
    "sol_docstring": "    \"\"\"Find a string that, when a given permutation of characters is applied, has a given result.\"\"\"",
    "sol_bodies": [
      "    return \"\".join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c) for c in target)"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 474 A](https://codeforces.com/problemset/problem/474/A)",
    "weight": 1.0
  },
  {
    "name": "InvertPermutation:1",
    "sat": "def sat(s: str, perm=\"qwertyuiopasdfghjklzxcvbnm\", target=\"xapypakygatextifyth divufyjacof cecuchuquypo sulechukijocharapad hych mugemi re binivot\"):\n    return \"\".join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c) for c in s) == target",
    "ans_type": "str",
    "sol_header": "def sol(perm=\"qwertyuiopasdfghjklzxcvbnm\", target=\"xapypakygatextifyth divufyjacof cecuchuquypo sulechukijocharapad hych mugemi re binivot\"):",
    "sol_docstring": "    \"\"\"Find a string that, when a given permutation of characters is applied, has a given result.\"\"\"",
    "sol_bodies": [
      "    return \"\".join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c) for c in target)"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 474 A](https://codeforces.com/problemset/problem/474/A)",
    "weight": 1.0
  },
  {
    "name": "InvertPermutation:2",
    "sat": "def sat(s: str, perm=\"qwertyuiopasdfghjklzxcvbnm\", target=\"mujychenyzo\"):\n    return \"\".join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c) for c in s) == target",
    "ans_type": "str",
    "sol_header": "def sol(perm=\"qwertyuiopasdfghjklzxcvbnm\", target=\"mujychenyzo\"):",
    "sol_docstring": "    \"\"\"Find a string that, when a given permutation of characters is applied, has a given result.\"\"\"",
    "sol_bodies": [
      "    return \"\".join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c) for c in target)"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 474 A](https://codeforces.com/problemset/problem/474/A)",
    "weight": 1.0
  },
  {
    "name": "InvertPermutation:3",
    "sat": "def sat(s: str, perm=\"qwertyuiopasdfghjklzxcvbnm\", target=\"quethoruchyrugyz wemywuconuthisiquu kachogechehuz pulybyri quuby thatextak tychuzymuxuzazylyk neruzesithipecytoqu\"):\n    return \"\".join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c) for c in s) == target",
    "ans_type": "str",
    "sol_header": "def sol(perm=\"qwertyuiopasdfghjklzxcvbnm\", target=\"quethoruchyrugyz wemywuconuthisiquu kachogechehuz pulybyri quuby thatextak tychuzymuxuzazylyk neruzesithipecytoqu\"):",
    "sol_docstring": "    \"\"\"Find a string that, when a given permutation of characters is applied, has a given result.\"\"\"",
    "sol_bodies": [
      "    return \"\".join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c) for c in target)"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 474 A](https://codeforces.com/problemset/problem/474/A)",
    "weight": 1.0
  },
  {
    "name": "InvertPermutation:4",
    "sat": "def sat(s: str, perm=\"qwertyuiopasdfghjklzxcvbnm\", target=\"thyjytex cequolichitextotho bymoxokepy jyvumywefoc\"):\n    return \"\".join((perm[(perm.index(c) + 1) % len(perm)] if c in perm else c) for c in s) == target",
    "ans_type": "str",
    "sol_header": "def sol(perm=\"qwertyuiopasdfghjklzxcvbnm\", target=\"thyjytex cequolichitextotho bymoxokepy jyvumywefoc\"):",
    "sol_docstring": "    \"\"\"Find a string that, when a given permutation of characters is applied, has a given result.\"\"\"",
    "sol_bodies": [
      "    return \"\".join((perm[(perm.index(c) - 1) % len(perm)] if c in perm else c) for c in target)"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 474 A](https://codeforces.com/problemset/problem/474/A)",
    "weight": 1.0
  },
  {
    "name": "SameDifferent:0",
    "sat": "def sat(lists: List[List[int]], items=[5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length=4):\n    a, b = lists\n    assert len(a) == len(b) == length\n    assert len(set(a)) == len(a)\n    assert len(set(b)) == 1\n    for i in a + b:\n        assert (a + b).count(i) <= items.count(i)\n    return True",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(items=[5, 4, 9, 4, 5, 5, 5, 1, 5, 5], length=4):",
    "sol_docstring": "    \"\"\"\n    Given a list of integers and a target length, create of the given length such that:\n        * The first list must be all different numbers.\n        * The second must be all the same number.\n        * The two lists together comprise a sublist of all the list items\n    \"\"\"",
    "sol_bodies": [
      "    from collections import Counter\n    [[a, count]] = Counter(items).most_common(1)\n    assert count >= length\n    seen = {a}\n    dedup = [i for i in items if i not in seen and not seen.add(i)]\n    return [(dedup + [a])[:length], [a] * length]"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 1335 C](https://codeforces.com/problemset/problem/1335/C)",
    "weight": 1.0
  },
  {
    "name": "SameDifferent:1",
    "sat": "def sat(lists: List[List[int]], items=[5, 3, 2, 1, 0, 1, 4, 2, 5, 4, 6, 7, 8], length=2):\n    a, b = lists\n    assert len(a) == len(b) == length\n    assert len(set(a)) == len(a)\n    assert len(set(b)) == 1\n    for i in a + b:\n        assert (a + b).count(i) <= items.count(i)\n    return True",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(items=[5, 3, 2, 1, 0, 1, 4, 2, 5, 4, 6, 7, 8], length=2):",
    "sol_docstring": "    \"\"\"\n    Given a list of integers and a target length, create of the given length such that:\n        * The first list must be all different numbers.\n        * The second must be all the same number.\n        * The two lists together comprise a sublist of all the list items\n    \"\"\"",
    "sol_bodies": [
      "    from collections import Counter\n    [[a, count]] = Counter(items).most_common(1)\n    assert count >= length\n    seen = {a}\n    dedup = [i for i in items if i not in seen and not seen.add(i)]\n    return [(dedup + [a])[:length], [a] * length]"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 1335 C](https://codeforces.com/problemset/problem/1335/C)",
    "weight": 1.0
  },
  {
    "name": "SameDifferent:2",
    "sat": "def sat(lists: List[List[int]], items=[0, 9, 7, 2, 6, 1, 6, 5, 4, 6, 5, 2, 6, 4, 2, 2, 7, 2, 7, 3, 4, 4, 8, 8, 1, 2, 6, 4, 7, 0, 4, 4, 6, 8, 4, 8, 3, 6, 6, 4, 7, 0, 3, 0, 7, 9, 3, 2, 7, 7, 1, 2, 8, 9, 4, 6, 8, 2, 2, 4, 6, 5, 3, 3, 2, 8, 8, 2, 7, 8, 7, 6, 9, 7, 3, 2, 0, 5], length=10):\n    a, b = lists\n    assert len(a) == len(b) == length\n    assert len(set(a)) == len(a)\n    assert len(set(b)) == 1\n    for i in a + b:\n        assert (a + b).count(i) <= items.count(i)\n    return True",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(items=[0, 9, 7, 2, 6, 1, 6, 5, 4, 6, 5, 2, 6, 4, 2, 2, 7, 2, 7, 3, 4, 4, 8, 8, 1, 2, 6, 4, 7, 0, 4, 4, 6, 8, 4, 8, 3, 6, 6, 4, 7, 0, 3, 0, 7, 9, 3, 2, 7, 7, 1, 2, 8, 9, 4, 6, 8, 2, 2, 4, 6, 5, 3, 3, 2, 8, 8, 2, 7, 8, 7, 6, 9, 7, 3, 2, 0, 5], length=10):",
    "sol_docstring": "    \"\"\"\n    Given a list of integers and a target length, create of the given length such that:\n        * The first list must be all different numbers.\n        * The second must be all the same number.\n        * The two lists together comprise a sublist of all the list items\n    \"\"\"",
    "sol_bodies": [
      "    from collections import Counter\n    [[a, count]] = Counter(items).most_common(1)\n    assert count >= length\n    seen = {a}\n    dedup = [i for i in items if i not in seen and not seen.add(i)]\n    return [(dedup + [a])[:length], [a] * length]"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 1335 C](https://codeforces.com/problemset/problem/1335/C)",
    "weight": 1.0
  },
  {
    "name": "SameDifferent:3",
    "sat": "def sat(lists: List[List[int]], items=[8, 1, 8, 2, 7, 0, 5, 8, 1, 5, 7, 2, 7, 1, 3, 5, 2, 9, 2, 0, 5, 1, 9, 1, 7, 9, 4, 7, 3, 5, 5, 8, 8, 8, 3, 8, 7, 5, 5, 0, 3, 4, 2, 8, 0, 6, 7, 6, 6, 3, 0, 1, 1, 7, 6, 0, 9, 9, 9, 5, 6, 1, 0, 0, 6, 3, 3, 0, 4, 0, 6, 9, 1, 3, 2, 9, 4, 2, 4, 7, 2, 7, 6, 0, 9, 2, 2, 8, 9, 1, 3, 5, 8, 3, 3], length=10):\n    a, b = lists\n    assert len(a) == len(b) == length\n    assert len(set(a)) == len(a)\n    assert len(set(b)) == 1\n    for i in a + b:\n        assert (a + b).count(i) <= items.count(i)\n    return True",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(items=[8, 1, 8, 2, 7, 0, 5, 8, 1, 5, 7, 2, 7, 1, 3, 5, 2, 9, 2, 0, 5, 1, 9, 1, 7, 9, 4, 7, 3, 5, 5, 8, 8, 8, 3, 8, 7, 5, 5, 0, 3, 4, 2, 8, 0, 6, 7, 6, 6, 3, 0, 1, 1, 7, 6, 0, 9, 9, 9, 5, 6, 1, 0, 0, 6, 3, 3, 0, 4, 0, 6, 9, 1, 3, 2, 9, 4, 2, 4, 7, 2, 7, 6, 0, 9, 2, 2, 8, 9, 1, 3, 5, 8, 3, 3], length=10):",
    "sol_docstring": "    \"\"\"\n    Given a list of integers and a target length, create of the given length such that:\n        * The first list must be all different numbers.\n        * The second must be all the same number.\n        * The two lists together comprise a sublist of all the list items\n    \"\"\"",
    "sol_bodies": [
      "    from collections import Counter\n    [[a, count]] = Counter(items).most_common(1)\n    assert count >= length\n    seen = {a}\n    dedup = [i for i in items if i not in seen and not seen.add(i)]\n    return [(dedup + [a])[:length], [a] * length]"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 1335 C](https://codeforces.com/problemset/problem/1335/C)",
    "weight": 1.0
  },
  {
    "name": "SameDifferent:4",
    "sat": "def sat(lists: List[List[int]], items=[5, 8, 2, 2, 5, 1, 4, 9, 2, 0, 5, 4, 6, 5, 1, 7, 3, 2, 4, 6, 7, 2, 7, 3, 3, 1, 7, 9, 3, 2, 2, 9, 1, 2, 1, 1, 8, 6, 6, 2, 7, 6, 5, 2, 7, 6, 5, 0, 0, 8, 4, 5, 5, 3, 7, 5, 2, 0, 3, 1, 0, 8, 1, 3, 0, 1, 9, 4, 9, 1, 9, 7, 7, 1, 9, 7, 9, 4, 0, 8, 3, 7, 4, 3, 1, 6, 5, 8, 0, 9, 5, 7, 5, 6, 0, 1, 3, 1, 8], length=10):\n    a, b = lists\n    assert len(a) == len(b) == length\n    assert len(set(a)) == len(a)\n    assert len(set(b)) == 1\n    for i in a + b:\n        assert (a + b).count(i) <= items.count(i)\n    return True",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(items=[5, 8, 2, 2, 5, 1, 4, 9, 2, 0, 5, 4, 6, 5, 1, 7, 3, 2, 4, 6, 7, 2, 7, 3, 3, 1, 7, 9, 3, 2, 2, 9, 1, 2, 1, 1, 8, 6, 6, 2, 7, 6, 5, 2, 7, 6, 5, 0, 0, 8, 4, 5, 5, 3, 7, 5, 2, 0, 3, 1, 0, 8, 1, 3, 0, 1, 9, 4, 9, 1, 9, 7, 7, 1, 9, 7, 9, 4, 0, 8, 3, 7, 4, 3, 1, 6, 5, 8, 0, 9, 5, 7, 5, 6, 0, 1, 3, 1, 8], length=10):",
    "sol_docstring": "    \"\"\"\n    Given a list of integers and a target length, create of the given length such that:\n        * The first list must be all different numbers.\n        * The second must be all the same number.\n        * The two lists together comprise a sublist of all the list items\n    \"\"\"",
    "sol_bodies": [
      "    from collections import Counter\n    [[a, count]] = Counter(items).most_common(1)\n    assert count >= length\n    seen = {a}\n    dedup = [i for i in items if i not in seen and not seen.add(i)]\n    return [(dedup + [a])[:length], [a] * length]"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 1335 C](https://codeforces.com/problemset/problem/1335/C)",
    "weight": 1.0
  },
  {
    "name": "OnesAndTwos:0",
    "sat": "def sat(seq: List[int], n=10000, length=5017):\n    return all(i in [1, 2] for i in seq) and sum(seq) == n and len(seq) == length",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=10000, length=5017):",
    "sol_docstring": "    \"\"\"Find a sequence of 1's and 2's of a given length that that adds up to n\"\"\"",
    "sol_bodies": [
      "    return [2] * (n - length) + [1] * (2 * length - n)"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 476 A](https://codeforces.com/problemset/problem/476/A)",
    "weight": 1.0
  },
  {
    "name": "OnesAndTwos:1",
    "sat": "def sat(seq: List[int], n=867, length=785):\n    return all(i in [1, 2] for i in seq) and sum(seq) == n and len(seq) == length",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=867, length=785):",
    "sol_docstring": "    \"\"\"Find a sequence of 1's and 2's of a given length that that adds up to n\"\"\"",
    "sol_bodies": [
      "    return [2] * (n - length) + [1] * (2 * length - n)"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 476 A](https://codeforces.com/problemset/problem/476/A)",
    "weight": 1.0
  },
  {
    "name": "OnesAndTwos:2",
    "sat": "def sat(seq: List[int], n=0, length=0):\n    return all(i in [1, 2] for i in seq) and sum(seq) == n and len(seq) == length",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=0, length=0):",
    "sol_docstring": "    \"\"\"Find a sequence of 1's and 2's of a given length that that adds up to n\"\"\"",
    "sol_bodies": [
      "    return [2] * (n - length) + [1] * (2 * length - n)"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 476 A](https://codeforces.com/problemset/problem/476/A)",
    "weight": 1.0
  },
  {
    "name": "OnesAndTwos:3",
    "sat": "def sat(seq: List[int], n=4, length=2):\n    return all(i in [1, 2] for i in seq) and sum(seq) == n and len(seq) == length",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=4, length=2):",
    "sol_docstring": "    \"\"\"Find a sequence of 1's and 2's of a given length that that adds up to n\"\"\"",
    "sol_bodies": [
      "    return [2] * (n - length) + [1] * (2 * length - n)"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 476 A](https://codeforces.com/problemset/problem/476/A)",
    "weight": 1.0
  },
  {
    "name": "OnesAndTwos:4",
    "sat": "def sat(seq: List[int], n=5514, length=4310):\n    return all(i in [1, 2] for i in seq) and sum(seq) == n and len(seq) == length",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=5514, length=4310):",
    "sol_docstring": "    \"\"\"Find a sequence of 1's and 2's of a given length that that adds up to n\"\"\"",
    "sol_bodies": [
      "    return [2] * (n - length) + [1] * (2 * length - n)"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 476 A](https://codeforces.com/problemset/problem/476/A)",
    "weight": 1.0
  },
  {
    "name": "MinConsecutiveSum:0",
    "sat": "def sat(start: int, k=3, upper=6, seq=[17, 1, 2, 65, 18, 91, -30, 100, 3, 1, 2]):\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) <= upper",
    "ans_type": "int",
    "sol_header": "def sol(k=3, upper=6, seq=[17, 1, 2, 65, 18, 91, -30, 100, 3, 1, 2]):",
    "sol_docstring": "    \"\"\"Find a sequence of k consecutive indices whose sum is minimal\"\"\"",
    "sol_bodies": [
      "    return min(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 363 B](https://codeforces.com/problemset/problem/363/B)",
    "weight": 1.0
  },
  {
    "name": "MinConsecutiveSum:1",
    "sat": "def sat(start: int, k=2, upper=-172, seq=[79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]):\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) <= upper",
    "ans_type": "int",
    "sol_header": "def sol(k=2, upper=-172, seq=[79, 18, -98, -13, 88, -93, -77, -95, 40, -3, -22]):",
    "sol_docstring": "    \"\"\"Find a sequence of k consecutive indices whose sum is minimal\"\"\"",
    "sol_bodies": [
      "    return min(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 363 B](https://codeforces.com/problemset/problem/363/B)",
    "weight": 1.0
  },
  {
    "name": "MinConsecutiveSum:2",
    "sat": "def sat(start: int, k=3, upper=-238, seq=[34, -9, -41, -62, -99, -58, -81, 66, -51, 90, -8, -56, -80, -66, -50, -74, -4, -47, 63, -86, 66, 72, 38, -3, 9, 92, 25, -77, 86, -24, -23, 9, 10, 36, -82, -48, -74, -1, -80, 55, -2, -86, 95, -52, -14, -87]):\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) <= upper",
    "ans_type": "int",
    "sol_header": "def sol(k=3, upper=-238, seq=[34, -9, -41, -62, -99, -58, -81, 66, -51, 90, -8, -56, -80, -66, -50, -74, -4, -47, 63, -86, 66, 72, 38, -3, 9, 92, 25, -77, 86, -24, -23, 9, 10, 36, -82, -48, -74, -1, -80, 55, -2, -86, 95, -52, -14, -87]):",
    "sol_docstring": "    \"\"\"Find a sequence of k consecutive indices whose sum is minimal\"\"\"",
    "sol_bodies": [
      "    return min(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 363 B](https://codeforces.com/problemset/problem/363/B)",
    "weight": 1.0
  },
  {
    "name": "MinConsecutiveSum:3",
    "sat": "def sat(start: int, k=8, upper=-75, seq=[17, -90, 61, -29, 57, 7, -45, -37, 1, 69]):\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) <= upper",
    "ans_type": "int",
    "sol_header": "def sol(k=8, upper=-75, seq=[17, -90, 61, -29, 57, 7, -45, -37, 1, 69]):",
    "sol_docstring": "    \"\"\"Find a sequence of k consecutive indices whose sum is minimal\"\"\"",
    "sol_bodies": [
      "    return min(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 363 B](https://codeforces.com/problemset/problem/363/B)",
    "weight": 1.0
  },
  {
    "name": "MinConsecutiveSum:4",
    "sat": "def sat(start: int, k=8, upper=-4, seq=[-17, 55, 6, -2, -14, -19, 86, -4, -8, -49, 40, 82]):\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) <= upper",
    "ans_type": "int",
    "sol_header": "def sol(k=8, upper=-4, seq=[-17, 55, 6, -2, -14, -19, 86, -4, -8, -49, 40, 82]):",
    "sol_docstring": "    \"\"\"Find a sequence of k consecutive indices whose sum is minimal\"\"\"",
    "sol_bodies": [
      "    return min(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 363 B](https://codeforces.com/problemset/problem/363/B)",
    "weight": 1.0
  },
  {
    "name": "MaxConsecutiveSum:0",
    "sat": "def sat(start: int, k=3, lower=150, seq=[3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]):\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) >= lower",
    "ans_type": "int",
    "sol_header": "def sol(k=3, lower=150, seq=[3, 1, 2, 65, 18, 91, -30, 100, 0, 19, 52]):",
    "sol_docstring": "    \"\"\"Find a sequence of k consecutive indices whose sum is maximal\"\"\"",
    "sol_bodies": [
      "    return max(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 363 B](https://codeforces.com/problemset/problem/363/B)",
    "weight": 1.0
  },
  {
    "name": "MaxConsecutiveSum:1",
    "sat": "def sat(start: int, k=9, lower=-183, seq=[44, -94, 25, -63, -39, -71, -34, 84, -35]):\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) >= lower",
    "ans_type": "int",
    "sol_header": "def sol(k=9, lower=-183, seq=[44, -94, 25, -63, -39, -71, -34, 84, -35]):",
    "sol_docstring": "    \"\"\"Find a sequence of k consecutive indices whose sum is maximal\"\"\"",
    "sol_bodies": [
      "    return max(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 363 B](https://codeforces.com/problemset/problem/363/B)",
    "weight": 1.0
  },
  {
    "name": "MaxConsecutiveSum:2",
    "sat": "def sat(start: int, k=3, lower=86, seq=[19, 82, -24, -9, -92, 50, -89, -15, 45, 56, -64]):\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) >= lower",
    "ans_type": "int",
    "sol_header": "def sol(k=3, lower=86, seq=[19, 82, -24, -9, -92, 50, -89, -15, 45, 56, -64]):",
    "sol_docstring": "    \"\"\"Find a sequence of k consecutive indices whose sum is maximal\"\"\"",
    "sol_bodies": [
      "    return max(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 363 B](https://codeforces.com/problemset/problem/363/B)",
    "weight": 1.0
  },
  {
    "name": "MaxConsecutiveSum:3",
    "sat": "def sat(start: int, k=1, lower=-36, seq=[-36]):\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) >= lower",
    "ans_type": "int",
    "sol_header": "def sol(k=1, lower=-36, seq=[-36]):",
    "sol_docstring": "    \"\"\"Find a sequence of k consecutive indices whose sum is maximal\"\"\"",
    "sol_bodies": [
      "    return max(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 363 B](https://codeforces.com/problemset/problem/363/B)",
    "weight": 1.0
  },
  {
    "name": "MaxConsecutiveSum:4",
    "sat": "def sat(start: int, k=1, lower=93, seq=[-61, -46, 89, 93, -13, 14, -95, -74, -92, -38, -93, 64, -78, 3, 92, -10, -4, 43, 72, 12, 3, -3, -15, -96, 72, -71, -30, 53, 17, -87, 49, 17, -69, 78, 6, -77, -99, 91, 13, 9, 81, -55, 75, 48, -65, 18, -83, 10, -12, 88, 60, -72, -7, -49, -56, -76, 82, 18, 77, 52, -92, -88, 39, 13, -16, 82, 4, 44, -19, 54, 6, 55, 77, -38, -30, -55, -16]):\n    return 0 <= start <= len(seq) - k and sum(seq[start:start + k]) >= lower",
    "ans_type": "int",
    "sol_header": "def sol(k=1, lower=93, seq=[-61, -46, 89, 93, -13, 14, -95, -74, -92, -38, -93, 64, -78, 3, 92, -10, -4, 43, 72, 12, 3, -3, -15, -96, 72, -71, -30, 53, 17, -87, 49, 17, -69, 78, 6, -77, -99, 91, 13, 9, 81, -55, 75, 48, -65, 18, -83, 10, -12, 88, 60, -72, -7, -49, -56, -76, 82, 18, 77, 52, -92, -88, 39, 13, -16, 82, 4, 44, -19, 54, 6, 55, 77, -38, -30, -55, -16]):",
    "sol_docstring": "    \"\"\"Find a sequence of k consecutive indices whose sum is maximal\"\"\"",
    "sol_bodies": [
      "    return max(range(len(seq) - k + 1), key=lambda start: sum(seq[start:start + k]))"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 363 B](https://codeforces.com/problemset/problem/363/B)",
    "weight": 1.0
  },
  {
    "name": "MaxConsecutiveProduct:0",
    "sat": "def sat(start: int, k=3, lower=100000, seq=[91, 1, 2, 64, 18, 91, -30, 100, 3, 65, 18]):\n    prod = 1\n    for i in range(start, start + k):\n        prod *= seq[i]\n    return prod >= lower",
    "ans_type": "int",
    "sol_header": "def sol(k=3, lower=100000, seq=[91, 1, 2, 64, 18, 91, -30, 100, 3, 65, 18]):",
    "sol_docstring": "    \"\"\"Find a sequence of k consecutive indices whose product is maximal, possibly looping around\"\"\"",
    "sol_bodies": [
      "    def prod(start):\n        ans = 1\n        for i in range(start, start + k):\n            ans *= seq[i]\n        return ans\n\n    return max(range(-len(seq), len(seq) - k + 1), key=prod)"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 363 B](https://codeforces.com/problemset/problem/363/B)",
    "weight": 1.0
  },
  {
    "name": "MaxConsecutiveProduct:1",
    "sat": "def sat(start: int, k=8, lower=774420991987500, seq=[-50, -99, -99, -65, -69, -87, 90, 45]):\n    prod = 1\n    for i in range(start, start + k):\n        prod *= seq[i]\n    return prod >= lower",
    "ans_type": "int",
    "sol_header": "def sol(k=8, lower=774420991987500, seq=[-50, -99, -99, -65, -69, -87, 90, 45]):",
    "sol_docstring": "    \"\"\"Find a sequence of k consecutive indices whose product is maximal, possibly looping around\"\"\"",
    "sol_bodies": [
      "    def prod(start):\n        ans = 1\n        for i in range(start, start + k):\n            ans *= seq[i]\n        return ans\n\n    return max(range(-len(seq), len(seq) - k + 1), key=prod)"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 363 B](https://codeforces.com/problemset/problem/363/B)",
    "weight": 1.0
  },
  {
    "name": "MaxConsecutiveProduct:2",
    "sat": "def sat(start: int, k=6, lower=188917681120, seq=[73, -32, 30, 92, 73, 8, 31, 40, -59, -97, -16, -83, -86, 78, -91, -18, -31, 31, 37, 79, 63, 38, 14, 68, -73, 91, 71, 87, 54, -7, -74, -63, -57, -46, -78, -22, 71, 52, 32, -82, 71, 76, -28, 83, -65, -65, 70, -35, 83, -40, 69, 78, -81, 0, -69, -1, 0, 61, 92, 55, -89, 60, 74, 99, -53, -22, 50, 28, -60, 6, 27, -53, -77, 99, 1, -69, -67, 81, -89, 45, 59, -28, 24, -21, -65, -56, -89, -30, 58, 78, 73, 9, 81, -39, -99, 43, 32, 58, -56, -83, 82, 97, 70]):\n    prod = 1\n    for i in range(start, start + k):\n        prod *= seq[i]\n    return prod >= lower",
    "ans_type": "int",
    "sol_header": "def sol(k=6, lower=188917681120, seq=[73, -32, 30, 92, 73, 8, 31, 40, -59, -97, -16, -83, -86, 78, -91, -18, -31, 31, 37, 79, 63, 38, 14, 68, -73, 91, 71, 87, 54, -7, -74, -63, -57, -46, -78, -22, 71, 52, 32, -82, 71, 76, -28, 83, -65, -65, 70, -35, 83, -40, 69, 78, -81, 0, -69, -1, 0, 61, 92, 55, -89, 60, 74, 99, -53, -22, 50, 28, -60, 6, 27, -53, -77, 99, 1, -69, -67, 81, -89, 45, 59, -28, 24, -21, -65, -56, -89, -30, 58, 78, 73, 9, 81, -39, -99, 43, 32, 58, -56, -83, 82, 97, 70]):",
    "sol_docstring": "    \"\"\"Find a sequence of k consecutive indices whose product is maximal, possibly looping around\"\"\"",
    "sol_bodies": [
      "    def prod(start):\n        ans = 1\n        for i in range(start, start + k):\n            ans *= seq[i]\n        return ans\n\n    return max(range(-len(seq), len(seq) - k + 1), key=prod)"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 363 B](https://codeforces.com/problemset/problem/363/B)",
    "weight": 1.0
  },
  {
    "name": "MaxConsecutiveProduct:3",
    "sat": "def sat(start: int, k=2, lower=5589, seq=[8, -66, 75, 74, 40, 14, -81, -69, 99, 27, -18]):\n    prod = 1\n    for i in range(start, start + k):\n        prod *= seq[i]\n    return prod >= lower",
    "ans_type": "int",
    "sol_header": "def sol(k=2, lower=5589, seq=[8, -66, 75, 74, 40, 14, -81, -69, 99, 27, -18]):",
    "sol_docstring": "    \"\"\"Find a sequence of k consecutive indices whose product is maximal, possibly looping around\"\"\"",
    "sol_bodies": [
      "    def prod(start):\n        ans = 1\n        for i in range(start, start + k):\n            ans *= seq[i]\n        return ans\n\n    return max(range(-len(seq), len(seq) - k + 1), key=prod)"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 363 B](https://codeforces.com/problemset/problem/363/B)",
    "weight": 1.0
  },
  {
    "name": "MaxConsecutiveProduct:4",
    "sat": "def sat(start: int, k=10, lower=-8326797433194240, seq=[49, -99, 80, 26, 54, 13, 37, 13, -52, -47]):\n    prod = 1\n    for i in range(start, start + k):\n        prod *= seq[i]\n    return prod >= lower",
    "ans_type": "int",
    "sol_header": "def sol(k=10, lower=-8326797433194240, seq=[49, -99, 80, 26, 54, 13, 37, 13, -52, -47]):",
    "sol_docstring": "    \"\"\"Find a sequence of k consecutive indices whose product is maximal, possibly looping around\"\"\"",
    "sol_bodies": [
      "    def prod(start):\n        ans = 1\n        for i in range(start, start + k):\n            ans *= seq[i]\n        return ans\n\n    return max(range(-len(seq), len(seq) - k + 1), key=prod)"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 363 B](https://codeforces.com/problemset/problem/363/B)",
    "weight": 1.0
  },
  {
    "name": "DistinctOddSum:0",
    "sat": "def sat(nums: List[int], tot=12345, n=5):\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all(i >= i % 2 > 0 for i in nums)",
    "ans_type": "List[int]",
    "sol_header": "def sol(tot=12345, n=5):",
    "sol_docstring": "    \"\"\"Find n distinct positive odd integers that sum to tot\"\"\"",
    "sol_bodies": [
      "    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 1327 A](https://codeforces.com/problemset/problem/1327/A)",
    "weight": 1.0
  },
  {
    "name": "DistinctOddSum:1",
    "sat": "def sat(nums: List[int], tot=1819, n=3):\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all(i >= i % 2 > 0 for i in nums)",
    "ans_type": "List[int]",
    "sol_header": "def sol(tot=1819, n=3):",
    "sol_docstring": "    \"\"\"Find n distinct positive odd integers that sum to tot\"\"\"",
    "sol_bodies": [
      "    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 1327 A](https://codeforces.com/problemset/problem/1327/A)",
    "weight": 1.0
  },
  {
    "name": "DistinctOddSum:2",
    "sat": "def sat(nums: List[int], tot=37729, n=73):\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all(i >= i % 2 > 0 for i in nums)",
    "ans_type": "List[int]",
    "sol_header": "def sol(tot=37729, n=73):",
    "sol_docstring": "    \"\"\"Find n distinct positive odd integers that sum to tot\"\"\"",
    "sol_bodies": [
      "    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 1327 A](https://codeforces.com/problemset/problem/1327/A)",
    "weight": 1.0
  },
  {
    "name": "DistinctOddSum:3",
    "sat": "def sat(nums: List[int], tot=5359, n=11):\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all(i >= i % 2 > 0 for i in nums)",
    "ans_type": "List[int]",
    "sol_header": "def sol(tot=5359, n=11):",
    "sol_docstring": "    \"\"\"Find n distinct positive odd integers that sum to tot\"\"\"",
    "sol_bodies": [
      "    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 1327 A](https://codeforces.com/problemset/problem/1327/A)",
    "weight": 1.0
  },
  {
    "name": "DistinctOddSum:4",
    "sat": "def sat(nums: List[int], tot=36505, n=73):\n    return len(nums) == len(set(nums)) == n and sum(nums) == tot and all(i >= i % 2 > 0 for i in nums)",
    "ans_type": "List[int]",
    "sol_header": "def sol(tot=36505, n=73):",
    "sol_docstring": "    \"\"\"Find n distinct positive odd integers that sum to tot\"\"\"",
    "sol_bodies": [
      "    return list(range(1, 2 * n - 1, 2)) + [tot - sum(range(1, 2 * n - 1, 2))]"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 1327 A](https://codeforces.com/problemset/problem/1327/A)",
    "weight": 1.0
  },
  {
    "name": "MinRotations:0",
    "sat": "def sat(rotations: List[int], target=\"wonderful\", upper=69):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    assert len(rotations) == len(target)\n    for r, c in zip(rotations, target):\n        s = s[r:] + s[:r]\n        assert s[0] == c\n\n    return sum(abs(r) for r in rotations) <= upper",
    "ans_type": "List[int]",
    "sol_header": "def sol(target=\"wonderful\", upper=69):",
    "sol_docstring": "    \"\"\"\n    We begin with the string `\"a...z\"`\n\n    An `r`-rotation of a string means shifting it to the right (positive) or left (negative) by `r` characters and\n    cycling around. Given a target string of length n, find the n rotations that put the consecutive characters\n    of that string at the beginning of the r-rotation, with minimal sum of absolute values of the `r`'s.\n\n    For example if the string was `'dad'`, the minimal rotations would be `[3, -3, 3]` with a total of `9`.\n    \"\"\"",
    "sol_bodies": [
      "    s = \"abcdefghijklmnopqrstuvwxyz\"\n    ans = []\n    for c in target:\n        i = s.index(c)\n        r = min([i, i - len(s)], key=abs)\n        ans.append(r)\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return ans"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 731 A](https://codeforces.com/problemset/problem/731/A)",
    "weight": 1.0
  },
  {
    "name": "MinRotations:1",
    "sat": "def sat(rotations: List[int], target=\"tubolele\", upper=52):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    assert len(rotations) == len(target)\n    for r, c in zip(rotations, target):\n        s = s[r:] + s[:r]\n        assert s[0] == c\n\n    return sum(abs(r) for r in rotations) <= upper",
    "ans_type": "List[int]",
    "sol_header": "def sol(target=\"tubolele\", upper=52):",
    "sol_docstring": "    \"\"\"\n    We begin with the string `\"a...z\"`\n\n    An `r`-rotation of a string means shifting it to the right (positive) or left (negative) by `r` characters and\n    cycling around. Given a target string of length n, find the n rotations that put the consecutive characters\n    of that string at the beginning of the r-rotation, with minimal sum of absolute values of the `r`'s.\n\n    For example if the string was `'dad'`, the minimal rotations would be `[3, -3, 3]` with a total of `9`.\n    \"\"\"",
    "sol_bodies": [
      "    s = \"abcdefghijklmnopqrstuvwxyz\"\n    ans = []\n    for c in target:\n        i = s.index(c)\n        r = min([i, i - len(s)], key=abs)\n        ans.append(r)\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return ans"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 731 A](https://codeforces.com/problemset/problem/731/A)",
    "weight": 1.0
  },
  {
    "name": "MinRotations:2",
    "sat": "def sat(rotations: List[int], target=\"soquogisawah\", upper=67):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    assert len(rotations) == len(target)\n    for r, c in zip(rotations, target):\n        s = s[r:] + s[:r]\n        assert s[0] == c\n\n    return sum(abs(r) for r in rotations) <= upper",
    "ans_type": "List[int]",
    "sol_header": "def sol(target=\"soquogisawah\", upper=67):",
    "sol_docstring": "    \"\"\"\n    We begin with the string `\"a...z\"`\n\n    An `r`-rotation of a string means shifting it to the right (positive) or left (negative) by `r` characters and\n    cycling around. Given a target string of length n, find the n rotations that put the consecutive characters\n    of that string at the beginning of the r-rotation, with minimal sum of absolute values of the `r`'s.\n\n    For example if the string was `'dad'`, the minimal rotations would be `[3, -3, 3]` with a total of `9`.\n    \"\"\"",
    "sol_bodies": [
      "    s = \"abcdefghijklmnopqrstuvwxyz\"\n    ans = []\n    for c in target:\n        i = s.index(c)\n        r = min([i, i - len(s)], key=abs)\n        ans.append(r)\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return ans"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 731 A](https://codeforces.com/problemset/problem/731/A)",
    "weight": 1.0
  },
  {
    "name": "MinRotations:3",
    "sat": "def sat(rotations: List[int], target=\"jacepa\", upper=44):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    assert len(rotations) == len(target)\n    for r, c in zip(rotations, target):\n        s = s[r:] + s[:r]\n        assert s[0] == c\n\n    return sum(abs(r) for r in rotations) <= upper",
    "ans_type": "List[int]",
    "sol_header": "def sol(target=\"jacepa\", upper=44):",
    "sol_docstring": "    \"\"\"\n    We begin with the string `\"a...z\"`\n\n    An `r`-rotation of a string means shifting it to the right (positive) or left (negative) by `r` characters and\n    cycling around. Given a target string of length n, find the n rotations that put the consecutive characters\n    of that string at the beginning of the r-rotation, with minimal sum of absolute values of the `r`'s.\n\n    For example if the string was `'dad'`, the minimal rotations would be `[3, -3, 3]` with a total of `9`.\n    \"\"\"",
    "sol_bodies": [
      "    s = \"abcdefghijklmnopqrstuvwxyz\"\n    ans = []\n    for c in target:\n        i = s.index(c)\n        r = min([i, i - len(s)], key=abs)\n        ans.append(r)\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return ans"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 731 A](https://codeforces.com/problemset/problem/731/A)",
    "weight": 1.0
  },
  {
    "name": "MinRotations:4",
    "sat": "def sat(rotations: List[int], target=\"miwykucehexo\", upper=84):\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    assert len(rotations) == len(target)\n    for r, c in zip(rotations, target):\n        s = s[r:] + s[:r]\n        assert s[0] == c\n\n    return sum(abs(r) for r in rotations) <= upper",
    "ans_type": "List[int]",
    "sol_header": "def sol(target=\"miwykucehexo\", upper=84):",
    "sol_docstring": "    \"\"\"\n    We begin with the string `\"a...z\"`\n\n    An `r`-rotation of a string means shifting it to the right (positive) or left (negative) by `r` characters and\n    cycling around. Given a target string of length n, find the n rotations that put the consecutive characters\n    of that string at the beginning of the r-rotation, with minimal sum of absolute values of the `r`'s.\n\n    For example if the string was `'dad'`, the minimal rotations would be `[3, -3, 3]` with a total of `9`.\n    \"\"\"",
    "sol_bodies": [
      "    s = \"abcdefghijklmnopqrstuvwxyz\"\n    ans = []\n    for c in target:\n        i = s.index(c)\n        r = min([i, i - len(s)], key=abs)\n        ans.append(r)\n        s = s[r:] + s[:r]\n        assert s[0] == c\n    return ans"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 731 A](https://codeforces.com/problemset/problem/731/A)",
    "weight": 1.0
  },
  {
    "name": "BillSums:0",
    "sat": "def sat(bills: List[int], denominations=[1, 25, 35, 84], n=980, max_len=14):\n    return sum(bills) == n and all(b in denominations for b in bills) and len(bills) <= max_len",
    "ans_type": "List[int]",
    "sol_header": "def sol(denominations=[1, 25, 35, 84], n=980, max_len=14):",
    "sol_docstring": "    \"\"\"\n    Find the shortest sequence (length <= max_len) that sum to n, where each number is in denominations\n    \"\"\"",
    "sol_bodies": [
      "    \"\"\"\n    This solution uses dynamic programming, I believe it could be further sped up without having to count\n    all the way up to denominations.\n    \"\"\"\n    denominations = sorted(set(denominations)) # remove duplicates\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 996 A](https://codeforces.com/problemset/problem/996/A)\n\nWe make it much harder when the denominations are non-American so the greedy algorithm doesn't work.",
    "weight": 1.0
  },
  {
    "name": "BillSums:1",
    "sat": "def sat(bills: List[int], denominations=[1, 5, 7, 11], n=29377, max_len=2671):\n    return sum(bills) == n and all(b in denominations for b in bills) and len(bills) <= max_len",
    "ans_type": "List[int]",
    "sol_header": "def sol(denominations=[1, 5, 7, 11], n=29377, max_len=2671):",
    "sol_docstring": "    \"\"\"\n    Find the shortest sequence (length <= max_len) that sum to n, where each number is in denominations\n    \"\"\"",
    "sol_bodies": [
      "    \"\"\"\n    This solution uses dynamic programming, I believe it could be further sped up without having to count\n    all the way up to denominations.\n    \"\"\"\n    denominations = sorted(set(denominations)) # remove duplicates\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 996 A](https://codeforces.com/problemset/problem/996/A)\n\nWe make it much harder when the denominations are non-American so the greedy algorithm doesn't work.",
    "weight": 1.0
  },
  {
    "name": "BillSums:2",
    "sat": "def sat(bills: List[int], denominations=[1, 44, 69], n=727, max_len=18):\n    return sum(bills) == n and all(b in denominations for b in bills) and len(bills) <= max_len",
    "ans_type": "List[int]",
    "sol_header": "def sol(denominations=[1, 44, 69], n=727, max_len=18):",
    "sol_docstring": "    \"\"\"\n    Find the shortest sequence (length <= max_len) that sum to n, where each number is in denominations\n    \"\"\"",
    "sol_bodies": [
      "    \"\"\"\n    This solution uses dynamic programming, I believe it could be further sped up without having to count\n    all the way up to denominations.\n    \"\"\"\n    denominations = sorted(set(denominations)) # remove duplicates\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 996 A](https://codeforces.com/problemset/problem/996/A)\n\nWe make it much harder when the denominations are non-American so the greedy algorithm doesn't work.",
    "weight": 1.0
  },
  {
    "name": "BillSums:3",
    "sat": "def sat(bills: List[int], denominations=[1, 25, 29], n=537, max_len=21):\n    return sum(bills) == n and all(b in denominations for b in bills) and len(bills) <= max_len",
    "ans_type": "List[int]",
    "sol_header": "def sol(denominations=[1, 25, 29], n=537, max_len=21):",
    "sol_docstring": "    \"\"\"\n    Find the shortest sequence (length <= max_len) that sum to n, where each number is in denominations\n    \"\"\"",
    "sol_bodies": [
      "    \"\"\"\n    This solution uses dynamic programming, I believe it could be further sped up without having to count\n    all the way up to denominations.\n    \"\"\"\n    denominations = sorted(set(denominations)) # remove duplicates\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 996 A](https://codeforces.com/problemset/problem/996/A)\n\nWe make it much harder when the denominations are non-American so the greedy algorithm doesn't work.",
    "weight": 1.0
  },
  {
    "name": "BillSums:4",
    "sat": "def sat(bills: List[int], denominations=[1, 10, 23, 49], n=74, max_len=4):\n    return sum(bills) == n and all(b in denominations for b in bills) and len(bills) <= max_len",
    "ans_type": "List[int]",
    "sol_header": "def sol(denominations=[1, 10, 23, 49], n=74, max_len=4):",
    "sol_docstring": "    \"\"\"\n    Find the shortest sequence (length <= max_len) that sum to n, where each number is in denominations\n    \"\"\"",
    "sol_bodies": [
      "    \"\"\"\n    This solution uses dynamic programming, I believe it could be further sped up without having to count\n    all the way up to denominations.\n    \"\"\"\n    denominations = sorted(set(denominations)) # remove duplicates\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]"
    ],
    "module": "codeforces.py",
    "notes": "Inspired by [Codeforces Problem 996 A](https://codeforces.com/problemset/problem/996/A)\n\nWe make it much harder when the denominations are non-American so the greedy algorithm doesn't work.",
    "weight": 1.0
  },
  {
    "name": "BoxVolume:0",
    "sat": "def sat(sides: List[int], options=[2, 512, 1024], n=340282366920938463463374607431768211456, max_dim=13):\n    prod = 1\n    for b in sides:\n        prod *= b\n    return prod == n and set(sides) <= set(options) and len(sides) <= max_dim",
    "ans_type": "List[int]",
    "sol_header": "def sol(options=[2, 512, 1024], n=340282366920938463463374607431768211456, max_dim=13):",
    "sol_docstring": "    \"\"\"\n    Find the side lengths of a box in fewest dimensions (dimension <= max_dim) whose volume is n,\n     where each side length is in options\n    \"\"\"",
    "sol_bodies": [
      "    options = sorted(set(options))\n    base = options[0]\n    logs = []\n    for i in options + [n]:\n        j = 1\n        log = 0\n        while j < i:\n            log +=1\n            j *= base\n        assert j == i, \"All numbers must be a power of the smallest number\"\n        logs.append(log)\n    denominations, n = logs[:-1], logs[-1]\n\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [base ** k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]"
    ],
    "module": "codeforces.py",
    "notes": "(Also) inspired by [Codeforces Problem 996 A](https://codeforces.com/problemset/problem/996/A)\n\nWe make it much much harder by making it a multiplication problem where the greedy algorithm doesn't work.",
    "weight": 1.0
  },
  {
    "name": "BoxVolume:1",
    "sat": "def sat(sides: List[int], options=[2, 32, 128, 2048], nmax_dim=2671):\n    prod = 1\n    for b in sides:\n        prod *= b\n    return prod == n and set(sides) <= set(options) and len(sides) <= max_dim",
    "ans_type": "List[int]",
    "sol_header": "def sol(options=[2, 32, 128, 2048], nmax_dim=2671):",
    "sol_docstring": "    \"\"\"\n    Find the side lengths of a box in fewest dimensions (dimension <= max_dim) whose volume is n,\n     where each side length is in options\n    \"\"\"",
    "sol_bodies": [
      "    options = sorted(set(options))\n    base = options[0]\n    logs = []\n    for i in options + [n]:\n        j = 1\n        log = 0\n        while j < i:\n            log +=1\n            j *= base\n        assert j == i, \"All numbers must be a power of the smallest number\"\n        logs.append(log)\n    denominations, n = logs[:-1], logs[-1]\n\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [base ** k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]"
    ],
    "module": "codeforces.py",
    "notes": "(Also) inspired by [Codeforces Problem 996 A](https://codeforces.com/problemset/problem/996/A)\n\nWe make it much much harder by making it a multiplication problem where the greedy algorithm doesn't work.",
    "weight": 1.0
  },
  {
    "name": "BoxVolume:2",
    "sat": "def sat(sides: List[int], options=[5, 5684341886080801486968994140625, 1694065894508600678136645001359283924102783203125], n=14164235936814247246943953676783316651469999599259488526297703814252125093918086614885937400554283434172053854937092875501351523725603695985262279092166781262962870903549601084831041808313096168206454204432965872990952135614781500037949647186895146848775449563088704805081355726771444219003252553140494372583795600460039446480996347267095412342936844101488043829191704193224433757153659988332565127014442298522610686943372161710084163946718544591837540089627956441911856011461878779300604946911334991455078125, max_dim=18):\n    prod = 1\n    for b in sides:\n        prod *= b\n    return prod == n and set(sides) <= set(options) and len(sides) <= max_dim",
    "ans_type": "List[int]",
    "sol_header": "def sol(options=[5, 5684341886080801486968994140625, 1694065894508600678136645001359283924102783203125], n=14164235936814247246943953676783316651469999599259488526297703814252125093918086614885937400554283434172053854937092875501351523725603695985262279092166781262962870903549601084831041808313096168206454204432965872990952135614781500037949647186895146848775449563088704805081355726771444219003252553140494372583795600460039446480996347267095412342936844101488043829191704193224433757153659988332565127014442298522610686943372161710084163946718544591837540089627956441911856011461878779300604946911334991455078125, max_dim=18):",
    "sol_docstring": "    \"\"\"\n    Find the side lengths of a box in fewest dimensions (dimension <= max_dim) whose volume is n,\n     where each side length is in options\n    \"\"\"",
    "sol_bodies": [
      "    options = sorted(set(options))\n    base = options[0]\n    logs = []\n    for i in options + [n]:\n        j = 1\n        log = 0\n        while j < i:\n            log +=1\n            j *= base\n        assert j == i, \"All numbers must be a power of the smallest number\"\n        logs.append(log)\n    denominations, n = logs[:-1], logs[-1]\n\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [base ** k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]"
    ],
    "module": "codeforces.py",
    "notes": "(Also) inspired by [Codeforces Problem 996 A](https://codeforces.com/problemset/problem/996/A)\n\nWe make it much much harder by making it a multiplication problem where the greedy algorithm doesn't work.",
    "weight": 1.0
  },
  {
    "name": "BoxVolume:3",
    "sat": "def sat(sides: List[int], options=[7, 1341068619663964900807, 3219905755813179726837607], n=6571242398704579720578070114049260568175867016132732117282677704710285377366495338413477575773225344143668665616691026039505250116800576464209614274689081547617879363134212486963646613891813824577824293441956456783410239143356741482364072743485236424053098241559823295733445894310196746774269493235867749396614000266398083913285305446265094243982850288066583162232189087239052303868564232298028341023504220837967414535260504654309004337585867867005771207, max_dim=21):\n    prod = 1\n    for b in sides:\n        prod *= b\n    return prod == n and set(sides) <= set(options) and len(sides) <= max_dim",
    "ans_type": "List[int]",
    "sol_header": "def sol(options=[7, 1341068619663964900807, 3219905755813179726837607], n=6571242398704579720578070114049260568175867016132732117282677704710285377366495338413477575773225344143668665616691026039505250116800576464209614274689081547617879363134212486963646613891813824577824293441956456783410239143356741482364072743485236424053098241559823295733445894310196746774269493235867749396614000266398083913285305446265094243982850288066583162232189087239052303868564232298028341023504220837967414535260504654309004337585867867005771207, max_dim=21):",
    "sol_docstring": "    \"\"\"\n    Find the side lengths of a box in fewest dimensions (dimension <= max_dim) whose volume is n,\n     where each side length is in options\n    \"\"\"",
    "sol_bodies": [
      "    options = sorted(set(options))\n    base = options[0]\n    logs = []\n    for i in options + [n]:\n        j = 1\n        log = 0\n        while j < i:\n            log +=1\n            j *= base\n        assert j == i, \"All numbers must be a power of the smallest number\"\n        logs.append(log)\n    denominations, n = logs[:-1], logs[-1]\n\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [base ** k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]"
    ],
    "module": "codeforces.py",
    "notes": "(Also) inspired by [Codeforces Problem 996 A](https://codeforces.com/problemset/problem/996/A)\n\nWe make it much much harder by making it a multiplication problem where the greedy algorithm doesn't work.",
    "weight": 1.0
  },
  {
    "name": "BoxVolume:4",
    "sat": "def sat(sides: List[int], options=[2, 8, 64, 256], n=3885337784451458141838923813647037813284813678104279042503624819477808570410416996352, max_dim=36):\n    prod = 1\n    for b in sides:\n        prod *= b\n    return prod == n and set(sides) <= set(options) and len(sides) <= max_dim",
    "ans_type": "List[int]",
    "sol_header": "def sol(options=[2, 8, 64, 256], n=3885337784451458141838923813647037813284813678104279042503624819477808570410416996352, max_dim=36):",
    "sol_docstring": "    \"\"\"\n    Find the side lengths of a box in fewest dimensions (dimension <= max_dim) whose volume is n,\n     where each side length is in options\n    \"\"\"",
    "sol_bodies": [
      "    options = sorted(set(options))\n    base = options[0]\n    logs = []\n    for i in options + [n]:\n        j = 1\n        log = 0\n        while j < i:\n            log +=1\n            j *= base\n        assert j == i, \"All numbers must be a power of the smallest number\"\n        logs.append(log)\n    denominations, n = logs[:-1], logs[-1]\n\n    seqs = [[0 for _ in denominations] +[0]]  # vectors\n    for i in range(1, n + 1):\n        _, j, k = min((seqs[i - k][-1], j, k) for j, k in enumerate(denominations) if k <= i)\n        s = seqs[i - k]\n        seqs.append([*s[:j], s[j] + 1, *s[j + 1:-1], s[-1] + 1])\n\n    return [base ** k for k, count in zip(denominations, seqs[-1]) for _ in range(count)]"
    ],
    "module": "codeforces.py",
    "notes": "(Also) inspired by [Codeforces Problem 996 A](https://codeforces.com/problemset/problem/996/A)\n\nWe make it much much harder by making it a multiplication problem where the greedy algorithm doesn't work.",
    "weight": 1.0
  },
  {
    "name": "QuadraticRoot:0",
    "sat": "def sat(x: float, coeffs=[2.5, 1.3, -0.5]):\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "ans_type": "float",
    "sol_header": "def sol(coeffs=[2.5, 1.3, -0.5]):",
    "sol_docstring": "    \"\"\"\n    Find any (real) solution to:  a x^2 + b x + c where coeffs = [a, b, c].\n    For example, since x^2 - 3x + 2 has a root at 1, sat(x = 1., coeffs = [1., -3., 2.]) is True.\n    \"\"\"",
    "sol_bodies": [
      "    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ],
    "module": "algebra.py",
    "notes": "See [quadratic equations](https://en.wikipedia.org/wiki/Quadratic_formula)",
    "weight": 1.0
  },
  {
    "name": "QuadraticRoot:1",
    "sat": "def sat(x: float, coeffs=[0.0685642998539026, -0.10446230957339113, -0.11141402891228723]):\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "ans_type": "float",
    "sol_header": "def sol(coeffs=[0.0685642998539026, -0.10446230957339113, -0.11141402891228723]):",
    "sol_docstring": "    \"\"\"\n    Find any (real) solution to:  a x^2 + b x + c where coeffs = [a, b, c].\n    For example, since x^2 - 3x + 2 has a root at 1, sat(x = 1., coeffs = [1., -3., 2.]) is True.\n    \"\"\"",
    "sol_bodies": [
      "    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ],
    "module": "algebra.py",
    "notes": "See [quadratic equations](https://en.wikipedia.org/wiki/Quadratic_formula)",
    "weight": 1.0
  },
  {
    "name": "QuadraticRoot:2",
    "sat": "def sat(x: float, coeffs=[0.2622487694588566, 0.48521166316030495, -41.749384651642444]):\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "ans_type": "float",
    "sol_header": "def sol(coeffs=[0.2622487694588566, 0.48521166316030495, -41.749384651642444]):",
    "sol_docstring": "    \"\"\"\n    Find any (real) solution to:  a x^2 + b x + c where coeffs = [a, b, c].\n    For example, since x^2 - 3x + 2 has a root at 1, sat(x = 1., coeffs = [1., -3., 2.]) is True.\n    \"\"\"",
    "sol_bodies": [
      "    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ],
    "module": "algebra.py",
    "notes": "See [quadratic equations](https://en.wikipedia.org/wiki/Quadratic_formula)",
    "weight": 1.0
  },
  {
    "name": "QuadraticRoot:3",
    "sat": "def sat(x: float, coeffs=[145.72190605632582, 0.027358325157428014, -5.149342624051854]):\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "ans_type": "float",
    "sol_header": "def sol(coeffs=[145.72190605632582, 0.027358325157428014, -5.149342624051854]):",
    "sol_docstring": "    \"\"\"\n    Find any (real) solution to:  a x^2 + b x + c where coeffs = [a, b, c].\n    For example, since x^2 - 3x + 2 has a root at 1, sat(x = 1., coeffs = [1., -3., 2.]) is True.\n    \"\"\"",
    "sol_bodies": [
      "    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ],
    "module": "algebra.py",
    "notes": "See [quadratic equations](https://en.wikipedia.org/wiki/Quadratic_formula)",
    "weight": 1.0
  },
  {
    "name": "QuadraticRoot:4",
    "sat": "def sat(x: float, coeffs=[1.1222556871110754, -0.007015312913509468, -309237.6867547677]):\n    a, b, c = coeffs\n    return abs(a * x ** 2 + b * x + c) < 1e-6",
    "ans_type": "float",
    "sol_header": "def sol(coeffs=[1.1222556871110754, -0.007015312913509468, -309237.6867547677]):",
    "sol_docstring": "    \"\"\"\n    Find any (real) solution to:  a x^2 + b x + c where coeffs = [a, b, c].\n    For example, since x^2 - 3x + 2 has a root at 1, sat(x = 1., coeffs = [1., -3., 2.]) is True.\n    \"\"\"",
    "sol_bodies": [
      "    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = ((-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a))\n    return ans",
      "    a, b, c = coeffs\n    if a == 0:\n        ans = -c / b if b != 0 else 0.0\n    else:\n        ans = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return ans"
    ],
    "module": "algebra.py",
    "notes": "See [quadratic equations](https://en.wikipedia.org/wiki/Quadratic_formula)",
    "weight": 1.0
  },
  {
    "name": "AllQuadraticRoots:0",
    "sat": "def sat(roots: List[float], coeffs=[1.3, -0.5]):\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "ans_type": "List[float]",
    "sol_header": "def sol(coeffs=[1.3, -0.5]):",
    "sol_docstring": "    \"\"\"Find all (real) solutions to: x^2 + b x + c (i.e., factor into roots), here coeffs = [b, c]\"\"\"",
    "sol_bodies": [
      "    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ],
    "module": "algebra.py",
    "notes": "See [quadratic equations](https://en.wikipedia.org/wiki/Quadratic_formula).",
    "weight": 1.0
  },
  {
    "name": "AllQuadraticRoots:1",
    "sat": "def sat(roots: List[float], coeffs=[-1.468548989307175, -0.9453828447181172]):\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "ans_type": "List[float]",
    "sol_header": "def sol(coeffs=[-1.468548989307175, -0.9453828447181172]):",
    "sol_docstring": "    \"\"\"Find all (real) solutions to: x^2 + b x + c (i.e., factor into roots), here coeffs = [b, c]\"\"\"",
    "sol_bodies": [
      "    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ],
    "module": "algebra.py",
    "notes": "See [quadratic equations](https://en.wikipedia.org/wiki/Quadratic_formula).",
    "weight": 1.0
  },
  {
    "name": "AllQuadraticRoots:2",
    "sat": "def sat(roots: List[float], coeffs=[-2.0230245559088815, -0.23831699388987454]):\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "ans_type": "List[float]",
    "sol_header": "def sol(coeffs=[-2.0230245559088815, -0.23831699388987454]):",
    "sol_docstring": "    \"\"\"Find all (real) solutions to: x^2 + b x + c (i.e., factor into roots), here coeffs = [b, c]\"\"\"",
    "sol_bodies": [
      "    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ],
    "module": "algebra.py",
    "notes": "See [quadratic equations](https://en.wikipedia.org/wiki/Quadratic_formula).",
    "weight": 1.0
  },
  {
    "name": "AllQuadraticRoots:3",
    "sat": "def sat(roots: List[float], coeffs=[-33.7903719275386, -5.03161654339928]):\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "ans_type": "List[float]",
    "sol_header": "def sol(coeffs=[-33.7903719275386, -5.03161654339928]):",
    "sol_docstring": "    \"\"\"Find all (real) solutions to: x^2 + b x + c (i.e., factor into roots), here coeffs = [b, c]\"\"\"",
    "sol_bodies": [
      "    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ],
    "module": "algebra.py",
    "notes": "See [quadratic equations](https://en.wikipedia.org/wiki/Quadratic_formula).",
    "weight": 1.0
  },
  {
    "name": "AllQuadraticRoots:4",
    "sat": "def sat(roots: List[float], coeffs=[9.155105839032705, -0.9467446341738642]):\n    b, c = coeffs\n    r1, r2 = roots\n    return abs(r1 + r2 + b) + abs(r1 * r2 - c) < 1e-6",
    "ans_type": "List[float]",
    "sol_header": "def sol(coeffs=[9.155105839032705, -0.9467446341738642]):",
    "sol_docstring": "    \"\"\"Find all (real) solutions to: x^2 + b x + c (i.e., factor into roots), here coeffs = [b, c]\"\"\"",
    "sol_bodies": [
      "    b, c = coeffs\n    delta = (b ** 2 - 4 * c) ** 0.5\n    return [(-b + delta) / 2, (-b - delta) / 2]"
    ],
    "module": "algebra.py",
    "notes": "See [quadratic equations](https://en.wikipedia.org/wiki/Quadratic_formula).",
    "weight": 1.0
  },
  {
    "name": "CubicRoot:0",
    "sat": "def sat(x: float, coeffs=[2.0, 1.0, 0.0, 8.0]):\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "ans_type": "float",
    "sol_header": "def sol(coeffs=[2.0, 1.0, 0.0, 8.0]):",
    "sol_docstring": "    \"\"\"\n    Find any (real) solution to: a x^3 + b x^2 + c x + d where coeffs = [a, b, c, d]\n    For example, since (x-1)(x-2)(x-3) = x^3 - 6x^2 + 11x - 6, sat(x = 1., coeffs = [-6., 11., -6.]) is True.\n    \"\"\"",
    "sol_bodies": [
      "    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ],
    "module": "algebra.py",
    "notes": "See [cubic equation](https://en.wikipedia.org/wiki/Cubic_formula).",
    "weight": 1.0
  },
  {
    "name": "CubicRoot:1",
    "sat": "def sat(x: float, coeffs=[0.009597657937719273, -10.297175825569942, 0.15891220226280925, 10.530249049250433]):\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "ans_type": "float",
    "sol_header": "def sol(coeffs=[0.009597657937719273, -10.297175825569942, 0.15891220226280925, 10.530249049250433]):",
    "sol_docstring": "    \"\"\"\n    Find any (real) solution to: a x^3 + b x^2 + c x + d where coeffs = [a, b, c, d]\n    For example, since (x-1)(x-2)(x-3) = x^3 - 6x^2 + 11x - 6, sat(x = 1., coeffs = [-6., 11., -6.]) is True.\n    \"\"\"",
    "sol_bodies": [
      "    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ],
    "module": "algebra.py",
    "notes": "See [cubic equation](https://en.wikipedia.org/wiki/Cubic_formula).",
    "weight": 1.0
  },
  {
    "name": "CubicRoot:2",
    "sat": "def sat(x: float, coeffs=[-0.17749172356645268, -1.3894267878542186, 0.03752944532850555, 0.2624916128068381]):\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "ans_type": "float",
    "sol_header": "def sol(coeffs=[-0.17749172356645268, -1.3894267878542186, 0.03752944532850555, 0.2624916128068381]):",
    "sol_docstring": "    \"\"\"\n    Find any (real) solution to: a x^3 + b x^2 + c x + d where coeffs = [a, b, c, d]\n    For example, since (x-1)(x-2)(x-3) = x^3 - 6x^2 + 11x - 6, sat(x = 1., coeffs = [-6., 11., -6.]) is True.\n    \"\"\"",
    "sol_bodies": [
      "    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ],
    "module": "algebra.py",
    "notes": "See [cubic equation](https://en.wikipedia.org/wiki/Cubic_formula).",
    "weight": 1.0
  },
  {
    "name": "CubicRoot:3",
    "sat": "def sat(x: float, coeffs=[0.41725114111706524, 155.2589446092116, -0.10619077904258341, -0.024129284994425074]):\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "ans_type": "float",
    "sol_header": "def sol(coeffs=[0.41725114111706524, 155.2589446092116, -0.10619077904258341, -0.024129284994425074]):",
    "sol_docstring": "    \"\"\"\n    Find any (real) solution to: a x^3 + b x^2 + c x + d where coeffs = [a, b, c, d]\n    For example, since (x-1)(x-2)(x-3) = x^3 - 6x^2 + 11x - 6, sat(x = 1., coeffs = [-6., 11., -6.]) is True.\n    \"\"\"",
    "sol_bodies": [
      "    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ],
    "module": "algebra.py",
    "notes": "See [cubic equation](https://en.wikipedia.org/wiki/Cubic_formula).",
    "weight": 1.0
  },
  {
    "name": "CubicRoot:4",
    "sat": "def sat(x: float, coeffs=[-2.3153234528266906, 11.247619504308075, -72.3705721705674, 53.97429005428236]):\n    return abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6",
    "ans_type": "float",
    "sol_header": "def sol(coeffs=[-2.3153234528266906, 11.247619504308075, -72.3705721705674, 53.97429005428236]):",
    "sol_docstring": "    \"\"\"\n    Find any (real) solution to: a x^3 + b x^2 + c x + d where coeffs = [a, b, c, d]\n    For example, since (x-1)(x-2)(x-3) = x^3 - 6x^2 + 11x - 6, sat(x = 1., coeffs = [-6., 11., -6.]) is True.\n    \"\"\"",
    "sol_bodies": [
      "    a2, a1, a0 = [c / coeffs[0] for c in coeffs[1:]]\n    p = (3 * a1 - a2 ** 2) / 3\n    q = (9 * a1 * a2 - 27 * a0 - 2 * a2 ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        c = cube ** (1 / 3)\n        for w in [c, c * omega, c * omega.conjugate()]:\n            if w != 0:\n                x = complex(w - p / (3 * w) - a2 / 3).real\n                if abs(sum(c * x ** (3 - i) for i, c in enumerate(coeffs))) < 1e-6:\n                    return x"
    ],
    "module": "algebra.py",
    "notes": "See [cubic equation](https://en.wikipedia.org/wiki/Cubic_formula).",
    "weight": 1.0
  },
  {
    "name": "AllCubicRoots:0",
    "sat": "def sat(roots: List[float], coeffs=[1.0, -2.0, -1.0]):\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "ans_type": "List[float]",
    "sol_header": "def sol(coeffs=[1.0, -2.0, -1.0]):",
    "sol_docstring": "    \"\"\"Find all 3 distinct real roots of x^3 + a x^2 + b x + c, i.e., factor into (x-r1)(x-r2)(x-r3).\n    coeffs = [a, b, c]. For example, since (x-1)(x-2)(x-3) = x^3 - 6x^2 + 11x - 6,\n    sat(roots = [1., 2., 3.], coeffs = [-6., 11., -6.]) is True.\n    \"\"\"",
    "sol_bodies": [
      "    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ],
    "module": "algebra.py",
    "notes": "See [cubic equation](https://en.wikipedia.org/wiki/Cubic_formula).",
    "weight": 1.0
  },
  {
    "name": "AllCubicRoots:1",
    "sat": "def sat(roots: List[float], coeffs=[291.6393860094841, -235.56805995170293, 46.827662118172]):\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "ans_type": "List[float]",
    "sol_header": "def sol(coeffs=[291.6393860094841, -235.56805995170293, 46.827662118172]):",
    "sol_docstring": "    \"\"\"Find all 3 distinct real roots of x^3 + a x^2 + b x + c, i.e., factor into (x-r1)(x-r2)(x-r3).\n    coeffs = [a, b, c]. For example, since (x-1)(x-2)(x-3) = x^3 - 6x^2 + 11x - 6,\n    sat(roots = [1., 2., 3.], coeffs = [-6., 11., -6.]) is True.\n    \"\"\"",
    "sol_bodies": [
      "    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ],
    "module": "algebra.py",
    "notes": "See [cubic equation](https://en.wikipedia.org/wiki/Cubic_formula).",
    "weight": 1.0
  },
  {
    "name": "AllCubicRoots:2",
    "sat": "def sat(roots: List[float], coeffs=[-0.25228902661371166, -0.1500677342820565, 0.04095001209455085]):\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "ans_type": "List[float]",
    "sol_header": "def sol(coeffs=[-0.25228902661371166, -0.1500677342820565, 0.04095001209455085]):",
    "sol_docstring": "    \"\"\"Find all 3 distinct real roots of x^3 + a x^2 + b x + c, i.e., factor into (x-r1)(x-r2)(x-r3).\n    coeffs = [a, b, c]. For example, since (x-1)(x-2)(x-3) = x^3 - 6x^2 + 11x - 6,\n    sat(roots = [1., 2., 3.], coeffs = [-6., 11., -6.]) is True.\n    \"\"\"",
    "sol_bodies": [
      "    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ],
    "module": "algebra.py",
    "notes": "See [cubic equation](https://en.wikipedia.org/wiki/Cubic_formula).",
    "weight": 1.0
  },
  {
    "name": "AllCubicRoots:3",
    "sat": "def sat(roots: List[float], coeffs=[-0.7564145326509102, -0.6902422688120567, 0.4732575941427041]):\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "ans_type": "List[float]",
    "sol_header": "def sol(coeffs=[-0.7564145326509102, -0.6902422688120567, 0.4732575941427041]):",
    "sol_docstring": "    \"\"\"Find all 3 distinct real roots of x^3 + a x^2 + b x + c, i.e., factor into (x-r1)(x-r2)(x-r3).\n    coeffs = [a, b, c]. For example, since (x-1)(x-2)(x-3) = x^3 - 6x^2 + 11x - 6,\n    sat(roots = [1., 2., 3.], coeffs = [-6., 11., -6.]) is True.\n    \"\"\"",
    "sol_bodies": [
      "    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ],
    "module": "algebra.py",
    "notes": "See [cubic equation](https://en.wikipedia.org/wiki/Cubic_formula).",
    "weight": 1.0
  },
  {
    "name": "AllCubicRoots:4",
    "sat": "def sat(roots: List[float], coeffs=[5.119999240806329, -7.551441647258393, -21.440710634524915]):\n    r1, r2, r3 = roots\n    a, b, c = coeffs\n    return abs(r1 + r2 + r3 + a) + abs(r1 * r2 + r1 * r3 + r2 * r3 - b) + abs(r1 * r2 * r3 + c) < 1e-6",
    "ans_type": "List[float]",
    "sol_header": "def sol(coeffs=[5.119999240806329, -7.551441647258393, -21.440710634524915]):",
    "sol_docstring": "    \"\"\"Find all 3 distinct real roots of x^3 + a x^2 + b x + c, i.e., factor into (x-r1)(x-r2)(x-r3).\n    coeffs = [a, b, c]. For example, since (x-1)(x-2)(x-3) = x^3 - 6x^2 + 11x - 6,\n    sat(roots = [1., 2., 3.], coeffs = [-6., 11., -6.]) is True.\n    \"\"\"",
    "sol_bodies": [
      "    a, b, c = coeffs\n    p = (3 * b - a ** 2) / 3\n    q = (9 * b * a - 27 * c - 2 * a ** 3) / 27\n    delta = (q ** 2 + 4 * p ** 3 / 27) ** 0.5\n    omega = (-(-1) ** (1 / 3))\n    ans = []\n    for cube in [(q + delta) / 2, (q - delta) / 2]:\n        v = cube ** (1 / 3)\n        for w in [v, v * omega, v * omega.conjugate()]:\n            if w != 0.0:\n                x = complex(w - p / (3 * w) - a / 3).real\n                if abs(x ** 3 + a * x ** 2 + b * x + c) < 1e-4:\n                    if not ans or min(abs(z - x) for z in ans) > 1e-6:\n                        ans.append(x)\n    if len(ans) == 3:\n        return ans"
    ],
    "module": "algebra.py",
    "notes": "See [cubic equation](https://en.wikipedia.org/wiki/Cubic_formula).",
    "weight": 1.0
  },
  {
    "name": "SumOfDigits:0",
    "sat": "def sat(x: str, s=679):\n    return s == sum([int(d) for d in x])",
    "ans_type": "str",
    "sol_header": "def sol(s=679):",
    "sol_docstring": "    \"\"\"Find a number that its digits sum to a specific value.\"\"\"",
    "sol_bodies": [
      "    return int(s / 9) * '9' + str(s % 9)"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "SumOfDigits:1",
    "sat": "def sat(x: str, s=40427):\n    return s == sum([int(d) for d in x])",
    "ans_type": "str",
    "sol_header": "def sol(s=40427):",
    "sol_docstring": "    \"\"\"Find a number that its digits sum to a specific value.\"\"\"",
    "sol_bodies": [
      "    return int(s / 9) * '9' + str(s % 9)"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "SumOfDigits:2",
    "sat": "def sat(x: str, s=8071):\n    return s == sum([int(d) for d in x])",
    "ans_type": "str",
    "sol_header": "def sol(s=8071):",
    "sol_docstring": "    \"\"\"Find a number that its digits sum to a specific value.\"\"\"",
    "sol_bodies": [
      "    return int(s / 9) * '9' + str(s % 9)"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "SumOfDigits:3",
    "sat": "def sat(x: str, s=86120):\n    return s == sum([int(d) for d in x])",
    "ans_type": "str",
    "sol_header": "def sol(s=86120):",
    "sol_docstring": "    \"\"\"Find a number that its digits sum to a specific value.\"\"\"",
    "sol_bodies": [
      "    return int(s / 9) * '9' + str(s % 9)"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "SumOfDigits:4",
    "sat": "def sat(x: str, s=26785):\n    return s == sum([int(d) for d in x])",
    "ans_type": "str",
    "sol_header": "def sol(s=26785):",
    "sol_docstring": "    \"\"\"Find a number that its digits sum to a specific value.\"\"\"",
    "sol_bodies": [
      "    return int(s / 9) * '9' + str(s % 9)"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "FloatWithDecimalValue:0",
    "sat": "def sat(z: float, v=9, d=0.0001):\n    return int(z * 1 / d % 10) == v",
    "ans_type": "float",
    "sol_header": "def sol(v=9, d=0.0001):",
    "sol_docstring": "    \"\"\"Create a float with a specific decimal.\"\"\"",
    "sol_bodies": [
      "    return v * d"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "FloatWithDecimalValue:1",
    "sat": "def sat(z: float, v=1, d=1e-17):\n    return int(z * 1 / d % 10) == v",
    "ans_type": "float",
    "sol_header": "def sol(v=1, d=1e-17):",
    "sol_docstring": "    \"\"\"Create a float with a specific decimal.\"\"\"",
    "sol_bodies": [
      "    return v * d"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "FloatWithDecimalValue:2",
    "sat": "def sat(z: float, v=9, d=1e+83):\n    return int(z * 1 / d % 10) == v",
    "ans_type": "float",
    "sol_header": "def sol(v=9, d=1e+83):",
    "sol_docstring": "    \"\"\"Create a float with a specific decimal.\"\"\"",
    "sol_bodies": [
      "    return v * d"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "FloatWithDecimalValue:3",
    "sat": "def sat(z: float, v=5, d=1e-18):\n    return int(z * 1 / d % 10) == v",
    "ans_type": "float",
    "sol_header": "def sol(v=5, d=1e-18):",
    "sol_docstring": "    \"\"\"Create a float with a specific decimal.\"\"\"",
    "sol_bodies": [
      "    return v * d"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "FloatWithDecimalValue:4",
    "sat": "def sat(z: float, v=5, d=1e+90):\n    return int(z * 1 / d % 10) == v",
    "ans_type": "float",
    "sol_header": "def sol(v=5, d=1e+90):",
    "sol_docstring": "    \"\"\"Create a float with a specific decimal.\"\"\"",
    "sol_bodies": [
      "    return v * d"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "ArithmeticSequence:0",
    "sat": "def sat(x: List[int], a=7, s=5, e=200):\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])",
    "ans_type": "List[int]",
    "sol_header": "def sol(a=7, s=5, e=200):",
    "sol_docstring": "    \"\"\"Create a list that is a subrange of an arithmetic sequence.\"\"\"",
    "sol_bodies": [
      "    return list(range(a, e + 1, s))"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "ArithmeticSequence:1",
    "sat": "def sat(x: List[int], a=43536, s=3795, e=417606):\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])",
    "ans_type": "List[int]",
    "sol_header": "def sol(a=43536, e=417606, s=3795):",
    "sol_docstring": "    \"\"\"Create a list that is a subrange of an arithmetic sequence.\"\"\"",
    "sol_bodies": [
      "    return list(range(a, e + 1, s))"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "ArithmeticSequence:2",
    "sat": "def sat(x: List[int], a=-70138, s=4868, e=498910):\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])",
    "ans_type": "List[int]",
    "sol_header": "def sol(a=-70138, e=498910, s=4868):",
    "sol_docstring": "    \"\"\"Create a list that is a subrange of an arithmetic sequence.\"\"\"",
    "sol_bodies": [
      "    return list(range(a, e + 1, s))"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "ArithmeticSequence:3",
    "sat": "def sat(x: List[int], a=55980, s=7402, e=155818):\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])",
    "ans_type": "List[int]",
    "sol_header": "def sol(a=55980, e=155818, s=7402):",
    "sol_docstring": "    \"\"\"Create a list that is a subrange of an arithmetic sequence.\"\"\"",
    "sol_bodies": [
      "    return list(range(a, e + 1, s))"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "ArithmeticSequence:4",
    "sat": "def sat(x: List[int], a=-44635, s=5046, e=503563):\n    return x[0] == a and x[-1] <= e and (x[-1] + s > e) and all([x[i] + s == x[i + 1] for i in range(len(x) - 1)])",
    "ans_type": "List[int]",
    "sol_header": "def sol(a=-44635, e=503563, s=5046):",
    "sol_docstring": "    \"\"\"Create a list that is a subrange of an arithmetic sequence.\"\"\"",
    "sol_bodies": [
      "    return list(range(a, e + 1, s))"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "GeometricSequence:0",
    "sat": "def sat(x: List[int], a=8, r=2, l=50):\n    return x[0] == a and len(x) == l and all([x[i] * r == x[i + 1] for i in range(len(x) - 1)])",
    "ans_type": "List[int]",
    "sol_header": "def sol(a=8, r=2, l=50):",
    "sol_docstring": "    \"\"\"Create a list that is a subrange of an gemoetric sequence.\"\"\"",
    "sol_bodies": [
      "    return [a * r ** i for i in range(l)]"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "GeometricSequence:1",
    "sat": "def sat(x: List[int], a=-484, r=4, l=589):\n    return x[0] == a and len(x) == l and all([x[i] * r == x[i + 1] for i in range(len(x) - 1)])",
    "ans_type": "List[int]",
    "sol_header": "def sol(a=-484, r=4, l=589):",
    "sol_docstring": "    \"\"\"Create a list that is a subrange of an gemoetric sequence.\"\"\"",
    "sol_bodies": [
      "    return [a * r ** i for i in range(l)]"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "GeometricSequence:2",
    "sat": "def sat(x: List[int], a=889, r=7, l=393):\n    return x[0] == a and len(x) == l and all([x[i] * r == x[i + 1] for i in range(len(x) - 1)])",
    "ans_type": "List[int]",
    "sol_header": "def sol(a=889, r=7, l=393):",
    "sol_docstring": "    \"\"\"Create a list that is a subrange of an gemoetric sequence.\"\"\"",
    "sol_bodies": [
      "    return [a * r ** i for i in range(l)]"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "GeometricSequence:3",
    "sat": "def sat(x: List[int], a=-777, r=4, l=103):\n    return x[0] == a and len(x) == l and all([x[i] * r == x[i + 1] for i in range(len(x) - 1)])",
    "ans_type": "List[int]",
    "sol_header": "def sol(a=-777, r=4, l=103):",
    "sol_docstring": "    \"\"\"Create a list that is a subrange of an gemoetric sequence.\"\"\"",
    "sol_bodies": [
      "    return [a * r ** i for i in range(l)]"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "GeometricSequence:4",
    "sat": "def sat(x: List[int], a=-736, r=4, l=92):\n    return x[0] == a and len(x) == l and all([x[i] * r == x[i + 1] for i in range(len(x) - 1)])",
    "ans_type": "List[int]",
    "sol_header": "def sol(a=-736, r=4, l=92):",
    "sol_docstring": "    \"\"\"Create a list that is a subrange of an gemoetric sequence.\"\"\"",
    "sol_bodies": [
      "    return [a * r ** i for i in range(l)]"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "LineIntersection:0",
    "sat": "def sat(e: List[int], a=2, b=-1, c=1, d=2021):\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** -5",
    "ans_type": "List[int]",
    "sol_header": "def sol(a=2, b=-1, c=1, d=2021):",
    "sol_docstring": "    \"\"\"\n    Find the intersection of two lines.\n    Solution should be a list of the (x,y) coordinates.\n    Accuracy of fifth decimal digit is required.\n    \"\"\"",
    "sol_bodies": [
      "    return [d - b, a - c]"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "LineIntersection:1",
    "sat": "def sat(e: List[int], a=-77698407, b=-31793716, c=-10799659, d=89278024):\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** -5",
    "ans_type": "List[int]",
    "sol_header": "def sol(a=-77698407, b=-31793716, c=-10799659, d=89278024):",
    "sol_docstring": "    \"\"\"\n    Find the intersection of two lines.\n    Solution should be a list of the (x,y) coordinates.\n    Accuracy of fifth decimal digit is required.\n    \"\"\"",
    "sol_bodies": [
      "    return [d - b, a - c]"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "LineIntersection:2",
    "sat": "def sat(e: List[int], a=89600582, b=-47657198, c=95101265, d=-52126265):\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** -5",
    "ans_type": "List[int]",
    "sol_header": "def sol(a=89600582, b=-47657198, c=95101265, d=-52126265):",
    "sol_docstring": "    \"\"\"\n    Find the intersection of two lines.\n    Solution should be a list of the (x,y) coordinates.\n    Accuracy of fifth decimal digit is required.\n    \"\"\"",
    "sol_bodies": [
      "    return [d - b, a - c]"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "LineIntersection:3",
    "sat": "def sat(e: List[int], a=-11422303, b=-57150416, c=-59162339, d=-37428439):\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** -5",
    "ans_type": "List[int]",
    "sol_header": "def sol(a=-11422303, b=-57150416, c=-59162339, d=-37428439):",
    "sol_docstring": "    \"\"\"\n    Find the intersection of two lines.\n    Solution should be a list of the (x,y) coordinates.\n    Accuracy of fifth decimal digit is required.\n    \"\"\"",
    "sol_bodies": [
      "    return [d - b, a - c]"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "LineIntersection:4",
    "sat": "def sat(e: List[int], a=-18517001, b=-13662763, c=-11156613, d=9271005):\n    x = e[0] / e[1]\n    return abs(a * x + b - c * x - d) < 10 ** -5",
    "ans_type": "List[int]",
    "sol_header": "def sol(a=-18517001, b=-13662763, c=-11156613, d=9271005):",
    "sol_docstring": "    \"\"\"\n    Find the intersection of two lines.\n    Solution should be a list of the (x,y) coordinates.\n    Accuracy of fifth decimal digit is required.\n    \"\"\"",
    "sol_bodies": [
      "    return [d - b, a - c]"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "IfProblem:0",
    "sat": "def sat(x: int, a=324554, b=1345345):\n    if a < 50:\n        return x + a == b\n    else:\n        return x - 2 * a == b",
    "ans_type": "int",
    "sol_header": "def sol(a=324554, b=1345345):",
    "sol_docstring": "    \"\"\"Satisfy a simple if statement\"\"\"",
    "sol_bodies": [
      "    if a < 50:\n        return b - a\n    else:\n        return b + 2 * a"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "IfProblem:1",
    "sat": "def sat(x: int, a=51, b=40553793):\n    if a < 50:\n        return x + a == b\n    else:\n        return x - 2 * a == b",
    "ans_type": "int",
    "sol_header": "def sol(a=51, b=40553793):",
    "sol_docstring": "    \"\"\"Satisfy a simple if statement\"\"\"",
    "sol_bodies": [
      "    if a < 50:\n        return b - a\n    else:\n        return b + 2 * a"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "IfProblem:2",
    "sat": "def sat(x: int, a=50, b=72369383):\n    if a < 50:\n        return x + a == b\n    else:\n        return x - 2 * a == b",
    "ans_type": "int",
    "sol_header": "def sol(a=50, b=72369383):",
    "sol_docstring": "    \"\"\"Satisfy a simple if statement\"\"\"",
    "sol_bodies": [
      "    if a < 50:\n        return b - a\n    else:\n        return b + 2 * a"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "IfProblem:3",
    "sat": "def sat(x: int, a=90, b=42412534):\n    if a < 50:\n        return x + a == b\n    else:\n        return x - 2 * a == b",
    "ans_type": "int",
    "sol_header": "def sol(a=90, b=42412534):",
    "sol_docstring": "    \"\"\"Satisfy a simple if statement\"\"\"",
    "sol_bodies": [
      "    if a < 50:\n        return b - a\n    else:\n        return b + 2 * a"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "IfProblem:4",
    "sat": "def sat(x: int, a=62, b=-26538057):\n    if a < 50:\n        return x + a == b\n    else:\n        return x - 2 * a == b",
    "ans_type": "int",
    "sol_header": "def sol(a=62, b=-26538057):",
    "sol_docstring": "    \"\"\"Satisfy a simple if statement\"\"\"",
    "sol_bodies": [
      "    if a < 50:\n        return b - a\n    else:\n        return b + 2 * a"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "IfProblemWithAnd:0",
    "sat": "def sat(x: int, a=9384594, b=1343663):\n    if x > 0 and a > 50:\n        return x - a == b\n    else:\n        return x + a == b",
    "ans_type": "int",
    "sol_header": "def sol(a=9384594, b=1343663):",
    "sol_docstring": "    \"\"\"Satisfy a simple if statement with an and clause\"\"\"",
    "sol_bodies": [
      "    if a > 50 and b > a:\n        return b + a\n    else:\n        return b - a"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "IfProblemWithAnd:1",
    "sat": "def sat(x: int, a=57, b=40522966):\n    if x > 0 and a > 50:\n        return x - a == b\n    else:\n        return x + a == b",
    "ans_type": "int",
    "sol_header": "def sol(a=57, b=40522966):",
    "sol_docstring": "    \"\"\"Satisfy a simple if statement with an and clause\"\"\"",
    "sol_bodies": [
      "    if a > 50 and b > a:\n        return b + a\n    else:\n        return b - a"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "IfProblemWithAnd:2",
    "sat": "def sat(x: int, a=29, b=71683001):\n    if x > 0 and a > 50:\n        return x - a == b\n    else:\n        return x + a == b",
    "ans_type": "int",
    "sol_header": "def sol(a=29, b=71683001):",
    "sol_docstring": "    \"\"\"Satisfy a simple if statement with an and clause\"\"\"",
    "sol_bodies": [
      "    if a > 50 and b > a:\n        return b + a\n    else:\n        return b - a"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "IfProblemWithAnd:3",
    "sat": "def sat(x: int, a=92, b=8820402):\n    if x > 0 and a > 50:\n        return x - a == b\n    else:\n        return x + a == b",
    "ans_type": "int",
    "sol_header": "def sol(a=92, b=8820402):",
    "sol_docstring": "    \"\"\"Satisfy a simple if statement with an and clause\"\"\"",
    "sol_bodies": [
      "    if a > 50 and b > a:\n        return b + a\n    else:\n        return b - a"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "IfProblemWithAnd:4",
    "sat": "def sat(x: int, a=64, b=46712723):\n    if x > 0 and a > 50:\n        return x - a == b\n    else:\n        return x + a == b",
    "ans_type": "int",
    "sol_header": "def sol(a=64, b=46712723):",
    "sol_docstring": "    \"\"\"Satisfy a simple if statement with an and clause\"\"\"",
    "sol_bodies": [
      "    if a > 50 and b > a:\n        return b + a\n    else:\n        return b - a"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "IfProblemWithOr:0",
    "sat": "def sat(x: int, a=253532, b=1230200):\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b",
    "ans_type": "int",
    "sol_header": "def sol(a=253532, b=1230200):",
    "sol_docstring": "    \"\"\"Satisfy a simple if statement with an or clause\"\"\"",
    "sol_bodies": [
      "    if a > 50 or b > a:\n        return b + a\n    else:\n        return b - a"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "IfProblemWithOr:1",
    "sat": "def sat(x: int, a=22, b=-84904666):\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b",
    "ans_type": "int",
    "sol_header": "def sol(a=22, b=-84904666):",
    "sol_docstring": "    \"\"\"Satisfy a simple if statement with an or clause\"\"\"",
    "sol_bodies": [
      "    if a > 50 or b > a:\n        return b + a\n    else:\n        return b - a"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "IfProblemWithOr:2",
    "sat": "def sat(x: int, a=10, b=74723522):\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b",
    "ans_type": "int",
    "sol_header": "def sol(a=10, b=74723522):",
    "sol_docstring": "    \"\"\"Satisfy a simple if statement with an or clause\"\"\"",
    "sol_bodies": [
      "    if a > 50 or b > a:\n        return b + a\n    else:\n        return b - a"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "IfProblemWithOr:3",
    "sat": "def sat(x: int, a=66, b=-39109407):\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b",
    "ans_type": "int",
    "sol_header": "def sol(a=66, b=-39109407):",
    "sol_docstring": "    \"\"\"Satisfy a simple if statement with an or clause\"\"\"",
    "sol_bodies": [
      "    if a > 50 or b > a:\n        return b + a\n    else:\n        return b - a"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "IfProblemWithOr:4",
    "sat": "def sat(x: int, a=24, b=18773099):\n    if x > 0 or a > 50:\n        return x - a == b\n    else:\n        return x + a == b",
    "ans_type": "int",
    "sol_header": "def sol(a=24, b=18773099):",
    "sol_docstring": "    \"\"\"Satisfy a simple if statement with an or clause\"\"\"",
    "sol_bodies": [
      "    if a > 50 or b > a:\n        return b + a\n    else:\n        return b - a"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "IfCases:0",
    "sat": "def sat(x: int, a=4, b=54368639):\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b",
    "ans_type": "int",
    "sol_header": "def sol(a=4, b=54368639):",
    "sol_docstring": "    \"\"\"Satisfy a simple if statement with multiple cases\"\"\"",
    "sol_bodies": [
      "    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "IfCases:1",
    "sat": "def sat(x: int, a=-4, b=-83354930):\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b",
    "ans_type": "int",
    "sol_header": "def sol(a=-4, b=-83354930):",
    "sol_docstring": "    \"\"\"Satisfy a simple if statement with multiple cases\"\"\"",
    "sol_bodies": [
      "    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "IfCases:2",
    "sat": "def sat(x: int, a=-3, b=71965664):\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b",
    "ans_type": "int",
    "sol_header": "def sol(a=-3, b=71965664):",
    "sol_docstring": "    \"\"\"Satisfy a simple if statement with multiple cases\"\"\"",
    "sol_bodies": [
      "    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "IfCases:3",
    "sat": "def sat(x: int, a=2, b=36068130):\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b",
    "ans_type": "int",
    "sol_header": "def sol(a=2, b=36068130):",
    "sol_docstring": "    \"\"\"Satisfy a simple if statement with multiple cases\"\"\"",
    "sol_bodies": [
      "    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "IfCases:4",
    "sat": "def sat(x: int, a=-3, b=14385903):\n    if a == 1:\n        return x % 2 == 0\n    elif a == -1:\n        return x % 2 == 1\n    else:\n        return x + a == b",
    "ans_type": "int",
    "sol_header": "def sol(a=-3, b=14385903):",
    "sol_docstring": "    \"\"\"Satisfy a simple if statement with multiple cases\"\"\"",
    "sol_bodies": [
      "    if a == 1:\n        x = 0\n    elif a == -1:\n        x = 1\n    else:\n        x = b - a\n    return x"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "ListPosSum:0",
    "sat": "def sat(x: List[int], n=5, s=19):\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=5, s=19):",
    "sol_docstring": "    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"",
    "sol_bodies": [
      "    x = [1] * n\n    x[0] = s - n + 1\n    return x"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "ListPosSum:1",
    "sat": "def sat(x: List[int], n=6241, s=54594969):\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=6241, s=54594969):",
    "sol_docstring": "    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"",
    "sol_bodies": [
      "    x = [1] * n\n    x[0] = s - n + 1\n    return x"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "ListPosSum:2",
    "sat": "def sat(x: List[int], n=8427, s=33081884):\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=8427, s=33081884):",
    "sol_docstring": "    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"",
    "sol_bodies": [
      "    x = [1] * n\n    x[0] = s - n + 1\n    return x"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "ListPosSum:3",
    "sat": "def sat(x: List[int], n=3363, s=67595319):\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=3363, s=67595319):",
    "sol_docstring": "    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"",
    "sol_bodies": [
      "    x = [1] * n\n    x[0] = s - n + 1\n    return x"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "ListPosSum:4",
    "sat": "def sat(x: List[int], n=9909, s=88140438):\n    return len(x) == n and sum(x) == s and all([a > 0 for a in x])",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=9909, s=88140438):",
    "sol_docstring": "    \"\"\"Find a list of n non-negative integers that sum up to s\"\"\"",
    "sol_bodies": [
      "    x = [1] * n\n    x[0] = s - n + 1\n    return x"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "ListDistinctSum:0",
    "sat": "def sat(x: List[int], n=4, s=2021):\n    return len(x) == n and sum(x) == s and len(set(x)) == n",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=4, s=2021):",
    "sol_docstring": "    \"\"\"Construct a list of n distinct integers that sum up to s\"\"\"",
    "sol_bodies": [
      "    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "ListDistinctSum:1",
    "sat": "def sat(x: List[int], n=124, s=2603089):\n    return len(x) == n and sum(x) == s and len(set(x)) == n",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=124, s=2603089):",
    "sol_docstring": "    \"\"\"Construct a list of n distinct integers that sum up to s\"\"\"",
    "sol_bodies": [
      "    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "ListDistinctSum:2",
    "sat": "def sat(x: List[int], n=823, s=8609609):\n    return len(x) == n and sum(x) == s and len(set(x)) == n",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=823, s=8609609):",
    "sol_docstring": "    \"\"\"Construct a list of n distinct integers that sum up to s\"\"\"",
    "sol_bodies": [
      "    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "ListDistinctSum:3",
    "sat": "def sat(x: List[int], n=796, s=86694751):\n    return len(x) == n and sum(x) == s and len(set(x)) == n",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=796, s=86694751):",
    "sol_docstring": "    \"\"\"Construct a list of n distinct integers that sum up to s\"\"\"",
    "sol_bodies": [
      "    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "ListDistinctSum:4",
    "sat": "def sat(x: List[int], n=225, s=38417364):\n    return len(x) == n and sum(x) == s and len(set(x)) == n",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=225, s=38417364):",
    "sol_docstring": "    \"\"\"Construct a list of n distinct integers that sum up to s\"\"\"",
    "sol_bodies": [
      "    a = 1\n    x = []\n    while len(x) < n - 1:\n        x.append(a)\n        a = -a\n        if a in x:\n            a += 1\n\n    if s - sum(x) in x:\n        x = [i for i in range(n - 1)]\n\n    x = x + [s - sum(x)]\n    return x"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "ConcatStrings:0",
    "sat": "def sat(x: str, s=['a', 'b', 'c', 'd', 'e', 'f'], n=4):\n    return len(x) == n and all([x[i] == s[i] for i in range(n)])",
    "ans_type": "str",
    "sol_header": "def sol(s=['a', 'b', 'c', 'd', 'e', 'f'], n=4):",
    "sol_docstring": "    \"\"\"Concatenate the list of characters in s\"\"\"",
    "sol_bodies": [
      "    return ''.join([s[i] for i in range(n)])"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "ConcatStrings:1",
    "sat": "def sat(x: str, s=['I', '&', 'W', '&', 'p', 'c', '-', 'U', '(', ' ', 'A', '(', 'S', 'W', 'R', '#', 'm', 'v', '@', '8', '%', 'a', '.', 'K', 'O', '[', '[', '#', 'q', 'k', 'K'], n=16):\n    return len(x) == n and all([x[i] == s[i] for i in range(n)])",
    "ans_type": "str",
    "sol_header": "def sol(n=16, s=['I', '&', 'W', '&', 'p', 'c', '-', 'U', '(', ' ', 'A', '(', 'S', 'W', 'R', '#', 'm', 'v', '@', '8', '%', 'a', '.', 'K', 'O', '[', '[', '#', 'q', 'k', 'K']):",
    "sol_docstring": "    \"\"\"Concatenate the list of characters in s\"\"\"",
    "sol_bodies": [
      "    return ''.join([s[i] for i in range(n)])"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "ConcatStrings:2",
    "sat": "def sat(x: str, s=['L', 'C', 'b', 'r', 't', 'V', 'R', '%', 'R', '8', 'V', '#', '<', '!', 'U', 'y', 'x'], n=13):\n    return len(x) == n and all([x[i] == s[i] for i in range(n)])",
    "ans_type": "str",
    "sol_header": "def sol(n=13, s=['L', 'C', 'b', 'r', 't', 'V', 'R', '%', 'R', '8', 'V', '#', '<', '!', 'U', 'y', 'x']):",
    "sol_docstring": "    \"\"\"Concatenate the list of characters in s\"\"\"",
    "sol_bodies": [
      "    return ''.join([s[i] for i in range(n)])"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "ConcatStrings:3",
    "sat": "def sat(x: str, s=['-', '&', ')', '&', 'c', 'l', '/', 'H', '1', 'j', 'z', 'o', 'E', '|', '8', '&', '0', '&', 'y', '!', 'r', 'H', 'S', 'P', '5'], n=8):\n    return len(x) == n and all([x[i] == s[i] for i in range(n)])",
    "ans_type": "str",
    "sol_header": "def sol(n=8, s=['-', '&', ')', '&', 'c', 'l', '/', 'H', '1', 'j', 'z', 'o', 'E', '|', '8', '&', '0', '&', 'y', '!', 'r', 'H', 'S', 'P', '5']):",
    "sol_docstring": "    \"\"\"Concatenate the list of characters in s\"\"\"",
    "sol_bodies": [
      "    return ''.join([s[i] for i in range(n)])"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "ConcatStrings:4",
    "sat": "def sat(x: str, s=['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm'], n=16):\n    return len(x) == n and all([x[i] == s[i] for i in range(n)])",
    "ans_type": "str",
    "sol_header": "def sol(n=16, s=['0', '@', 'R', 'k', '$', '$', 't', '0', '3', '#', '!', 'a', 'w', 'k', 'q', 'H', '-', 'm']):",
    "sol_docstring": "    \"\"\"Concatenate the list of characters in s\"\"\"",
    "sol_bodies": [
      "    return ''.join([s[i] for i in range(n)])"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "SublistSum:0",
    "sat": "def sat(x: List[int], t=677, a=43, e=125, s=10):\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all(\n        [x[i] != 0 for i in range(a, e, s)])",
    "ans_type": "List[int]",
    "sol_header": "def sol(t=677, a=43, e=125, s=10):",
    "sol_docstring": "    \"\"\"Sum values of sublist by range specifications\"\"\"",
    "sol_bodies": [
      "    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "SublistSum:1",
    "sat": "def sat(x: List[int], t=44475424, a=93, e=8496, s=6):\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all(\n        [x[i] != 0 for i in range(a, e, s)])",
    "ans_type": "List[int]",
    "sol_header": "def sol(t=44475424, a=93, e=8496, s=6):",
    "sol_docstring": "    \"\"\"Sum values of sublist by range specifications\"\"\"",
    "sol_bodies": [
      "    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "SublistSum:2",
    "sat": "def sat(x: List[int], t=2183536, a=36, e=8450, s=1):\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all(\n        [x[i] != 0 for i in range(a, e, s)])",
    "ans_type": "List[int]",
    "sol_header": "def sol(t=2183536, a=36, e=8450, s=1):",
    "sol_docstring": "    \"\"\"Sum values of sublist by range specifications\"\"\"",
    "sol_bodies": [
      "    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "SublistSum:3",
    "sat": "def sat(x: List[int], t=1196610, a=15, e=4376, s=3):\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all(\n        [x[i] != 0 for i in range(a, e, s)])",
    "ans_type": "List[int]",
    "sol_header": "def sol(t=1196610, a=15, e=4376, s=3):",
    "sol_docstring": "    \"\"\"Sum values of sublist by range specifications\"\"\"",
    "sol_bodies": [
      "    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "SublistSum:4",
    "sat": "def sat(x: List[int], t=6165697, a=47, e=3830, s=2):\n    non_zero = [z for z in x if z != 0]\n    return t == sum([x[i] for i in range(a, e, s)]) and len(set(non_zero)) == len(non_zero) and all(\n        [x[i] != 0 for i in range(a, e, s)])",
    "ans_type": "List[int]",
    "sol_header": "def sol(t=6165697, a=47, e=3830, s=2):",
    "sol_docstring": "    \"\"\"Sum values of sublist by range specifications\"\"\"",
    "sol_bodies": [
      "    x = [0] * e\n    for i in range(a, e, s):\n        x[i] = i\n    correction = t - sum(x) + x[i]\n    if correction in x:\n        x[correction] = -1 * correction\n        x[i] = 3 * correction\n    else:\n        x[i] = correction\n    return x"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "CumulativeSum:0",
    "sat": "def sat(x: List[int], t=50, n=10):\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n",
    "ans_type": "List[int]",
    "sol_header": "def sol(t=50, n=10):",
    "sol_docstring": "    \"\"\"Find how many values have cumulative sum less than target\"\"\"",
    "sol_bodies": [
      "    return [1] * n + [t]"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "CumulativeSum:1",
    "sat": "def sat(x: List[int], t=364928431, n=1088):\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n",
    "ans_type": "List[int]",
    "sol_header": "def sol(t=364928431, n=1088):",
    "sol_docstring": "    \"\"\"Find how many values have cumulative sum less than target\"\"\"",
    "sol_bodies": [
      "    return [1] * n + [t]"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "CumulativeSum:2",
    "sat": "def sat(x: List[int], t=7978940451, n=5932):\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n",
    "ans_type": "List[int]",
    "sol_header": "def sol(t=7978940451, n=5932):",
    "sol_docstring": "    \"\"\"Find how many values have cumulative sum less than target\"\"\"",
    "sol_bodies": [
      "    return [1] * n + [t]"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "CumulativeSum:3",
    "sat": "def sat(x: List[int], t=4545622399, n=1009):\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n",
    "ans_type": "List[int]",
    "sol_header": "def sol(t=4545622399, n=1009):",
    "sol_docstring": "    \"\"\"Find how many values have cumulative sum less than target\"\"\"",
    "sol_bodies": [
      "    return [1] * n + [t]"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "CumulativeSum:4",
    "sat": "def sat(x: List[int], t=4917027557, n=4815):\n    assert all([v > 0 for v in x])\n    s = 0\n    i = 0\n    for v in sorted(x):\n        s += v\n        if s > t:\n            return i == n\n        i += 1\n    return i == n",
    "ans_type": "List[int]",
    "sol_header": "def sol(t=4917027557, n=4815):",
    "sol_docstring": "    \"\"\"Find how many values have cumulative sum less than target\"\"\"",
    "sol_bodies": [
      "    return [1] * n + [t]"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "BasicStrCounts:0",
    "sat": "def sat(s: str, s1=\"a\", s2=\"b\", count1=50, count2=30):\n    return s.count(s1) == count1 and s.count(s2) == count2 and s[:10] == s[-10:]",
    "ans_type": "str",
    "sol_header": "def sol(s1=\"a\", s2=\"b\", count1=50, count2=30):",
    "sol_docstring": "    \"\"\"\n    Find a string that has count1 occurrences of s1 and count2 occurrences of s2 and starts and ends with\n    the same 10 characters\n    \"\"\"",
    "sol_bodies": [
      "    if s1 == s2:\n        ans = (s1 + \"?\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"?\") * count1\n        ans += (s2 + \"?\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"?\") * count2\n        ans += (s1 + \"?\") * (count1 - ans.count(s1))\n    return \"?\" * 10 + ans + \"?\" * 10"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "BasicStrCounts:1",
    "sat": "def sat(s: str, s1=\"t\", s2=\"qu\", count1=86, count2=83):\n    return s.count(s1) == count1 and s.count(s2) == count2 and s[:10] == s[-10:]",
    "ans_type": "str",
    "sol_header": "def sol(s1=\"t\", s2=\"qu\", count1=86, count2=83):",
    "sol_docstring": "    \"\"\"\n    Find a string that has count1 occurrences of s1 and count2 occurrences of s2 and starts and ends with\n    the same 10 characters\n    \"\"\"",
    "sol_bodies": [
      "    if s1 == s2:\n        ans = (s1 + \"?\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"?\") * count1\n        ans += (s2 + \"?\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"?\") * count2\n        ans += (s1 + \"?\") * (count1 - ans.count(s1))\n    return \"?\" * 10 + ans + \"?\" * 10"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "BasicStrCounts:2",
    "sat": "def sat(s: str, s1=\"kuc\", s2=\"qu\", count1=63, count2=58):\n    return s.count(s1) == count1 and s.count(s2) == count2 and s[:10] == s[-10:]",
    "ans_type": "str",
    "sol_header": "def sol(s1=\"kuc\", s2=\"qu\", count1=63, count2=58):",
    "sol_docstring": "    \"\"\"\n    Find a string that has count1 occurrences of s1 and count2 occurrences of s2 and starts and ends with\n    the same 10 characters\n    \"\"\"",
    "sol_bodies": [
      "    if s1 == s2:\n        ans = (s1 + \"?\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"?\") * count1\n        ans += (s2 + \"?\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"?\") * count2\n        ans += (s1 + \"?\") * (count1 - ans.count(s1))\n    return \"?\" * 10 + ans + \"?\" * 10"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "BasicStrCounts:3",
    "sat": "def sat(s: str, s1=\"te\", s2=\"tex\", count1=97, count2=53):\n    return s.count(s1) == count1 and s.count(s2) == count2 and s[:10] == s[-10:]",
    "ans_type": "str",
    "sol_header": "def sol(s1=\"te\", s2=\"tex\", count1=97, count2=53):",
    "sol_docstring": "    \"\"\"\n    Find a string that has count1 occurrences of s1 and count2 occurrences of s2 and starts and ends with\n    the same 10 characters\n    \"\"\"",
    "sol_bodies": [
      "    if s1 == s2:\n        ans = (s1 + \"?\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"?\") * count1\n        ans += (s2 + \"?\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"?\") * count2\n        ans += (s1 + \"?\") * (count1 - ans.count(s1))\n    return \"?\" * 10 + ans + \"?\" * 10"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "BasicStrCounts:4",
    "sat": "def sat(s: str, s1=\"hot\", s2=\"n\", count1=48, count2=92):\n    return s.count(s1) == count1 and s.count(s2) == count2 and s[:10] == s[-10:]",
    "ans_type": "str",
    "sol_header": "def sol(s1=\"hot\", s2=\"n\", count1=48, count2=92):",
    "sol_docstring": "    \"\"\"\n    Find a string that has count1 occurrences of s1 and count2 occurrences of s2 and starts and ends with\n    the same 10 characters\n    \"\"\"",
    "sol_bodies": [
      "    if s1 == s2:\n        ans = (s1 + \"?\") * count1\n    elif s1.count(s2):\n        ans = (s1 + \"?\") * count1\n        ans += (s2 + \"?\") * (count2 - ans.count(s2))\n    else:\n        ans = (s2 + \"?\") * count2\n        ans += (s1 + \"?\") * (count1 - ans.count(s1))\n    return \"?\" * 10 + ans + \"?\" * 10"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "ZipStr:0",
    "sat": "def sat(s: str, substrings=['foo', 'bar', 'baz', 'oddball']):\n    return all(sub in s[i::len(substrings)] for i, sub in enumerate(substrings))",
    "ans_type": "str",
    "sol_header": "def sol(substrings=['foo', 'bar', 'baz', 'oddball']):",
    "sol_docstring": "    \"\"\"\n    Find a string that contains each string in substrings alternating, e.g., 'cdaotg' for 'cat' and 'dog'\n    \"\"\"",
    "sol_bodies": [
      "    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "ZipStr:1",
    "sat": "def sat(s: str, substrings=['quifelota', 'chyhimyvemene', 'ge']):\n    return all(sub in s[i::len(substrings)] for i, sub in enumerate(substrings))",
    "ans_type": "str",
    "sol_header": "def sol(substrings=['quifelota', 'chyhimyvemene', 'ge']):",
    "sol_docstring": "    \"\"\"\n    Find a string that contains each string in substrings alternating, e.g., 'cdaotg' for 'cat' and 'dog'\n    \"\"\"",
    "sol_bodies": [
      "    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "ZipStr:2",
    "sat": "def sat(s: str, substrings=['kitytextiritex', 'cumathoxaz', 'rebute', 'rocor']):\n    return all(sub in s[i::len(substrings)] for i, sub in enumerate(substrings))",
    "ans_type": "str",
    "sol_header": "def sol(substrings=['kitytextiritex', 'cumathoxaz', 'rebute', 'rocor']):",
    "sol_docstring": "    \"\"\"\n    Find a string that contains each string in substrings alternating, e.g., 'cdaotg' for 'cat' and 'dog'\n    \"\"\"",
    "sol_bodies": [
      "    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "ZipStr:3",
    "sat": "def sat(s: str, substrings=['te', 'wusyc']):\n    return all(sub in s[i::len(substrings)] for i, sub in enumerate(substrings))",
    "ans_type": "str",
    "sol_header": "def sol(substrings=['te', 'wusyc']):",
    "sol_docstring": "    \"\"\"\n    Find a string that contains each string in substrings alternating, e.g., 'cdaotg' for 'cat' and 'dog'\n    \"\"\"",
    "sol_bodies": [
      "    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "ZipStr:4",
    "sat": "def sat(s: str, substrings=['cute', 'rysucajaxuno']):\n    return all(sub in s[i::len(substrings)] for i, sub in enumerate(substrings))",
    "ans_type": "str",
    "sol_header": "def sol(substrings=['cute', 'rysucajaxuno']):",
    "sol_docstring": "    \"\"\"\n    Find a string that contains each string in substrings alternating, e.g., 'cdaotg' for 'cat' and 'dog'\n    \"\"\"",
    "sol_bodies": [
      "    m = max(len(s) for s in substrings)\n    return \"\".join([(s[i] if i < len(s) else \" \") for i in range(m) for s in substrings])"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "ReverseCat:0",
    "sat": "def sat(s: str, substrings=['foo', 'bar', 'baz']):\n    return all(sub in s and sub[::-1] in s for sub in substrings)",
    "ans_type": "str",
    "sol_header": "def sol(substrings=['foo', 'bar', 'baz']):",
    "sol_docstring": "    \"\"\"\n    Find a string that contains all the substrings reversed and forward\n    \"\"\"",
    "sol_bodies": [
      "    return \"\".join(substrings + [s[::-1] for s in substrings])"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "ReverseCat:1",
    "sat": "def sat(s: str, substrings=['kepijilufuwisejyzat', 'lechogyvonaxegitex']):\n    return all(sub in s and sub[::-1] in s for sub in substrings)",
    "ans_type": "str",
    "sol_header": "def sol(substrings=['kepijilufuwisejyzat', 'lechogyvonaxegitex']):",
    "sol_docstring": "    \"\"\"\n    Find a string that contains all the substrings reversed and forward\n    \"\"\"",
    "sol_bodies": [
      "    return \"\".join(substrings + [s[::-1] for s in substrings])"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "ReverseCat:2",
    "sat": "def sat(s: str, substrings=['ripihuquyrenytu', 'quosafyji', 'chyguzocuzuqu', 'futhixequyb']):\n    return all(sub in s and sub[::-1] in s for sub in substrings)",
    "ans_type": "str",
    "sol_header": "def sol(substrings=['ripihuquyrenytu', 'quosafyji', 'chyguzocuzuqu', 'futhixequyb']):",
    "sol_docstring": "    \"\"\"\n    Find a string that contains all the substrings reversed and forward\n    \"\"\"",
    "sol_bodies": [
      "    return \"\".join(substrings + [s[::-1] for s in substrings])"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "ReverseCat:3",
    "sat": "def sat(s: str, substrings=['thacovatukoliva', 'maquyfezisothizyp', 'ka', 'benegiquememif']):\n    return all(sub in s and sub[::-1] in s for sub in substrings)",
    "ans_type": "str",
    "sol_header": "def sol(substrings=['thacovatukoliva', 'maquyfezisothizyp', 'ka', 'benegiquememif']):",
    "sol_docstring": "    \"\"\"\n    Find a string that contains all the substrings reversed and forward\n    \"\"\"",
    "sol_bodies": [
      "    return \"\".join(substrings + [s[::-1] for s in substrings])"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "ReverseCat:4",
    "sat": "def sat(s: str, substrings=['t', 'vochemachylit', 'vutextynydakelopi', 'fazapydomozamochug']):\n    return all(sub in s and sub[::-1] in s for sub in substrings)",
    "ans_type": "str",
    "sol_header": "def sol(substrings=['t', 'vochemachylit', 'vutextynydakelopi', 'fazapydomozamochug']):",
    "sol_docstring": "    \"\"\"\n    Find a string that contains all the substrings reversed and forward\n    \"\"\"",
    "sol_bodies": [
      "    return \"\".join(substrings + [s[::-1] for s in substrings])"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "EngineerNumbers:0",
    "sat": "def sat(ls: List[str], n=100, a=\"bar\", b=\"foo\"):\n    return len(ls) == len(set(ls)) == n and ls[0] == a and ls[-1] == b and ls == sorted(ls)",
    "ans_type": "List[str]",
    "sol_header": "def sol(n=100, a=\"bar\", b=\"foo\"):",
    "sol_docstring": "    \"\"\"\n    Find a list of n strings, in alphabetical order, starting with a and ending with b.\n    \"\"\"",
    "sol_bodies": [
      "    return sorted([a] + [a + chr(0) + str(i) for i in range(n - 2)] + [b])"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "EngineerNumbers:1",
    "sat": "def sat(ls: List[str], n=44, a=\"lychezothotextocev\", b=\"th\"):\n    return len(ls) == len(set(ls)) == n and ls[0] == a and ls[-1] == b and ls == sorted(ls)",
    "ans_type": "List[str]",
    "sol_header": "def sol(n=44, a=\"lychezothotextocev\", b=\"th\"):",
    "sol_docstring": "    \"\"\"\n    Find a list of n strings, in alphabetical order, starting with a and ending with b.\n    \"\"\"",
    "sol_bodies": [
      "    return sorted([a] + [a + chr(0) + str(i) for i in range(n - 2)] + [b])"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "EngineerNumbers:2",
    "sat": "def sat(ls: List[str], n=13, a=\"kacukebyhapuniryh\", b=\"te\"):\n    return len(ls) == len(set(ls)) == n and ls[0] == a and ls[-1] == b and ls == sorted(ls)",
    "ans_type": "List[str]",
    "sol_header": "def sol(n=13, a=\"kacukebyhapuniryh\", b=\"te\"):",
    "sol_docstring": "    \"\"\"\n    Find a list of n strings, in alphabetical order, starting with a and ending with b.\n    \"\"\"",
    "sol_bodies": [
      "    return sorted([a] + [a + chr(0) + str(i) for i in range(n - 2)] + [b])"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "EngineerNumbers:3",
    "sat": "def sat(ls: List[str], n=61, a=\"cisoceratext\", b=\"milusicochylitextyco\"):\n    return len(ls) == len(set(ls)) == n and ls[0] == a and ls[-1] == b and ls == sorted(ls)",
    "ans_type": "List[str]",
    "sol_header": "def sol(n=61, a=\"cisoceratext\", b=\"milusicochylitextyco\"):",
    "sol_docstring": "    \"\"\"\n    Find a list of n strings, in alphabetical order, starting with a and ending with b.\n    \"\"\"",
    "sol_bodies": [
      "    return sorted([a] + [a + chr(0) + str(i) for i in range(n - 2)] + [b])"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "EngineerNumbers:4",
    "sat": "def sat(ls: List[str], n=59, a=\"hokitextawelaxah\", b=\"maryhedu\"):\n    return len(ls) == len(set(ls)) == n and ls[0] == a and ls[-1] == b and ls == sorted(ls)",
    "ans_type": "List[str]",
    "sol_header": "def sol(n=59, a=\"hokitextawelaxah\", b=\"maryhedu\"):",
    "sol_docstring": "    \"\"\"\n    Find a list of n strings, in alphabetical order, starting with a and ending with b.\n    \"\"\"",
    "sol_bodies": [
      "    return sorted([a] + [a + chr(0) + str(i) for i in range(n - 2)] + [b])"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "PenultimateString:0",
    "sat": "def sat(s: str, strings=['cat', 'dog', 'bird', 'fly', 'moose']):\n    return s in strings and sum(t > s for t in strings) == 1",
    "ans_type": "str",
    "sol_header": "def sol(strings=['cat', 'dog', 'bird', 'fly', 'moose']):",
    "sol_docstring": "    \"\"\"Find the alphabetically second to last last string in a list.\"\"\"",
    "sol_bodies": [
      "    return sorted(strings)[-2]"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "PenultimateString:1",
    "sat": "def sat(s: str, strings=['ryzapychybykydege', 'mivowepe', 'sovywos', 'chanyrorybynid', 'vafechajufo', 'nokymocymoxac', 'jahejafuquoduk', 'gogy', 'bytothice', 'ruminuvixixutudigom']):\n    return s in strings and sum(t > s for t in strings) == 1",
    "ans_type": "str",
    "sol_header": "def sol(strings=['ryzapychybykydege', 'mivowepe', 'sovywos', 'chanyrorybynid', 'vafechajufo', 'nokymocymoxac', 'jahejafuquoduk', 'gogy', 'bytothice', 'ruminuvixixutudigom']):",
    "sol_docstring": "    \"\"\"Find the alphabetically second to last last string in a list.\"\"\"",
    "sol_bodies": [
      "    return sorted(strings)[-2]"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "PenultimateString:2",
    "sat": "def sat(s: str, strings=['mipelavychekecy', 'pythujutisoxofe', 'diliwagacivychinofiw', 'na', 'dobynaramithibolo', 'cugupyfytextofoxat', 'gyfokebo', 'bymitextitextizoc', 'rekimuk', 'bepumyxitubachek']):\n    return s in strings and sum(t > s for t in strings) == 1",
    "ans_type": "str",
    "sol_header": "def sol(strings=['mipelavychekecy', 'pythujutisoxofe', 'diliwagacivychinofiw', 'na', 'dobynaramithibolo', 'cugupyfytextofoxat', 'gyfokebo', 'bymitextitextizoc', 'rekimuk', 'bepumyxitubachek']):",
    "sol_docstring": "    \"\"\"Find the alphabetically second to last last string in a list.\"\"\"",
    "sol_bodies": [
      "    return sorted(strings)[-2]"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "PenultimateString:3",
    "sat": "def sat(s: str, strings=['hunuvarufefikaq', 'xejegu', 'minoc', 'puthyvyc', 'xyzeryberi', 'tyl', 'thyvojyvijazetonowa', 'jahygywuchitho', 'quuvuvigy', 'zuhechywituthexe']):\n    return s in strings and sum(t > s for t in strings) == 1",
    "ans_type": "str",
    "sol_header": "def sol(strings=['hunuvarufefikaq', 'xejegu', 'minoc', 'puthyvyc', 'xyzeryberi', 'tyl', 'thyvojyvijazetonowa', 'jahygywuchitho', 'quuvuvigy', 'zuhechywituthexe']):",
    "sol_docstring": "    \"\"\"Find the alphabetically second to last last string in a list.\"\"\"",
    "sol_bodies": [
      "    return sorted(strings)[-2]"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "PenultimateString:4",
    "sat": "def sat(s: str, strings=['wesolotelunyzecemexi', 'pociquuwygocysahef', 'lequusigipitexti', 'quojuxaq', 'fyt', 'm', 'bavalepynoza', 'zihath', 'lodomijibuxoju', 'xasuwytextochypuli']):\n    return s in strings and sum(t > s for t in strings) == 1",
    "ans_type": "str",
    "sol_header": "def sol(strings=['wesolotelunyzecemexi', 'pociquuwygocysahef', 'lequusigipitexti', 'quojuxaq', 'fyt', 'm', 'bavalepynoza', 'zihath', 'lodomijibuxoju', 'xasuwytextochypuli']):",
    "sol_docstring": "    \"\"\"Find the alphabetically second to last last string in a list.\"\"\"",
    "sol_bodies": [
      "    return sorted(strings)[-2]"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "PenultimateRevString:0",
    "sat": "def sat(s: str, strings=['cat', 'dog', 'bird', 'fly', 'moose']):\n    return s[::-1] in strings and sum(t < s[::-1] for t in strings) == 1",
    "ans_type": "str",
    "sol_header": "def sol(strings=['cat', 'dog', 'bird', 'fly', 'moose']):",
    "sol_docstring": "    \"\"\"Find the reversed version of the alphabetically second string in a list.\"\"\"",
    "sol_bodies": [
      "    return sorted(strings)[1][::-1]"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "PenultimateRevString:1",
    "sat": "def sat(s: str, strings=['rawithelen', 'que', 'pikuf', 'koze', 'zehyquorofyxytextef', 'text', 'jezebox', 'zychopucebychokyz', 'pyzyxatevafugedix', 'buzogehabojyb']):\n    return s[::-1] in strings and sum(t < s[::-1] for t in strings) == 1",
    "ans_type": "str",
    "sol_header": "def sol(strings=['rawithelen', 'que', 'pikuf', 'koze', 'zehyquorofyxytextef', 'text', 'jezebox', 'zychopucebychokyz', 'pyzyxatevafugedix', 'buzogehabojyb']):",
    "sol_docstring": "    \"\"\"Find the reversed version of the alphabetically second string in a list.\"\"\"",
    "sol_bodies": [
      "    return sorted(strings)[1][::-1]"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "PenultimateRevString:2",
    "sat": "def sat(s: str, strings=['thythanaham', 'quiroxebadivogis', 'kyh', 'xa', 'gathytyjonymihahahy', 'musyzisequyxyhenico', 'poxizitizexokigewifi', 'mife', 'chyjuratexta', 'gyrato']):\n    return s[::-1] in strings and sum(t < s[::-1] for t in strings) == 1",
    "ans_type": "str",
    "sol_header": "def sol(strings=['thythanaham', 'quiroxebadivogis', 'kyh', 'xa', 'gathytyjonymihahahy', 'musyzisequyxyhenico', 'poxizitizexokigewifi', 'mife', 'chyjuratexta', 'gyrato']):",
    "sol_docstring": "    \"\"\"Find the reversed version of the alphabetically second string in a list.\"\"\"",
    "sol_bodies": [
      "    return sorted(strings)[1][::-1]"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "PenultimateRevString:3",
    "sat": "def sat(s: str, strings=['habicynanikadifovac', 'bozehathyfoz', 'hud', 'textudunachuxarise', 'hewohahatazabab', 'lutumelimevabutha', 'wocher', 'wacifufixudizon', 'tazibedo', 'xytu']):\n    return s[::-1] in strings and sum(t < s[::-1] for t in strings) == 1",
    "ans_type": "str",
    "sol_header": "def sol(strings=['habicynanikadifovac', 'bozehathyfoz', 'hud', 'textudunachuxarise', 'hewohahatazabab', 'lutumelimevabutha', 'wocher', 'wacifufixudizon', 'tazibedo', 'xytu']):",
    "sol_docstring": "    \"\"\"Find the reversed version of the alphabetically second string in a list.\"\"\"",
    "sol_bodies": [
      "    return sorted(strings)[1][::-1]"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "PenultimateRevString:4",
    "sat": "def sat(s: str, strings=['vekykothumygochuth', 'xujatajazisiqu', 'vapyvymobymethotexto', 'tygope', 'g', 'ripalotextaj', 'tecehuthojodogucivaj', 'xyjulecometihesej', 'ribo', 'gutachowagexatoset']):\n    return s[::-1] in strings and sum(t < s[::-1] for t in strings) == 1",
    "ans_type": "str",
    "sol_header": "def sol(strings=['vekykothumygochuth', 'xujatajazisiqu', 'vapyvymobymethotexto', 'tygope', 'g', 'ripalotextaj', 'tecehuthojodogucivaj', 'xyjulecometihesej', 'ribo', 'gutachowagexatoset']):",
    "sol_docstring": "    \"\"\"Find the reversed version of the alphabetically second string in a list.\"\"\"",
    "sol_bodies": [
      "    return sorted(strings)[1][::-1]"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "CenteredString:0",
    "sat": "def sat(s: str, target=\"foobarbazwow\", length=6):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s",
    "ans_type": "str",
    "sol_header": "def sol(target=\"foobarbazwow\", length=6):",
    "sol_docstring": "    \"\"\"Find a substring of the given length centered within the target string.\"\"\"",
    "sol_bodies": [
      "    return target[(len(target) - length) // 2:(len(target) + length) // 2]"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "CenteredString:1",
    "sat": "def sat(s: str, target=\"rujus\", length=1):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s",
    "ans_type": "str",
    "sol_header": "def sol(target=\"rujus\", length=1):",
    "sol_docstring": "    \"\"\"Find a substring of the given length centered within the target string.\"\"\"",
    "sol_bodies": [
      "    return target[(len(target) - length) // 2:(len(target) + length) // 2]"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "CenteredString:2",
    "sat": "def sat(s: str, target=\"bulu\", length=4):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s",
    "ans_type": "str",
    "sol_header": "def sol(target=\"bulu\", length=4):",
    "sol_docstring": "    \"\"\"Find a substring of the given length centered within the target string.\"\"\"",
    "sol_bodies": [
      "    return target[(len(target) - length) // 2:(len(target) + length) // 2]"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "CenteredString:3",
    "sat": "def sat(s: str, target=\"defojuhujuwilumec\", length=7):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s",
    "ans_type": "str",
    "sol_header": "def sol(target=\"defojuhujuwilumec\", length=7):",
    "sol_docstring": "    \"\"\"Find a substring of the given length centered within the target string.\"\"\"",
    "sol_bodies": [
      "    return target[(len(target) - length) // 2:(len(target) + length) // 2]"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "CenteredString:4",
    "sat": "def sat(s: str, target=\"tenuhije\", length=6):\n    return target[(len(target) - length) // 2:(len(target) + length) // 2] == s",
    "ans_type": "str",
    "sol_header": "def sol(target=\"tenuhije\", length=6):",
    "sol_docstring": "    \"\"\"Find a substring of the given length centered within the target string.\"\"\"",
    "sol_bodies": [
      "    return target[(len(target) - length) // 2:(len(target) + length) // 2]"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "SubstrCount:0",
    "sat": "def sat(substring: str, string=\"moooboooofasd\", count=2):\n    return string.count(substring) == count",
    "ans_type": "str",
    "sol_header": "def sol(string=\"moooboooofasd\", count=2):",
    "sol_docstring": "    \"\"\"Find a substring with a certain count in a given string\"\"\"",
    "sol_bodies": [
      "    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break\n    assert False"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "SubstrCount:1",
    "sat": "def sat(substring: str, string=\"nyvyfytibuquyquuchudemixyzychumanachozyquiquowutextyvomyzychyme\", count=4):\n    return string.count(substring) == count",
    "ans_type": "str",
    "sol_header": "def sol(string=\"nyvyfytibuquyquuchudemixyzychumanachozyquiquowutextyvomyzychyme\", count=4):",
    "sol_docstring": "    \"\"\"Find a substring with a certain count in a given string\"\"\"",
    "sol_bodies": [
      "    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break\n    assert False"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "SubstrCount:2",
    "sat": "def sat(substring: str, string=\"cokomoquiwythyluwamymothynihythenyfeteth\", count=4):\n    return string.count(substring) == count",
    "ans_type": "str",
    "sol_header": "def sol(string=\"cokomoquiwythyluwamymothynihythenyfeteth\", count=4):",
    "sol_docstring": "    \"\"\"Find a substring with a certain count in a given string\"\"\"",
    "sol_bodies": [
      "    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break\n    assert False"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "SubstrCount:3",
    "sat": "def sat(substring: str, string=\"cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf\", count=3):\n    return string.count(substring) == count",
    "ans_type": "str",
    "sol_header": "def sol(string=\"cutextolichymocajethamopyvepethytextydynykihywyxivytextequylejekuf\", count=3):",
    "sol_docstring": "    \"\"\"Find a substring with a certain count in a given string\"\"\"",
    "sol_bodies": [
      "    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break\n    assert False"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "SubstrCount:4",
    "sat": "def sat(substring: str, string=\"modacequytextytextilaleguthovamipehywaciripetext\", count=3):\n    return string.count(substring) == count",
    "ans_type": "str",
    "sol_header": "def sol(string=\"modacequytextytextilaleguthovamipehywaciripetext\", count=3):",
    "sol_docstring": "    \"\"\"Find a substring with a certain count in a given string\"\"\"",
    "sol_bodies": [
      "    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            substring = string[i:j]\n            c = string.count(substring)\n            if c == count:\n                return substring\n            if c < count:\n                break\n    assert False"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "CompleteParens:0",
    "sat": "def sat(t: str, s=\"))(Add)some))parens()to()(balance(()(()(me!)((((\"):\n    for i in range(len(t) + 1):\n        depth = t[:i].count(\"(\") - t[:i].count(\")\")\n        assert depth >= 0\n    return depth == 0 and s in t",
    "ans_type": "str",
    "sol_header": "def sol(s=\"))(Add)some))parens()to()(balance(()(()(me!)((((\"):",
    "sol_docstring": "    \"\"\"Add parentheses to the beginning and end of s to make all parentheses balanced\"\"\"",
    "sol_bodies": [
      "    return \"(\" * s.count(\")\") + s + \")\" * s.count(\"(\")"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "CompleteParens:1",
    "sat": "def sat(t: str, s=\"(po)(())kf((((cy()))((tex()())(\"):\n    for i in range(len(t) + 1):\n        depth = t[:i].count(\"(\") - t[:i].count(\")\")\n        assert depth >= 0\n    return depth == 0 and s in t",
    "ans_type": "str",
    "sol_header": "def sol(s=\"(po)(())kf((((cy()))((tex()())(\"):",
    "sol_docstring": "    \"\"\"Add parentheses to the beginning and end of s to make all parentheses balanced\"\"\"",
    "sol_bodies": [
      "    return \"(\" * s.count(\")\") + s + \")\" * s.count(\"(\")"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "CompleteParens:2",
    "sat": "def sat(t: str, s=\"yf)()(()))hik()t(((\"):\n    for i in range(len(t) + 1):\n        depth = t[:i].count(\"(\") - t[:i].count(\")\")\n        assert depth >= 0\n    return depth == 0 and s in t",
    "ans_type": "str",
    "sol_header": "def sol(s=\"yf)()(()))hik()t(((\"):",
    "sol_docstring": "    \"\"\"Add parentheses to the beginning and end of s to make all parentheses balanced\"\"\"",
    "sol_bodies": [
      "    return \"(\" * s.count(\")\") + s + \")\" * s.count(\"(\")"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "CompleteParens:3",
    "sat": "def sat(t: str, s=\")((le(()()chu)())nol))((sic(((da)()ty((()te))xy(())))))k\"):\n    for i in range(len(t) + 1):\n        depth = t[:i].count(\"(\") - t[:i].count(\")\")\n        assert depth >= 0\n    return depth == 0 and s in t",
    "ans_type": "str",
    "sol_header": "def sol(s=\")((le(()()chu)())nol))((sic(((da)()ty((()te))xy(())))))k\"):",
    "sol_docstring": "    \"\"\"Add parentheses to the beginning and end of s to make all parentheses balanced\"\"\"",
    "sol_bodies": [
      "    return \"(\" * s.count(\")\") + s + \")\" * s.count(\"(\")"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "CompleteParens:4",
    "sat": "def sat(t: str, s=\"))())l\"):\n    for i in range(len(t) + 1):\n        depth = t[:i].count(\"(\") - t[:i].count(\")\")\n        assert depth >= 0\n    return depth == 0 and s in t",
    "ans_type": "str",
    "sol_header": "def sol(s=\"))())l\"):",
    "sol_docstring": "    \"\"\"Add parentheses to the beginning and end of s to make all parentheses balanced\"\"\"",
    "sol_bodies": [
      "    return \"(\" * s.count(\")\") + s + \")\" * s.count(\"(\")"
    ],
    "module": "basic.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "EightQueensOrFewer:0",
    "sat": "def sat(squares: List[List[int]], m=8, n=8):\n    k = min(m, n)\n    assert all(i in range(m) and j in range(n) for i, j in squares) and len(squares) == k\n    return 4 * k == len({t for i, j in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(m=8, n=8):",
    "sol_docstring": "    \"\"\"Position min(m, n) <= 8 queens on an m x n chess board so that no pair is attacking each other.\"\"\"",
    "sol_bodies": [
      "    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]"
    ],
    "module": "chess.py",
    "notes": "Eight (or fewer) Queens Puzzle\n\nSee Wikipedia entry on\n[Eight Queens puzzle](https://en.wikipedia.org/w/index.php?title=Eight_queens_puzzle).\n\nSee the MoreQueens puzzle below for another (longer but clearer) equivalent definition of sat\n\nHint: a brute force approach works on this puzzle.",
    "weight": 1.0
  },
  {
    "name": "EightQueensOrFewer:1",
    "sat": "def sat(squares: List[List[int]], m=9, n=6):\n    k = min(m, n)\n    assert all(i in range(m) and j in range(n) for i, j in squares) and len(squares) == k\n    return 4 * k == len({t for i, j in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(m=9, n=6):",
    "sol_docstring": "    \"\"\"Position min(m, n) <= 8 queens on an m x n chess board so that no pair is attacking each other.\"\"\"",
    "sol_bodies": [
      "    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]"
    ],
    "module": "chess.py",
    "notes": "Eight (or fewer) Queens Puzzle\n\nSee Wikipedia entry on\n[Eight Queens puzzle](https://en.wikipedia.org/w/index.php?title=Eight_queens_puzzle).\n\nSee the MoreQueens puzzle below for another (longer but clearer) equivalent definition of sat\n\nHint: a brute force approach works on this puzzle.",
    "weight": 1.0
  },
  {
    "name": "EightQueensOrFewer:2",
    "sat": "def sat(squares: List[List[int]], m=59, n=4):\n    k = min(m, n)\n    assert all(i in range(m) and j in range(n) for i, j in squares) and len(squares) == k\n    return 4 * k == len({t for i, j in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(m=59, n=4):",
    "sol_docstring": "    \"\"\"Position min(m, n) <= 8 queens on an m x n chess board so that no pair is attacking each other.\"\"\"",
    "sol_bodies": [
      "    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]"
    ],
    "module": "chess.py",
    "notes": "Eight (or fewer) Queens Puzzle\n\nSee Wikipedia entry on\n[Eight Queens puzzle](https://en.wikipedia.org/w/index.php?title=Eight_queens_puzzle).\n\nSee the MoreQueens puzzle below for another (longer but clearer) equivalent definition of sat\n\nHint: a brute force approach works on this puzzle.",
    "weight": 1.0
  },
  {
    "name": "EightQueensOrFewer:3",
    "sat": "def sat(squares: List[List[int]], m=38, n=8):\n    k = min(m, n)\n    assert all(i in range(m) and j in range(n) for i, j in squares) and len(squares) == k\n    return 4 * k == len({t for i, j in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(m=38, n=8):",
    "sol_docstring": "    \"\"\"Position min(m, n) <= 8 queens on an m x n chess board so that no pair is attacking each other.\"\"\"",
    "sol_bodies": [
      "    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]"
    ],
    "module": "chess.py",
    "notes": "Eight (or fewer) Queens Puzzle\n\nSee Wikipedia entry on\n[Eight Queens puzzle](https://en.wikipedia.org/w/index.php?title=Eight_queens_puzzle).\n\nSee the MoreQueens puzzle below for another (longer but clearer) equivalent definition of sat\n\nHint: a brute force approach works on this puzzle.",
    "weight": 1.0
  },
  {
    "name": "EightQueensOrFewer:4",
    "sat": "def sat(squares: List[List[int]], m=9, n=4):\n    k = min(m, n)\n    assert all(i in range(m) and j in range(n) for i, j in squares) and len(squares) == k\n    return 4 * k == len({t for i, j in squares for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]})",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(m=9, n=4):",
    "sol_docstring": "    \"\"\"Position min(m, n) <= 8 queens on an m x n chess board so that no pair is attacking each other.\"\"\"",
    "sol_bodies": [
      "    # brute force\n    k = min(m, n)\n\n    from itertools import permutations\n    for p in permutations(range(k)):\n        if 4 * k == len(\n                {t for i, j in enumerate(p) for t in [('row', i), ('col', j), ('SE', i + j), ('NE', i - j)]}):\n            return [[i, j] for i, j in enumerate(p)]"
    ],
    "module": "chess.py",
    "notes": "Eight (or fewer) Queens Puzzle\n\nSee Wikipedia entry on\n[Eight Queens puzzle](https://en.wikipedia.org/w/index.php?title=Eight_queens_puzzle).\n\nSee the MoreQueens puzzle below for another (longer but clearer) equivalent definition of sat\n\nHint: a brute force approach works on this puzzle.",
    "weight": 1.0
  },
  {
    "name": "MoreQueens:0",
    "sat": "def sat(squares: List[List[int]], m=9, n=9):\n    k = min(m, n)\n    assert all(i in range(m) and j in range(n) for i, j in squares), \"queen off board\"\n    assert len(squares) == k, \"Wrong number of queens\"\n    assert len({i for i, j in squares}) == k, \"Queens on same row\"\n    assert len({j for i, j in squares}) == k, \"Queens on same file\"\n    assert len({i + j for i, j in squares}) == k, \"Queens on same SE diagonal\"\n    assert len({i - j for i, j in squares}) == k, \"Queens on same NE diagonal\"\n    return True",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(m=9, n=9):",
    "sol_docstring": "    \"\"\"\n    Position min(m, n) > 8 queens on an m x n chess board so that no pair is attacking each other.\n    \"\"\"",
    "sol_bodies": [
      "    t = min(m, n)\n    ans = []\n    if t % 2 == 1:  # odd k, put a queen in the lower right corner (and decrement k)\n        ans.append([t - 1, t - 1])\n        t -= 1\n    if t % 6 == 2:  # do something special for 8x8, 14x14 etc:\n        ans += [[i, (2 * i + t // 2 - 1) % t] for i in range(t // 2)]\n        ans += [[i + t // 2, (2 * i - t // 2 + 2) % t] for i in range(t // 2)]\n    else:\n        ans += [[i, 2 * i + 1] for i in range(t // 2)]\n        ans += [[i + t // 2, 2 * i] for i in range(t // 2)]\n    return ans"
    ],
    "module": "chess.py",
    "notes": "See Wikipedia entry on [Eight Queens puzzle](https://en.wikipedia.org/w/index.php?title=Eight_queens_puzzle).\n\nA brute force approach will not work on many of these problems.",
    "weight": 1.0
  },
  {
    "name": "MoreQueens:1",
    "sat": "def sat(squares: List[List[int]], m=79, n=95):\n    k = min(m, n)\n    assert all(i in range(m) and j in range(n) for i, j in squares), \"queen off board\"\n    assert len(squares) == k, \"Wrong number of queens\"\n    assert len({i for i, j in squares}) == k, \"Queens on same row\"\n    assert len({j for i, j in squares}) == k, \"Queens on same file\"\n    assert len({i + j for i, j in squares}) == k, \"Queens on same SE diagonal\"\n    assert len({i - j for i, j in squares}) == k, \"Queens on same NE diagonal\"\n    return True",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(m=79, n=95):",
    "sol_docstring": "    \"\"\"\n    Position min(m, n) > 8 queens on an m x n chess board so that no pair is attacking each other.\n    \"\"\"",
    "sol_bodies": [
      "    t = min(m, n)\n    ans = []\n    if t % 2 == 1:  # odd k, put a queen in the lower right corner (and decrement k)\n        ans.append([t - 1, t - 1])\n        t -= 1\n    if t % 6 == 2:  # do something special for 8x8, 14x14 etc:\n        ans += [[i, (2 * i + t // 2 - 1) % t] for i in range(t // 2)]\n        ans += [[i + t // 2, (2 * i - t // 2 + 2) % t] for i in range(t // 2)]\n    else:\n        ans += [[i, 2 * i + 1] for i in range(t // 2)]\n        ans += [[i + t // 2, 2 * i] for i in range(t // 2)]\n    return ans"
    ],
    "module": "chess.py",
    "notes": "See Wikipedia entry on [Eight Queens puzzle](https://en.wikipedia.org/w/index.php?title=Eight_queens_puzzle).\n\nA brute force approach will not work on many of these problems.",
    "weight": 1.0
  },
  {
    "name": "MoreQueens:2",
    "sat": "def sat(squares: List[List[int]], m=80, n=88):\n    k = min(m, n)\n    assert all(i in range(m) and j in range(n) for i, j in squares), \"queen off board\"\n    assert len(squares) == k, \"Wrong number of queens\"\n    assert len({i for i, j in squares}) == k, \"Queens on same row\"\n    assert len({j for i, j in squares}) == k, \"Queens on same file\"\n    assert len({i + j for i, j in squares}) == k, \"Queens on same SE diagonal\"\n    assert len({i - j for i, j in squares}) == k, \"Queens on same NE diagonal\"\n    return True",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(m=80, n=88):",
    "sol_docstring": "    \"\"\"\n    Position min(m, n) > 8 queens on an m x n chess board so that no pair is attacking each other.\n    \"\"\"",
    "sol_bodies": [
      "    t = min(m, n)\n    ans = []\n    if t % 2 == 1:  # odd k, put a queen in the lower right corner (and decrement k)\n        ans.append([t - 1, t - 1])\n        t -= 1\n    if t % 6 == 2:  # do something special for 8x8, 14x14 etc:\n        ans += [[i, (2 * i + t // 2 - 1) % t] for i in range(t // 2)]\n        ans += [[i + t // 2, (2 * i - t // 2 + 2) % t] for i in range(t // 2)]\n    else:\n        ans += [[i, 2 * i + 1] for i in range(t // 2)]\n        ans += [[i + t // 2, 2 * i] for i in range(t // 2)]\n    return ans"
    ],
    "module": "chess.py",
    "notes": "See Wikipedia entry on [Eight Queens puzzle](https://en.wikipedia.org/w/index.php?title=Eight_queens_puzzle).\n\nA brute force approach will not work on many of these problems.",
    "weight": 1.0
  },
  {
    "name": "MoreQueens:3",
    "sat": "def sat(squares: List[List[int]], m=56, n=16):\n    k = min(m, n)\n    assert all(i in range(m) and j in range(n) for i, j in squares), \"queen off board\"\n    assert len(squares) == k, \"Wrong number of queens\"\n    assert len({i for i, j in squares}) == k, \"Queens on same row\"\n    assert len({j for i, j in squares}) == k, \"Queens on same file\"\n    assert len({i + j for i, j in squares}) == k, \"Queens on same SE diagonal\"\n    assert len({i - j for i, j in squares}) == k, \"Queens on same NE diagonal\"\n    return True",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(m=56, n=16):",
    "sol_docstring": "    \"\"\"\n    Position min(m, n) > 8 queens on an m x n chess board so that no pair is attacking each other.\n    \"\"\"",
    "sol_bodies": [
      "    t = min(m, n)\n    ans = []\n    if t % 2 == 1:  # odd k, put a queen in the lower right corner (and decrement k)\n        ans.append([t - 1, t - 1])\n        t -= 1\n    if t % 6 == 2:  # do something special for 8x8, 14x14 etc:\n        ans += [[i, (2 * i + t // 2 - 1) % t] for i in range(t // 2)]\n        ans += [[i + t // 2, (2 * i - t // 2 + 2) % t] for i in range(t // 2)]\n    else:\n        ans += [[i, 2 * i + 1] for i in range(t // 2)]\n        ans += [[i + t // 2, 2 * i] for i in range(t // 2)]\n    return ans"
    ],
    "module": "chess.py",
    "notes": "See Wikipedia entry on [Eight Queens puzzle](https://en.wikipedia.org/w/index.php?title=Eight_queens_puzzle).\n\nA brute force approach will not work on many of these problems.",
    "weight": 1.0
  },
  {
    "name": "MoreQueens:4",
    "sat": "def sat(squares: List[List[int]], m=23, n=45):\n    k = min(m, n)\n    assert all(i in range(m) and j in range(n) for i, j in squares), \"queen off board\"\n    assert len(squares) == k, \"Wrong number of queens\"\n    assert len({i for i, j in squares}) == k, \"Queens on same row\"\n    assert len({j for i, j in squares}) == k, \"Queens on same file\"\n    assert len({i + j for i, j in squares}) == k, \"Queens on same SE diagonal\"\n    assert len({i - j for i, j in squares}) == k, \"Queens on same NE diagonal\"\n    return True",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(m=23, n=45):",
    "sol_docstring": "    \"\"\"\n    Position min(m, n) > 8 queens on an m x n chess board so that no pair is attacking each other.\n    \"\"\"",
    "sol_bodies": [
      "    t = min(m, n)\n    ans = []\n    if t % 2 == 1:  # odd k, put a queen in the lower right corner (and decrement k)\n        ans.append([t - 1, t - 1])\n        t -= 1\n    if t % 6 == 2:  # do something special for 8x8, 14x14 etc:\n        ans += [[i, (2 * i + t // 2 - 1) % t] for i in range(t // 2)]\n        ans += [[i + t // 2, (2 * i - t // 2 + 2) % t] for i in range(t // 2)]\n    else:\n        ans += [[i, 2 * i + 1] for i in range(t // 2)]\n        ans += [[i + t // 2, 2 * i] for i in range(t // 2)]\n    return ans"
    ],
    "module": "chess.py",
    "notes": "See Wikipedia entry on [Eight Queens puzzle](https://en.wikipedia.org/w/index.php?title=Eight_queens_puzzle).\n\nA brute force approach will not work on many of these problems.",
    "weight": 1.0
  },
  {
    "name": "KnightsTour:0",
    "sat": "def sat(tour: List[List[int]], m=8, n=8):\n    assert all({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for [i1, j1], [i2, j2] in zip(tour, tour[1:])), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]  # cover every square once",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(m=8, n=8):",
    "sol_docstring": "    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"",
    "sol_bodies": [
      "    # using Warnsdorff's heuristic, breaking ties randomly\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])"
    ],
    "module": "chess.py",
    "notes": "See Wikipedia entry on [Knight's tour](https://en.wikipedia.org/w/index.php?title=Knight%27s_tour)",
    "weight": 1.0
  },
  {
    "name": "KnightsTour:1",
    "sat": "def sat(tour: List[List[int]], m=9, n=9):\n    assert all({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for [i1, j1], [i2, j2] in zip(tour, tour[1:])), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]  # cover every square once",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(m=9, n=9):",
    "sol_docstring": "    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"",
    "sol_bodies": [
      "    # using Warnsdorff's heuristic, breaking ties randomly\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])"
    ],
    "module": "chess.py",
    "notes": "See Wikipedia entry on [Knight's tour](https://en.wikipedia.org/w/index.php?title=Knight%27s_tour)",
    "weight": 1.0
  },
  {
    "name": "KnightsTour:2",
    "sat": "def sat(tour: List[List[int]], m=7, n=7):\n    assert all({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for [i1, j1], [i2, j2] in zip(tour, tour[1:])), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]  # cover every square once",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(m=7, n=7):",
    "sol_docstring": "    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"",
    "sol_bodies": [
      "    # using Warnsdorff's heuristic, breaking ties randomly\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])"
    ],
    "module": "chess.py",
    "notes": "See Wikipedia entry on [Knight's tour](https://en.wikipedia.org/w/index.php?title=Knight%27s_tour)",
    "weight": 1.0
  },
  {
    "name": "KnightsTour:3",
    "sat": "def sat(tour: List[List[int]], m=6, n=6):\n    assert all({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for [i1, j1], [i2, j2] in zip(tour, tour[1:])), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]  # cover every square once",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(m=6, n=6):",
    "sol_docstring": "    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"",
    "sol_bodies": [
      "    # using Warnsdorff's heuristic, breaking ties randomly\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])"
    ],
    "module": "chess.py",
    "notes": "See Wikipedia entry on [Knight's tour](https://en.wikipedia.org/w/index.php?title=Knight%27s_tour)",
    "weight": 1.0
  },
  {
    "name": "KnightsTour:4",
    "sat": "def sat(tour: List[List[int]], m=7, n=8):\n    assert all({abs(i1 - i2), abs(j1 - j2)} == {1, 2} for [i1, j1], [i2, j2] in zip(tour, tour[1:])), 'legal moves'\n    return sorted(tour) == [[i, j] for i in range(m) for j in range(n)]  # cover every square once",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(m=7, n=8):",
    "sol_docstring": "    \"\"\"Find an (open) tour of knight moves on an m x n chess-board that visits each square once.\"\"\"",
    "sol_bodies": [
      "    # using Warnsdorff's heuristic, breaking ties randomly\n    import random\n    for seed in range(100):\n        r = random.Random(seed)\n        ans = [(0, 0)]\n        free = {(i, j) for i in range(m) for j in range(n)} - {(0, 0)}\n\n        def possible(i, j):\n            moves = [(i + s * a, j + t * b) for (a, b) in [(1, 2), (2, 1)] for s in [-1, 1] for t in [-1, 1]]\n            return [z for z in moves if z in free]\n\n        while True:\n            if not free:\n                return [[a, b] for (a, b) in ans]\n            candidates = possible(*ans[-1])\n            if not candidates:\n                break\n            ans.append(min(candidates, key=lambda z: len(possible(*z)) + r.random()))\n            free.remove(ans[-1])"
    ],
    "module": "chess.py",
    "notes": "See Wikipedia entry on [Knight's tour](https://en.wikipedia.org/w/index.php?title=Knight%27s_tour)",
    "weight": 1.0
  },
  {
    "name": "UncrossedKnightsPath:0",
    "sat": "def sat(path: List[List[int]], m=8, n=8, target=35):\n    def legal_move(m):\n        (a, b), (i, j) = m\n        return {abs(i - a), abs(j - b)} == {1, 2}\n\n    def legal_quad(m1, m2):  # non-overlapping test: parallel or bounding box has (width - 1) * (height - 1) >= 5\n        (i1, j1), (i2, j2) = m1\n        (a1, b1), (a2, b2) = m2\n        return (len({(i1, j1), (i2, j2), (a1, b1), (a2, b2)}) < 4  # adjacent edges in path, ignore\n                or (i1 - i2) * (b1 - b2) == (j1 - j2) * (a1 - a2)  # parallel\n                or (max(a1, a2, i1, i2) - min(a1, a2, i1, i2)) * (max(b1, b2, j1, j2) - min(b1, b2, j1, j2)) >= 5\n                # far\n                )\n\n    assert all(i in range(m) and j in range(n) for i, j in path), \"move off board\"\n    assert len({(i, j) for i, j in path}) == len(path), \"visited same square twice\"\n\n    moves = list(zip(path, path[1:]))\n    assert all(legal_move(m) for m in moves), \"illegal move\"\n    assert all(legal_quad(m1, m2) for m1 in moves for m2 in moves), \"intersecting move pair\"\n\n    return len(path) >= target",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(m=8, n=8, target=35):",
    "sol_docstring": "    \"\"\"Find a long (open) tour of knight moves on an m x n chess-board whose edges don't cross.\"\"\"",
    "sol_bodies": [],
    "module": "chess.py",
    "notes": "Uncrossed Knights Path (known solvable, but no solution given)\n\nThe goal of these problems is to match the nxn_records from [http://ukt.alex-black.ru/](http://ukt.alex-black.ru/)\n(accessed 2020-11-29).\n\nA more precise description is in this\n[Wikipedia article](https://en.wikipedia.org/w/index.php?title=Longest_uncrossed_knight%27s_path).",
    "weight": 1.0
  },
  {
    "name": "UncrossedKnightsPath:1",
    "sat": "def sat(path: List[List[int]], m=3, n=3, target=2):\n    def legal_move(m):\n        (a, b), (i, j) = m\n        return {abs(i - a), abs(j - b)} == {1, 2}\n\n    def legal_quad(m1, m2):  # non-overlapping test: parallel or bounding box has (width - 1) * (height - 1) >= 5\n        (i1, j1), (i2, j2) = m1\n        (a1, b1), (a2, b2) = m2\n        return (len({(i1, j1), (i2, j2), (a1, b1), (a2, b2)}) < 4  # adjacent edges in path, ignore\n                or (i1 - i2) * (b1 - b2) == (j1 - j2) * (a1 - a2)  # parallel\n                or (max(a1, a2, i1, i2) - min(a1, a2, i1, i2)) * (max(b1, b2, j1, j2) - min(b1, b2, j1, j2)) >= 5\n                # far\n                )\n\n    assert all(i in range(m) and j in range(n) for i, j in path), \"move off board\"\n    assert len({(i, j) for i, j in path}) == len(path), \"visited same square twice\"\n\n    moves = list(zip(path, path[1:]))\n    assert all(legal_move(m) for m in moves), \"illegal move\"\n    assert all(legal_quad(m1, m2) for m1 in moves for m2 in moves), \"intersecting move pair\"\n\n    return len(path) >= target",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(m=3, n=3, target=2):",
    "sol_docstring": "    \"\"\"Find a long (open) tour of knight moves on an m x n chess-board whose edges don't cross.\"\"\"",
    "sol_bodies": [],
    "module": "chess.py",
    "notes": "Uncrossed Knights Path (known solvable, but no solution given)\n\nThe goal of these problems is to match the nxn_records from [http://ukt.alex-black.ru/](http://ukt.alex-black.ru/)\n(accessed 2020-11-29).\n\nA more precise description is in this\n[Wikipedia article](https://en.wikipedia.org/w/index.php?title=Longest_uncrossed_knight%27s_path).",
    "weight": 1.0
  },
  {
    "name": "UncrossedKnightsPath:2",
    "sat": "def sat(path: List[List[int]], m=4, n=4, target=5):\n    def legal_move(m):\n        (a, b), (i, j) = m\n        return {abs(i - a), abs(j - b)} == {1, 2}\n\n    def legal_quad(m1, m2):  # non-overlapping test: parallel or bounding box has (width - 1) * (height - 1) >= 5\n        (i1, j1), (i2, j2) = m1\n        (a1, b1), (a2, b2) = m2\n        return (len({(i1, j1), (i2, j2), (a1, b1), (a2, b2)}) < 4  # adjacent edges in path, ignore\n                or (i1 - i2) * (b1 - b2) == (j1 - j2) * (a1 - a2)  # parallel\n                or (max(a1, a2, i1, i2) - min(a1, a2, i1, i2)) * (max(b1, b2, j1, j2) - min(b1, b2, j1, j2)) >= 5\n                # far\n                )\n\n    assert all(i in range(m) and j in range(n) for i, j in path), \"move off board\"\n    assert len({(i, j) for i, j in path}) == len(path), \"visited same square twice\"\n\n    moves = list(zip(path, path[1:]))\n    assert all(legal_move(m) for m in moves), \"illegal move\"\n    assert all(legal_quad(m1, m2) for m1 in moves for m2 in moves), \"intersecting move pair\"\n\n    return len(path) >= target",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(m=4, n=4, target=5):",
    "sol_docstring": "    \"\"\"Find a long (open) tour of knight moves on an m x n chess-board whose edges don't cross.\"\"\"",
    "sol_bodies": [],
    "module": "chess.py",
    "notes": "Uncrossed Knights Path (known solvable, but no solution given)\n\nThe goal of these problems is to match the nxn_records from [http://ukt.alex-black.ru/](http://ukt.alex-black.ru/)\n(accessed 2020-11-29).\n\nA more precise description is in this\n[Wikipedia article](https://en.wikipedia.org/w/index.php?title=Longest_uncrossed_knight%27s_path).",
    "weight": 1.0
  },
  {
    "name": "UncrossedKnightsPath:3",
    "sat": "def sat(path: List[List[int]], m=5, n=5, target=10):\n    def legal_move(m):\n        (a, b), (i, j) = m\n        return {abs(i - a), abs(j - b)} == {1, 2}\n\n    def legal_quad(m1, m2):  # non-overlapping test: parallel or bounding box has (width - 1) * (height - 1) >= 5\n        (i1, j1), (i2, j2) = m1\n        (a1, b1), (a2, b2) = m2\n        return (len({(i1, j1), (i2, j2), (a1, b1), (a2, b2)}) < 4  # adjacent edges in path, ignore\n                or (i1 - i2) * (b1 - b2) == (j1 - j2) * (a1 - a2)  # parallel\n                or (max(a1, a2, i1, i2) - min(a1, a2, i1, i2)) * (max(b1, b2, j1, j2) - min(b1, b2, j1, j2)) >= 5\n                # far\n                )\n\n    assert all(i in range(m) and j in range(n) for i, j in path), \"move off board\"\n    assert len({(i, j) for i, j in path}) == len(path), \"visited same square twice\"\n\n    moves = list(zip(path, path[1:]))\n    assert all(legal_move(m) for m in moves), \"illegal move\"\n    assert all(legal_quad(m1, m2) for m1 in moves for m2 in moves), \"intersecting move pair\"\n\n    return len(path) >= target",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(m=5, n=5, target=10):",
    "sol_docstring": "    \"\"\"Find a long (open) tour of knight moves on an m x n chess-board whose edges don't cross.\"\"\"",
    "sol_bodies": [],
    "module": "chess.py",
    "notes": "Uncrossed Knights Path (known solvable, but no solution given)\n\nThe goal of these problems is to match the nxn_records from [http://ukt.alex-black.ru/](http://ukt.alex-black.ru/)\n(accessed 2020-11-29).\n\nA more precise description is in this\n[Wikipedia article](https://en.wikipedia.org/w/index.php?title=Longest_uncrossed_knight%27s_path).",
    "weight": 1.0
  },
  {
    "name": "UncrossedKnightsPath:4",
    "sat": "def sat(path: List[List[int]], m=6, n=5, target=9):\n    def legal_move(m):\n        (a, b), (i, j) = m\n        return {abs(i - a), abs(j - b)} == {1, 2}\n\n    def legal_quad(m1, m2):  # non-overlapping test: parallel or bounding box has (width - 1) * (height - 1) >= 5\n        (i1, j1), (i2, j2) = m1\n        (a1, b1), (a2, b2) = m2\n        return (len({(i1, j1), (i2, j2), (a1, b1), (a2, b2)}) < 4  # adjacent edges in path, ignore\n                or (i1 - i2) * (b1 - b2) == (j1 - j2) * (a1 - a2)  # parallel\n                or (max(a1, a2, i1, i2) - min(a1, a2, i1, i2)) * (max(b1, b2, j1, j2) - min(b1, b2, j1, j2)) >= 5\n                # far\n                )\n\n    assert all(i in range(m) and j in range(n) for i, j in path), \"move off board\"\n    assert len({(i, j) for i, j in path}) == len(path), \"visited same square twice\"\n\n    moves = list(zip(path, path[1:]))\n    assert all(legal_move(m) for m in moves), \"illegal move\"\n    assert all(legal_quad(m1, m2) for m1 in moves for m2 in moves), \"intersecting move pair\"\n\n    return len(path) >= target",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(m=6, n=5, target=9):",
    "sol_docstring": "    \"\"\"Find a long (open) tour of knight moves on an m x n chess-board whose edges don't cross.\"\"\"",
    "sol_bodies": [],
    "module": "chess.py",
    "notes": "Uncrossed Knights Path (known solvable, but no solution given)\n\nThe goal of these problems is to match the nxn_records from [http://ukt.alex-black.ru/](http://ukt.alex-black.ru/)\n(accessed 2020-11-29).\n\nA more precise description is in this\n[Wikipedia article](https://en.wikipedia.org/w/index.php?title=Longest_uncrossed_knight%27s_path).",
    "weight": 1.0
  },
  {
    "name": "UNSOLVED_UncrossedKnightsPath:0",
    "sat": "def sat(path: List[List[int]], m=10, n=10, target=62):\n    def legal_move(m):\n        (a, b), (i, j) = m\n        return {abs(i - a), abs(j - b)} == {1, 2}\n\n    def legal_quad(m1, m2):  # non-overlapping test: parallel or bounding box has (width - 1) * (height - 1) >= 5\n        (i1, j1), (i2, j2) = m1\n        (a1, b1), (a2, b2) = m2\n        return (len({(i1, j1), (i2, j2), (a1, b1), (a2, b2)}) < 4  # adjacent edges in path, ignore\n                or (i1 - i2) * (b1 - b2) == (j1 - j2) * (a1 - a2)  # parallel\n                or (max(a1, a2, i1, i2) - min(a1, a2, i1, i2)) * (max(b1, b2, j1, j2) - min(b1, b2, j1, j2)) >= 5\n                # far\n                )\n\n    assert all(i in range(m) and j in range(n) for i, j in path), \"move off board\"\n    assert len({(i, j) for i, j in path}) == len(path), \"visited same square twice\"\n\n    moves = list(zip(path, path[1:]))\n    assert all(legal_move(m) for m in moves), \"illegal move\"\n    assert all(legal_quad(m1, m2) for m1 in moves for m2 in moves), \"intersecting move pair\"\n\n    return len(path) >= target",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(m=10, n=10, target=62):",
    "sol_docstring": "    \"\"\"Find a long (open) tour of knight moves on an m x n chess-board whose edges don't cross.\"\"\"",
    "sol_bodies": [],
    "module": "chess.py",
    "notes": "Uncrossed Knights Path (open problem, unsolved)\n\nSimilar to above, but the goal of these problems is to *beat* the nxn_records from\n[http://ukt.alex-black.ru/](http://ukt.alex-black.ru/)\n(accessed 2020-11-29).\n\nA more precise description is in this\n[Wikipedia article](https://en.wikipedia.org/w/index.php?title=Longest_uncrossed_knight%27s_path).",
    "weight": 1.0
  },
  {
    "name": "UNSOLVED_UncrossedKnightsPath:1",
    "sat": "def sat(path: List[List[int]], m=11, n=11, target=77):\n    def legal_move(m):\n        (a, b), (i, j) = m\n        return {abs(i - a), abs(j - b)} == {1, 2}\n\n    def legal_quad(m1, m2):  # non-overlapping test: parallel or bounding box has (width - 1) * (height - 1) >= 5\n        (i1, j1), (i2, j2) = m1\n        (a1, b1), (a2, b2) = m2\n        return (len({(i1, j1), (i2, j2), (a1, b1), (a2, b2)}) < 4  # adjacent edges in path, ignore\n                or (i1 - i2) * (b1 - b2) == (j1 - j2) * (a1 - a2)  # parallel\n                or (max(a1, a2, i1, i2) - min(a1, a2, i1, i2)) * (max(b1, b2, j1, j2) - min(b1, b2, j1, j2)) >= 5\n                # far\n                )\n\n    assert all(i in range(m) and j in range(n) for i, j in path), \"move off board\"\n    assert len({(i, j) for i, j in path}) == len(path), \"visited same square twice\"\n\n    moves = list(zip(path, path[1:]))\n    assert all(legal_move(m) for m in moves), \"illegal move\"\n    assert all(legal_quad(m1, m2) for m1 in moves for m2 in moves), \"intersecting move pair\"\n\n    return len(path) >= target",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(m=11, n=11, target=77):",
    "sol_docstring": "    \"\"\"Find a long (open) tour of knight moves on an m x n chess-board whose edges don't cross.\"\"\"",
    "sol_bodies": [],
    "module": "chess.py",
    "notes": "Uncrossed Knights Path (open problem, unsolved)\n\nSimilar to above, but the goal of these problems is to *beat* the nxn_records from\n[http://ukt.alex-black.ru/](http://ukt.alex-black.ru/)\n(accessed 2020-11-29).\n\nA more precise description is in this\n[Wikipedia article](https://en.wikipedia.org/w/index.php?title=Longest_uncrossed_knight%27s_path).",
    "weight": 1.0
  },
  {
    "name": "UNSOLVED_UncrossedKnightsPath:2",
    "sat": "def sat(path: List[List[int]], m=12, n=12, target=95):\n    def legal_move(m):\n        (a, b), (i, j) = m\n        return {abs(i - a), abs(j - b)} == {1, 2}\n\n    def legal_quad(m1, m2):  # non-overlapping test: parallel or bounding box has (width - 1) * (height - 1) >= 5\n        (i1, j1), (i2, j2) = m1\n        (a1, b1), (a2, b2) = m2\n        return (len({(i1, j1), (i2, j2), (a1, b1), (a2, b2)}) < 4  # adjacent edges in path, ignore\n                or (i1 - i2) * (b1 - b2) == (j1 - j2) * (a1 - a2)  # parallel\n                or (max(a1, a2, i1, i2) - min(a1, a2, i1, i2)) * (max(b1, b2, j1, j2) - min(b1, b2, j1, j2)) >= 5\n                # far\n                )\n\n    assert all(i in range(m) and j in range(n) for i, j in path), \"move off board\"\n    assert len({(i, j) for i, j in path}) == len(path), \"visited same square twice\"\n\n    moves = list(zip(path, path[1:]))\n    assert all(legal_move(m) for m in moves), \"illegal move\"\n    assert all(legal_quad(m1, m2) for m1 in moves for m2 in moves), \"intersecting move pair\"\n\n    return len(path) >= target",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(m=12, n=12, target=95):",
    "sol_docstring": "    \"\"\"Find a long (open) tour of knight moves on an m x n chess-board whose edges don't cross.\"\"\"",
    "sol_bodies": [],
    "module": "chess.py",
    "notes": "Uncrossed Knights Path (open problem, unsolved)\n\nSimilar to above, but the goal of these problems is to *beat* the nxn_records from\n[http://ukt.alex-black.ru/](http://ukt.alex-black.ru/)\n(accessed 2020-11-29).\n\nA more precise description is in this\n[Wikipedia article](https://en.wikipedia.org/w/index.php?title=Longest_uncrossed_knight%27s_path).",
    "weight": 1.0
  },
  {
    "name": "UNSOLVED_UncrossedKnightsPath:3",
    "sat": "def sat(path: List[List[int]], m=13, n=13, target=114):\n    def legal_move(m):\n        (a, b), (i, j) = m\n        return {abs(i - a), abs(j - b)} == {1, 2}\n\n    def legal_quad(m1, m2):  # non-overlapping test: parallel or bounding box has (width - 1) * (height - 1) >= 5\n        (i1, j1), (i2, j2) = m1\n        (a1, b1), (a2, b2) = m2\n        return (len({(i1, j1), (i2, j2), (a1, b1), (a2, b2)}) < 4  # adjacent edges in path, ignore\n                or (i1 - i2) * (b1 - b2) == (j1 - j2) * (a1 - a2)  # parallel\n                or (max(a1, a2, i1, i2) - min(a1, a2, i1, i2)) * (max(b1, b2, j1, j2) - min(b1, b2, j1, j2)) >= 5\n                # far\n                )\n\n    assert all(i in range(m) and j in range(n) for i, j in path), \"move off board\"\n    assert len({(i, j) for i, j in path}) == len(path), \"visited same square twice\"\n\n    moves = list(zip(path, path[1:]))\n    assert all(legal_move(m) for m in moves), \"illegal move\"\n    assert all(legal_quad(m1, m2) for m1 in moves for m2 in moves), \"intersecting move pair\"\n\n    return len(path) >= target",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(m=13, n=13, target=114):",
    "sol_docstring": "    \"\"\"Find a long (open) tour of knight moves on an m x n chess-board whose edges don't cross.\"\"\"",
    "sol_bodies": [],
    "module": "chess.py",
    "notes": "Uncrossed Knights Path (open problem, unsolved)\n\nSimilar to above, but the goal of these problems is to *beat* the nxn_records from\n[http://ukt.alex-black.ru/](http://ukt.alex-black.ru/)\n(accessed 2020-11-29).\n\nA more precise description is in this\n[Wikipedia article](https://en.wikipedia.org/w/index.php?title=Longest_uncrossed_knight%27s_path).",
    "weight": 1.0
  },
  {
    "name": "LZW:0",
    "sat": "def sat(seq: List[int], compressed_len=17, text=\"Hellooooooooooooooooooooo world!\"):\n    index = [chr(i) for i in range(256)]\n    pieces = [\"\"]\n    for i in seq:\n        pieces.append((pieces[-1] + pieces[-1][0]) if i == len(index) else index[i])\n        index.append(pieces[-2] + pieces[-1][0])\n    return \"\".join(pieces) == text and len(seq) <= compressed_len",
    "ans_type": "List[int]",
    "sol_header": "def sol(compressed_len=17, text=\"Hellooooooooooooooooooooo world!\"):",
    "sol_docstring": "    \"\"\"\n    Find a (short) compression that decompresses to the given string for the provided implementation of the\n    Lempel-Ziv decompression algorithm from https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch\n    \"\"\"",
    "sol_bodies": [
      "    # compressed_len is ignored\n    index = {chr(i): i for i in range(256)}\n    seq = []\n    buffer = \"\"\n    for c in text:\n        if buffer + c in index:\n            buffer += c\n            continue\n        seq.append(index[buffer])\n        index[buffer + c] = len(index) + 1\n        buffer = c\n\n    if text != \"\":\n        seq.append(index[buffer])\n\n    return seq"
    ],
    "module": "compression.py",
    "notes": "We have provided a simple version of the *decompression* algorithm of\n[Lempel-Ziv-Welch](https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch)\nso the solution is the *compression* algorithm.",
    "weight": 1.0
  },
  {
    "name": "LZW:1",
    "sat": "def sat(seq: List[int], compressed_len=0, text=\"\"):\n    index = [chr(i) for i in range(256)]\n    pieces = [\"\"]\n    for i in seq:\n        pieces.append((pieces[-1] + pieces[-1][0]) if i == len(index) else index[i])\n        index.append(pieces[-2] + pieces[-1][0])\n    return \"\".join(pieces) == text and len(seq) <= compressed_len",
    "ans_type": "List[int]",
    "sol_header": "def sol(text=\"\", compressed_len=0):",
    "sol_docstring": "    \"\"\"\n    Find a (short) compression that decompresses to the given string for the provided implementation of the\n    Lempel-Ziv decompression algorithm from https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch\n    \"\"\"",
    "sol_bodies": [
      "    # compressed_len is ignored\n    index = {chr(i): i for i in range(256)}\n    seq = []\n    buffer = \"\"\n    for c in text:\n        if buffer + c in index:\n            buffer += c\n            continue\n        seq.append(index[buffer])\n        index[buffer + c] = len(index) + 1\n        buffer = c\n\n    if text != \"\":\n        seq.append(index[buffer])\n\n    return seq"
    ],
    "module": "compression.py",
    "notes": "We have provided a simple version of the *decompression* algorithm of\n[Lempel-Ziv-Welch](https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch)\nso the solution is the *compression* algorithm.",
    "weight": 1.0
  },
  {
    "name": "LZW:2",
    "sat": "def sat(seq: List[int], compressed_len=45, text=\"cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\"):\n    index = [chr(i) for i in range(256)]\n    pieces = [\"\"]\n    for i in seq:\n        pieces.append((pieces[-1] + pieces[-1][0]) if i == len(index) else index[i])\n        index.append(pieces[-2] + pieces[-1][0])\n    return \"\".join(pieces) == text and len(seq) <= compressed_len",
    "ans_type": "List[int]",
    "sol_header": "def sol(text=\"cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\", compressed_len=45):",
    "sol_docstring": "    \"\"\"\n    Find a (short) compression that decompresses to the given string for the provided implementation of the\n    Lempel-Ziv decompression algorithm from https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch\n    \"\"\"",
    "sol_bodies": [
      "    # compressed_len is ignored\n    index = {chr(i): i for i in range(256)}\n    seq = []\n    buffer = \"\"\n    for c in text:\n        if buffer + c in index:\n            buffer += c\n            continue\n        seq.append(index[buffer])\n        index[buffer + c] = len(index) + 1\n        buffer = c\n\n    if text != \"\":\n        seq.append(index[buffer])\n\n    return seq"
    ],
    "module": "compression.py",
    "notes": "We have provided a simple version of the *decompression* algorithm of\n[Lempel-Ziv-Welch](https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch)\nso the solution is the *compression* algorithm.",
    "weight": 1.0
  },
  {
    "name": "LZW:3",
    "sat": "def sat(seq: List[int], compressed_len=154, text=\"cupewoquabipemecacichytogycykythyzydizutextojokosapysetextethilabequypagichichimipyhuquithyzuwukychycokigomylotextoquochachikalocejiwyzagodothilythetiquypirabafusubasufylejulitudosisyrahezitextoluquevy\"):\n    index = [chr(i) for i in range(256)]\n    pieces = [\"\"]\n    for i in seq:\n        pieces.append((pieces[-1] + pieces[-1][0]) if i == len(index) else index[i])\n        index.append(pieces[-2] + pieces[-1][0])\n    return \"\".join(pieces) == text and len(seq) <= compressed_len",
    "ans_type": "List[int]",
    "sol_header": "def sol(text=\"cupewoquabipemecacichytogycykythyzydizutextojokosapysetextethilabequypagichichimipyhuquithyzuwukychycokigomylotextoquochachikalocejiwyzagodothilythetiquypirabafusubasufylejulitudosisyrahezitextoluquevy\", compressed_len=154):",
    "sol_docstring": "    \"\"\"\n    Find a (short) compression that decompresses to the given string for the provided implementation of the\n    Lempel-Ziv decompression algorithm from https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch\n    \"\"\"",
    "sol_bodies": [
      "    # compressed_len is ignored\n    index = {chr(i): i for i in range(256)}\n    seq = []\n    buffer = \"\"\n    for c in text:\n        if buffer + c in index:\n            buffer += c\n            continue\n        seq.append(index[buffer])\n        index[buffer + c] = len(index) + 1\n        buffer = c\n\n    if text != \"\":\n        seq.append(index[buffer])\n\n    return seq"
    ],
    "module": "compression.py",
    "notes": "We have provided a simple version of the *decompression* algorithm of\n[Lempel-Ziv-Welch](https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch)\nso the solution is the *compression* algorithm.",
    "weight": 1.0
  },
  {
    "name": "LZW:4",
    "sat": "def sat(seq: List[int], compressed_len=2, text=\"si\"):\n    index = [chr(i) for i in range(256)]\n    pieces = [\"\"]\n    for i in seq:\n        pieces.append((pieces[-1] + pieces[-1][0]) if i == len(index) else index[i])\n        index.append(pieces[-2] + pieces[-1][0])\n    return \"\".join(pieces) == text and len(seq) <= compressed_len",
    "ans_type": "List[int]",
    "sol_header": "def sol(text=\"si\", compressed_len=2):",
    "sol_docstring": "    \"\"\"\n    Find a (short) compression that decompresses to the given string for the provided implementation of the\n    Lempel-Ziv decompression algorithm from https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch\n    \"\"\"",
    "sol_bodies": [
      "    # compressed_len is ignored\n    index = {chr(i): i for i in range(256)}\n    seq = []\n    buffer = \"\"\n    for c in text:\n        if buffer + c in index:\n            buffer += c\n            continue\n        seq.append(index[buffer])\n        index[buffer + c] = len(index) + 1\n        buffer = c\n\n    if text != \"\":\n        seq.append(index[buffer])\n\n    return seq"
    ],
    "module": "compression.py",
    "notes": "We have provided a simple version of the *decompression* algorithm of\n[Lempel-Ziv-Welch](https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch)\nso the solution is the *compression* algorithm.",
    "weight": 1.0
  },
  {
    "name": "PackingHam:0",
    "sat": "def sat(words: List[str], num=100, bits=100, dist=34):\n    assert len(words) == num and all(len(word) == bits and set(word) <= {\"0\", \"1\"} for word in words)\n    return all(sum([a != b for a, b in zip(words[i], words[j])]) >= dist for i in range(num) for j in range(i))",
    "ans_type": "List[str]",
    "sol_header": "def sol(num=100, bits=100, dist=34):",
    "sol_docstring": "    \"\"\"Pack a certain number of binary strings so that they have a minimum hamming distance between each other.\"\"\"",
    "sol_bodies": [
      "    import random  # key insight, use randomness!\n    r = random.Random(0)\n    while True:\n        seqs = [r.getrandbits(bits) for _ in range(num)]\n        if all(bin(seqs[i] ^ seqs[j]).count(\"1\") >= dist for i in range(num) for j in range(i)):\n            return [bin(s)[2:].rjust(bits, '0') for s in seqs]"
    ],
    "module": "compression.py",
    "notes": "This packing problem a [classic problem](https://en.wikipedia.org/wiki/Sphere_packing#Other_spaces)\nin coding theory.",
    "weight": 1.0
  },
  {
    "name": "PackingHam:1",
    "sat": "def sat(words: List[str], num=5, bits=81, dist=30):\n    assert len(words) == num and all(len(word) == bits and set(word) <= {\"0\", \"1\"} for word in words)\n    return all(sum([a != b for a, b in zip(words[i], words[j])]) >= dist for i in range(num) for j in range(i))",
    "ans_type": "List[str]",
    "sol_header": "def sol(num=5, bits=81, dist=30):",
    "sol_docstring": "    \"\"\"Pack a certain number of binary strings so that they have a minimum hamming distance between each other.\"\"\"",
    "sol_bodies": [
      "    import random  # key insight, use randomness!\n    r = random.Random(0)\n    while True:\n        seqs = [r.getrandbits(bits) for _ in range(num)]\n        if all(bin(seqs[i] ^ seqs[j]).count(\"1\") >= dist for i in range(num) for j in range(i)):\n            return [bin(s)[2:].rjust(bits, '0') for s in seqs]"
    ],
    "module": "compression.py",
    "notes": "This packing problem a [classic problem](https://en.wikipedia.org/wiki/Sphere_packing#Other_spaces)\nin coding theory.",
    "weight": 1.0
  },
  {
    "name": "PackingHam:2",
    "sat": "def sat(words: List[str], num=78, bits=64, dist=16):\n    assert len(words) == num and all(len(word) == bits and set(word) <= {\"0\", \"1\"} for word in words)\n    return all(sum([a != b for a, b in zip(words[i], words[j])]) >= dist for i in range(num) for j in range(i))",
    "ans_type": "List[str]",
    "sol_header": "def sol(num=78, bits=64, dist=16):",
    "sol_docstring": "    \"\"\"Pack a certain number of binary strings so that they have a minimum hamming distance between each other.\"\"\"",
    "sol_bodies": [
      "    import random  # key insight, use randomness!\n    r = random.Random(0)\n    while True:\n        seqs = [r.getrandbits(bits) for _ in range(num)]\n        if all(bin(seqs[i] ^ seqs[j]).count(\"1\") >= dist for i in range(num) for j in range(i)):\n            return [bin(s)[2:].rjust(bits, '0') for s in seqs]"
    ],
    "module": "compression.py",
    "notes": "This packing problem a [classic problem](https://en.wikipedia.org/wiki/Sphere_packing#Other_spaces)\nin coding theory.",
    "weight": 1.0
  },
  {
    "name": "PackingHam:3",
    "sat": "def sat(words: List[str], num=28, bits=11, dist=1):\n    assert len(words) == num and all(len(word) == bits and set(word) <= {\"0\", \"1\"} for word in words)\n    return all(sum([a != b for a, b in zip(words[i], words[j])]) >= dist for i in range(num) for j in range(i))",
    "ans_type": "List[str]",
    "sol_header": "def sol(num=28, bits=11, dist=1):",
    "sol_docstring": "    \"\"\"Pack a certain number of binary strings so that they have a minimum hamming distance between each other.\"\"\"",
    "sol_bodies": [
      "    import random  # key insight, use randomness!\n    r = random.Random(0)\n    while True:\n        seqs = [r.getrandbits(bits) for _ in range(num)]\n        if all(bin(seqs[i] ^ seqs[j]).count(\"1\") >= dist for i in range(num) for j in range(i)):\n            return [bin(s)[2:].rjust(bits, '0') for s in seqs]"
    ],
    "module": "compression.py",
    "notes": "This packing problem a [classic problem](https://en.wikipedia.org/wiki/Sphere_packing#Other_spaces)\nin coding theory.",
    "weight": 1.0
  },
  {
    "name": "PackingHam:4",
    "sat": "def sat(words: List[str], num=8, bits=75, dist=24):\n    assert len(words) == num and all(len(word) == bits and set(word) <= {\"0\", \"1\"} for word in words)\n    return all(sum([a != b for a, b in zip(words[i], words[j])]) >= dist for i in range(num) for j in range(i))",
    "ans_type": "List[str]",
    "sol_header": "def sol(num=8, bits=75, dist=24):",
    "sol_docstring": "    \"\"\"Pack a certain number of binary strings so that they have a minimum hamming distance between each other.\"\"\"",
    "sol_bodies": [
      "    import random  # key insight, use randomness!\n    r = random.Random(0)\n    while True:\n        seqs = [r.getrandbits(bits) for _ in range(num)]\n        if all(bin(seqs[i] ^ seqs[j]).count(\"1\") >= dist for i in range(num) for j in range(i)):\n            return [bin(s)[2:].rjust(bits, '0') for s in seqs]"
    ],
    "module": "compression.py",
    "notes": "This packing problem a [classic problem](https://en.wikipedia.org/wiki/Sphere_packing#Other_spaces)\nin coding theory.",
    "weight": 1.0
  },
  {
    "name": "Oscillators:0",
    "sat": "def sat(init: List[List[int]], period=3):\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(period=3):",
    "sol_docstring": "    \"\"\"\n    Find a pattern in Conway's Game of Life https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life that repeats\n    with a certain period https://en.wikipedia.org/wiki/Oscillator_%28cellular_automaton%29#:~:text=Game%20of%20Life\n    \"\"\"",
    "sol_bodies": [
      "    # # generate random patterns, slow solution\n    # def viz(live):\n    #     if not live:\n    #         return\n    #     a, b = min(z.real for z in live), min(z.imag for z in live)\n    #     live = {z - (a + b * 1j) for z in live}\n    #     m, n = int(max(z.real for z in live)) + 1, int(max(z.imag for z in live)) + 1\n    #     for x in range(m):\n    #         print(\"\".join(\"X\" if x + y * 1j in live else \",\" for y in range(n)))\n\n    import random\n    rand = random.Random(1)\n    # print(f\"Looking for {period}:\")\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    completes = [[x + y * 1j for x in range(n) for y in range(n)] for n in range(30)]\n\n    for _attempt in range(10 ** 5):\n        n = rand.randrange(3, 10)\n        m = rand.randrange(3, n * n)\n        live = set(rand.sample(completes[n], m))\n        if rand.randrange(2):\n            live.update([-z for z in live])\n        if rand.randrange(2):\n            live.update([z.conjugate() for z in live])\n        memory = {}\n        for step in range(period * 10):\n            key = sum((.123 - .99123j) ** z for z in live) * 10 ** 5\n            key = int(key.real), int(key.imag)\n            if key in memory:\n                if memory[key] == step - period:\n                    # print(period)\n                    # viz(live)\n                    return [[int(z.real), int(z.imag)] for z in live]\n                break\n            memory[key] = step\n            visible = {z + d for z in live for d in deltas}\n            live = {z for z in visible if sum(z + d in live for d in deltas) in range(3 - (z in live), 4)}\n\n    return None  # failed"
    ],
    "module": "conways_game_of_life.py",
    "notes": "Oscillators (including some unsolved, open problems)\n\nThis problem is *unsolved* for periods 19, 38, and 41.\n\nSee\n[discussion](https://en.wikipedia.org/wiki/Oscillator_%28cellular_automaton%29#:~:text=Game%20of%20Life )\nin Wikipedia article on Cellular Automaton Oscillators.",
    "weight": 1.0
  },
  {
    "name": "Oscillators:1",
    "sat": "def sat(init: List[List[int]], period=1):\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(period=1):",
    "sol_docstring": "    \"\"\"\n    Find a pattern in Conway's Game of Life https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life that repeats\n    with a certain period https://en.wikipedia.org/wiki/Oscillator_%28cellular_automaton%29#:~:text=Game%20of%20Life\n    \"\"\"",
    "sol_bodies": [
      "    # # generate random patterns, slow solution\n    # def viz(live):\n    #     if not live:\n    #         return\n    #     a, b = min(z.real for z in live), min(z.imag for z in live)\n    #     live = {z - (a + b * 1j) for z in live}\n    #     m, n = int(max(z.real for z in live)) + 1, int(max(z.imag for z in live)) + 1\n    #     for x in range(m):\n    #         print(\"\".join(\"X\" if x + y * 1j in live else \",\" for y in range(n)))\n\n    import random\n    rand = random.Random(1)\n    # print(f\"Looking for {period}:\")\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    completes = [[x + y * 1j for x in range(n) for y in range(n)] for n in range(30)]\n\n    for _attempt in range(10 ** 5):\n        n = rand.randrange(3, 10)\n        m = rand.randrange(3, n * n)\n        live = set(rand.sample(completes[n], m))\n        if rand.randrange(2):\n            live.update([-z for z in live])\n        if rand.randrange(2):\n            live.update([z.conjugate() for z in live])\n        memory = {}\n        for step in range(period * 10):\n            key = sum((.123 - .99123j) ** z for z in live) * 10 ** 5\n            key = int(key.real), int(key.imag)\n            if key in memory:\n                if memory[key] == step - period:\n                    # print(period)\n                    # viz(live)\n                    return [[int(z.real), int(z.imag)] for z in live]\n                break\n            memory[key] = step\n            visible = {z + d for z in live for d in deltas}\n            live = {z for z in visible if sum(z + d in live for d in deltas) in range(3 - (z in live), 4)}\n\n    return None  # failed"
    ],
    "module": "conways_game_of_life.py",
    "notes": "Oscillators (including some unsolved, open problems)\n\nThis problem is *unsolved* for periods 19, 38, and 41.\n\nSee\n[discussion](https://en.wikipedia.org/wiki/Oscillator_%28cellular_automaton%29#:~:text=Game%20of%20Life )\nin Wikipedia article on Cellular Automaton Oscillators.",
    "weight": 1.0
  },
  {
    "name": "Oscillators:2",
    "sat": "def sat(init: List[List[int]], period=2):\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(period=2):",
    "sol_docstring": "    \"\"\"\n    Find a pattern in Conway's Game of Life https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life that repeats\n    with a certain period https://en.wikipedia.org/wiki/Oscillator_%28cellular_automaton%29#:~:text=Game%20of%20Life\n    \"\"\"",
    "sol_bodies": [
      "    # # generate random patterns, slow solution\n    # def viz(live):\n    #     if not live:\n    #         return\n    #     a, b = min(z.real for z in live), min(z.imag for z in live)\n    #     live = {z - (a + b * 1j) for z in live}\n    #     m, n = int(max(z.real for z in live)) + 1, int(max(z.imag for z in live)) + 1\n    #     for x in range(m):\n    #         print(\"\".join(\"X\" if x + y * 1j in live else \",\" for y in range(n)))\n\n    import random\n    rand = random.Random(1)\n    # print(f\"Looking for {period}:\")\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    completes = [[x + y * 1j for x in range(n) for y in range(n)] for n in range(30)]\n\n    for _attempt in range(10 ** 5):\n        n = rand.randrange(3, 10)\n        m = rand.randrange(3, n * n)\n        live = set(rand.sample(completes[n], m))\n        if rand.randrange(2):\n            live.update([-z for z in live])\n        if rand.randrange(2):\n            live.update([z.conjugate() for z in live])\n        memory = {}\n        for step in range(period * 10):\n            key = sum((.123 - .99123j) ** z for z in live) * 10 ** 5\n            key = int(key.real), int(key.imag)\n            if key in memory:\n                if memory[key] == step - period:\n                    # print(period)\n                    # viz(live)\n                    return [[int(z.real), int(z.imag)] for z in live]\n                break\n            memory[key] = step\n            visible = {z + d for z in live for d in deltas}\n            live = {z for z in visible if sum(z + d in live for d in deltas) in range(3 - (z in live), 4)}\n\n    return None  # failed"
    ],
    "module": "conways_game_of_life.py",
    "notes": "Oscillators (including some unsolved, open problems)\n\nThis problem is *unsolved* for periods 19, 38, and 41.\n\nSee\n[discussion](https://en.wikipedia.org/wiki/Oscillator_%28cellular_automaton%29#:~:text=Game%20of%20Life )\nin Wikipedia article on Cellular Automaton Oscillators.",
    "weight": 1.0
  },
  {
    "name": "Oscillators:3",
    "sat": "def sat(init: List[List[int]], period=4):\n    target = {x + y * 1j for x, y in init}  # complex numbers encode live cells\n\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    live = target\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        if live == target:\n            return t + 1 == period",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(period=4):",
    "sol_docstring": "    \"\"\"\n    Find a pattern in Conway's Game of Life https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life that repeats\n    with a certain period https://en.wikipedia.org/wiki/Oscillator_%28cellular_automaton%29#:~:text=Game%20of%20Life\n    \"\"\"",
    "sol_bodies": [],
    "module": "conways_game_of_life.py",
    "notes": "Oscillators (including some unsolved, open problems)\n\nThis problem is *unsolved* for periods 19, 38, and 41.\n\nSee\n[discussion](https://en.wikipedia.org/wiki/Oscillator_%28cellular_automaton%29#:~:text=Game%20of%20Life )\nin Wikipedia article on Cellular Automaton Oscillators.",
    "weight": 1.0
  },
  {
    "name": "ReverseLifeStep:0",
    "sat": "def sat(position: List[List[int]], target=[[1, 3], [1, 4], [2, 5]]):\n    live = {x + y * 1j for x, y in position}  # complex numbers encode live cells\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    visible = {z + d for z in live for d in deltas}\n    next_step = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n    return next_step == {x + y * 1j for x, y in target}",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(target=[[1, 3], [1, 4], [2, 5]]):",
    "sol_docstring": "    \"\"\"\n    Given a target pattern in Conway's Game of Life (see https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life ),\n    specified by [x,y] coordinates of live cells, find a position that leads to that pattern on the next step.\n    \"\"\"",
    "sol_bodies": [
      "    # fixed-temperature MC optimization\n    TEMP = 0.05\n    import random\n    rand = random.Random(0)  # set seed but don't interfere with other random uses\n    target = {x + y * 1j for x, y in target}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    def distance(live):\n        visible = {z + d for z in live for d in deltas}\n        next_step = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        return len(next_step.symmetric_difference(target))\n\n    for step in range(10 ** 5):\n        if step % 10000 == 0:\n            pos = target.copy()  # start with the target position\n            cur_dist = distance(pos)\n\n        if cur_dist == 0:\n            return [[int(z.real), int(z.imag)] for z in pos]\n        z = rand.choice([z + d for z in pos.union(target) for d in deltas])\n        dist = distance(pos.symmetric_difference({z}))\n        if rand.random() <= TEMP ** (dist - cur_dist):\n            pos.symmetric_difference_update({z})\n            cur_dist = dist\n    print('Failed', len(target), step)"
    ],
    "module": "conways_game_of_life.py",
    "notes": "Unsolvable for \"Garden of Eden\" positions, but we only generate solvable examples",
    "weight": 1.0
  },
  {
    "name": "ReverseLifeStep:1",
    "sat": "def sat(position: List[List[int]], target=[]):\n    live = {x + y * 1j for x, y in position}  # complex numbers encode live cells\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    visible = {z + d for z in live for d in deltas}\n    next_step = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n    return next_step == {x + y * 1j for x, y in target}",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(target=[]):",
    "sol_docstring": "    \"\"\"\n    Given a target pattern in Conway's Game of Life (see https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life ),\n    specified by [x,y] coordinates of live cells, find a position that leads to that pattern on the next step.\n    \"\"\"",
    "sol_bodies": [
      "    # fixed-temperature MC optimization\n    TEMP = 0.05\n    import random\n    rand = random.Random(0)  # set seed but don't interfere with other random uses\n    target = {x + y * 1j for x, y in target}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    def distance(live):\n        visible = {z + d for z in live for d in deltas}\n        next_step = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        return len(next_step.symmetric_difference(target))\n\n    for step in range(10 ** 5):\n        if step % 10000 == 0:\n            pos = target.copy()  # start with the target position\n            cur_dist = distance(pos)\n\n        if cur_dist == 0:\n            return [[int(z.real), int(z.imag)] for z in pos]\n        z = rand.choice([z + d for z in pos.union(target) for d in deltas])\n        dist = distance(pos.symmetric_difference({z}))\n        if rand.random() <= TEMP ** (dist - cur_dist):\n            pos.symmetric_difference_update({z})\n            cur_dist = dist\n    print('Failed', len(target), step)"
    ],
    "module": "conways_game_of_life.py",
    "notes": "Unsolvable for \"Garden of Eden\" positions, but we only generate solvable examples",
    "weight": 1.0
  },
  {
    "name": "ReverseLifeStep:2",
    "sat": "def sat(position: List[List[int]], target=[[-1, -4], [-1, -3], [0, -5], [0, -4], [1, -3]]):\n    live = {x + y * 1j for x, y in position}  # complex numbers encode live cells\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    visible = {z + d for z in live for d in deltas}\n    next_step = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n    return next_step == {x + y * 1j for x, y in target}",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(target=[[-1, -4], [-1, -3], [0, -5], [0, -4], [1, -3]]):",
    "sol_docstring": "    \"\"\"\n    Given a target pattern in Conway's Game of Life (see https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life ),\n    specified by [x,y] coordinates of live cells, find a position that leads to that pattern on the next step.\n    \"\"\"",
    "sol_bodies": [
      "    # fixed-temperature MC optimization\n    TEMP = 0.05\n    import random\n    rand = random.Random(0)  # set seed but don't interfere with other random uses\n    target = {x + y * 1j for x, y in target}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    def distance(live):\n        visible = {z + d for z in live for d in deltas}\n        next_step = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        return len(next_step.symmetric_difference(target))\n\n    for step in range(10 ** 5):\n        if step % 10000 == 0:\n            pos = target.copy()  # start with the target position\n            cur_dist = distance(pos)\n\n        if cur_dist == 0:\n            return [[int(z.real), int(z.imag)] for z in pos]\n        z = rand.choice([z + d for z in pos.union(target) for d in deltas])\n        dist = distance(pos.symmetric_difference({z}))\n        if rand.random() <= TEMP ** (dist - cur_dist):\n            pos.symmetric_difference_update({z})\n            cur_dist = dist\n    print('Failed', len(target), step)"
    ],
    "module": "conways_game_of_life.py",
    "notes": "Unsolvable for \"Garden of Eden\" positions, but we only generate solvable examples",
    "weight": 1.0
  },
  {
    "name": "ReverseLifeStep:3",
    "sat": "def sat(position: List[List[int]], target=[[3, 3]]):\n    live = {x + y * 1j for x, y in position}  # complex numbers encode live cells\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    visible = {z + d for z in live for d in deltas}\n    next_step = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n    return next_step == {x + y * 1j for x, y in target}",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(target=[[3, 3]]):",
    "sol_docstring": "    \"\"\"\n    Given a target pattern in Conway's Game of Life (see https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life ),\n    specified by [x,y] coordinates of live cells, find a position that leads to that pattern on the next step.\n    \"\"\"",
    "sol_bodies": [
      "    # fixed-temperature MC optimization\n    TEMP = 0.05\n    import random\n    rand = random.Random(0)  # set seed but don't interfere with other random uses\n    target = {x + y * 1j for x, y in target}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    def distance(live):\n        visible = {z + d for z in live for d in deltas}\n        next_step = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        return len(next_step.symmetric_difference(target))\n\n    for step in range(10 ** 5):\n        if step % 10000 == 0:\n            pos = target.copy()  # start with the target position\n            cur_dist = distance(pos)\n\n        if cur_dist == 0:\n            return [[int(z.real), int(z.imag)] for z in pos]\n        z = rand.choice([z + d for z in pos.union(target) for d in deltas])\n        dist = distance(pos.symmetric_difference({z}))\n        if rand.random() <= TEMP ** (dist - cur_dist):\n            pos.symmetric_difference_update({z})\n            cur_dist = dist\n    print('Failed', len(target), step)"
    ],
    "module": "conways_game_of_life.py",
    "notes": "Unsolvable for \"Garden of Eden\" positions, but we only generate solvable examples",
    "weight": 1.0
  },
  {
    "name": "ReverseLifeStep:4",
    "sat": "def sat(position: List[List[int]], target=[[1, -4]]):\n    live = {x + y * 1j for x, y in position}  # complex numbers encode live cells\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n    visible = {z + d for z in live for d in deltas}\n    next_step = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n    return next_step == {x + y * 1j for x, y in target}",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(target=[[1, -4]]):",
    "sol_docstring": "    \"\"\"\n    Given a target pattern in Conway's Game of Life (see https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life ),\n    specified by [x,y] coordinates of live cells, find a position that leads to that pattern on the next step.\n    \"\"\"",
    "sol_bodies": [
      "    # fixed-temperature MC optimization\n    TEMP = 0.05\n    import random\n    rand = random.Random(0)  # set seed but don't interfere with other random uses\n    target = {x + y * 1j for x, y in target}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    def distance(live):\n        visible = {z + d for z in live for d in deltas}\n        next_step = {z for z in visible if sum(z + d in live for d in deltas) in ([2, 3] if z in live else [3])}\n        return len(next_step.symmetric_difference(target))\n\n    for step in range(10 ** 5):\n        if step % 10000 == 0:\n            pos = target.copy()  # start with the target position\n            cur_dist = distance(pos)\n\n        if cur_dist == 0:\n            return [[int(z.real), int(z.imag)] for z in pos]\n        z = rand.choice([z + d for z in pos.union(target) for d in deltas])\n        dist = distance(pos.symmetric_difference({z}))\n        if rand.random() <= TEMP ** (dist - cur_dist):\n            pos.symmetric_difference_update({z})\n            cur_dist = dist\n    print('Failed', len(target), step)"
    ],
    "module": "conways_game_of_life.py",
    "notes": "Unsolvable for \"Garden of Eden\" positions, but we only generate solvable examples",
    "weight": 1.0
  },
  {
    "name": "Spaceship:0",
    "sat": "def sat(init: List[List[int]], period=4):\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(period=4):",
    "sol_docstring": "    \"\"\"\n    Find a \"spaceship\" (see https://en.wikipedia.org/wiki/Spaceship_%28cellular_automaton%29 ) in Conway's\n    Game of Life see https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life with a certain period\n    \"\"\"",
    "sol_bodies": [],
    "module": "conways_game_of_life.py",
    "notes": "Spaceship (including *unsolved*, open problems)\n\nFind a [spaceship](https://en.wikipedia.org/wiki/Spaceship_%28cellular_automaton%29) in\n[Conway's Game of Life](https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life)\nwith a certain period.\n\nThis is an *unsolved* problem for periods 33, 34.",
    "weight": 1.0
  },
  {
    "name": "Spaceship:1",
    "sat": "def sat(init: List[List[int]], period=2):\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(period=2):",
    "sol_docstring": "    \"\"\"\n    Find a \"spaceship\" (see https://en.wikipedia.org/wiki/Spaceship_%28cellular_automaton%29 ) in Conway's\n    Game of Life see https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life with a certain period\n    \"\"\"",
    "sol_bodies": [],
    "module": "conways_game_of_life.py",
    "notes": "Spaceship (including *unsolved*, open problems)\n\nFind a [spaceship](https://en.wikipedia.org/wiki/Spaceship_%28cellular_automaton%29) in\n[Conway's Game of Life](https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life)\nwith a certain period.\n\nThis is an *unsolved* problem for periods 33, 34.",
    "weight": 1.0
  },
  {
    "name": "Spaceship:2",
    "sat": "def sat(init: List[List[int]], period=3):\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(period=3):",
    "sol_docstring": "    \"\"\"\n    Find a \"spaceship\" (see https://en.wikipedia.org/wiki/Spaceship_%28cellular_automaton%29 ) in Conway's\n    Game of Life see https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life with a certain period\n    \"\"\"",
    "sol_bodies": [],
    "module": "conways_game_of_life.py",
    "notes": "Spaceship (including *unsolved*, open problems)\n\nFind a [spaceship](https://en.wikipedia.org/wiki/Spaceship_%28cellular_automaton%29) in\n[Conway's Game of Life](https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life)\nwith a certain period.\n\nThis is an *unsolved* problem for periods 33, 34.",
    "weight": 1.0
  },
  {
    "name": "Spaceship:3",
    "sat": "def sat(init: List[List[int]], period=5):\n    live = {x + y * 1j for x, y in init}  # use complex numbers\n    init_tot = sum(live)\n    target = {z * len(live) - init_tot for z in live}\n    deltas = (1j, -1j, 1, -1, 1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j)\n\n    for t in range(period):\n        visible = {z + d for z in live for d in deltas}\n        live = {z for z in visible if 3 - (z in live) <= sum(z + d in live for d in deltas) <= 3}\n        tot = sum(live)\n        if {z * len(live) - tot for z in live} == target:\n            return t + 1 == period and tot != init_tot",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(period=5):",
    "sol_docstring": "    \"\"\"\n    Find a \"spaceship\" (see https://en.wikipedia.org/wiki/Spaceship_%28cellular_automaton%29 ) in Conway's\n    Game of Life see https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life with a certain period\n    \"\"\"",
    "sol_bodies": [],
    "module": "conways_game_of_life.py",
    "notes": "Spaceship (including *unsolved*, open problems)\n\nFind a [spaceship](https://en.wikipedia.org/wiki/Spaceship_%28cellular_automaton%29) in\n[Conway's Game of Life](https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life)\nwith a certain period.\n\nThis is an *unsolved* problem for periods 33, 34.",
    "weight": 1.0
  },
  {
    "name": "Nim:0",
    "sat": "def sat(moves: List[List[int]], initial_state=[5, 9, 3, 11, 18, 25, 1, 2, 4, 1]):\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    state = initial_state[:]  # copy\n    for i, n in moves:\n        assert 0 < n <= state[i], \"Illegal move\"\n        state[i] -= n\n        if set(state) == {0}:\n            return True  # you won!\n        assert any(state), \"You lost!\"\n        bot_move()",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(initial_state=[5, 9, 3, 11, 18, 25, 1, 2, 4, 1]):",
    "sol_docstring": "    \"\"\"\n    Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\n    removing one or more objects from a single non-empty heap. The player who takes the last object wins.\n    - initial_state is list of numbers of objects in each heap\n    - moves is a list of your moves: [heap, number of objects to take]\n    - you play first\n    \"\"\"",
    "sol_bodies": [
      "\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()"
    ],
    "module": "games.py",
    "notes": "Compute optimal play for the classic two-player game [Nim](https://en.wikipedia.org/wiki/Nim)\n\nNim has an elegant theory for optimal play based on the xor of the bits in the heaps.\n\nInstead of writing a program that plays the game interactively (since interaction is not allowed), we require\nthem to determine winning states or beat a certain opponent.",
    "weight": 10.0
  },
  {
    "name": "Nim:1",
    "sat": "def sat(moves: List[List[int]], initial_state=[4, 1, 8, 0, 5, 9, 2, 0]):\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    state = initial_state[:]  # copy\n    for i, n in moves:\n        assert 0 < n <= state[i], \"Illegal move\"\n        state[i] -= n\n        if set(state) == {0}:\n            return True  # you won!\n        assert any(state), \"You lost!\"\n        bot_move()",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(initial_state=[4, 1, 8, 0, 5, 9, 2, 0]):",
    "sol_docstring": "    \"\"\"\n    Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\n    removing one or more objects from a single non-empty heap. The player who takes the last object wins.\n    - initial_state is list of numbers of objects in each heap\n    - moves is a list of your moves: [heap, number of objects to take]\n    - you play first\n    \"\"\"",
    "sol_bodies": [
      "\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()"
    ],
    "module": "games.py",
    "notes": "Compute optimal play for the classic two-player game [Nim](https://en.wikipedia.org/wiki/Nim)\n\nNim has an elegant theory for optimal play based on the xor of the bits in the heaps.\n\nInstead of writing a program that plays the game interactively (since interaction is not allowed), we require\nthem to determine winning states or beat a certain opponent.",
    "weight": 10.0
  },
  {
    "name": "Nim:2",
    "sat": "def sat(moves: List[List[int]], initial_state=[2, 5, 3, 7, 0]):\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    state = initial_state[:]  # copy\n    for i, n in moves:\n        assert 0 < n <= state[i], \"Illegal move\"\n        state[i] -= n\n        if set(state) == {0}:\n            return True  # you won!\n        assert any(state), \"You lost!\"\n        bot_move()",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(initial_state=[2, 5, 3, 7, 0]):",
    "sol_docstring": "    \"\"\"\n    Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\n    removing one or more objects from a single non-empty heap. The player who takes the last object wins.\n    - initial_state is list of numbers of objects in each heap\n    - moves is a list of your moves: [heap, number of objects to take]\n    - you play first\n    \"\"\"",
    "sol_bodies": [
      "\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()"
    ],
    "module": "games.py",
    "notes": "Compute optimal play for the classic two-player game [Nim](https://en.wikipedia.org/wiki/Nim)\n\nNim has an elegant theory for optimal play based on the xor of the bits in the heaps.\n\nInstead of writing a program that plays the game interactively (since interaction is not allowed), we require\nthem to determine winning states or beat a certain opponent.",
    "weight": 1.0
  },
  {
    "name": "Nim:3",
    "sat": "def sat(moves: List[List[int]], initial_state=[3, 3, 2, 2, 3, 8]):\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    state = initial_state[:]  # copy\n    for i, n in moves:\n        assert 0 < n <= state[i], \"Illegal move\"\n        state[i] -= n\n        if set(state) == {0}:\n            return True  # you won!\n        assert any(state), \"You lost!\"\n        bot_move()",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(initial_state=[3, 3, 2, 2, 3, 8]):",
    "sol_docstring": "    \"\"\"\n    Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\n    removing one or more objects from a single non-empty heap. The player who takes the last object wins.\n    - initial_state is list of numbers of objects in each heap\n    - moves is a list of your moves: [heap, number of objects to take]\n    - you play first\n    \"\"\"",
    "sol_bodies": [
      "\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()"
    ],
    "module": "games.py",
    "notes": "Compute optimal play for the classic two-player game [Nim](https://en.wikipedia.org/wiki/Nim)\n\nNim has an elegant theory for optimal play based on the xor of the bits in the heaps.\n\nInstead of writing a program that plays the game interactively (since interaction is not allowed), we require\nthem to determine winning states or beat a certain opponent.",
    "weight": 10.0
  },
  {
    "name": "Nim:4",
    "sat": "def sat(moves: List[List[int]], initial_state=[5, 8, 3, 0]):\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    state = initial_state[:]  # copy\n    for i, n in moves:\n        assert 0 < n <= state[i], \"Illegal move\"\n        state[i] -= n\n        if set(state) == {0}:\n            return True  # you won!\n        assert any(state), \"You lost!\"\n        bot_move()",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(initial_state=[5, 8, 3, 0]):",
    "sol_docstring": "    \"\"\"\n    Beat a bot at Nim, a two-player game involving a number of heaps of objects. Players alternate, in each turn\n    removing one or more objects from a single non-empty heap. The player who takes the last object wins.\n    - initial_state is list of numbers of objects in each heap\n    - moves is a list of your moves: [heap, number of objects to take]\n    - you play first\n    \"\"\"",
    "sol_bodies": [
      "\n    state = initial_state[:]\n    moves = []\n\n    def bot_move():  # bot takes objects from the largest heap to make it match the second largest heap\n        vals = sorted(state, reverse=True)\n        i_largest = state.index(vals[0])  # largest heap\n        state[i_largest] -= max(vals[0] - vals[1], 1)  # must take some, take 1 in case of tie\n\n    def losing(h):  # return True if h is a losing state\n        xor = 0\n        for i in h:\n            xor ^= i\n        return xor == 0\n\n    def optimal_move():\n        assert not losing(state)\n        for i in range(len(state)):\n            for n in range(1, state[i] + 1):\n                state[i] -= n\n                if losing(state):\n                    moves.append([i, n])\n                    return\n                state[i] += n\n        assert False, \"Shouldn't reach hear\"\n\n    while True:\n        optimal_move()\n        if max(state) == 0:\n            return moves\n        bot_move()"
    ],
    "module": "games.py",
    "notes": "Compute optimal play for the classic two-player game [Nim](https://en.wikipedia.org/wiki/Nim)\n\nNim has an elegant theory for optimal play based on the xor of the bits in the heaps.\n\nInstead of writing a program that plays the game interactively (since interaction is not allowed), we require\nthem to determine winning states or beat a certain opponent.",
    "weight": 1.0
  },
  {
    "name": "Mastermind:0",
    "sat": "def sat(transcripts: List[str], max_moves=10):\n    COLORS = \"ABCDEF\"\n\n    def helper(secret: str, transcript=\"\"):\n        if transcript.count(\"\\n\") == max_moves:\n            return False\n        guess = min([t for t in transcripts if t.startswith(transcript)], key=len)[-4:]\n        if guess == secret:\n            return True\n        assert all(g in COLORS for g in guess)\n        perfect = {c: sum([g == s == c for g, s in zip(guess, secret)]) for c in COLORS}\n        almost = sum(min(guess.count(c), secret.count(c)) - perfect[c] for c in COLORS)\n        return helper(secret, transcript + f\"{guess} {sum(perfect.values())}{almost}\\n\")\n\n    return all(helper(r + s + t + u) for r in COLORS for s in COLORS for t in COLORS for u in COLORS)",
    "ans_type": "List[str]",
    "sol_header": "def sol(max_moves=10):",
    "sol_docstring": "    \"\"\"\n    Come up with a winning strategy for Mastermind in max_moves moves. Colors are represented by the letters A-F.\n    The solution representation is as follows.\n    A transcript is a string describing the game so far. It consists of rows separated by newlines.\n    Each row has 4 letters A-F followed by a space and then two numbers indicating how many are exactly right\n    and how many are right but in the wrong location. A sample transcript is as follows:\n    AABB 11\n    ABCD 21\n    ABDC\n\n    This is the transcript as the game is in progress. The complete transcript might be:\n    AABB 11\n    ABCD 21\n    ABDC 30\n    ABDE 40\n\n    A winning strategy is described by a list of transcripts to visit. The next guess can be determined from\n    those partial transcripts.\n    \"\"\"",
    "sol_bodies": [
      "    COLORS = \"ABCDEF\"\n\n    transcripts = []\n\n    ALL = [r + s + t + u for r in COLORS for s in COLORS for t in COLORS for u in COLORS]\n\n    def score(secret, guess):\n        perfect = {c: sum([g == s == c for g, s in zip(guess, secret)]) for c in COLORS}\n        almost = sum(min(guess.count(c), secret.count(c)) - perfect[c] for c in COLORS)\n        return f\"{sum(perfect.values())}{almost}\"\n\n    def mastermind(transcript=\"AABB\", feasible=ALL):  # mastermind moves\n        transcripts.append(transcript)\n        assert transcript.count(\"\\n\") <= max_moves\n        guess = transcript[-4:]\n        feasibles = {}\n        for secret in feasible:\n            scr = score(secret, guess)\n            if scr not in feasibles:\n                feasibles[scr] = []\n            feasibles[scr].append(secret)\n        for scr, secrets in feasibles.items():\n            if scr != \"40\":\n                guesser(transcript + f\" {scr}\\n\", secrets)\n\n    def guesser(transcript, feasible):  # guesser moves\n        def max_ambiguity(guess):\n            by_score = {}\n            for secret2 in feasible:\n                scr = score(secret2, guess)\n                if scr not in by_score:\n                    by_score[scr] = 0\n                by_score[scr] += 1\n            # for OPTIMAL solution, use return max(by_score.values()) + 0.5 * (guess not in feasible) instead of:\n            return max(by_score.values())\n\n        # for optimal solution use guess = min(ALL, key=max_ambiguity) instead of:\n        guess = min(feasible, key=max_ambiguity)\n\n        mastermind(transcript + guess, feasible)\n\n    mastermind()\n\n    return transcripts"
    ],
    "module": "games.py",
    "notes": "Compute a strategy for winning in [mastermind](https://en.wikipedia.org/wiki/Mastermind_%28board_game%29)\nin a given number of guesses.\n\nInstead of writing a program that plays the game interactively (since interaction is not allowed), we require\nthem to provide a provable winning game tree.",
    "weight": 10.0
  },
  {
    "name": "Mastermind:1",
    "sat": "def sat(transcripts: List[str], max_moves=8):\n    COLORS = \"ABCDEF\"\n\n    def helper(secret: str, transcript=\"\"):\n        if transcript.count(\"\\n\") == max_moves:\n            return False\n        guess = min([t for t in transcripts if t.startswith(transcript)], key=len)[-4:]\n        if guess == secret:\n            return True\n        assert all(g in COLORS for g in guess)\n        perfect = {c: sum([g == s == c for g, s in zip(guess, secret)]) for c in COLORS}\n        almost = sum(min(guess.count(c), secret.count(c)) - perfect[c] for c in COLORS)\n        return helper(secret, transcript + f\"{guess} {sum(perfect.values())}{almost}\\n\")\n\n    return all(helper(r + s + t + u) for r in COLORS for s in COLORS for t in COLORS for u in COLORS)",
    "ans_type": "List[str]",
    "sol_header": "def sol(max_moves=8):",
    "sol_docstring": "    \"\"\"\n    Come up with a winning strategy for Mastermind in max_moves moves. Colors are represented by the letters A-F.\n    The solution representation is as follows.\n    A transcript is a string describing the game so far. It consists of rows separated by newlines.\n    Each row has 4 letters A-F followed by a space and then two numbers indicating how many are exactly right\n    and how many are right but in the wrong location. A sample transcript is as follows:\n    AABB 11\n    ABCD 21\n    ABDC\n\n    This is the transcript as the game is in progress. The complete transcript might be:\n    AABB 11\n    ABCD 21\n    ABDC 30\n    ABDE 40\n\n    A winning strategy is described by a list of transcripts to visit. The next guess can be determined from\n    those partial transcripts.\n    \"\"\"",
    "sol_bodies": [
      "    COLORS = \"ABCDEF\"\n\n    transcripts = []\n\n    ALL = [r + s + t + u for r in COLORS for s in COLORS for t in COLORS for u in COLORS]\n\n    def score(secret, guess):\n        perfect = {c: sum([g == s == c for g, s in zip(guess, secret)]) for c in COLORS}\n        almost = sum(min(guess.count(c), secret.count(c)) - perfect[c] for c in COLORS)\n        return f\"{sum(perfect.values())}{almost}\"\n\n    def mastermind(transcript=\"AABB\", feasible=ALL):  # mastermind moves\n        transcripts.append(transcript)\n        assert transcript.count(\"\\n\") <= max_moves\n        guess = transcript[-4:]\n        feasibles = {}\n        for secret in feasible:\n            scr = score(secret, guess)\n            if scr not in feasibles:\n                feasibles[scr] = []\n            feasibles[scr].append(secret)\n        for scr, secrets in feasibles.items():\n            if scr != \"40\":\n                guesser(transcript + f\" {scr}\\n\", secrets)\n\n    def guesser(transcript, feasible):  # guesser moves\n        def max_ambiguity(guess):\n            by_score = {}\n            for secret2 in feasible:\n                scr = score(secret2, guess)\n                if scr not in by_score:\n                    by_score[scr] = 0\n                by_score[scr] += 1\n            # for OPTIMAL solution, use return max(by_score.values()) + 0.5 * (guess not in feasible) instead of:\n            return max(by_score.values())\n\n        # for optimal solution use guess = min(ALL, key=max_ambiguity) instead of:\n        guess = min(feasible, key=max_ambiguity)\n\n        mastermind(transcript + guess, feasible)\n\n    mastermind()\n\n    return transcripts"
    ],
    "module": "games.py",
    "notes": "Compute a strategy for winning in [mastermind](https://en.wikipedia.org/wiki/Mastermind_%28board_game%29)\nin a given number of guesses.\n\nInstead of writing a program that plays the game interactively (since interaction is not allowed), we require\nthem to provide a provable winning game tree.",
    "weight": 14.0
  },
  {
    "name": "Mastermind:2",
    "sat": "def sat(transcripts: List[str], max_moves=6):\n    COLORS = \"ABCDEF\"\n\n    def helper(secret: str, transcript=\"\"):\n        if transcript.count(\"\\n\") == max_moves:\n            return False\n        guess = min([t for t in transcripts if t.startswith(transcript)], key=len)[-4:]\n        if guess == secret:\n            return True\n        assert all(g in COLORS for g in guess)\n        perfect = {c: sum([g == s == c for g, s in zip(guess, secret)]) for c in COLORS}\n        almost = sum(min(guess.count(c), secret.count(c)) - perfect[c] for c in COLORS)\n        return helper(secret, transcript + f\"{guess} {sum(perfect.values())}{almost}\\n\")\n\n    return all(helper(r + s + t + u) for r in COLORS for s in COLORS for t in COLORS for u in COLORS)",
    "ans_type": "List[str]",
    "sol_header": "def sol(max_moves=6):",
    "sol_docstring": "    \"\"\"\n    Come up with a winning strategy for Mastermind in max_moves moves. Colors are represented by the letters A-F.\n    The solution representation is as follows.\n    A transcript is a string describing the game so far. It consists of rows separated by newlines.\n    Each row has 4 letters A-F followed by a space and then two numbers indicating how many are exactly right\n    and how many are right but in the wrong location. A sample transcript is as follows:\n    AABB 11\n    ABCD 21\n    ABDC\n\n    This is the transcript as the game is in progress. The complete transcript might be:\n    AABB 11\n    ABCD 21\n    ABDC 30\n    ABDE 40\n\n    A winning strategy is described by a list of transcripts to visit. The next guess can be determined from\n    those partial transcripts.\n    \"\"\"",
    "sol_bodies": [
      "    COLORS = \"ABCDEF\"\n\n    transcripts = []\n\n    ALL = [r + s + t + u for r in COLORS for s in COLORS for t in COLORS for u in COLORS]\n\n    def score(secret, guess):\n        perfect = {c: sum([g == s == c for g, s in zip(guess, secret)]) for c in COLORS}\n        almost = sum(min(guess.count(c), secret.count(c)) - perfect[c] for c in COLORS)\n        return f\"{sum(perfect.values())}{almost}\"\n\n    def mastermind(transcript=\"AABB\", feasible=ALL):  # mastermind moves\n        transcripts.append(transcript)\n        assert transcript.count(\"\\n\") <= max_moves\n        guess = transcript[-4:]\n        feasibles = {}\n        for secret in feasible:\n            scr = score(secret, guess)\n            if scr not in feasibles:\n                feasibles[scr] = []\n            feasibles[scr].append(secret)\n        for scr, secrets in feasibles.items():\n            if scr != \"40\":\n                guesser(transcript + f\" {scr}\\n\", secrets)\n\n    def guesser(transcript, feasible):  # guesser moves\n        def max_ambiguity(guess):\n            by_score = {}\n            for secret2 in feasible:\n                scr = score(secret2, guess)\n                if scr not in by_score:\n                    by_score[scr] = 0\n                by_score[scr] += 1\n            # for OPTIMAL solution, use return max(by_score.values()) + 0.5 * (guess not in feasible) instead of:\n            return max(by_score.values())\n\n        # for optimal solution use guess = min(ALL, key=max_ambiguity) instead of:\n        guess = min(feasible, key=max_ambiguity)\n\n        mastermind(transcript + guess, feasible)\n\n    mastermind()\n\n    return transcripts"
    ],
    "module": "games.py",
    "notes": "Compute a strategy for winning in [mastermind](https://en.wikipedia.org/wiki/Mastermind_%28board_game%29)\nin a given number of guesses.\n\nInstead of writing a program that plays the game interactively (since interaction is not allowed), we require\nthem to provide a provable winning game tree.",
    "weight": 18.0
  },
  {
    "name": "TicTacToeX:0",
    "sat": "def sat(good_boards: List[str]):\n    board_bit_reps = {tuple(sum(1 << i for i in range(9) if b[i] == c) for c in \"XO\") for b in good_boards}\n    win = [any(i & w == w for w in [7, 56, 73, 84, 146, 273, 292, 448]) for i in range(512)]\n\n    def tie(x, o):  # returns True if X has a forced tie/win assuming it's X's turn to move.\n        x |= 1 << [i for i in range(9) if (x | (1 << i), o) in board_bit_reps][0]\n        return not win[o] and (win[x] or all((x | o) & (1 << i) or tie(x, o | (1 << i)) for i in range(9)))\n\n    return tie(0, 0)",
    "ans_type": "List[str]",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"\n    Compute a strategy for X (first player) in tic-tac-toe that guarantees a tie. That is a strategy for X that,\n    no matter what the opponent does, X does not lose.\n\n    A board is represented as a 9-char string like an X in the middle would be \"....X....\" and a\n    move is an integer 0-8. The answer is a list of \"good boards\" that X aims for, so no matter what O does there\n    is always good board that X can get to with a single move.\n    \"\"\"",
    "sol_bodies": [
      "    win = [any(i & w == w for w in [7, 56, 73, 84, 146, 273, 292, 448]) for i in range(512)]  # 9-bit representation\n\n    good_boards = []\n\n    def x_move(x, o):  # returns True if x wins or ties, x's turn to move\n        if win[o]:\n            return False\n        if x | o == 511:\n            return True\n        for i in range(9):\n            if (x | o) & (1 << i) == 0 and o_move(x | (1 << i), o):\n                good_boards.append(\"\".join(\".XO\"[((x >> j) & 1) + 2 * ((o >> j) & 1) + (i == j)] for j in range(9)))\n                return True\n        return False  # O wins\n\n    def o_move(x, o):  # returns True if x wins or ties, x's turn to move\n        if win[x] or x | o == 511:  # full board\n            return True\n        for i in range(9):\n            if (x | o) & (1 << i) == 0 and not x_move(x, o | (1 << i)):\n                return False\n        return True  # O wins\n\n    res = x_move(0, 0)\n    assert res\n\n    return good_boards"
    ],
    "module": "games.py",
    "notes": "Since we don't have interaction, this problem asks for a full tie-guranteeing strategy.",
    "weight": 1.0
  },
  {
    "name": "TicTacToeO:0",
    "sat": "def sat(good_boards: List[str]):\n    board_bit_reps = {tuple(sum(1 << i for i in range(9) if b[i] == c) for c in \"XO\") for b in good_boards}\n    win = [any(i & w == w for w in [7, 56, 73, 84, 146, 273, 292, 448]) for i in range(512)]\n\n    def tie(x, o):  # returns True if O has a forced tie/win. It's O's turn to move.\n        if o | x != 511:  # complete board\n            o |= 1 << [i for i in range(9) if (x, o | (1 << i)) in board_bit_reps][0]\n        return not win[x] and (win[o] or all((x | o) & (1 << i) or tie(x | (1 << i), o) for i in range(9)))\n\n    return all(tie(1 << i, 0) for i in range(9))",
    "ans_type": "List[str]",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"\n    Compute a strategy for O (second player) in tic-tac-toe that guarantees a tie. That is a strategy for O that,\n    no matter what the opponent does, O does not lose.\n\n    A board is represented as a 9-char string like an X in the middle would be \"....X....\" and a\n    move is an integer 0-8. The answer is a list of \"good boards\" that O aims for, so no matter what X does there\n    is always good board that O can get to with a single move.\n    \"\"\"",
    "sol_bodies": [
      "    win = [any(i & w == w for w in [7, 56, 73, 84, 146, 273, 292, 448]) for i in range(512)]  # 9-bit representation\n\n    good_boards = []\n\n    def x_move(x, o):  # returns True if o wins or ties, x's turn to move\n        if win[o] or x | o == 511:  # full board\n            return True\n        for i in range(9):\n            if (x | o) & (1 << i) == 0 and not o_move(x | (1 << i), o):\n                return False\n        return True  # O wins/ties\n\n    def o_move(x, o):  # returns True if o wins or ties, o's turn to move\n        if win[x]:\n            return False\n        if x | o == 511:\n            return True\n        for i in range(9):\n            if (x | o) & (1 << i) == 0 and x_move(x, o | (1 << i)):\n                good_boards.append(\n                    \"\".join(\".XO\"[((x >> j) & 1) + 2 * ((o >> j) & 1) + 2 * (i == j)] for j in range(9)))\n                return True\n        return False  # X wins\n\n    res = x_move(0, 0)\n    assert res\n\n    return good_boards"
    ],
    "module": "games.py",
    "notes": "Same as above but for 2nd player",
    "weight": 1.0
  },
  {
    "name": "RockPaperScissors:0",
    "sat": "def sat(probs: List[float]):\n    assert len(probs) == 3 and abs(sum(probs) - 1) < 1e-6\n    return max(probs[(i + 2) % 3] - probs[(i + 1) % 3] for i in range(3)) < 1e-6",
    "ans_type": "List[float]",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"Find optimal probabilities for playing Rock-Paper-Scissors zero-sum game, with best worst-case guarantee\"\"\"",
    "sol_bodies": [
      "    return [1 / 3] * 3"
    ],
    "module": "games.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "Nash:0",
    "sat": "def sat(strategies: List[List[float]], A=[[1.0, -1.0], [-1.3, 0.8]], B=[[-0.9, 1.1], [0.7, -0.8]], eps=0.01):\n    m, n = len(A), len(A[0])\n    p, q = strategies\n    assert len(B) == m and all(len(row) == n for row in A + B), \"inputs are a bimatrix game\"\n    assert len(p) == m and len(q) == n, \"solution is a pair of strategies\"\n    assert sum(p) == sum(q) == 1.0 and min(p + q) >= 0.0, \"strategies must be non-negative and sum to 1\"\n    v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n    w = sum(B[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n    return (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n            all(sum(B[i][j] * p[i] for i in range(m)) <= w + eps for j in range(n)))",
    "ans_type": "List[List[float]]",
    "sol_header": "def sol(A=[[1.0, -1.0], [-1.3, 0.8]], B=[[-0.9, 1.1], [0.7, -0.8]], eps=0.01):",
    "sol_docstring": "    \"\"\"\n    Find an eps-Nash-equilibrium for a given two-player game with payoffs described by matrices A, B.\n    For example, for the classic Prisoner dilemma:\n       A=[[-1., -3.], [0., -2.]], B=[[-1., 0.], [-3., -2.]], and strategies = [[0, 1], [0, 1]]\n\n    eps is the error tolerance\n    \"\"\"",
    "sol_bodies": [
      "    NUM_ATTEMPTS = 10 ** 5\n\n    def sat(strategies: List[List[float]], A, B, eps):\n        m, n = len(A), len(A[0])\n        p, q = strategies\n        assert len(B) == m and all(len(row) == n for row in A + B), \"inputs are a bimatrix game\"\n        assert len(p) == m and len(q) == n, \"solution is a pair of strategies\"\n        assert sum(p) == sum(q) == 1.0 and min(p + q) >= 0.0, \"strategies must be non-negative and sum to 1\"\n        v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n        w = sum(B[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n        return (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n                all(sum(B[i][j] * p[i] for i in range(m)) <= w + eps for j in range(n)))\n\n    import random\n    r = random.Random(0)\n    dims = len(A), len(A[0])\n    # possible speedup: remove dominated strategies\n    for _attempt in range(NUM_ATTEMPTS):\n        strategies = []\n        for d in dims:\n            s = [max(0.0, r.random() - 0.5) for _ in range(d)]\n            tot = sum(s) + 1e-6\n            for i in range(d):\n                s[i] = (1.0 - sum(s[:-1])) if i == d - 1 else (s[i] / tot)  # to ensure sum is exactly 1.0\n            strategies.append(s)\n        if sat(strategies, A, B, eps):\n            return strategies"
    ],
    "module": "games.py",
    "notes": "Computing a [Nash equilibrium](https://en.wikipedia.org/wiki/Nash_equilibrium) for a given\n[bimatrix game](https://en.wikipedia.org/wiki/Bimatrix_game) is known to be\nPPAD-hard in general. However, the challenge is be much easier for an approximate\n[eps-equilibrium](https://en.wikipedia.org/wiki/Epsilon-equilibrium) and of course for small games.",
    "weight": 5.0
  },
  {
    "name": "Nash:1",
    "sat": "def sat(strategies: List[List[float]], A=[[0.14738177495578275, 0.747980019825271, 0.1051232435961047, 0.46907581621423977, 0.4706551623263341, 0.9062661953318937], [0.12988166612252583, 0.890441435875433, 0.15190125502216845, 0.0251552990265973, 0.32734850066506815, 0.3591430990509836], [0.9425550188084191, 0.08611212072450258, 0.783624348822126, 0.5349936815267257, 0.10270055080436169, 0.009590499808168174], [0.6380601343485022, 0.2218383099094161, 0.6868257338754123, 0.806638752054053, 0.9018561622314694, 0.7590395566591508], [0.6859264269381581, 0.3699302620070518, 0.9942148381089508, 0.8903935289162987, 0.674293629800702, 0.11410994407146158], [0.019262410240239114, 0.35560181353997367, 0.8517917641156626, 0.3074607746901762, 0.9261733304770997, 0.15224796120543604], [0.03366324617275729, 0.8709614609040649, 0.5849217229245649, 0.6379408604095658, 0.07001731910881204, 0.9582581413742493], [0.4142207195937342, 0.3193135769930635, 0.10706268323342383, 0.942046924893307, 0.9143451786836865, 0.701950437311744], [0.5179763142759984, 0.6412718009580387, 0.20022057700520002, 0.5942457297156203, 0.19646377673223914, 0.1351944216925801]], B=[[0.6516235984777713, 0.6123203626800926, 0.6186872023667903, 0.3853596754503974, 0.1073381662525007, 0.1291386906927786], [0.4925608374781314, 0.6308638606801343, 0.9530950453320264, 0.19706903321155278, 0.24184190603658184, 0.5045244344435803], [0.441426258818589, 0.38377342845027484, 0.012225023944992808, 0.891576455082707, 0.7733199528680031, 0.5559723587618317], [0.40823234393591534, 0.3751689897312942, 0.9735593124687937, 0.9428257869910855, 0.8271844491151399, 0.9685273237161491], [0.4832145692461641, 0.5635754453674369, 0.35994676263243286, 0.7815677383683111, 0.9809479850913646, 0.2808093367857648], [0.7473188591890239, 0.12760325771253167, 0.6709148257444112, 0.6960324705687125, 0.9742301280874588, 0.5061403432364218], [0.5512441627071583, 0.24752179828917065, 0.8112753285511846, 0.31333832922799887, 0.6811740304141864, 0.9411639311639899], [0.7477089685706007, 0.2569950106729836, 0.5041394572889569, 0.10948936347507965, 0.6055289733960375, 0.5733220923473799], [0.6810018730369142, 0.7452579755751384, 0.5448601672849144, 0.6414658827186077, 0.8050401801463669, 0.729851403010736]], eps=0.1):\n    m, n = len(A), len(A[0])\n    p, q = strategies\n    assert len(B) == m and all(len(row) == n for row in A + B), \"inputs are a bimatrix game\"\n    assert len(p) == m and len(q) == n, \"solution is a pair of strategies\"\n    assert sum(p) == sum(q) == 1.0 and min(p + q) >= 0.0, \"strategies must be non-negative and sum to 1\"\n    v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n    w = sum(B[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n    return (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n            all(sum(B[i][j] * p[i] for i in range(m)) <= w + eps for j in range(n)))",
    "ans_type": "List[List[float]]",
    "sol_header": "def sol(A=[[0.14738177495578275, 0.747980019825271, 0.1051232435961047, 0.46907581621423977, 0.4706551623263341, 0.9062661953318937], [0.12988166612252583, 0.890441435875433, 0.15190125502216845, 0.0251552990265973, 0.32734850066506815, 0.3591430990509836], [0.9425550188084191, 0.08611212072450258, 0.783624348822126, 0.5349936815267257, 0.10270055080436169, 0.009590499808168174], [0.6380601343485022, 0.2218383099094161, 0.6868257338754123, 0.806638752054053, 0.9018561622314694, 0.7590395566591508], [0.6859264269381581, 0.3699302620070518, 0.9942148381089508, 0.8903935289162987, 0.674293629800702, 0.11410994407146158], [0.019262410240239114, 0.35560181353997367, 0.8517917641156626, 0.3074607746901762, 0.9261733304770997, 0.15224796120543604], [0.03366324617275729, 0.8709614609040649, 0.5849217229245649, 0.6379408604095658, 0.07001731910881204, 0.9582581413742493], [0.4142207195937342, 0.3193135769930635, 0.10706268323342383, 0.942046924893307, 0.9143451786836865, 0.701950437311744], [0.5179763142759984, 0.6412718009580387, 0.20022057700520002, 0.5942457297156203, 0.19646377673223914, 0.1351944216925801]], B=[[0.6516235984777713, 0.6123203626800926, 0.6186872023667903, 0.3853596754503974, 0.1073381662525007, 0.1291386906927786], [0.4925608374781314, 0.6308638606801343, 0.9530950453320264, 0.19706903321155278, 0.24184190603658184, 0.5045244344435803], [0.441426258818589, 0.38377342845027484, 0.012225023944992808, 0.891576455082707, 0.7733199528680031, 0.5559723587618317], [0.40823234393591534, 0.3751689897312942, 0.9735593124687937, 0.9428257869910855, 0.8271844491151399, 0.9685273237161491], [0.4832145692461641, 0.5635754453674369, 0.35994676263243286, 0.7815677383683111, 0.9809479850913646, 0.2808093367857648], [0.7473188591890239, 0.12760325771253167, 0.6709148257444112, 0.6960324705687125, 0.9742301280874588, 0.5061403432364218], [0.5512441627071583, 0.24752179828917065, 0.8112753285511846, 0.31333832922799887, 0.6811740304141864, 0.9411639311639899], [0.7477089685706007, 0.2569950106729836, 0.5041394572889569, 0.10948936347507965, 0.6055289733960375, 0.5733220923473799], [0.6810018730369142, 0.7452579755751384, 0.5448601672849144, 0.6414658827186077, 0.8050401801463669, 0.729851403010736]], eps=0.1):",
    "sol_docstring": "    \"\"\"\n    Find an eps-Nash-equilibrium for a given two-player game with payoffs described by matrices A, B.\n    For example, for the classic Prisoner dilemma:\n       A=[[-1., -3.], [0., -2.]], B=[[-1., 0.], [-3., -2.]], and strategies = [[0, 1], [0, 1]]\n\n    eps is the error tolerance\n    \"\"\"",
    "sol_bodies": [
      "    NUM_ATTEMPTS = 10 ** 5\n\n    def sat(strategies: List[List[float]], A, B, eps):\n        m, n = len(A), len(A[0])\n        p, q = strategies\n        assert len(B) == m and all(len(row) == n for row in A + B), \"inputs are a bimatrix game\"\n        assert len(p) == m and len(q) == n, \"solution is a pair of strategies\"\n        assert sum(p) == sum(q) == 1.0 and min(p + q) >= 0.0, \"strategies must be non-negative and sum to 1\"\n        v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n        w = sum(B[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n        return (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n                all(sum(B[i][j] * p[i] for i in range(m)) <= w + eps for j in range(n)))\n\n    import random\n    r = random.Random(0)\n    dims = len(A), len(A[0])\n    # possible speedup: remove dominated strategies\n    for _attempt in range(NUM_ATTEMPTS):\n        strategies = []\n        for d in dims:\n            s = [max(0.0, r.random() - 0.5) for _ in range(d)]\n            tot = sum(s) + 1e-6\n            for i in range(d):\n                s[i] = (1.0 - sum(s[:-1])) if i == d - 1 else (s[i] / tot)  # to ensure sum is exactly 1.0\n            strategies.append(s)\n        if sat(strategies, A, B, eps):\n            return strategies"
    ],
    "module": "games.py",
    "notes": "Computing a [Nash equilibrium](https://en.wikipedia.org/wiki/Nash_equilibrium) for a given\n[bimatrix game](https://en.wikipedia.org/wiki/Bimatrix_game) is known to be\nPPAD-hard in general. However, the challenge is be much easier for an approximate\n[eps-equilibrium](https://en.wikipedia.org/wiki/Epsilon-equilibrium) and of course for small games.",
    "weight": 5.0
  },
  {
    "name": "Nash:2",
    "sat": "def sat(strategies: List[List[float]], A=[[0.4934719584926307, 0.05664225783974475, 0.4878391988801185, 0.6983347656105304, 0.7903235569844771], [0.9209179850842271, 0.6945169729870889, 0.985586605726519, 0.03611807745215567, 0.07791862369265457]], B=[[0.5723776540419043, 0.3177494964308457, 0.03283373751184504, 0.960932861317398, 0.3843454398162133], [0.7415658068058613, 0.4423455643375954, 0.9314198922910875, 0.937956471095574, 0.6337568371723998]], eps=0.01):\n    m, n = len(A), len(A[0])\n    p, q = strategies\n    assert len(B) == m and all(len(row) == n for row in A + B), \"inputs are a bimatrix game\"\n    assert len(p) == m and len(q) == n, \"solution is a pair of strategies\"\n    assert sum(p) == sum(q) == 1.0 and min(p + q) >= 0.0, \"strategies must be non-negative and sum to 1\"\n    v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n    w = sum(B[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n    return (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n            all(sum(B[i][j] * p[i] for i in range(m)) <= w + eps for j in range(n)))",
    "ans_type": "List[List[float]]",
    "sol_header": "def sol(A=[[0.4934719584926307, 0.05664225783974475, 0.4878391988801185, 0.6983347656105304, 0.7903235569844771], [0.9209179850842271, 0.6945169729870889, 0.985586605726519, 0.03611807745215567, 0.07791862369265457]], B=[[0.5723776540419043, 0.3177494964308457, 0.03283373751184504, 0.960932861317398, 0.3843454398162133], [0.7415658068058613, 0.4423455643375954, 0.9314198922910875, 0.937956471095574, 0.6337568371723998]], eps=0.01):",
    "sol_docstring": "    \"\"\"\n    Find an eps-Nash-equilibrium for a given two-player game with payoffs described by matrices A, B.\n    For example, for the classic Prisoner dilemma:\n       A=[[-1., -3.], [0., -2.]], B=[[-1., 0.], [-3., -2.]], and strategies = [[0, 1], [0, 1]]\n\n    eps is the error tolerance\n    \"\"\"",
    "sol_bodies": [
      "    NUM_ATTEMPTS = 10 ** 5\n\n    def sat(strategies: List[List[float]], A, B, eps):\n        m, n = len(A), len(A[0])\n        p, q = strategies\n        assert len(B) == m and all(len(row) == n for row in A + B), \"inputs are a bimatrix game\"\n        assert len(p) == m and len(q) == n, \"solution is a pair of strategies\"\n        assert sum(p) == sum(q) == 1.0 and min(p + q) >= 0.0, \"strategies must be non-negative and sum to 1\"\n        v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n        w = sum(B[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n        return (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n                all(sum(B[i][j] * p[i] for i in range(m)) <= w + eps for j in range(n)))\n\n    import random\n    r = random.Random(0)\n    dims = len(A), len(A[0])\n    # possible speedup: remove dominated strategies\n    for _attempt in range(NUM_ATTEMPTS):\n        strategies = []\n        for d in dims:\n            s = [max(0.0, r.random() - 0.5) for _ in range(d)]\n            tot = sum(s) + 1e-6\n            for i in range(d):\n                s[i] = (1.0 - sum(s[:-1])) if i == d - 1 else (s[i] / tot)  # to ensure sum is exactly 1.0\n            strategies.append(s)\n        if sat(strategies, A, B, eps):\n            return strategies"
    ],
    "module": "games.py",
    "notes": "Computing a [Nash equilibrium](https://en.wikipedia.org/wiki/Nash_equilibrium) for a given\n[bimatrix game](https://en.wikipedia.org/wiki/Bimatrix_game) is known to be\nPPAD-hard in general. However, the challenge is be much easier for an approximate\n[eps-equilibrium](https://en.wikipedia.org/wiki/Epsilon-equilibrium) and of course for small games.",
    "weight": 5.0
  },
  {
    "name": "Nash:3",
    "sat": "def sat(strategies: List[List[float]], A=[[0.8589758630993106, 0.7749919744562254, 0.18371378758390233, 0.28034839679007295, 0.18276337511723684, 0.5173168267432149], [0.535972149604936, 0.6860082336427572, 0.8154412069051551, 0.02442129105356694, 0.1349312146704914, 0.7530215223132398], [0.3519956107153608, 0.9660103168436817, 0.10172694662400983, 0.7254690944575098, 0.8254057287673647, 0.3189629245726713], [0.5725690579346981, 0.1589108703965545, 0.01688986355891453, 0.3074319760280675, 0.4584643560452394, 0.5853201363256517], [0.6489314270374363, 0.6347169492821729, 0.18348768635443546, 0.5731694328630751, 0.6566567470060826, 0.8039403838540958], [0.4917243999522437, 0.16144631954506772, 0.04044367374900226, 0.09502214062659131, 0.8738947440998662, 0.6114058437094053], [0.1967023709822303, 0.29782628261932154, 0.058285139123036234, 0.6302740689117773, 0.33364400882000855, 0.5776389301631869], [0.6777544316258026, 0.6724283041374894, 0.9798391425483743, 0.8838381708326536, 0.6667218181098736, 0.34481925547433623], [0.5958711406283824, 0.44387553450142214, 0.6668717494447683, 0.25986773196752133, 0.8873567554013287, 0.4374385442834563]], B=[[0.6509157248335261, 0.47969567636489663, 0.7175654058769987, 0.8305604678011964, 0.11420347930129515, 0.8401333925076142], [0.8690852438876666, 0.8127345690587251, 0.316832083958, 0.9589533790230425, 0.6983255500551921, 0.4492765771156503], [0.7058401433380928, 0.007340378623609478, 0.5423001137088079, 0.2066909384280825, 0.3317417420195775, 0.003203599551001912], [0.4887994419103735, 0.4082867953539032, 0.3605910405209234, 0.19354666101193807, 0.3116629413961449, 0.9698417812464528], [0.30623970889248353, 0.8377553335650854, 0.7624220111189529, 0.22826919233755616, 0.3832245488487954, 0.11387974071378948], [0.8818032772640031, 0.24028195971823052, 0.8834992573768841, 0.9883007945834051, 0.7024933884432355, 0.7617988546407181], [0.9160905473729156, 0.6927856066612084, 0.6159687601776853, 0.15074396336216966, 0.7764252875888226, 0.3459191304782905], [0.9991431698755587, 0.32389039099370287, 0.8354695347283115, 0.51319161530113, 0.5229921145906276, 0.7690459477032934], [0.7591967670432632, 0.23382636010443625, 0.26521035423368, 0.8577953561722641, 0.020432130142500116, 0.019755815416500178]], eps=0.1):\n    m, n = len(A), len(A[0])\n    p, q = strategies\n    assert len(B) == m and all(len(row) == n for row in A + B), \"inputs are a bimatrix game\"\n    assert len(p) == m and len(q) == n, \"solution is a pair of strategies\"\n    assert sum(p) == sum(q) == 1.0 and min(p + q) >= 0.0, \"strategies must be non-negative and sum to 1\"\n    v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n    w = sum(B[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n    return (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n            all(sum(B[i][j] * p[i] for i in range(m)) <= w + eps for j in range(n)))",
    "ans_type": "List[List[float]]",
    "sol_header": "def sol(A=[[0.8589758630993106, 0.7749919744562254, 0.18371378758390233, 0.28034839679007295, 0.18276337511723684, 0.5173168267432149], [0.535972149604936, 0.6860082336427572, 0.8154412069051551, 0.02442129105356694, 0.1349312146704914, 0.7530215223132398], [0.3519956107153608, 0.9660103168436817, 0.10172694662400983, 0.7254690944575098, 0.8254057287673647, 0.3189629245726713], [0.5725690579346981, 0.1589108703965545, 0.01688986355891453, 0.3074319760280675, 0.4584643560452394, 0.5853201363256517], [0.6489314270374363, 0.6347169492821729, 0.18348768635443546, 0.5731694328630751, 0.6566567470060826, 0.8039403838540958], [0.4917243999522437, 0.16144631954506772, 0.04044367374900226, 0.09502214062659131, 0.8738947440998662, 0.6114058437094053], [0.1967023709822303, 0.29782628261932154, 0.058285139123036234, 0.6302740689117773, 0.33364400882000855, 0.5776389301631869], [0.6777544316258026, 0.6724283041374894, 0.9798391425483743, 0.8838381708326536, 0.6667218181098736, 0.34481925547433623], [0.5958711406283824, 0.44387553450142214, 0.6668717494447683, 0.25986773196752133, 0.8873567554013287, 0.4374385442834563]], B=[[0.6509157248335261, 0.47969567636489663, 0.7175654058769987, 0.8305604678011964, 0.11420347930129515, 0.8401333925076142], [0.8690852438876666, 0.8127345690587251, 0.316832083958, 0.9589533790230425, 0.6983255500551921, 0.4492765771156503], [0.7058401433380928, 0.007340378623609478, 0.5423001137088079, 0.2066909384280825, 0.3317417420195775, 0.003203599551001912], [0.4887994419103735, 0.4082867953539032, 0.3605910405209234, 0.19354666101193807, 0.3116629413961449, 0.9698417812464528], [0.30623970889248353, 0.8377553335650854, 0.7624220111189529, 0.22826919233755616, 0.3832245488487954, 0.11387974071378948], [0.8818032772640031, 0.24028195971823052, 0.8834992573768841, 0.9883007945834051, 0.7024933884432355, 0.7617988546407181], [0.9160905473729156, 0.6927856066612084, 0.6159687601776853, 0.15074396336216966, 0.7764252875888226, 0.3459191304782905], [0.9991431698755587, 0.32389039099370287, 0.8354695347283115, 0.51319161530113, 0.5229921145906276, 0.7690459477032934], [0.7591967670432632, 0.23382636010443625, 0.26521035423368, 0.8577953561722641, 0.020432130142500116, 0.019755815416500178]], eps=0.1):",
    "sol_docstring": "    \"\"\"\n    Find an eps-Nash-equilibrium for a given two-player game with payoffs described by matrices A, B.\n    For example, for the classic Prisoner dilemma:\n       A=[[-1., -3.], [0., -2.]], B=[[-1., 0.], [-3., -2.]], and strategies = [[0, 1], [0, 1]]\n\n    eps is the error tolerance\n    \"\"\"",
    "sol_bodies": [
      "    NUM_ATTEMPTS = 10 ** 5\n\n    def sat(strategies: List[List[float]], A, B, eps):\n        m, n = len(A), len(A[0])\n        p, q = strategies\n        assert len(B) == m and all(len(row) == n for row in A + B), \"inputs are a bimatrix game\"\n        assert len(p) == m and len(q) == n, \"solution is a pair of strategies\"\n        assert sum(p) == sum(q) == 1.0 and min(p + q) >= 0.0, \"strategies must be non-negative and sum to 1\"\n        v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n        w = sum(B[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n        return (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n                all(sum(B[i][j] * p[i] for i in range(m)) <= w + eps for j in range(n)))\n\n    import random\n    r = random.Random(0)\n    dims = len(A), len(A[0])\n    # possible speedup: remove dominated strategies\n    for _attempt in range(NUM_ATTEMPTS):\n        strategies = []\n        for d in dims:\n            s = [max(0.0, r.random() - 0.5) for _ in range(d)]\n            tot = sum(s) + 1e-6\n            for i in range(d):\n                s[i] = (1.0 - sum(s[:-1])) if i == d - 1 else (s[i] / tot)  # to ensure sum is exactly 1.0\n            strategies.append(s)\n        if sat(strategies, A, B, eps):\n            return strategies"
    ],
    "module": "games.py",
    "notes": "Computing a [Nash equilibrium](https://en.wikipedia.org/wiki/Nash_equilibrium) for a given\n[bimatrix game](https://en.wikipedia.org/wiki/Bimatrix_game) is known to be\nPPAD-hard in general. However, the challenge is be much easier for an approximate\n[eps-equilibrium](https://en.wikipedia.org/wiki/Epsilon-equilibrium) and of course for small games.",
    "weight": 5.0
  },
  {
    "name": "Nash:4",
    "sat": "def sat(strategies: List[List[float]], A=[[0.5753373910044396, 0.883286704506171, 0.14098419242590676, 0.0796482735170555, 0.28053511699815137, 0.4802587237433614, 0.7927565741942321, 0.10486790699611082], [0.674897469149739, 0.5526354958094333, 0.14126552040252316, 0.8176885681560745, 0.5950057513195114, 0.9394498004514682, 0.9974412293717752, 0.31785998202168364], [0.8551492483900579, 0.0873581901597057, 0.7058504781434135, 0.8614481823894408, 0.774002479389802, 0.5194163269795865, 0.8839947283493329, 0.4796849532033839], [0.24669121918914239, 0.9192009909426845, 0.22533689422848313, 0.42231986064003346, 0.8524917527913644, 0.3217815290765713, 0.13012568628724053, 0.08517580086974996], [0.6708003793106111, 0.9370021425919828, 0.956981559137809, 0.48294825852969425, 0.09451427192867867, 0.958711015678715, 0.13874285709747414, 0.17240487357189138], [0.6862479923713413, 0.40988185301904767, 0.7232258320050972, 0.12156129874113497, 0.4137204968814412, 0.43096712555208105, 0.9673727161037606, 0.9554536674896775], [0.2645245766573283, 0.16353379162998616, 0.8208329137057697, 0.24945486012929086, 0.19060921538692044, 0.6886849242360286, 0.6513544853108113, 0.13898253443118158], [0.8399423196728664, 0.5583901386668076, 0.05055384968867316, 0.272512815876485, 0.4706764309925491, 0.9920874820129374, 0.11006687231735834, 0.6003338823254668]], B=[[0.8661101149166154, 0.5041424261188884, 0.654530488206357, 0.842287965510257, 0.5418722524658692, 0.615317049155107, 0.2474305118268787, 0.802249852604974], [0.17399126319302805, 0.37286827574250436, 0.9025123265462714, 0.6302774019777034, 0.6096954531215514, 0.14282756248667317, 0.5039665393854678, 0.5053857713064859], [0.08645764165911696, 0.34639849481946294, 0.4003286765389642, 0.8522825407634552, 0.38924375107949505, 0.13708630962779877, 0.09413370097193263, 0.024977157717289145], [0.18665183173707744, 0.08210966062569414, 0.8906028770829486, 0.9292380534706237, 0.3432700204525524, 0.03791015448620483, 0.23701146631134296, 0.5236370615896554], [0.4158240648499627, 0.620309795706114, 0.6606023798050246, 0.7581954943445194, 0.9399309644265448, 0.6640739757418763, 0.5470483802958659, 0.3881528058493644], [0.8452380694038372, 0.7687623496765781, 0.22422282300746144, 0.03236167241305821, 0.1113965246318579, 0.4589759506900418, 0.8415359432321317, 0.27521377409486303], [0.6582156349227984, 0.9988816473957544, 0.4901663751981855, 0.3788210957458895, 0.455713995042737, 0.04960398762882756, 0.16850674065572013, 0.6202540021741917], [0.7515673992699056, 0.6867547828670959, 0.038529441293790434, 0.9995963277046196, 0.15577904716257307, 0.2596640500026437, 0.76139213514593, 0.5065163836406463]], eps=0.01):\n    m, n = len(A), len(A[0])\n    p, q = strategies\n    assert len(B) == m and all(len(row) == n for row in A + B), \"inputs are a bimatrix game\"\n    assert len(p) == m and len(q) == n, \"solution is a pair of strategies\"\n    assert sum(p) == sum(q) == 1.0 and min(p + q) >= 0.0, \"strategies must be non-negative and sum to 1\"\n    v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n    w = sum(B[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n    return (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n            all(sum(B[i][j] * p[i] for i in range(m)) <= w + eps for j in range(n)))",
    "ans_type": "List[List[float]]",
    "sol_header": "def sol(A=[[0.5753373910044396, 0.883286704506171, 0.14098419242590676, 0.0796482735170555, 0.28053511699815137, 0.4802587237433614, 0.7927565741942321, 0.10486790699611082], [0.674897469149739, 0.5526354958094333, 0.14126552040252316, 0.8176885681560745, 0.5950057513195114, 0.9394498004514682, 0.9974412293717752, 0.31785998202168364], [0.8551492483900579, 0.0873581901597057, 0.7058504781434135, 0.8614481823894408, 0.774002479389802, 0.5194163269795865, 0.8839947283493329, 0.4796849532033839], [0.24669121918914239, 0.9192009909426845, 0.22533689422848313, 0.42231986064003346, 0.8524917527913644, 0.3217815290765713, 0.13012568628724053, 0.08517580086974996], [0.6708003793106111, 0.9370021425919828, 0.956981559137809, 0.48294825852969425, 0.09451427192867867, 0.958711015678715, 0.13874285709747414, 0.17240487357189138], [0.6862479923713413, 0.40988185301904767, 0.7232258320050972, 0.12156129874113497, 0.4137204968814412, 0.43096712555208105, 0.9673727161037606, 0.9554536674896775], [0.2645245766573283, 0.16353379162998616, 0.8208329137057697, 0.24945486012929086, 0.19060921538692044, 0.6886849242360286, 0.6513544853108113, 0.13898253443118158], [0.8399423196728664, 0.5583901386668076, 0.05055384968867316, 0.272512815876485, 0.4706764309925491, 0.9920874820129374, 0.11006687231735834, 0.6003338823254668]], B=[[0.8661101149166154, 0.5041424261188884, 0.654530488206357, 0.842287965510257, 0.5418722524658692, 0.615317049155107, 0.2474305118268787, 0.802249852604974], [0.17399126319302805, 0.37286827574250436, 0.9025123265462714, 0.6302774019777034, 0.6096954531215514, 0.14282756248667317, 0.5039665393854678, 0.5053857713064859], [0.08645764165911696, 0.34639849481946294, 0.4003286765389642, 0.8522825407634552, 0.38924375107949505, 0.13708630962779877, 0.09413370097193263, 0.024977157717289145], [0.18665183173707744, 0.08210966062569414, 0.8906028770829486, 0.9292380534706237, 0.3432700204525524, 0.03791015448620483, 0.23701146631134296, 0.5236370615896554], [0.4158240648499627, 0.620309795706114, 0.6606023798050246, 0.7581954943445194, 0.9399309644265448, 0.6640739757418763, 0.5470483802958659, 0.3881528058493644], [0.8452380694038372, 0.7687623496765781, 0.22422282300746144, 0.03236167241305821, 0.1113965246318579, 0.4589759506900418, 0.8415359432321317, 0.27521377409486303], [0.6582156349227984, 0.9988816473957544, 0.4901663751981855, 0.3788210957458895, 0.455713995042737, 0.04960398762882756, 0.16850674065572013, 0.6202540021741917], [0.7515673992699056, 0.6867547828670959, 0.038529441293790434, 0.9995963277046196, 0.15577904716257307, 0.2596640500026437, 0.76139213514593, 0.5065163836406463]], eps=0.01):",
    "sol_docstring": "    \"\"\"\n    Find an eps-Nash-equilibrium for a given two-player game with payoffs described by matrices A, B.\n    For example, for the classic Prisoner dilemma:\n       A=[[-1., -3.], [0., -2.]], B=[[-1., 0.], [-3., -2.]], and strategies = [[0, 1], [0, 1]]\n\n    eps is the error tolerance\n    \"\"\"",
    "sol_bodies": [
      "    NUM_ATTEMPTS = 10 ** 5\n\n    def sat(strategies: List[List[float]], A, B, eps):\n        m, n = len(A), len(A[0])\n        p, q = strategies\n        assert len(B) == m and all(len(row) == n for row in A + B), \"inputs are a bimatrix game\"\n        assert len(p) == m and len(q) == n, \"solution is a pair of strategies\"\n        assert sum(p) == sum(q) == 1.0 and min(p + q) >= 0.0, \"strategies must be non-negative and sum to 1\"\n        v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n        w = sum(B[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n        return (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n                all(sum(B[i][j] * p[i] for i in range(m)) <= w + eps for j in range(n)))\n\n    import random\n    r = random.Random(0)\n    dims = len(A), len(A[0])\n    # possible speedup: remove dominated strategies\n    for _attempt in range(NUM_ATTEMPTS):\n        strategies = []\n        for d in dims:\n            s = [max(0.0, r.random() - 0.5) for _ in range(d)]\n            tot = sum(s) + 1e-6\n            for i in range(d):\n                s[i] = (1.0 - sum(s[:-1])) if i == d - 1 else (s[i] / tot)  # to ensure sum is exactly 1.0\n            strategies.append(s)\n        if sat(strategies, A, B, eps):\n            return strategies"
    ],
    "module": "games.py",
    "notes": "Computing a [Nash equilibrium](https://en.wikipedia.org/wiki/Nash_equilibrium) for a given\n[bimatrix game](https://en.wikipedia.org/wiki/Bimatrix_game) is known to be\nPPAD-hard in general. However, the challenge is be much easier for an approximate\n[eps-equilibrium](https://en.wikipedia.org/wiki/Epsilon-equilibrium) and of course for small games.",
    "weight": 5.0
  },
  {
    "name": "ZeroSum:0",
    "sat": "def sat(strategies: List[List[float]], A=[[0.0, -0.5, 1.0], [0.75, 0.0, -1.0], [-1.0, 0.4, 0.0]], eps=0.01):\n    m, n = len(A), len(A[0])\n    p, q = strategies\n    assert all(len(row) == n for row in A), \"inputs are a matrix\"\n    assert len(p) == m and len(q) == n, \"solution is a pair of strategies\"\n    assert sum(p) == sum(q) == 1.0 and min(p + q) >= 0.0, \"strategies must be non-negative and sum to 1\"\n    v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n    return (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n            all(sum(A[i][j] * p[i] for i in range(m)) >= v - eps for j in range(n)))",
    "ans_type": "List[List[float]]",
    "sol_header": "def sol(A=[[0.0, -0.5, 1.0], [0.75, 0.0, -1.0], [-1.0, 0.4, 0.0]], eps=0.01):",
    "sol_docstring": "    \"\"\"\n    Compute minimax optimal strategies for a given zero-sum game up to error tolerance eps.\n    For example, rock paper scissors has\n    A = [[0., -1., 1.], [1., 0., -1.], [-1., 1., 0.]] and strategies = [[0.33, 0.33, 0.34]] * 2\n    \"\"\"",
    "sol_bodies": [
      "    MAX_ITER = 10 ** 4\n    m, n = len(A), len(A[0])\n    a = [0 for _i in range(m)]\n    b = [0 for _j in range(n)]\n\n    for count in range(1, MAX_ITER):\n        i_star = max(range(m), key=lambda i: sum(A[i][j] * b[j] for j in range(n)))\n        j_star = min(range(n), key=lambda j: sum(A[i][j] * a[i] for i in range(m)))\n        a[i_star] += 1\n        b[j_star] += 1\n        p = [x / (count + 1e-6) for x in a]\n        p[-1] = 1 - sum(p[:-1])  # rounding issues\n        q = [x / (count + 1e-6) for x in b]\n        q[-1] = 1 - sum(q[:-1])  # rounding issues\n\n        v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n        if (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n                all(sum(A[i][j] * p[i] for i in range(m)) >= v - eps for j in range(n))):\n            return [p, q]"
    ],
    "module": "games.py",
    "notes": "Compute minimax optimal strategies for a given\n[zero-sum game](https://en.wikipedia.org/wiki/Zero-sum_game). This problem is known to be equivalent to\nLinear Programming. Note that the provided instances are all quite easy---harder solutions could readily\nbe made by decreasing the accuracy tolerance `eps` at which point the solution we provided would fail and\nmore efficient algorithms would be needed.",
    "weight": 1.0
  },
  {
    "name": "ZeroSum:1",
    "sat": "def sat(strategies: List[List[float]], A=[[0.5303369225581901, 0.4458248560112187, 0.47857713121903245], [0.07696760921779966, 0.40492093882513336, 0.8351857615090292]], eps=0.5):\n    m, n = len(A), len(A[0])\n    p, q = strategies\n    assert all(len(row) == n for row in A), \"inputs are a matrix\"\n    assert len(p) == m and len(q) == n, \"solution is a pair of strategies\"\n    assert sum(p) == sum(q) == 1.0 and min(p + q) >= 0.0, \"strategies must be non-negative and sum to 1\"\n    v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n    return (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n            all(sum(A[i][j] * p[i] for i in range(m)) >= v - eps for j in range(n)))",
    "ans_type": "List[List[float]]",
    "sol_header": "def sol(A=[[0.5303369225581901, 0.4458248560112187, 0.47857713121903245], [0.07696760921779966, 0.40492093882513336, 0.8351857615090292]], eps=0.5):",
    "sol_docstring": "    \"\"\"\n    Compute minimax optimal strategies for a given zero-sum game up to error tolerance eps.\n    For example, rock paper scissors has\n    A = [[0., -1., 1.], [1., 0., -1.], [-1., 1., 0.]] and strategies = [[0.33, 0.33, 0.34]] * 2\n    \"\"\"",
    "sol_bodies": [
      "    MAX_ITER = 10 ** 4\n    m, n = len(A), len(A[0])\n    a = [0 for _i in range(m)]\n    b = [0 for _j in range(n)]\n\n    for count in range(1, MAX_ITER):\n        i_star = max(range(m), key=lambda i: sum(A[i][j] * b[j] for j in range(n)))\n        j_star = min(range(n), key=lambda j: sum(A[i][j] * a[i] for i in range(m)))\n        a[i_star] += 1\n        b[j_star] += 1\n        p = [x / (count + 1e-6) for x in a]\n        p[-1] = 1 - sum(p[:-1])  # rounding issues\n        q = [x / (count + 1e-6) for x in b]\n        q[-1] = 1 - sum(q[:-1])  # rounding issues\n\n        v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n        if (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n                all(sum(A[i][j] * p[i] for i in range(m)) >= v - eps for j in range(n))):\n            return [p, q]"
    ],
    "module": "games.py",
    "notes": "Compute minimax optimal strategies for a given\n[zero-sum game](https://en.wikipedia.org/wiki/Zero-sum_game). This problem is known to be equivalent to\nLinear Programming. Note that the provided instances are all quite easy---harder solutions could readily\nbe made by decreasing the accuracy tolerance `eps` at which point the solution we provided would fail and\nmore efficient algorithms would be needed.",
    "weight": 1.0
  },
  {
    "name": "ZeroSum:2",
    "sat": "def sat(strategies: List[List[float]], A=[[0.8737161029595927, 0.3380931327691771, 0.20525289813478453, 0.9772812942597162, 0.6011469499669913, 0.5657635078441663, 0.007362594660960342, 0.5523386597843655, 0.06548815570594102], [0.8440989957774637, 0.11456946368545384, 0.6266416865322296, 0.6112942108318355, 0.15090892170912606, 0.19181369635746925, 0.23558304486799253, 0.08883158381322309, 0.5626427070785186], [0.5990766112287766, 0.16770300013300976, 0.7790082288508813, 0.8213933806929374, 0.8409107317631046, 0.32215242243482034, 0.04927911582647726, 0.18589922022642869, 0.4416673076660764]], eps=0.1):\n    m, n = len(A), len(A[0])\n    p, q = strategies\n    assert all(len(row) == n for row in A), \"inputs are a matrix\"\n    assert len(p) == m and len(q) == n, \"solution is a pair of strategies\"\n    assert sum(p) == sum(q) == 1.0 and min(p + q) >= 0.0, \"strategies must be non-negative and sum to 1\"\n    v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n    return (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n            all(sum(A[i][j] * p[i] for i in range(m)) >= v - eps for j in range(n)))",
    "ans_type": "List[List[float]]",
    "sol_header": "def sol(A=[[0.8737161029595927, 0.3380931327691771, 0.20525289813478453, 0.9772812942597162, 0.6011469499669913, 0.5657635078441663, 0.007362594660960342, 0.5523386597843655, 0.06548815570594102], [0.8440989957774637, 0.11456946368545384, 0.6266416865322296, 0.6112942108318355, 0.15090892170912606, 0.19181369635746925, 0.23558304486799253, 0.08883158381322309, 0.5626427070785186], [0.5990766112287766, 0.16770300013300976, 0.7790082288508813, 0.8213933806929374, 0.8409107317631046, 0.32215242243482034, 0.04927911582647726, 0.18589922022642869, 0.4416673076660764]], eps=0.1):",
    "sol_docstring": "    \"\"\"\n    Compute minimax optimal strategies for a given zero-sum game up to error tolerance eps.\n    For example, rock paper scissors has\n    A = [[0., -1., 1.], [1., 0., -1.], [-1., 1., 0.]] and strategies = [[0.33, 0.33, 0.34]] * 2\n    \"\"\"",
    "sol_bodies": [
      "    MAX_ITER = 10 ** 4\n    m, n = len(A), len(A[0])\n    a = [0 for _i in range(m)]\n    b = [0 for _j in range(n)]\n\n    for count in range(1, MAX_ITER):\n        i_star = max(range(m), key=lambda i: sum(A[i][j] * b[j] for j in range(n)))\n        j_star = min(range(n), key=lambda j: sum(A[i][j] * a[i] for i in range(m)))\n        a[i_star] += 1\n        b[j_star] += 1\n        p = [x / (count + 1e-6) for x in a]\n        p[-1] = 1 - sum(p[:-1])  # rounding issues\n        q = [x / (count + 1e-6) for x in b]\n        q[-1] = 1 - sum(q[:-1])  # rounding issues\n\n        v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n        if (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n                all(sum(A[i][j] * p[i] for i in range(m)) >= v - eps for j in range(n))):\n            return [p, q]"
    ],
    "module": "games.py",
    "notes": "Compute minimax optimal strategies for a given\n[zero-sum game](https://en.wikipedia.org/wiki/Zero-sum_game). This problem is known to be equivalent to\nLinear Programming. Note that the provided instances are all quite easy---harder solutions could readily\nbe made by decreasing the accuracy tolerance `eps` at which point the solution we provided would fail and\nmore efficient algorithms would be needed.",
    "weight": 1.0
  },
  {
    "name": "ZeroSum:3",
    "sat": "def sat(strategies: List[List[float]], A=[[0.35120738216503444, 0.6305426964442432, 0.09361690123750299, 0.17215263015782456, 0.3569473010721259], [0.9341169088059124, 0.43769720086284414, 0.35911118735479475, 0.37956863261812823, 0.9170151449695092]], eps=0.1):\n    m, n = len(A), len(A[0])\n    p, q = strategies\n    assert all(len(row) == n for row in A), \"inputs are a matrix\"\n    assert len(p) == m and len(q) == n, \"solution is a pair of strategies\"\n    assert sum(p) == sum(q) == 1.0 and min(p + q) >= 0.0, \"strategies must be non-negative and sum to 1\"\n    v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n    return (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n            all(sum(A[i][j] * p[i] for i in range(m)) >= v - eps for j in range(n)))",
    "ans_type": "List[List[float]]",
    "sol_header": "def sol(A=[[0.35120738216503444, 0.6305426964442432, 0.09361690123750299, 0.17215263015782456, 0.3569473010721259], [0.9341169088059124, 0.43769720086284414, 0.35911118735479475, 0.37956863261812823, 0.9170151449695092]], eps=0.1):",
    "sol_docstring": "    \"\"\"\n    Compute minimax optimal strategies for a given zero-sum game up to error tolerance eps.\n    For example, rock paper scissors has\n    A = [[0., -1., 1.], [1., 0., -1.], [-1., 1., 0.]] and strategies = [[0.33, 0.33, 0.34]] * 2\n    \"\"\"",
    "sol_bodies": [
      "    MAX_ITER = 10 ** 4\n    m, n = len(A), len(A[0])\n    a = [0 for _i in range(m)]\n    b = [0 for _j in range(n)]\n\n    for count in range(1, MAX_ITER):\n        i_star = max(range(m), key=lambda i: sum(A[i][j] * b[j] for j in range(n)))\n        j_star = min(range(n), key=lambda j: sum(A[i][j] * a[i] for i in range(m)))\n        a[i_star] += 1\n        b[j_star] += 1\n        p = [x / (count + 1e-6) for x in a]\n        p[-1] = 1 - sum(p[:-1])  # rounding issues\n        q = [x / (count + 1e-6) for x in b]\n        q[-1] = 1 - sum(q[:-1])  # rounding issues\n\n        v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n        if (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n                all(sum(A[i][j] * p[i] for i in range(m)) >= v - eps for j in range(n))):\n            return [p, q]"
    ],
    "module": "games.py",
    "notes": "Compute minimax optimal strategies for a given\n[zero-sum game](https://en.wikipedia.org/wiki/Zero-sum_game). This problem is known to be equivalent to\nLinear Programming. Note that the provided instances are all quite easy---harder solutions could readily\nbe made by decreasing the accuracy tolerance `eps` at which point the solution we provided would fail and\nmore efficient algorithms would be needed.",
    "weight": 1.0
  },
  {
    "name": "ZeroSum:4",
    "sat": "def sat(strategies: List[List[float]], A=[[0.6637255179009651, 0.9756262037263238, 0.4926064602986052, 0.4097654368373934, 0.9284930704872523], [0.21641001481296873, 0.3381822244340763, 0.10113277325663139, 0.867285215856176, 0.27100572371021947], [0.7831143244052009, 0.6045743236145783, 0.10582868480749341, 0.5591604978434377, 0.27602687543748194], [0.8431935916393734, 0.09227518008541435, 0.06352450108543961, 0.13377427705288458, 0.8928593671227156], [0.15573895145866545, 0.3897235344943152, 0.5095156356106815, 0.25893802778092634, 0.4730747656010391]], eps=0.1):\n    m, n = len(A), len(A[0])\n    p, q = strategies\n    assert all(len(row) == n for row in A), \"inputs are a matrix\"\n    assert len(p) == m and len(q) == n, \"solution is a pair of strategies\"\n    assert sum(p) == sum(q) == 1.0 and min(p + q) >= 0.0, \"strategies must be non-negative and sum to 1\"\n    v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n    return (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n            all(sum(A[i][j] * p[i] for i in range(m)) >= v - eps for j in range(n)))",
    "ans_type": "List[List[float]]",
    "sol_header": "def sol(A=[[0.6637255179009651, 0.9756262037263238, 0.4926064602986052, 0.4097654368373934, 0.9284930704872523], [0.21641001481296873, 0.3381822244340763, 0.10113277325663139, 0.867285215856176, 0.27100572371021947], [0.7831143244052009, 0.6045743236145783, 0.10582868480749341, 0.5591604978434377, 0.27602687543748194], [0.8431935916393734, 0.09227518008541435, 0.06352450108543961, 0.13377427705288458, 0.8928593671227156], [0.15573895145866545, 0.3897235344943152, 0.5095156356106815, 0.25893802778092634, 0.4730747656010391]], eps=0.1):",
    "sol_docstring": "    \"\"\"\n    Compute minimax optimal strategies for a given zero-sum game up to error tolerance eps.\n    For example, rock paper scissors has\n    A = [[0., -1., 1.], [1., 0., -1.], [-1., 1., 0.]] and strategies = [[0.33, 0.33, 0.34]] * 2\n    \"\"\"",
    "sol_bodies": [
      "    MAX_ITER = 10 ** 4\n    m, n = len(A), len(A[0])\n    a = [0 for _i in range(m)]\n    b = [0 for _j in range(n)]\n\n    for count in range(1, MAX_ITER):\n        i_star = max(range(m), key=lambda i: sum(A[i][j] * b[j] for j in range(n)))\n        j_star = min(range(n), key=lambda j: sum(A[i][j] * a[i] for i in range(m)))\n        a[i_star] += 1\n        b[j_star] += 1\n        p = [x / (count + 1e-6) for x in a]\n        p[-1] = 1 - sum(p[:-1])  # rounding issues\n        q = [x / (count + 1e-6) for x in b]\n        q[-1] = 1 - sum(q[:-1])  # rounding issues\n\n        v = sum(A[i][j] * p[i] * q[j] for i in range(m) for j in range(n))\n        if (all(sum(A[i][j] * q[j] for j in range(n)) <= v + eps for i in range(m)) and\n                all(sum(A[i][j] * p[i] for i in range(m)) >= v - eps for j in range(n))):\n            return [p, q]"
    ],
    "module": "games.py",
    "notes": "Compute minimax optimal strategies for a given\n[zero-sum game](https://en.wikipedia.org/wiki/Zero-sum_game). This problem is known to be equivalent to\nLinear Programming. Note that the provided instances are all quite easy---harder solutions could readily\nbe made by decreasing the accuracy tolerance `eps` at which point the solution we provided would fail and\nmore efficient algorithms would be needed.",
    "weight": 1.0
  },
  {
    "name": "Conway99:0",
    "sat": "def sat(edges: List[List[int]]):\n    # first compute neighbors sets, N:\n    N = {i: {j for j in range(99) if j != i and ([i, j] in edges or [j, i] in edges)} for i in range(99)}\n    return all(len(N[i].intersection(N[j])) == (1 if j in N[i] else 2) for i in range(99) for j in range(i))",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"\n    Find an undirected graph with 99 vertices, in which each two adjacent vertices have exactly one common\n    neighbor, and in which each two non-adjacent vertices have exactly two common neighbors.\n    \"\"\"",
    "sol_bodies": [],
    "module": "graphs.py",
    "notes": "Conway's 99-graph problem (*unsolved*, open problem)\n\nConway's 99-graph problem is an unsolved problem in graph theory.\nIn Conway's terminology, from [Five $1,000 Problems (Update 2017)](https://oeis.org/A248380/a248380.pdf)\n\"Is there a graph with 99 vertices in which every edge (i.e. pair of joined vertices) belongs to a unique\ntriangle and every nonedge (pair of unjoined vertices) to a unique quadrilateral?\"\n\nSee also this [Wikipedia article](https://en.wikipedia.org/w/index.php?title=Conway%27s_99-graph_problem).",
    "weight": 1.0
  },
  {
    "name": "AnyEdge:0",
    "sat": "def sat(e: List[int], edges=[[0, 217], [40, 11], [17, 29], [11, 12], [31, 51]]):\n    return e in edges",
    "ans_type": "List[int]",
    "sol_header": "def sol(edges=[[0, 217], [40, 11], [17, 29], [11, 12], [31, 51]]):",
    "sol_docstring": "    \"\"\"Find any edge in edges.\"\"\"",
    "sol_bodies": [
      "    return edges[0]"
    ],
    "module": "graphs.py",
    "notes": "Trivial [graph](https://en.wikipedia.org/w/index.php?title=Graph_(discrete_mathematics)) problem.",
    "weight": 1.0
  },
  {
    "name": "AnyEdge:1",
    "sat": "def sat(e: List[int], edges=[[0, 1], [1, 1], [0, 0]]):\n    return e in edges",
    "ans_type": "List[int]",
    "sol_header": "def sol(edges=[[0, 1], [1, 1], [0, 0]]):",
    "sol_docstring": "    \"\"\"Find any edge in edges.\"\"\"",
    "sol_bodies": [
      "    return edges[0]"
    ],
    "module": "graphs.py",
    "notes": "Trivial [graph](https://en.wikipedia.org/w/index.php?title=Graph_(discrete_mathematics)) problem.",
    "weight": 1.0
  },
  {
    "name": "AnyEdge:2",
    "sat": "def sat(e: List[int], edges=[[1, 0], [0, 1], [1, 1]]):\n    return e in edges",
    "ans_type": "List[int]",
    "sol_header": "def sol(edges=[[1, 0], [0, 1], [1, 1]]):",
    "sol_docstring": "    \"\"\"Find any edge in edges.\"\"\"",
    "sol_bodies": [
      "    return edges[0]"
    ],
    "module": "graphs.py",
    "notes": "Trivial [graph](https://en.wikipedia.org/w/index.php?title=Graph_(discrete_mathematics)) problem.",
    "weight": 1.0
  },
  {
    "name": "AnyEdge:3",
    "sat": "def sat(e: List[int], edges=[[1, 15], [15, 3], [5, 12], [11, 0], [8, 5], [1, 9], [3, 6], [5, 10], [12, 0], [6, 6], [9, 2], [13, 15], [2, 9], [5, 1], [10, 11], [4, 12], [0, 6], [8, 12], [15, 14], [1, 13], [11, 7], [15, 4], [13, 5], [7, 14], [14, 5], [12, 2], [7, 8], [2, 14], [3, 15], [2, 2], [7, 2], [3, 4], [4, 2], [1, 3], [4, 4], [3, 11], [14, 6], [14, 8], [14, 12], [7, 15], [7, 3], [7, 10], [10, 8], [7, 13], [2, 15], [14, 0], [1, 5], [11, 15], [1, 8], [6, 4], [15, 8], [9, 3], [1, 10], [2, 3], [4, 13], [7, 5], [2, 11], [0, 1], [15, 6], [0, 2], [5, 5]]):\n    return e in edges",
    "ans_type": "List[int]",
    "sol_header": "def sol(edges=[[1, 15], [15, 3], [5, 12], [11, 0], [8, 5], [1, 9], [3, 6], [5, 10], [12, 0], [6, 6], [9, 2], [13, 15], [2, 9], [5, 1], [10, 11], [4, 12], [0, 6], [8, 12], [15, 14], [1, 13], [11, 7], [15, 4], [13, 5], [7, 14], [14, 5], [12, 2], [7, 8], [2, 14], [3, 15], [2, 2], [7, 2], [3, 4], [4, 2], [1, 3], [4, 4], [3, 11], [14, 6], [14, 8], [14, 12], [7, 15], [7, 3], [7, 10], [10, 8], [7, 13], [2, 15], [14, 0], [1, 5], [11, 15], [1, 8], [6, 4], [15, 8], [9, 3], [1, 10], [2, 3], [4, 13], [7, 5], [2, 11], [0, 1], [15, 6], [0, 2], [5, 5]]):",
    "sol_docstring": "    \"\"\"Find any edge in edges.\"\"\"",
    "sol_bodies": [
      "    return edges[0]"
    ],
    "module": "graphs.py",
    "notes": "Trivial [graph](https://en.wikipedia.org/w/index.php?title=Graph_(discrete_mathematics)) problem.",
    "weight": 1.0
  },
  {
    "name": "AnyEdge:4",
    "sat": "def sat(e: List[int], edges=[[7, 84], [72, 0], [65, 93], [66, 13], [39, 15], [91, 6], [16, 77], [43, 71], [34, 72], [83, 1], [91, 93], [41, 20], [71, 69], [51, 60], [75, 22], [25, 82], [93, 45], [54, 31], [38, 22], [76, 33], [18, 81], [91, 74], [28, 97], [39, 69], [15, 26], [83, 75], [57, 24], [94, 38], [26, 23], [40, 48], [37, 20], [90, 84], [75, 8], [36, 21], [93, 11], [97, 74], [79, 74], [69, 36], [3, 29], [66, 82], [49, 15], [52, 43], [76, 25], [39, 11], [9, 93], [68, 55], [53, 46], [29, 90], [12, 81], [44, 66], [54, 55], [2, 30], [1, 6], [8, 61], [67, 10], [61, 84], [72, 51], [13, 27], [93, 53], [44, 38], [86, 14], [90, 8], [22, 62], [5, 72], [63, 36], [31, 51], [83, 5], [36, 53], [92, 78], [44, 80], [23, 16], [43, 16], [18, 37], [34, 14], [23, 6], [19, 61], [59, 10], [85, 30], [25, 80], [76, 39], [21, 28], [60, 47], [15, 43], [26, 80], [59, 19], [83, 81], [4, 64], [3, 71], [52, 34], [90, 14], [44, 84], [37, 56], [76, 10], [69, 89], [30, 38], [17, 38], [42, 7], [79, 62], [15, 87], [45, 4], [96, 0], [44, 43], [84, 42], [26, 22], [1, 91], [1, 11], [68, 7], [72, 32], [8, 0], [64, 59], [16, 86], [25, 46], [65, 30], [10, 43], [89, 43], [55, 0], [91, 66], [49, 0], [22, 77], [80, 21], [16, 58], [55, 45], [64, 13], [55, 56], [89, 96], [84, 20], [11, 74], [92, 91], [36, 15], [51, 8], [4, 44], [55, 55], [6, 83], [76, 5], [3, 11], [15, 96], [18, 15], [43, 58], [19, 70], [87, 41], [43, 47], [2, 51], [47, 32], [14, 93], [27, 61], [21, 26], [78, 88], [52, 40], [21, 79], [12, 8], [74, 73], [5, 22], [50, 4], [15, 67], [87, 10], [90, 24], [17, 45], [75, 96], [27, 81], [76, 29], [52, 93], [74, 40], [48, 62], [5, 75], [68, 58], [61, 19], [56, 54], [4, 29], [26, 60], [24, 1], [37, 41], [95, 63], [49, 37], [81, 18], [79, 91], [82, 8], [29, 73], [55, 84], [18, 13], [32, 7], [77, 63], [26, 72], [90, 5], [95, 4], [46, 13], [0, 64], [84, 34], [52, 51], [32, 30], [24, 55], [51, 17], [12, 7], [73, 34], [54, 47], [96, 95], [65, 67], [46, 90], [58, 17], [54, 2], [45, 10], [84, 45], [46, 6], [0, 4], [16, 60], [50, 35], [86, 45], [89, 19], [48, 10], [4, 57], [43, 62], [19, 30], [2, 35], [83, 68], [36, 26], [69, 4], [41, 82], [12, 52], [77, 95], [90, 75], [78, 58], [93, 29], [38, 87], [15, 82], [42, 86], [39, 90], [20, 53], [79, 25], [68, 81], [64, 82], [45, 56], [14, 85], [97, 13], [46, 15], [46, 43], [8, 71], [90, 72], [97, 66], [80, 57], [25, 8], [90, 74]]):\n    return e in edges",
    "ans_type": "List[int]",
    "sol_header": "def sol(edges=[[7, 84], [72, 0], [65, 93], [66, 13], [39, 15], [91, 6], [16, 77], [43, 71], [34, 72], [83, 1], [91, 93], [41, 20], [71, 69], [51, 60], [75, 22], [25, 82], [93, 45], [54, 31], [38, 22], [76, 33], [18, 81], [91, 74], [28, 97], [39, 69], [15, 26], [83, 75], [57, 24], [94, 38], [26, 23], [40, 48], [37, 20], [90, 84], [75, 8], [36, 21], [93, 11], [97, 74], [79, 74], [69, 36], [3, 29], [66, 82], [49, 15], [52, 43], [76, 25], [39, 11], [9, 93], [68, 55], [53, 46], [29, 90], [12, 81], [44, 66], [54, 55], [2, 30], [1, 6], [8, 61], [67, 10], [61, 84], [72, 51], [13, 27], [93, 53], [44, 38], [86, 14], [90, 8], [22, 62], [5, 72], [63, 36], [31, 51], [83, 5], [36, 53], [92, 78], [44, 80], [23, 16], [43, 16], [18, 37], [34, 14], [23, 6], [19, 61], [59, 10], [85, 30], [25, 80], [76, 39], [21, 28], [60, 47], [15, 43], [26, 80], [59, 19], [83, 81], [4, 64], [3, 71], [52, 34], [90, 14], [44, 84], [37, 56], [76, 10], [69, 89], [30, 38], [17, 38], [42, 7], [79, 62], [15, 87], [45, 4], [96, 0], [44, 43], [84, 42], [26, 22], [1, 91], [1, 11], [68, 7], [72, 32], [8, 0], [64, 59], [16, 86], [25, 46], [65, 30], [10, 43], [89, 43], [55, 0], [91, 66], [49, 0], [22, 77], [80, 21], [16, 58], [55, 45], [64, 13], [55, 56], [89, 96], [84, 20], [11, 74], [92, 91], [36, 15], [51, 8], [4, 44], [55, 55], [6, 83], [76, 5], [3, 11], [15, 96], [18, 15], [43, 58], [19, 70], [87, 41], [43, 47], [2, 51], [47, 32], [14, 93], [27, 61], [21, 26], [78, 88], [52, 40], [21, 79], [12, 8], [74, 73], [5, 22], [50, 4], [15, 67], [87, 10], [90, 24], [17, 45], [75, 96], [27, 81], [76, 29], [52, 93], [74, 40], [48, 62], [5, 75], [68, 58], [61, 19], [56, 54], [4, 29], [26, 60], [24, 1], [37, 41], [95, 63], [49, 37], [81, 18], [79, 91], [82, 8], [29, 73], [55, 84], [18, 13], [32, 7], [77, 63], [26, 72], [90, 5], [95, 4], [46, 13], [0, 64], [84, 34], [52, 51], [32, 30], [24, 55], [51, 17], [12, 7], [73, 34], [54, 47], [96, 95], [65, 67], [46, 90], [58, 17], [54, 2], [45, 10], [84, 45], [46, 6], [0, 4], [16, 60], [50, 35], [86, 45], [89, 19], [48, 10], [4, 57], [43, 62], [19, 30], [2, 35], [83, 68], [36, 26], [69, 4], [41, 82], [12, 52], [77, 95], [90, 75], [78, 58], [93, 29], [38, 87], [15, 82], [42, 86], [39, 90], [20, 53], [79, 25], [68, 81], [64, 82], [45, 56], [14, 85], [97, 13], [46, 15], [46, 43], [8, 71], [90, 72], [97, 66], [80, 57], [25, 8], [90, 74]]):",
    "sol_docstring": "    \"\"\"Find any edge in edges.\"\"\"",
    "sol_bodies": [
      "    return edges[0]"
    ],
    "module": "graphs.py",
    "notes": "Trivial [graph](https://en.wikipedia.org/w/index.php?title=Graph_(discrete_mathematics)) problem.",
    "weight": 1.0
  },
  {
    "name": "AnyTriangle:0",
    "sat": "def sat(tri: List[int], edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):\n    a, b, c = tri\n    return [a, b] in edges and [b, c] in edges and [c, a] in edges and a != b != c != a",
    "ans_type": "List[int]",
    "sol_header": "def sol(edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):",
    "sol_docstring": "    \"\"\"Find any triangle in the given directed graph.\"\"\"",
    "sol_bodies": [
      "    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass"
    ],
    "module": "graphs.py",
    "notes": "Easy [graph](https://en.wikipedia.org/w/index.php?title=Graph_(discrete_mathematics)) problem,\nsee [triangle](https://en.wikipedia.org/w/index.php?title=Triangle_graph)",
    "weight": 1.0
  },
  {
    "name": "AnyTriangle:1",
    "sat": "def sat(tri: List[int], edges=[[19, 48], [14, 42], [19, 14], [56, 3], [37, 16], [46, 5], [14, 14], [62, 40], [12, 41], [37, 1], [46, 40], [4, 9], [70, 39], [75, 49], [61, 55], [65, 61], [5, 1], [67, 44], [46, 68], [49, 62], [41, 61], [39, 43], [44, 60], [71, 40], [8, 42], [54, 67], [33, 27], [25, 70], [50, 3], [53, 22], [61, 34], [5, 16], [39, 62], [30, 44], [10, 3], [21, 67], [41, 54], [10, 66], [34, 1], [45, 44], [38, 47], [25, 36], [2, 47], [46, 2], [38, 4], [50, 66], [45, 18], [45, 50], [63, 57], [19, 43], [39, 66], [29, 13], [39, 65], [63, 39], [7, 25], [34, 51], [65, 54], [13, 64], [9, 70], [28, 12], [41, 69], [67, 53], [33, 38], [59, 27], [18, 37], [11, 3], [13, 23], [33, 50], [44, 49], [9, 50], [23, 55], [59, 66], [4, 74], [50, 12], [14, 24], [0, 28], [75, 29], [62, 60], [68, 35], [69, 55], [3, 19], [72, 30], [25, 9], [12, 58], [3, 66], [43, 8], [12, 11], [15, 56], [30, 75], [35, 57], [19, 20], [71, 36], [34, 35], [30, 17], [7, 52], [49, 31], [39, 58], [48, 32], [4, 57], [75, 31], [42, 1], [0, 48], [22, 13], [18, 17], [71, 52], [41, 19], [48, 12], [9, 48], [63, 65], [68, 63], [46, 39], [24, 30], [46, 61], [55, 25], [75, 36], [49, 5], [44, 12], [29, 5], [64, 69], [15, 64], [8, 66], [49, 25], [24, 53], [7, 39], [41, 2], [29, 48], [51, 30], [41, 21], [46, 30], [63, 75], [19, 3], [58, 72], [62, 59], [68, 54], [9, 61], [70, 74], [56, 48], [74, 48], [2, 9], [51, 22], [69, 61], [0, 35], [28, 46], [7, 11], [56, 57], [14, 67], [15, 4], [53, 12], [64, 42], [20, 15], [52, 53], [44, 16], [8, 7], [21, 7], [42, 45], [4, 66], [39, 59], [20, 1], [60, 0], [52, 28], [75, 63], [59, 14], [40, 69], [74, 46], [60, 67], [6, 57], [38, 68], [24, 22], [59, 61], [53, 30], [10, 56], [49, 59], [12, 27], [75, 22], [24, 25], [37, 11], [56, 12], [62, 47], [22, 9], [34, 17], [57, 10], [52, 43], [17, 22], [14, 73], [54, 75], [28, 22], [18, 51], [38, 46], [6, 22], [75, 15], [10, 1], [37, 12], [67, 34], [28, 43], [5, 2], [60, 40], [9, 22], [3, 75], [50, 1], [19, 8], [17, 57], [43, 60], [45, 60], [57, 32], [52, 35], [18, 22], [11, 38], [16, 57], [31, 39], [13, 18], [61, 54], [25, 10], [23, 46], [47, 5], [42, 66], [73, 67], [44, 28], [65, 34], [35, 50], [67, 1], [12, 44], [17, 51], [70, 23], [44, 35], [0, 16], [65, 53], [10, 74], [5, 60], [45, 8], [13, 46], [57, 6], [72, 47], [1, 36], [60, 4], [11, 31], [46, 21], [60, 29], [58, 44], [53, 41], [33, 44], [47, 34], [58, 35], [74, 51], [71, 35], [58, 10], [47, 59], [32, 36], [16, 67], [62, 9], [14, 44], [12, 32], [6, 19], [35, 21], [49, 71], [7, 7], [25, 39], [25, 24], [45, 40], [44, 20], [9, 37], [58, 18], [59, 52], [12, 23], [26, 49], [62, 69], [8, 2], [66, 52], [25, 42], [34, 70], [64, 1], [29, 57], [8, 26], [25, 63], [75, 56], [51, 49], [70, 9], [63, 51], [6, 28], [1, 38], [47, 27], [74, 26], [27, 63], [20, 47], [25, 37], [31, 67], [59, 71], [56, 32], [28, 65], [37, 10], [30, 50], [42, 32], [56, 63], [32, 65], [48, 70], [37, 21], [10, 11], [5, 24], [51, 8], [46, 6], [75, 23], [42, 28], [60, 26], [37, 9], [0, 19], [11, 34], [66, 51], [49, 42], [16, 37], [52, 55], [20, 39], [46, 12], [1, 70], [45, 37], [18, 63], [63, 23], [54, 7], [18, 11], [51, 28], [21, 65], [28, 71], [46, 53], [14, 36], [35, 71], [30, 5], [50, 62], [32, 28], [64, 38], [66, 61], [0, 10]]):\n    a, b, c = tri\n    return [a, b] in edges and [b, c] in edges and [c, a] in edges and a != b != c != a",
    "ans_type": "List[int]",
    "sol_header": "def sol(edges=[[19, 48], [14, 42], [19, 14], [56, 3], [37, 16], [46, 5], [14, 14], [62, 40], [12, 41], [37, 1], [46, 40], [4, 9], [70, 39], [75, 49], [61, 55], [65, 61], [5, 1], [67, 44], [46, 68], [49, 62], [41, 61], [39, 43], [44, 60], [71, 40], [8, 42], [54, 67], [33, 27], [25, 70], [50, 3], [53, 22], [61, 34], [5, 16], [39, 62], [30, 44], [10, 3], [21, 67], [41, 54], [10, 66], [34, 1], [45, 44], [38, 47], [25, 36], [2, 47], [46, 2], [38, 4], [50, 66], [45, 18], [45, 50], [63, 57], [19, 43], [39, 66], [29, 13], [39, 65], [63, 39], [7, 25], [34, 51], [65, 54], [13, 64], [9, 70], [28, 12], [41, 69], [67, 53], [33, 38], [59, 27], [18, 37], [11, 3], [13, 23], [33, 50], [44, 49], [9, 50], [23, 55], [59, 66], [4, 74], [50, 12], [14, 24], [0, 28], [75, 29], [62, 60], [68, 35], [69, 55], [3, 19], [72, 30], [25, 9], [12, 58], [3, 66], [43, 8], [12, 11], [15, 56], [30, 75], [35, 57], [19, 20], [71, 36], [34, 35], [30, 17], [7, 52], [49, 31], [39, 58], [48, 32], [4, 57], [75, 31], [42, 1], [0, 48], [22, 13], [18, 17], [71, 52], [41, 19], [48, 12], [9, 48], [63, 65], [68, 63], [46, 39], [24, 30], [46, 61], [55, 25], [75, 36], [49, 5], [44, 12], [29, 5], [64, 69], [15, 64], [8, 66], [49, 25], [24, 53], [7, 39], [41, 2], [29, 48], [51, 30], [41, 21], [46, 30], [63, 75], [19, 3], [58, 72], [62, 59], [68, 54], [9, 61], [70, 74], [56, 48], [74, 48], [2, 9], [51, 22], [69, 61], [0, 35], [28, 46], [7, 11], [56, 57], [14, 67], [15, 4], [53, 12], [64, 42], [20, 15], [52, 53], [44, 16], [8, 7], [21, 7], [42, 45], [4, 66], [39, 59], [20, 1], [60, 0], [52, 28], [75, 63], [59, 14], [40, 69], [74, 46], [60, 67], [6, 57], [38, 68], [24, 22], [59, 61], [53, 30], [10, 56], [49, 59], [12, 27], [75, 22], [24, 25], [37, 11], [56, 12], [62, 47], [22, 9], [34, 17], [57, 10], [52, 43], [17, 22], [14, 73], [54, 75], [28, 22], [18, 51], [38, 46], [6, 22], [75, 15], [10, 1], [37, 12], [67, 34], [28, 43], [5, 2], [60, 40], [9, 22], [3, 75], [50, 1], [19, 8], [17, 57], [43, 60], [45, 60], [57, 32], [52, 35], [18, 22], [11, 38], [16, 57], [31, 39], [13, 18], [61, 54], [25, 10], [23, 46], [47, 5], [42, 66], [73, 67], [44, 28], [65, 34], [35, 50], [67, 1], [12, 44], [17, 51], [70, 23], [44, 35], [0, 16], [65, 53], [10, 74], [5, 60], [45, 8], [13, 46], [57, 6], [72, 47], [1, 36], [60, 4], [11, 31], [46, 21], [60, 29], [58, 44], [53, 41], [33, 44], [47, 34], [58, 35], [74, 51], [71, 35], [58, 10], [47, 59], [32, 36], [16, 67], [62, 9], [14, 44], [12, 32], [6, 19], [35, 21], [49, 71], [7, 7], [25, 39], [25, 24], [45, 40], [44, 20], [9, 37], [58, 18], [59, 52], [12, 23], [26, 49], [62, 69], [8, 2], [66, 52], [25, 42], [34, 70], [64, 1], [29, 57], [8, 26], [25, 63], [75, 56], [51, 49], [70, 9], [63, 51], [6, 28], [1, 38], [47, 27], [74, 26], [27, 63], [20, 47], [25, 37], [31, 67], [59, 71], [56, 32], [28, 65], [37, 10], [30, 50], [42, 32], [56, 63], [32, 65], [48, 70], [37, 21], [10, 11], [5, 24], [51, 8], [46, 6], [75, 23], [42, 28], [60, 26], [37, 9], [0, 19], [11, 34], [66, 51], [49, 42], [16, 37], [52, 55], [20, 39], [46, 12], [1, 70], [45, 37], [18, 63], [63, 23], [54, 7], [18, 11], [51, 28], [21, 65], [28, 71], [46, 53], [14, 36], [35, 71], [30, 5], [50, 62], [32, 28], [64, 38], [66, 61], [0, 10]]):",
    "sol_docstring": "    \"\"\"Find any triangle in the given directed graph.\"\"\"",
    "sol_bodies": [
      "    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass"
    ],
    "module": "graphs.py",
    "notes": "Easy [graph](https://en.wikipedia.org/w/index.php?title=Graph_(discrete_mathematics)) problem,\nsee [triangle](https://en.wikipedia.org/w/index.php?title=Triangle_graph)",
    "weight": 1.0
  },
  {
    "name": "AnyTriangle:2",
    "sat": "def sat(tri: List[int], edges=[[51, 44], [11, 59], [57, 15], [18, 1], [41, 1], [44, 6], [58, 44], [43, 10], [41, 9], [50, 43], [56, 0], [47, 4], [42, 45], [51, 15], [60, 18], [11, 56], [21, 45], [39, 42], [57, 34], [60, 25], [57, 33], [6, 17], [26, 43], [38, 25], [29, 18], [39, 43], [34, 4], [22, 61], [0, 9], [1, 20], [36, 28], [10, 37], [53, 7], [49, 60], [12, 48], [31, 33], [4, 8], [5, 56], [27, 59], [56, 29], [60, 17], [17, 27], [24, 58], [46, 47], [60, 35], [4, 37], [41, 43], [37, 33], [30, 7], [53, 31], [3, 60], [24, 39], [14, 41], [14, 54], [33, 35], [50, 1], [60, 57], [23, 17], [34, 15], [60, 26], [22, 0], [5, 4], [8, 41], [16, 4], [56, 40], [60, 44], [2, 26], [42, 21], [21, 28], [58, 32], [58, 12], [31, 22], [43, 0], [28, 3], [35, 21], [54, 18], [0, 58], [3, 9], [6, 59], [57, 46], [48, 45], [30, 12], [46, 27], [41, 55], [52, 58], [30, 21], [51, 24], [23, 18], [31, 59], [34, 49], [41, 34], [19, 58], [1, 32], [52, 16], [17, 8], [20, 3], [56, 12], [3, 51], [60, 31], [41, 5], [58, 23], [59, 6], [39, 2], [6, 6], [11, 38], [3, 44], [61, 58], [13, 46], [56, 1], [35, 14], [25, 7], [29, 60], [16, 32], [32, 32], [7, 44], [3, 48], [38, 21], [19, 43], [60, 4], [56, 56], [21, 33], [15, 11], [32, 0], [8, 10], [44, 11], [37, 36], [24, 28], [4, 23], [37, 22], [44, 4], [34, 28], [1, 7], [15, 48], [11, 20], [60, 13], [7, 30], [51, 18], [3, 56], [14, 57], [14, 22], [55, 13], [47, 50], [36, 14], [42, 46], [7, 29], [58, 36], [52, 49], [33, 4], [51, 51], [47, 55], [7, 60], [4, 17], [53, 6], [59, 28], [51, 52], [50, 24], [30, 18], [37, 42], [51, 30], [6, 37], [0, 41], [38, 30], [0, 24], [43, 38], [33, 2], [10, 21], [44, 33], [57, 29], [28, 45], [2, 27], [59, 38], [41, 28], [49, 61], [54, 23], [44, 32], [58, 33], [2, 43], [34, 39], [37, 28], [40, 56], [55, 59], [28, 43], [36, 36], [29, 41], [16, 35], [50, 33], [51, 4], [33, 11], [26, 17], [2, 49], [7, 18], [15, 60], [14, 47], [40, 16], [47, 19], [18, 43], [38, 53], [28, 10], [46, 12], [26, 48], [1, 45], [9, 45], [2, 12], [8, 55], [19, 24], [2, 10], [17, 38], [30, 48], [2, 13], [59, 22], [11, 39], [32, 47], [23, 26], [43, 25], [9, 34], [46, 30], [36, 32], [33, 36], [38, 54], [33, 14], [48, 46], [29, 53], [46, 60], [14, 10], [0, 3], [13, 39], [53, 53], [22, 16], [33, 31], [33, 13], [54, 51], [25, 34], [14, 33], [19, 56], [51, 10], [58, 43], [4, 20], [28, 54], [3, 34], [47, 45], [1, 58], [55, 43], [13, 21], [31, 46], [23, 57], [58, 15], [54, 36], [44, 7], [16, 52], [20, 40], [46, 18], [59, 19], [14, 44], [3, 4], [58, 52], [31, 42], [21, 17], [42, 18], [46, 57], [7, 35], [52, 4], [30, 11], [17, 14], [60, 10], [57, 59], [59, 46], [18, 15], [35, 27], [46, 31], [49, 18], [21, 23], [50, 25], [24, 59], [51, 26], [36, 34], [27, 17], [13, 16], [54, 56], [53, 13], [27, 25], [8, 33], [52, 7], [45, 61], [39, 0], [6, 51], [35, 23], [31, 5], [38, 33], [47, 58], [28, 61], [36, 0], [18, 30], [51, 11], [39, 51], [39, 36], [60, 37], [37, 43], [46, 42]]):\n    a, b, c = tri\n    return [a, b] in edges and [b, c] in edges and [c, a] in edges and a != b != c != a",
    "ans_type": "List[int]",
    "sol_header": "def sol(edges=[[51, 44], [11, 59], [57, 15], [18, 1], [41, 1], [44, 6], [58, 44], [43, 10], [41, 9], [50, 43], [56, 0], [47, 4], [42, 45], [51, 15], [60, 18], [11, 56], [21, 45], [39, 42], [57, 34], [60, 25], [57, 33], [6, 17], [26, 43], [38, 25], [29, 18], [39, 43], [34, 4], [22, 61], [0, 9], [1, 20], [36, 28], [10, 37], [53, 7], [49, 60], [12, 48], [31, 33], [4, 8], [5, 56], [27, 59], [56, 29], [60, 17], [17, 27], [24, 58], [46, 47], [60, 35], [4, 37], [41, 43], [37, 33], [30, 7], [53, 31], [3, 60], [24, 39], [14, 41], [14, 54], [33, 35], [50, 1], [60, 57], [23, 17], [34, 15], [60, 26], [22, 0], [5, 4], [8, 41], [16, 4], [56, 40], [60, 44], [2, 26], [42, 21], [21, 28], [58, 32], [58, 12], [31, 22], [43, 0], [28, 3], [35, 21], [54, 18], [0, 58], [3, 9], [6, 59], [57, 46], [48, 45], [30, 12], [46, 27], [41, 55], [52, 58], [30, 21], [51, 24], [23, 18], [31, 59], [34, 49], [41, 34], [19, 58], [1, 32], [52, 16], [17, 8], [20, 3], [56, 12], [3, 51], [60, 31], [41, 5], [58, 23], [59, 6], [39, 2], [6, 6], [11, 38], [3, 44], [61, 58], [13, 46], [56, 1], [35, 14], [25, 7], [29, 60], [16, 32], [32, 32], [7, 44], [3, 48], [38, 21], [19, 43], [60, 4], [56, 56], [21, 33], [15, 11], [32, 0], [8, 10], [44, 11], [37, 36], [24, 28], [4, 23], [37, 22], [44, 4], [34, 28], [1, 7], [15, 48], [11, 20], [60, 13], [7, 30], [51, 18], [3, 56], [14, 57], [14, 22], [55, 13], [47, 50], [36, 14], [42, 46], [7, 29], [58, 36], [52, 49], [33, 4], [51, 51], [47, 55], [7, 60], [4, 17], [53, 6], [59, 28], [51, 52], [50, 24], [30, 18], [37, 42], [51, 30], [6, 37], [0, 41], [38, 30], [0, 24], [43, 38], [33, 2], [10, 21], [44, 33], [57, 29], [28, 45], [2, 27], [59, 38], [41, 28], [49, 61], [54, 23], [44, 32], [58, 33], [2, 43], [34, 39], [37, 28], [40, 56], [55, 59], [28, 43], [36, 36], [29, 41], [16, 35], [50, 33], [51, 4], [33, 11], [26, 17], [2, 49], [7, 18], [15, 60], [14, 47], [40, 16], [47, 19], [18, 43], [38, 53], [28, 10], [46, 12], [26, 48], [1, 45], [9, 45], [2, 12], [8, 55], [19, 24], [2, 10], [17, 38], [30, 48], [2, 13], [59, 22], [11, 39], [32, 47], [23, 26], [43, 25], [9, 34], [46, 30], [36, 32], [33, 36], [38, 54], [33, 14], [48, 46], [29, 53], [46, 60], [14, 10], [0, 3], [13, 39], [53, 53], [22, 16], [33, 31], [33, 13], [54, 51], [25, 34], [14, 33], [19, 56], [51, 10], [58, 43], [4, 20], [28, 54], [3, 34], [47, 45], [1, 58], [55, 43], [13, 21], [31, 46], [23, 57], [58, 15], [54, 36], [44, 7], [16, 52], [20, 40], [46, 18], [59, 19], [14, 44], [3, 4], [58, 52], [31, 42], [21, 17], [42, 18], [46, 57], [7, 35], [52, 4], [30, 11], [17, 14], [60, 10], [57, 59], [59, 46], [18, 15], [35, 27], [46, 31], [49, 18], [21, 23], [50, 25], [24, 59], [51, 26], [36, 34], [27, 17], [13, 16], [54, 56], [53, 13], [27, 25], [8, 33], [52, 7], [45, 61], [39, 0], [6, 51], [35, 23], [31, 5], [38, 33], [47, 58], [28, 61], [36, 0], [18, 30], [51, 11], [39, 51], [39, 36], [60, 37], [37, 43], [46, 42]]):",
    "sol_docstring": "    \"\"\"Find any triangle in the given directed graph.\"\"\"",
    "sol_bodies": [
      "    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass"
    ],
    "module": "graphs.py",
    "notes": "Easy [graph](https://en.wikipedia.org/w/index.php?title=Graph_(discrete_mathematics)) problem,\nsee [triangle](https://en.wikipedia.org/w/index.php?title=Triangle_graph)",
    "weight": 1.0
  },
  {
    "name": "AnyTriangle:3",
    "sat": "def sat(tri: List[int], edges=[[8, 0], [2, 7], [1, 2], [4, 5], [2, 1], [7, 1], [5, 6], [6, 3], [3, 8], [3, 4], [0, 1], [6, 6], [4, 0], [2, 8], [1, 5], [4, 2]]):\n    a, b, c = tri\n    return [a, b] in edges and [b, c] in edges and [c, a] in edges and a != b != c != a",
    "ans_type": "List[int]",
    "sol_header": "def sol(edges=[[8, 0], [2, 7], [1, 2], [4, 5], [2, 1], [7, 1], [5, 6], [6, 3], [3, 8], [3, 4], [0, 1], [6, 6], [4, 0], [2, 8], [1, 5], [4, 2]]):",
    "sol_docstring": "    \"\"\"Find any triangle in the given directed graph.\"\"\"",
    "sol_bodies": [
      "    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass"
    ],
    "module": "graphs.py",
    "notes": "Easy [graph](https://en.wikipedia.org/w/index.php?title=Graph_(discrete_mathematics)) problem,\nsee [triangle](https://en.wikipedia.org/w/index.php?title=Triangle_graph)",
    "weight": 1.0
  },
  {
    "name": "AnyTriangle:4",
    "sat": "def sat(tri: List[int], edges=[[4, 4], [5, 5], [3, 5], [3, 1], [0, 1], [4, 0], [3, 2], [5, 3], [1, 3], [2, 5], [2, 0]]):\n    a, b, c = tri\n    return [a, b] in edges and [b, c] in edges and [c, a] in edges and a != b != c != a",
    "ans_type": "List[int]",
    "sol_header": "def sol(edges=[[4, 4], [5, 5], [3, 5], [3, 1], [0, 1], [4, 0], [3, 2], [5, 3], [1, 3], [2, 5], [2, 0]]):",
    "sol_docstring": "    \"\"\"Find any triangle in the given directed graph.\"\"\"",
    "sol_bodies": [
      "    from collections import defaultdict\n    outs = defaultdict(set)\n    ins = defaultdict(set)\n    for i, j in edges:\n        if j != i:\n            outs[i].add(j)\n            ins[j].add(i)\n    for i in outs:\n        for j in outs[i]:\n            try:\n                if j in outs:\n                    k = min(outs[j].intersection(ins[i]))\n                    return [i, j, k]\n            except ValueError:\n                pass"
    ],
    "module": "graphs.py",
    "notes": "Easy [graph](https://en.wikipedia.org/w/index.php?title=Graph_(discrete_mathematics)) problem,\nsee [triangle](https://en.wikipedia.org/w/index.php?title=Triangle_graph)",
    "weight": 1.0
  },
  {
    "name": "PlantedClique:0",
    "sat": "def sat(nodes: List[int], size=3, edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):\n    assert len(nodes) == len(set(nodes)) >= size\n    edge_set = {(a, b) for (a, b) in edges}\n    for a in nodes:\n        for b in nodes:\n            assert a == b or (a, b) in edge_set or (b, a) in edge_set\n\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(size=3, edges=[[0, 17], [0, 22], [17, 22], [17, 31], [22, 31], [31, 17]]):",
    "sol_docstring": "    \"\"\"Find a clique of the given size in the given undirected graph. It is guaranteed that such a clique exists.\"\"\"",
    "sol_bodies": [
      "    # brute force (finds list in increasing order), but with a tiny bit of speedup\n    if size == 0:\n        return []\n    from collections import defaultdict\n    neighbors = defaultdict(set)\n    n = max(max(e) for e in edges)\n    for (a, b) in edges:\n        if a != b:\n            neighbors[a].add(b)\n            neighbors[b].add(a)\n    pools = [list(range(n + 1))]\n    indices = [-1]\n    while pools:\n        indices[-1] += 1\n        if indices[-1] >= len(pools[-1]) - size + len(pools):  # since list is increasing order\n            indices.pop()\n            pools.pop()\n            continue\n        if len(pools) == size:\n            return [pool[i] for pool, i in zip(pools, indices)]\n        a = (pools[-1])[indices[-1]]\n        pools.append([i for i in pools[-1] if i > a and i in neighbors[a]])\n        indices.append(-1)\n    assert False, f\"No clique of size {size}\""
    ],
    "module": "graphs.py",
    "notes": "Find a [planted clique](https://en.wikipedia.org/w/index.php?title=Planted_clique) of a given size\nin an undirected graph. Finding a polynomial-time algorithm for this problem has been *unsolved* for\nsome time.",
    "weight": 1.0
  },
  {
    "name": "PlantedClique:1",
    "sat": "def sat(nodes: List[int], size=0, edges=[[1, 0]]):\n    assert len(nodes) == len(set(nodes)) >= size\n    edge_set = {(a, b) for (a, b) in edges}\n    for a in nodes:\n        for b in nodes:\n            assert a == b or (a, b) in edge_set or (b, a) in edge_set\n\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(edges=[[1, 0]], size=0):",
    "sol_docstring": "    \"\"\"Find a clique of the given size in the given undirected graph. It is guaranteed that such a clique exists.\"\"\"",
    "sol_bodies": [
      "    # brute force (finds list in increasing order), but with a tiny bit of speedup\n    if size == 0:\n        return []\n    from collections import defaultdict\n    neighbors = defaultdict(set)\n    n = max(max(e) for e in edges)\n    for (a, b) in edges:\n        if a != b:\n            neighbors[a].add(b)\n            neighbors[b].add(a)\n    pools = [list(range(n + 1))]\n    indices = [-1]\n    while pools:\n        indices[-1] += 1\n        if indices[-1] >= len(pools[-1]) - size + len(pools):  # since list is increasing order\n            indices.pop()\n            pools.pop()\n            continue\n        if len(pools) == size:\n            return [pool[i] for pool, i in zip(pools, indices)]\n        a = (pools[-1])[indices[-1]]\n        pools.append([i for i in pools[-1] if i > a and i in neighbors[a]])\n        indices.append(-1)\n    assert False, f\"No clique of size {size}\""
    ],
    "module": "graphs.py",
    "notes": "Find a [planted clique](https://en.wikipedia.org/w/index.php?title=Planted_clique) of a given size\nin an undirected graph. Finding a polynomial-time algorithm for this problem has been *unsolved* for\nsome time.",
    "weight": 1.0
  },
  {
    "name": "PlantedClique:2",
    "sat": "def sat(nodes: List[int], size=15, edges=[[36, 31], [31, 39], [16, 41], [62, 39], [57, 38], [29, 46], [39, 30], [71, 41], [18, 0], [73, 71], [20, 23], [41, 53], [17, 12], [76, 23], [36, 29], [53, 32], [34, 61], [58, 29], [39, 46], [18, 73], [21, 51], [74, 26], [67, 10], [71, 74], [27, 71], [67, 39], [41, 26], [51, 20], [5, 2], [24, 3], [14, 60], [28, 21], [61, 1], [56, 75], [62, 37], [67, 41], [32, 69], [22, 16], [1, 67], [37, 14], [55, 40], [0, 58], [16, 63], [8, 59], [26, 61], [34, 51], [43, 66], [31, 33], [7, 51], [1, 0], [22, 9], [59, 68], [9, 10], [8, 74], [62, 8], [26, 16], [45, 69], [51, 52], [72, 67], [37, 53], [48, 5], [18, 41], [15, 11], [72, 43], [64, 51], [4, 9], [54, 42], [62, 15], [12, 38], [30, 31], [56, 37], [29, 2], [14, 9], [43, 43], [51, 28], [10, 15], [20, 5], [24, 61], [53, 2], [69, 1], [35, 63], [12, 64], [50, 12], [69, 65], [60, 75], [56, 48], [36, 67], [21, 6], [38, 67], [15, 34], [46, 54], [37, 18], [32, 2], [12, 49], [52, 15], [60, 2], [67, 43], [13, 49], [55, 59], [33, 72], [37, 30], [11, 27], [67, 2], [57, 55], [21, 65], [54, 66], [6, 63], [71, 59], [20, 59], [47, 34], [66, 67], [4, 8], [73, 61], [68, 41], [61, 7], [52, 38], [8, 51], [50, 15], [5, 12], [76, 74], [66, 33], [59, 18], [13, 55], [6, 16], [13, 26], [29, 44], [18, 43], [63, 47], [46, 30], [41, 18], [66, 18], [34, 26], [57, 28], [38, 10], [34, 57], [73, 41], [67, 3], [47, 57], [63, 62], [36, 30], [72, 45], [68, 19], [7, 28], [50, 23], [42, 29], [3, 66], [56, 45], [4, 25], [2, 43], [4, 38], [56, 74], [55, 10], [0, 13], [9, 19], [38, 69], [40, 57], [70, 41], [49, 45], [47, 27], [11, 8], [32, 5], [9, 38], [76, 64], [24, 33], [74, 63], [73, 58], [58, 41], [75, 0], [33, 55], [74, 2], [41, 72], [1, 64], [36, 74], [51, 71], [75, 9], [53, 36], [8, 70], [53, 42], [58, 25], [29, 37], [34, 46], [37, 39], [59, 61], [52, 20], [16, 58], [39, 43], [37, 40], [10, 72], [76, 14], [49, 13], [21, 37], [42, 2], [10, 29], [76, 19], [57, 66], [55, 62], [76, 53], [0, 0], [58, 5], [14, 2], [5, 32], [70, 57], [20, 18], [74, 66], [39, 57], [32, 36], [15, 30], [56, 23], [67, 16], [66, 51], [6, 74], [43, 59], [33, 70], [11, 71], [59, 28], [75, 29], [17, 13], [75, 67], [70, 1], [68, 10], [8, 46], [37, 27], [20, 24], [72, 75], [37, 41], [68, 24], [35, 10], [67, 66], [18, 24], [52, 3], [55, 34], [28, 75], [41, 3], [44, 3], [44, 30], [23, 17], [44, 4], [72, 73], [67, 12], [43, 21], [16, 55], [59, 71], [26, 62], [34, 60], [15, 22], [5, 10], [2, 55], [48, 15], [60, 34], [39, 35], [52, 36], [11, 46], [18, 10], [3, 43], [37, 6], [34, 47], [73, 29], [59, 29], [49, 72], [64, 73], [20, 76], [39, 39], [0, 16], [62, 73], [15, 36], [73, 18], [16, 34], [18, 68], [66, 45], [16, 66], [47, 52], [46, 66], [73, 43], [22, 55], [70, 58], [63, 11], [40, 2], [58, 60], [47, 29], [19, 45], [15, 41], [54, 5], [1, 18], [36, 38], [16, 19], [32, 4], [56, 14], [15, 51], [14, 35], [74, 10], [7, 20], [25, 38], [35, 13], [57, 34], [3, 16], [56, 28], [21, 56], [63, 65], [46, 35], [17, 57], [2, 30], [52, 73], [68, 73], [53, 10], [58, 59], [29, 16], [11, 20], [42, 27], [10, 66], [73, 5], [61, 58], [68, 67], [14, 47], [19, 59], [8, 42], [31, 12], [3, 2], [52, 66], [28, 72], [30, 56], [27, 12], [29, 18], [38, 56], [11, 17], [59, 66], [70, 7], [1, 54], [2, 16], [1, 14], [25, 20], [69, 72], [20, 74], [10, 59], [72, 52], [26, 15], [44, 42], [5, 51], [76, 69], [16, 10], [75, 39], [5, 44], [0, 46], [16, 76], [66, 73], [66, 72], [11, 11], [47, 13], [20, 26], [73, 59], [3, 10], [46, 49], [17, 38], [32, 62], [41, 2], [16, 72], [76, 61], [15, 37], [74, 69], [38, 46], [68, 58], [51, 70], [20, 46], [59, 2], [35, 21], [72, 37], [69, 20], [3, 72], [43, 71], [1, 71], [48, 59], [43, 58], [74, 5], [59, 72], [45, 24], [66, 69], [35, 38], [16, 5], [40, 24], [63, 30], [16, 18], [72, 29], [72, 58], [42, 5], [17, 30], [14, 21], [48, 23], [53, 44], [1, 47], [57, 33], [47, 69], [65, 52], [51, 44], [60, 35], [41, 9], [59, 75], [57, 73], [58, 28], [65, 23], [36, 48], [26, 40], [39, 41], [58, 3], [40, 42], [58, 49], [28, 42], [33, 36], [44, 24], [2, 68], [30, 57], [10, 51], [3, 68], [26, 42], [51, 13], [12, 69], [19, 60], [58, 39], [1, 45], [66, 16], [41, 27], [56, 1], [28, 18], [66, 29], [37, 49], [59, 4], [29, 67], [38, 29], [54, 57], [47, 61], [68, 29], [38, 9], [51, 41], [41, 10], [19, 61], [3, 22], [72, 23], [18, 11], [27, 17], [72, 74], [5, 37], [66, 68], [2, 3], [60, 27], [68, 72], [64, 20], [67, 18], [6, 66], [24, 60], [14, 75], [9, 11], [71, 50], [66, 43], [6, 60], [54, 22], [71, 53], [51, 7], [49, 40], [7, 74], [72, 30], [20, 71], [28, 74], [36, 55], [16, 17], [66, 2], [53, 8], [18, 2], [62, 63], [63, 26], [19, 34], [26, 27], [67, 51], [61, 46], [37, 29], [66, 41], [51, 54], [3, 17], [35, 6], [50, 51], [8, 15], [15, 55], [10, 65], [57, 59], [69, 21], [73, 70], [21, 30], [28, 28], [67, 59], [39, 76], [56, 12], [22, 69], [76, 7], [63, 66], [9, 40], [64, 28], [65, 31], [6, 59], [73, 73], [24, 29], [44, 18], [67, 1], [16, 12], [73, 2], [74, 27], [25, 58], [18, 52], [12, 66], [32, 25], [26, 4], [34, 27], [51, 39], [23, 11], [13, 65], [18, 28], [19, 6], [68, 59], [51, 72], [59, 74], [59, 3], [41, 29], [36, 6], [49, 37], [71, 39], [33, 13], [38, 68], [34, 19], [64, 36], [4, 29], [72, 60], [52, 41], [36, 66], [34, 70], [22, 32], [67, 40], [3, 73], [19, 12], [17, 0], [22, 8], [42, 35], [34, 54], [71, 29], [6, 7], [10, 43], [8, 56], [2, 58], [72, 2], [67, 65], [1, 23], [13, 21], [62, 38], [2, 66], [42, 62], [38, 27], [1, 22], [16, 29], [39, 54], [41, 0], [42, 54], [50, 58], [62, 45], [59, 76], [40, 44], [72, 18], [45, 40], [31, 3], [13, 45], [38, 64], [1, 21], [10, 32], [35, 12], [32, 6], [62, 75], [52, 59], [1, 42], [72, 31], [55, 17], [18, 50], [43, 29], [48, 37], [73, 16], [43, 68], [47, 12], [55, 46], [41, 30], [69, 32], [55, 14], [74, 61], [55, 72], [75, 24], [63, 40], [10, 58], [67, 73], [20, 11], [42, 40], [27, 53], [5, 8], [10, 2], [27, 49], [50, 48], [18, 58], [60, 25], [74, 71], [0, 30], [3, 29], [59, 5], [43, 16], [59, 41], [74, 4], [19, 20], [53, 19], [57, 50], [60, 11], [16, 68], [9, 50], [71, 17], [73, 66], [59, 43], [68, 32], [75, 31], [27, 56], [47, 24], [29, 7], [27, 25], [48, 36], [0, 53], [0, 72], [24, 53], [13, 64], [19, 44], [9, 56], [35, 75], [75, 17], [47, 16], [11, 42], [40, 45], [43, 60], [21, 59], [29, 50], [8, 9], [3, 18], [7, 57], [32, 9], [61, 6], [11, 6], [7, 72], [42, 61], [73, 75], [68, 44], [68, 66], [25, 56], [14, 20], [3, 50], [32, 57], [67, 58], [41, 68], [19, 26], [30, 3], [23, 45], [16, 60], [41, 43], [5, 30], [5, 25], [72, 16], [16, 73], [21, 17], [16, 59], [8, 34], [4, 39], [23, 72], [35, 53], [31, 50], [20, 44], [50, 13], [72, 1], [8, 8], [74, 54], [1, 1], [16, 43], [39, 36], [51, 2], [23, 54], [66, 58], [60, 33], [2, 63], [73, 10]]):\n    assert len(nodes) == len(set(nodes)) >= size\n    edge_set = {(a, b) for (a, b) in edges}\n    for a in nodes:\n        for b in nodes:\n            assert a == b or (a, b) in edge_set or (b, a) in edge_set\n\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(edges=[[36, 31], [31, 39], [16, 41], [62, 39], [57, 38], [29, 46], [39, 30], [71, 41], [18, 0], [73, 71], [20, 23], [41, 53], [17, 12], [76, 23], [36, 29], [53, 32], [34, 61], [58, 29], [39, 46], [18, 73], [21, 51], [74, 26], [67, 10], [71, 74], [27, 71], [67, 39], [41, 26], [51, 20], [5, 2], [24, 3], [14, 60], [28, 21], [61, 1], [56, 75], [62, 37], [67, 41], [32, 69], [22, 16], [1, 67], [37, 14], [55, 40], [0, 58], [16, 63], [8, 59], [26, 61], [34, 51], [43, 66], [31, 33], [7, 51], [1, 0], [22, 9], [59, 68], [9, 10], [8, 74], [62, 8], [26, 16], [45, 69], [51, 52], [72, 67], [37, 53], [48, 5], [18, 41], [15, 11], [72, 43], [64, 51], [4, 9], [54, 42], [62, 15], [12, 38], [30, 31], [56, 37], [29, 2], [14, 9], [43, 43], [51, 28], [10, 15], [20, 5], [24, 61], [53, 2], [69, 1], [35, 63], [12, 64], [50, 12], [69, 65], [60, 75], [56, 48], [36, 67], [21, 6], [38, 67], [15, 34], [46, 54], [37, 18], [32, 2], [12, 49], [52, 15], [60, 2], [67, 43], [13, 49], [55, 59], [33, 72], [37, 30], [11, 27], [67, 2], [57, 55], [21, 65], [54, 66], [6, 63], [71, 59], [20, 59], [47, 34], [66, 67], [4, 8], [73, 61], [68, 41], [61, 7], [52, 38], [8, 51], [50, 15], [5, 12], [76, 74], [66, 33], [59, 18], [13, 55], [6, 16], [13, 26], [29, 44], [18, 43], [63, 47], [46, 30], [41, 18], [66, 18], [34, 26], [57, 28], [38, 10], [34, 57], [73, 41], [67, 3], [47, 57], [63, 62], [36, 30], [72, 45], [68, 19], [7, 28], [50, 23], [42, 29], [3, 66], [56, 45], [4, 25], [2, 43], [4, 38], [56, 74], [55, 10], [0, 13], [9, 19], [38, 69], [40, 57], [70, 41], [49, 45], [47, 27], [11, 8], [32, 5], [9, 38], [76, 64], [24, 33], [74, 63], [73, 58], [58, 41], [75, 0], [33, 55], [74, 2], [41, 72], [1, 64], [36, 74], [51, 71], [75, 9], [53, 36], [8, 70], [53, 42], [58, 25], [29, 37], [34, 46], [37, 39], [59, 61], [52, 20], [16, 58], [39, 43], [37, 40], [10, 72], [76, 14], [49, 13], [21, 37], [42, 2], [10, 29], [76, 19], [57, 66], [55, 62], [76, 53], [0, 0], [58, 5], [14, 2], [5, 32], [70, 57], [20, 18], [74, 66], [39, 57], [32, 36], [15, 30], [56, 23], [67, 16], [66, 51], [6, 74], [43, 59], [33, 70], [11, 71], [59, 28], [75, 29], [17, 13], [75, 67], [70, 1], [68, 10], [8, 46], [37, 27], [20, 24], [72, 75], [37, 41], [68, 24], [35, 10], [67, 66], [18, 24], [52, 3], [55, 34], [28, 75], [41, 3], [44, 3], [44, 30], [23, 17], [44, 4], [72, 73], [67, 12], [43, 21], [16, 55], [59, 71], [26, 62], [34, 60], [15, 22], [5, 10], [2, 55], [48, 15], [60, 34], [39, 35], [52, 36], [11, 46], [18, 10], [3, 43], [37, 6], [34, 47], [73, 29], [59, 29], [49, 72], [64, 73], [20, 76], [39, 39], [0, 16], [62, 73], [15, 36], [73, 18], [16, 34], [18, 68], [66, 45], [16, 66], [47, 52], [46, 66], [73, 43], [22, 55], [70, 58], [63, 11], [40, 2], [58, 60], [47, 29], [19, 45], [15, 41], [54, 5], [1, 18], [36, 38], [16, 19], [32, 4], [56, 14], [15, 51], [14, 35], [74, 10], [7, 20], [25, 38], [35, 13], [57, 34], [3, 16], [56, 28], [21, 56], [63, 65], [46, 35], [17, 57], [2, 30], [52, 73], [68, 73], [53, 10], [58, 59], [29, 16], [11, 20], [42, 27], [10, 66], [73, 5], [61, 58], [68, 67], [14, 47], [19, 59], [8, 42], [31, 12], [3, 2], [52, 66], [28, 72], [30, 56], [27, 12], [29, 18], [38, 56], [11, 17], [59, 66], [70, 7], [1, 54], [2, 16], [1, 14], [25, 20], [69, 72], [20, 74], [10, 59], [72, 52], [26, 15], [44, 42], [5, 51], [76, 69], [16, 10], [75, 39], [5, 44], [0, 46], [16, 76], [66, 73], [66, 72], [11, 11], [47, 13], [20, 26], [73, 59], [3, 10], [46, 49], [17, 38], [32, 62], [41, 2], [16, 72], [76, 61], [15, 37], [74, 69], [38, 46], [68, 58], [51, 70], [20, 46], [59, 2], [35, 21], [72, 37], [69, 20], [3, 72], [43, 71], [1, 71], [48, 59], [43, 58], [74, 5], [59, 72], [45, 24], [66, 69], [35, 38], [16, 5], [40, 24], [63, 30], [16, 18], [72, 29], [72, 58], [42, 5], [17, 30], [14, 21], [48, 23], [53, 44], [1, 47], [57, 33], [47, 69], [65, 52], [51, 44], [60, 35], [41, 9], [59, 75], [57, 73], [58, 28], [65, 23], [36, 48], [26, 40], [39, 41], [58, 3], [40, 42], [58, 49], [28, 42], [33, 36], [44, 24], [2, 68], [30, 57], [10, 51], [3, 68], [26, 42], [51, 13], [12, 69], [19, 60], [58, 39], [1, 45], [66, 16], [41, 27], [56, 1], [28, 18], [66, 29], [37, 49], [59, 4], [29, 67], [38, 29], [54, 57], [47, 61], [68, 29], [38, 9], [51, 41], [41, 10], [19, 61], [3, 22], [72, 23], [18, 11], [27, 17], [72, 74], [5, 37], [66, 68], [2, 3], [60, 27], [68, 72], [64, 20], [67, 18], [6, 66], [24, 60], [14, 75], [9, 11], [71, 50], [66, 43], [6, 60], [54, 22], [71, 53], [51, 7], [49, 40], [7, 74], [72, 30], [20, 71], [28, 74], [36, 55], [16, 17], [66, 2], [53, 8], [18, 2], [62, 63], [63, 26], [19, 34], [26, 27], [67, 51], [61, 46], [37, 29], [66, 41], [51, 54], [3, 17], [35, 6], [50, 51], [8, 15], [15, 55], [10, 65], [57, 59], [69, 21], [73, 70], [21, 30], [28, 28], [67, 59], [39, 76], [56, 12], [22, 69], [76, 7], [63, 66], [9, 40], [64, 28], [65, 31], [6, 59], [73, 73], [24, 29], [44, 18], [67, 1], [16, 12], [73, 2], [74, 27], [25, 58], [18, 52], [12, 66], [32, 25], [26, 4], [34, 27], [51, 39], [23, 11], [13, 65], [18, 28], [19, 6], [68, 59], [51, 72], [59, 74], [59, 3], [41, 29], [36, 6], [49, 37], [71, 39], [33, 13], [38, 68], [34, 19], [64, 36], [4, 29], [72, 60], [52, 41], [36, 66], [34, 70], [22, 32], [67, 40], [3, 73], [19, 12], [17, 0], [22, 8], [42, 35], [34, 54], [71, 29], [6, 7], [10, 43], [8, 56], [2, 58], [72, 2], [67, 65], [1, 23], [13, 21], [62, 38], [2, 66], [42, 62], [38, 27], [1, 22], [16, 29], [39, 54], [41, 0], [42, 54], [50, 58], [62, 45], [59, 76], [40, 44], [72, 18], [45, 40], [31, 3], [13, 45], [38, 64], [1, 21], [10, 32], [35, 12], [32, 6], [62, 75], [52, 59], [1, 42], [72, 31], [55, 17], [18, 50], [43, 29], [48, 37], [73, 16], [43, 68], [47, 12], [55, 46], [41, 30], [69, 32], [55, 14], [74, 61], [55, 72], [75, 24], [63, 40], [10, 58], [67, 73], [20, 11], [42, 40], [27, 53], [5, 8], [10, 2], [27, 49], [50, 48], [18, 58], [60, 25], [74, 71], [0, 30], [3, 29], [59, 5], [43, 16], [59, 41], [74, 4], [19, 20], [53, 19], [57, 50], [60, 11], [16, 68], [9, 50], [71, 17], [73, 66], [59, 43], [68, 32], [75, 31], [27, 56], [47, 24], [29, 7], [27, 25], [48, 36], [0, 53], [0, 72], [24, 53], [13, 64], [19, 44], [9, 56], [35, 75], [75, 17], [47, 16], [11, 42], [40, 45], [43, 60], [21, 59], [29, 50], [8, 9], [3, 18], [7, 57], [32, 9], [61, 6], [11, 6], [7, 72], [42, 61], [73, 75], [68, 44], [68, 66], [25, 56], [14, 20], [3, 50], [32, 57], [67, 58], [41, 68], [19, 26], [30, 3], [23, 45], [16, 60], [41, 43], [5, 30], [5, 25], [72, 16], [16, 73], [21, 17], [16, 59], [8, 34], [4, 39], [23, 72], [35, 53], [31, 50], [20, 44], [50, 13], [72, 1], [8, 8], [74, 54], [1, 1], [16, 43], [39, 36], [51, 2], [23, 54], [66, 58], [60, 33], [2, 63], [73, 10]], size=15):",
    "sol_docstring": "    \"\"\"Find a clique of the given size in the given undirected graph. It is guaranteed that such a clique exists.\"\"\"",
    "sol_bodies": [],
    "module": "graphs.py",
    "notes": "Find a [planted clique](https://en.wikipedia.org/w/index.php?title=Planted_clique) of a given size\nin an undirected graph. Finding a polynomial-time algorithm for this problem has been *unsolved* for\nsome time.",
    "weight": 1.0
  },
  {
    "name": "PlantedClique:3",
    "sat": "def sat(nodes: List[int], size=18, edges=[[34, 43], [45, 8], [7, 46], [53, 11], [48, 24], [47, 46], [20, 46], [11, 57], [39, 17], [25, 13], [9, 49], [47, 51], [5, 22], [56, 8], [5, 20], [11, 26], [40, 20], [30, 42], [46, 35], [41, 11], [49, 57], [24, 46], [40, 27], [3, 13], [25, 36], [20, 49], [57, 24], [56, 26], [1, 52], [8, 26], [17, 44], [1, 21], [5, 6], [45, 45], [39, 25], [48, 27], [26, 17], [37, 25], [17, 16], [49, 0], [17, 56], [33, 43], [20, 43], [24, 20], [31, 56], [54, 28], [25, 27], [50, 5], [21, 43], [54, 25], [57, 45], [48, 5], [45, 34], [18, 46], [25, 47], [56, 48], [17, 57], [15, 29], [40, 22], [23, 57], [17, 27], [1, 14], [7, 54], [15, 24], [27, 44], [24, 44], [6, 7], [59, 13], [56, 51], [49, 46], [1, 32], [20, 36], [46, 13], [15, 46], [6, 46], [59, 51], [35, 5], [27, 10], [3, 16], [24, 33], [34, 49], [4, 38], [46, 24], [46, 3], [41, 39], [12, 9], [44, 39], [27, 23], [33, 11], [16, 24], [29, 59], [47, 39], [32, 10], [23, 36], [48, 30], [48, 20], [18, 43], [36, 9], [36, 16], [27, 57], [29, 35], [13, 41], [52, 12], [32, 20], [9, 50], [29, 27], [47, 44], [57, 39], [48, 57], [35, 45], [9, 23], [25, 55], [32, 25], [5, 57], [44, 16], [5, 27], [16, 37], [15, 25], [39, 51], [43, 14], [13, 44], [2, 5], [40, 4], [58, 30], [43, 6], [25, 28], [16, 35], [57, 44], [51, 54], [21, 11], [18, 19], [41, 20], [44, 48], [14, 54], [57, 16], [15, 5], [37, 15], [44, 49], [15, 20], [11, 20], [45, 1], [3, 32], [7, 22], [48, 39], [28, 37], [11, 51], [20, 16], [32, 4], [13, 17], [16, 15], [20, 37], [37, 46], [33, 59], [46, 25], [42, 1], [32, 33], [13, 53], [46, 18], [44, 23], [17, 48], [5, 24], [10, 40], [19, 11], [37, 47], [11, 42], [13, 24], [13, 27], [42, 9], [13, 5], [29, 17], [57, 4], [31, 25], [38, 32], [21, 45], [0, 21], [1, 0], [20, 13], [24, 37], [20, 25], [5, 17], [20, 47], [46, 41], [11, 0], [25, 22], [5, 28], [44, 5], [10, 11], [41, 22], [17, 25], [25, 20], [20, 17], [39, 46], [49, 25], [41, 0], [12, 44], [41, 49], [55, 8], [47, 49], [27, 49], [2, 11], [38, 11], [27, 46], [16, 9], [41, 47], [17, 15], [37, 31], [48, 48], [53, 59], [25, 24], [3, 44], [34, 48], [33, 13], [15, 47], [16, 39], [48, 8], [32, 55], [38, 22], [11, 23], [41, 16], [21, 44], [20, 27], [13, 57], [27, 41], [29, 32], [56, 39], [31, 51], [46, 20], [24, 49], [25, 3], [57, 37], [15, 44], [9, 41], [15, 48], [42, 57], [47, 5], [48, 37], [45, 49], [44, 41], [7, 3], [39, 49], [49, 37], [24, 16], [57, 41], [56, 2], [49, 20], [19, 5], [58, 18], [7, 31], [24, 5], [41, 32], [34, 23], [17, 5], [47, 27], [49, 41], [31, 12], [0, 11], [49, 15], [13, 15], [29, 31], [14, 56], [24, 41], [35, 1], [16, 25], [26, 28], [16, 49], [12, 46], [47, 16], [17, 37], [37, 39], [3, 22], [27, 24], [20, 39], [24, 4], [33, 15], [53, 50], [32, 1], [23, 40], [33, 25], [4, 24], [48, 25], [47, 57], [25, 8], [39, 30], [17, 53], [41, 53], [31, 8], [39, 33], [33, 16], [32, 19], [41, 5], [49, 17], [53, 40], [42, 52], [24, 17], [30, 59], [13, 14], [43, 27], [48, 16], [24, 47], [37, 23], [30, 47], [49, 10], [47, 12], [5, 37], [48, 47], [59, 27], [57, 17], [27, 33], [12, 30], [41, 48], [5, 46], [12, 25], [53, 46], [54, 8], [48, 1], [22, 25], [20, 44], [14, 38], [48, 13], [3, 3], [59, 4], [14, 7], [49, 26], [36, 5], [28, 32], [57, 46], [22, 34], [11, 54], [27, 58], [4, 11], [24, 39], [57, 25], [15, 27], [6, 15], [27, 29], [51, 37], [48, 23], [15, 57], [27, 25], [0, 57], [49, 48], [27, 34], [21, 5], [31, 40], [38, 45], [15, 1], [17, 42], [5, 16], [59, 32], [13, 51], [17, 47], [38, 54], [4, 43], [54, 9], [42, 31], [16, 13], [20, 57], [58, 10], [41, 30], [52, 19], [52, 35], [46, 44], [51, 4], [30, 39], [47, 13], [30, 32], [36, 42], [39, 15], [3, 19], [12, 16], [46, 16], [12, 37], [46, 48], [58, 46], [5, 25], [46, 6], [49, 44], [18, 23], [50, 24], [16, 16], [49, 53], [37, 33], [4, 15], [46, 17], [7, 20], [25, 41], [27, 56], [37, 41], [38, 55], [59, 28], [31, 7], [10, 47], [40, 23], [49, 5], [44, 25], [8, 36], [26, 39], [34, 3], [5, 12], [54, 22], [15, 41], [40, 19], [21, 12], [16, 5], [13, 49], [39, 5], [9, 9], [11, 53], [27, 16], [27, 39], [52, 14], [3, 56], [27, 37], [30, 15], [41, 17], [1, 34], [55, 32], [28, 22], [49, 27], [10, 55], [39, 37], [30, 17], [23, 9], [22, 11], [44, 37], [41, 37], [37, 13], [51, 18], [4, 34], [23, 12], [39, 13], [32, 9], [58, 14], [25, 48], [29, 14], [52, 2]]):\n    assert len(nodes) == len(set(nodes)) >= size\n    edge_set = {(a, b) for (a, b) in edges}\n    for a in nodes:\n        for b in nodes:\n            assert a == b or (a, b) in edge_set or (b, a) in edge_set\n\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(edges=[[34, 43], [45, 8], [7, 46], [53, 11], [48, 24], [47, 46], [20, 46], [11, 57], [39, 17], [25, 13], [9, 49], [47, 51], [5, 22], [56, 8], [5, 20], [11, 26], [40, 20], [30, 42], [46, 35], [41, 11], [49, 57], [24, 46], [40, 27], [3, 13], [25, 36], [20, 49], [57, 24], [56, 26], [1, 52], [8, 26], [17, 44], [1, 21], [5, 6], [45, 45], [39, 25], [48, 27], [26, 17], [37, 25], [17, 16], [49, 0], [17, 56], [33, 43], [20, 43], [24, 20], [31, 56], [54, 28], [25, 27], [50, 5], [21, 43], [54, 25], [57, 45], [48, 5], [45, 34], [18, 46], [25, 47], [56, 48], [17, 57], [15, 29], [40, 22], [23, 57], [17, 27], [1, 14], [7, 54], [15, 24], [27, 44], [24, 44], [6, 7], [59, 13], [56, 51], [49, 46], [1, 32], [20, 36], [46, 13], [15, 46], [6, 46], [59, 51], [35, 5], [27, 10], [3, 16], [24, 33], [34, 49], [4, 38], [46, 24], [46, 3], [41, 39], [12, 9], [44, 39], [27, 23], [33, 11], [16, 24], [29, 59], [47, 39], [32, 10], [23, 36], [48, 30], [48, 20], [18, 43], [36, 9], [36, 16], [27, 57], [29, 35], [13, 41], [52, 12], [32, 20], [9, 50], [29, 27], [47, 44], [57, 39], [48, 57], [35, 45], [9, 23], [25, 55], [32, 25], [5, 57], [44, 16], [5, 27], [16, 37], [15, 25], [39, 51], [43, 14], [13, 44], [2, 5], [40, 4], [58, 30], [43, 6], [25, 28], [16, 35], [57, 44], [51, 54], [21, 11], [18, 19], [41, 20], [44, 48], [14, 54], [57, 16], [15, 5], [37, 15], [44, 49], [15, 20], [11, 20], [45, 1], [3, 32], [7, 22], [48, 39], [28, 37], [11, 51], [20, 16], [32, 4], [13, 17], [16, 15], [20, 37], [37, 46], [33, 59], [46, 25], [42, 1], [32, 33], [13, 53], [46, 18], [44, 23], [17, 48], [5, 24], [10, 40], [19, 11], [37, 47], [11, 42], [13, 24], [13, 27], [42, 9], [13, 5], [29, 17], [57, 4], [31, 25], [38, 32], [21, 45], [0, 21], [1, 0], [20, 13], [24, 37], [20, 25], [5, 17], [20, 47], [46, 41], [11, 0], [25, 22], [5, 28], [44, 5], [10, 11], [41, 22], [17, 25], [25, 20], [20, 17], [39, 46], [49, 25], [41, 0], [12, 44], [41, 49], [55, 8], [47, 49], [27, 49], [2, 11], [38, 11], [27, 46], [16, 9], [41, 47], [17, 15], [37, 31], [48, 48], [53, 59], [25, 24], [3, 44], [34, 48], [33, 13], [15, 47], [16, 39], [48, 8], [32, 55], [38, 22], [11, 23], [41, 16], [21, 44], [20, 27], [13, 57], [27, 41], [29, 32], [56, 39], [31, 51], [46, 20], [24, 49], [25, 3], [57, 37], [15, 44], [9, 41], [15, 48], [42, 57], [47, 5], [48, 37], [45, 49], [44, 41], [7, 3], [39, 49], [49, 37], [24, 16], [57, 41], [56, 2], [49, 20], [19, 5], [58, 18], [7, 31], [24, 5], [41, 32], [34, 23], [17, 5], [47, 27], [49, 41], [31, 12], [0, 11], [49, 15], [13, 15], [29, 31], [14, 56], [24, 41], [35, 1], [16, 25], [26, 28], [16, 49], [12, 46], [47, 16], [17, 37], [37, 39], [3, 22], [27, 24], [20, 39], [24, 4], [33, 15], [53, 50], [32, 1], [23, 40], [33, 25], [4, 24], [48, 25], [47, 57], [25, 8], [39, 30], [17, 53], [41, 53], [31, 8], [39, 33], [33, 16], [32, 19], [41, 5], [49, 17], [53, 40], [42, 52], [24, 17], [30, 59], [13, 14], [43, 27], [48, 16], [24, 47], [37, 23], [30, 47], [49, 10], [47, 12], [5, 37], [48, 47], [59, 27], [57, 17], [27, 33], [12, 30], [41, 48], [5, 46], [12, 25], [53, 46], [54, 8], [48, 1], [22, 25], [20, 44], [14, 38], [48, 13], [3, 3], [59, 4], [14, 7], [49, 26], [36, 5], [28, 32], [57, 46], [22, 34], [11, 54], [27, 58], [4, 11], [24, 39], [57, 25], [15, 27], [6, 15], [27, 29], [51, 37], [48, 23], [15, 57], [27, 25], [0, 57], [49, 48], [27, 34], [21, 5], [31, 40], [38, 45], [15, 1], [17, 42], [5, 16], [59, 32], [13, 51], [17, 47], [38, 54], [4, 43], [54, 9], [42, 31], [16, 13], [20, 57], [58, 10], [41, 30], [52, 19], [52, 35], [46, 44], [51, 4], [30, 39], [47, 13], [30, 32], [36, 42], [39, 15], [3, 19], [12, 16], [46, 16], [12, 37], [46, 48], [58, 46], [5, 25], [46, 6], [49, 44], [18, 23], [50, 24], [16, 16], [49, 53], [37, 33], [4, 15], [46, 17], [7, 20], [25, 41], [27, 56], [37, 41], [38, 55], [59, 28], [31, 7], [10, 47], [40, 23], [49, 5], [44, 25], [8, 36], [26, 39], [34, 3], [5, 12], [54, 22], [15, 41], [40, 19], [21, 12], [16, 5], [13, 49], [39, 5], [9, 9], [11, 53], [27, 16], [27, 39], [52, 14], [3, 56], [27, 37], [30, 15], [41, 17], [1, 34], [55, 32], [28, 22], [49, 27], [10, 55], [39, 37], [30, 17], [23, 9], [22, 11], [44, 37], [41, 37], [37, 13], [51, 18], [4, 34], [23, 12], [39, 13], [32, 9], [58, 14], [25, 48], [29, 14], [52, 2]], size=18):",
    "sol_docstring": "    \"\"\"Find a clique of the given size in the given undirected graph. It is guaranteed that such a clique exists.\"\"\"",
    "sol_bodies": [],
    "module": "graphs.py",
    "notes": "Find a [planted clique](https://en.wikipedia.org/w/index.php?title=Planted_clique) of a given size\nin an undirected graph. Finding a polynomial-time algorithm for this problem has been *unsolved* for\nsome time.",
    "weight": 1.0
  },
  {
    "name": "PlantedClique:4",
    "sat": "def sat(nodes: List[int], size=0, edges=[[0, 1], [1, 0]]):\n    assert len(nodes) == len(set(nodes)) >= size\n    edge_set = {(a, b) for (a, b) in edges}\n    for a in nodes:\n        for b in nodes:\n            assert a == b or (a, b) in edge_set or (b, a) in edge_set\n\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(edges=[[0, 1], [1, 0]], size=0):",
    "sol_docstring": "    \"\"\"Find a clique of the given size in the given undirected graph. It is guaranteed that such a clique exists.\"\"\"",
    "sol_bodies": [
      "    # brute force (finds list in increasing order), but with a tiny bit of speedup\n    if size == 0:\n        return []\n    from collections import defaultdict\n    neighbors = defaultdict(set)\n    n = max(max(e) for e in edges)\n    for (a, b) in edges:\n        if a != b:\n            neighbors[a].add(b)\n            neighbors[b].add(a)\n    pools = [list(range(n + 1))]\n    indices = [-1]\n    while pools:\n        indices[-1] += 1\n        if indices[-1] >= len(pools[-1]) - size + len(pools):  # since list is increasing order\n            indices.pop()\n            pools.pop()\n            continue\n        if len(pools) == size:\n            return [pool[i] for pool, i in zip(pools, indices)]\n        a = (pools[-1])[indices[-1]]\n        pools.append([i for i in pools[-1] if i > a and i in neighbors[a]])\n        indices.append(-1)\n    assert False, f\"No clique of size {size}\""
    ],
    "module": "graphs.py",
    "notes": "Find a [planted clique](https://en.wikipedia.org/w/index.php?title=Planted_clique) of a given size\nin an undirected graph. Finding a polynomial-time algorithm for this problem has been *unsolved* for\nsome time.",
    "weight": 1.0
  },
  {
    "name": "ShortestPath:0",
    "sat": "def sat(path: List[int], weights=[{1: 20, 2: 1}, {2: 2, 3: 5}, {1: 10}], bound=11):\n    return path[0] == 0 and path[-1] == 1 and sum(weights[a][b] for a, b in zip(path, path[1:])) <= bound",
    "ans_type": "List[int]",
    "sol_header": "def sol(weights=[{1: 20, 2: 1}, {2: 2, 3: 5}, {1: 10}], bound=11):",
    "sol_docstring": "    \"\"\"\n    Find a path from node 0 to node 1, of length at most bound, in the given digraph.\n    weights[a][b] is weight on edge [a,b] for (int) nodes a, b\n    \"\"\"",
    "sol_bodies": [
      "    # Dijkstra's algorithm (bound is ignored)\n    u, v = 0, 1  # go from 0 to 1\n    import heapq\n    queue = [(0, u, u)]  # distance, node, trail\n\n    trails = {}\n\n    while queue:\n        dist, i, j = heapq.heappop(queue)\n        if i in trails:\n            continue\n        trails[i] = j\n        if i == v:\n            break\n        for j in weights[i]:\n            if j not in trails:\n                heapq.heappush(queue, (dist + weights[i][j], j, i))\n    if v in trails:\n        rev_path = [v]\n        while rev_path[-1] != u:\n            rev_path.append(trails[rev_path[-1]])\n        return rev_path[::-1]"
    ],
    "module": "graphs.py",
    "notes": "Shortest Path, see (Dijkstra's algorithm)[https://en.wikipedia.org/w/index.php?title=Dijkstra%27s_algorithm]",
    "weight": 1.0
  },
  {
    "name": "ShortestPath:1",
    "sat": "def sat(path: List[int], weights=[{3: 210, 0: 513, 1: 66, 5: 612}, {0: 794, 1: 111, 3: 598}, {4: 295, 0: 601}, {}, {3: 452, 0: 689, 5: 124, 1: 406}, {2: 289, 5: 660, 3: 498}], bound=66):\n    return path[0] == 0 and path[-1] == 1 and sum(weights[a][b] for a, b in zip(path, path[1:])) <= bound",
    "ans_type": "List[int]",
    "sol_header": "def sol(weights=[{3: 210, 0: 513, 1: 66, 5: 612}, {0: 794, 1: 111, 3: 598}, {4: 295, 0: 601}, {}, {3: 452, 0: 689, 5: 124, 1: 406}, {2: 289, 5: 660, 3: 498}], bound=66):",
    "sol_docstring": "    \"\"\"\n    Find a path from node 0 to node 1, of length at most bound, in the given digraph.\n    weights[a][b] is weight on edge [a,b] for (int) nodes a, b\n    \"\"\"",
    "sol_bodies": [
      "    # Dijkstra's algorithm (bound is ignored)\n    u, v = 0, 1  # go from 0 to 1\n    import heapq\n    queue = [(0, u, u)]  # distance, node, trail\n\n    trails = {}\n\n    while queue:\n        dist, i, j = heapq.heappop(queue)\n        if i in trails:\n            continue\n        trails[i] = j\n        if i == v:\n            break\n        for j in weights[i]:\n            if j not in trails:\n                heapq.heappush(queue, (dist + weights[i][j], j, i))\n    if v in trails:\n        rev_path = [v]\n        while rev_path[-1] != u:\n            rev_path.append(trails[rev_path[-1]])\n        return rev_path[::-1]"
    ],
    "module": "graphs.py",
    "notes": "Shortest Path, see (Dijkstra's algorithm)[https://en.wikipedia.org/w/index.php?title=Dijkstra%27s_algorithm]",
    "weight": 1.0
  },
  {
    "name": "ShortestPath:2",
    "sat": "def sat(path: List[int], weights=[{25: 594, 24: 349}, {}, {29: 745}, {}, {7: 245}, {9: 384}, {1: 490, 21: 253, 22: 904, 13: 526}, {4: 452, 27: 179, 28: 673}, {22: 30, 29: 307, 8: 104}, {12: 399, 0: 792}, {}, {}, {20: 349, 6: 53}, {}, {}, {}, {14: 223}, {23: 705}, {13: 903, 21: 159}, {}, {27: 144, 28: 181}, {26: 922, 20: 241}, {}, {24: 966, 29: 78}, {26: 107}, {1: 121}, {18: 898, 0: 280, 12: 425}, {}, {18: 750, 25: 440, 28: 152, 29: 109, 6: 330}, {23: 298}], bound=715):\n    return path[0] == 0 and path[-1] == 1 and sum(weights[a][b] for a, b in zip(path, path[1:])) <= bound",
    "ans_type": "List[int]",
    "sol_header": "def sol(weights=[{25: 594, 24: 349}, {}, {29: 745}, {}, {7: 245}, {9: 384}, {1: 490, 21: 253, 22: 904, 13: 526}, {4: 452, 27: 179, 28: 673}, {22: 30, 29: 307, 8: 104}, {12: 399, 0: 792}, {}, {}, {20: 349, 6: 53}, {}, {}, {}, {14: 223}, {23: 705}, {13: 903, 21: 159}, {}, {27: 144, 28: 181}, {26: 922, 20: 241}, {}, {24: 966, 29: 78}, {26: 107}, {1: 121}, {18: 898, 0: 280, 12: 425}, {}, {18: 750, 25: 440, 28: 152, 29: 109, 6: 330}, {23: 298}], bound=715):",
    "sol_docstring": "    \"\"\"\n    Find a path from node 0 to node 1, of length at most bound, in the given digraph.\n    weights[a][b] is weight on edge [a,b] for (int) nodes a, b\n    \"\"\"",
    "sol_bodies": [
      "    # Dijkstra's algorithm (bound is ignored)\n    u, v = 0, 1  # go from 0 to 1\n    import heapq\n    queue = [(0, u, u)]  # distance, node, trail\n\n    trails = {}\n\n    while queue:\n        dist, i, j = heapq.heappop(queue)\n        if i in trails:\n            continue\n        trails[i] = j\n        if i == v:\n            break\n        for j in weights[i]:\n            if j not in trails:\n                heapq.heappush(queue, (dist + weights[i][j], j, i))\n    if v in trails:\n        rev_path = [v]\n        while rev_path[-1] != u:\n            rev_path.append(trails[rev_path[-1]])\n        return rev_path[::-1]"
    ],
    "module": "graphs.py",
    "notes": "Shortest Path, see (Dijkstra's algorithm)[https://en.wikipedia.org/w/index.php?title=Dijkstra%27s_algorithm]",
    "weight": 1.0
  },
  {
    "name": "ShortestPath:3",
    "sat": "def sat(path: List[int], weights=[{1: 239}, {0: 602, 2: 280}, {2: 293, 0: 816, 3: 925}, {}], bound=239):\n    return path[0] == 0 and path[-1] == 1 and sum(weights[a][b] for a, b in zip(path, path[1:])) <= bound",
    "ans_type": "List[int]",
    "sol_header": "def sol(weights=[{1: 239}, {0: 602, 2: 280}, {2: 293, 0: 816, 3: 925}, {}], bound=239):",
    "sol_docstring": "    \"\"\"\n    Find a path from node 0 to node 1, of length at most bound, in the given digraph.\n    weights[a][b] is weight on edge [a,b] for (int) nodes a, b\n    \"\"\"",
    "sol_bodies": [
      "    # Dijkstra's algorithm (bound is ignored)\n    u, v = 0, 1  # go from 0 to 1\n    import heapq\n    queue = [(0, u, u)]  # distance, node, trail\n\n    trails = {}\n\n    while queue:\n        dist, i, j = heapq.heappop(queue)\n        if i in trails:\n            continue\n        trails[i] = j\n        if i == v:\n            break\n        for j in weights[i]:\n            if j not in trails:\n                heapq.heappush(queue, (dist + weights[i][j], j, i))\n    if v in trails:\n        rev_path = [v]\n        while rev_path[-1] != u:\n            rev_path.append(trails[rev_path[-1]])\n        return rev_path[::-1]"
    ],
    "module": "graphs.py",
    "notes": "Shortest Path, see (Dijkstra's algorithm)[https://en.wikipedia.org/w/index.php?title=Dijkstra%27s_algorithm]",
    "weight": 1.0
  },
  {
    "name": "ShortestPath:4",
    "sat": "def sat(path: List[int], weights=[{1: 996, 2: 237, 4: 264}, {4: 329, 5: 12, 2: 542, 0: 419}, {2: 170, 6: 339, 5: 211}, {1: 714, 5: 885, 3: 640}, {5: 652, 4: 3, 3: 26, 6: 74}, {0: 647, 5: 346}, {2: 297, 6: 358, 3: 636, 0: 722, 4: 942}], bound=996):\n    return path[0] == 0 and path[-1] == 1 and sum(weights[a][b] for a, b in zip(path, path[1:])) <= bound",
    "ans_type": "List[int]",
    "sol_header": "def sol(weights=[{1: 996, 2: 237, 4: 264}, {4: 329, 5: 12, 2: 542, 0: 419}, {2: 170, 6: 339, 5: 211}, {1: 714, 5: 885, 3: 640}, {5: 652, 4: 3, 3: 26, 6: 74}, {0: 647, 5: 346}, {2: 297, 6: 358, 3: 636, 0: 722, 4: 942}], bound=996):",
    "sol_docstring": "    \"\"\"\n    Find a path from node 0 to node 1, of length at most bound, in the given digraph.\n    weights[a][b] is weight on edge [a,b] for (int) nodes a, b\n    \"\"\"",
    "sol_bodies": [
      "    # Dijkstra's algorithm (bound is ignored)\n    u, v = 0, 1  # go from 0 to 1\n    import heapq\n    queue = [(0, u, u)]  # distance, node, trail\n\n    trails = {}\n\n    while queue:\n        dist, i, j = heapq.heappop(queue)\n        if i in trails:\n            continue\n        trails[i] = j\n        if i == v:\n            break\n        for j in weights[i]:\n            if j not in trails:\n                heapq.heappush(queue, (dist + weights[i][j], j, i))\n    if v in trails:\n        rev_path = [v]\n        while rev_path[-1] != u:\n            rev_path.append(trails[rev_path[-1]])\n        return rev_path[::-1]"
    ],
    "module": "graphs.py",
    "notes": "Shortest Path, see (Dijkstra's algorithm)[https://en.wikipedia.org/w/index.php?title=Dijkstra%27s_algorithm]",
    "weight": 1.0
  },
  {
    "name": "UnweightedShortestPath:0",
    "sat": "def sat(path: List[int], edges=[[0, 11], [0, 7], [7, 5], [0, 22], [11, 22], [11, 33], [22, 33]], u=0, v=33, bound=3):\n    assert path[0] == u and path[-1] == v and all([i, j] in edges for i, j in zip(path, path[1:]))\n    return len(path) <= bound",
    "ans_type": "List[int]",
    "sol_header": "def sol(edges=[[0, 11], [0, 7], [7, 5], [0, 22], [11, 22], [11, 33], [22, 33]], u=0, v=33, bound=3):",
    "sol_docstring": "    \"\"\"Find a path from node u to node v, of a bounded length, in the given digraph on vertices 0, 1,..., n.\"\"\"",
    "sol_bodies": [
      "    # Dijkstra's algorithm\n    import heapq\n    from collections import defaultdict\n    queue = [(0, u, u)]  # distance, node, trail\n\n    trails = {}\n    neighbors = defaultdict(set)\n    for (i, j) in edges:\n        neighbors[i].add(j)\n\n    while queue:\n        dist, i, j = heapq.heappop(queue)\n        if i in trails:\n            continue\n        trails[i] = j\n        if i == v:\n            break\n        for j in neighbors[i]:\n            if j not in trails:\n                heapq.heappush(queue, (dist + 1, j, i))\n    if v in trails:\n        rev_path = [v]\n        while rev_path[-1] != u:\n            rev_path.append(trails[rev_path[-1]])\n        return rev_path[::-1]"
    ],
    "module": "graphs.py",
    "notes": "Unweighted Shortest Path\n\nSee (Dijkstra's algorithm)[https://en.wikipedia.org/w/index.php?title=Dijkstra%27s_algorithm]",
    "weight": 1.0
  },
  {
    "name": "UnweightedShortestPath:1",
    "sat": "def sat(path: List[int], edges=[[12, 4], [33, 15], [37, 12], [11, 1], [34, 19], [42, 36], [2, 38], [6, 25], [29, 25], [30, 6], [16, 31], [10, 41], [15, 2], [3, 19], [1, 26], [17, 17], [19, 4], [0, 6], [42, 5], [11, 13], [22, 15], [39, 11], [35, 34], [39, 20], [7, 31], [38, 27], [9, 30], [31, 25], [0, 9], [13, 34], [31, 34], [19, 42], [37, 32], [4, 13], [11, 43], [14, 0], [22, 41], [20, 17], [0, 15], [13, 4], [20, 6], [34, 42], [42, 10], [32, 19], [41, 8], [26, 42], [0, 13], [28, 42], [9, 0], [32, 26], [6, 4], [27, 19], [37, 9], [7, 6], [25, 14], [23, 14], [31, 39], [18, 27], [34, 36], [24, 16], [24, 31], [16, 17], [2, 4], [34, 40], [28, 6], [41, 9], [17, 18], [43, 11], [11, 39], [43, 29], [1, 19], [27, 27], [4, 42], [0, 16], [16, 14], [40, 22], [22, 22], [38, 16], [3, 34], [33, 23], [2, 18], [3, 11], [4, 5], [18, 3], [23, 11], [41, 22], [7, 26], [31, 42], [35, 33], [15, 28], [34, 10], [36, 3], [9, 38], [17, 5], [3, 9], [37, 21], [36, 1], [25, 6], [22, 12], [42, 3], [16, 32], [0, 11], [24, 33], [15, 31], [18, 34], [11, 8], [30, 41], [19, 19], [4, 11], [22, 16], [1, 13], [6, 22], [12, 30], [19, 15], [3, 21], [38, 29], [32, 39], [1, 17], [16, 20], [10, 39], [32, 27], [37, 6], [18, 18], [22, 32], [31, 32], [24, 32], [22, 25], [38, 18], [38, 21], [39, 12], [9, 17], [10, 42], [29, 36], [34, 23], [27, 29], [17, 24], [24, 28], [31, 23], [28, 7], [5, 2], [24, 26], [27, 13], [43, 19], [37, 36], [2, 13], [10, 11], [30, 11], [29, 32], [4, 24], [17, 27], [21, 2], [24, 43], [26, 37], [16, 6], [43, 35], [42, 27], [26, 12], [39, 3], [38, 25], [20, 5], [36, 8], [25, 42], [27, 40], [39, 23], [6, 12], [27, 32], [12, 34], [2, 5], [40, 35], [15, 12], [22, 29], [21, 11], [0, 22], [13, 23], [27, 4], [35, 24], [32, 29], [4, 14], [9, 7], [32, 11], [11, 26], [26, 41], [2, 16], [38, 23], [30, 29], [6, 31], [1, 34], [4, 39], [24, 3], [25, 22], [9, 14], [33, 26], [34, 38], [35, 29], [32, 38], [5, 42], [42, 24], [15, 38], [41, 14], [39, 9], [4, 36], [21, 24], [36, 9]], u=14, v=1, bound=4):\n    assert path[0] == u and path[-1] == v and all([i, j] in edges for i, j in zip(path, path[1:]))\n    return len(path) <= bound",
    "ans_type": "List[int]",
    "sol_header": "def sol(u=14, v=1, edges=[[12, 4], [33, 15], [37, 12], [11, 1], [34, 19], [42, 36], [2, 38], [6, 25], [29, 25], [30, 6], [16, 31], [10, 41], [15, 2], [3, 19], [1, 26], [17, 17], [19, 4], [0, 6], [42, 5], [11, 13], [22, 15], [39, 11], [35, 34], [39, 20], [7, 31], [38, 27], [9, 30], [31, 25], [0, 9], [13, 34], [31, 34], [19, 42], [37, 32], [4, 13], [11, 43], [14, 0], [22, 41], [20, 17], [0, 15], [13, 4], [20, 6], [34, 42], [42, 10], [32, 19], [41, 8], [26, 42], [0, 13], [28, 42], [9, 0], [32, 26], [6, 4], [27, 19], [37, 9], [7, 6], [25, 14], [23, 14], [31, 39], [18, 27], [34, 36], [24, 16], [24, 31], [16, 17], [2, 4], [34, 40], [28, 6], [41, 9], [17, 18], [43, 11], [11, 39], [43, 29], [1, 19], [27, 27], [4, 42], [0, 16], [16, 14], [40, 22], [22, 22], [38, 16], [3, 34], [33, 23], [2, 18], [3, 11], [4, 5], [18, 3], [23, 11], [41, 22], [7, 26], [31, 42], [35, 33], [15, 28], [34, 10], [36, 3], [9, 38], [17, 5], [3, 9], [37, 21], [36, 1], [25, 6], [22, 12], [42, 3], [16, 32], [0, 11], [24, 33], [15, 31], [18, 34], [11, 8], [30, 41], [19, 19], [4, 11], [22, 16], [1, 13], [6, 22], [12, 30], [19, 15], [3, 21], [38, 29], [32, 39], [1, 17], [16, 20], [10, 39], [32, 27], [37, 6], [18, 18], [22, 32], [31, 32], [24, 32], [22, 25], [38, 18], [38, 21], [39, 12], [9, 17], [10, 42], [29, 36], [34, 23], [27, 29], [17, 24], [24, 28], [31, 23], [28, 7], [5, 2], [24, 26], [27, 13], [43, 19], [37, 36], [2, 13], [10, 11], [30, 11], [29, 32], [4, 24], [17, 27], [21, 2], [24, 43], [26, 37], [16, 6], [43, 35], [42, 27], [26, 12], [39, 3], [38, 25], [20, 5], [36, 8], [25, 42], [27, 40], [39, 23], [6, 12], [27, 32], [12, 34], [2, 5], [40, 35], [15, 12], [22, 29], [21, 11], [0, 22], [13, 23], [27, 4], [35, 24], [32, 29], [4, 14], [9, 7], [32, 11], [11, 26], [26, 41], [2, 16], [38, 23], [30, 29], [6, 31], [1, 34], [4, 39], [24, 3], [25, 22], [9, 14], [33, 26], [34, 38], [35, 29], [32, 38], [5, 42], [42, 24], [15, 38], [41, 14], [39, 9], [4, 36], [21, 24], [36, 9]], bound=4):",
    "sol_docstring": "    \"\"\"Find a path from node u to node v, of a bounded length, in the given digraph on vertices 0, 1,..., n.\"\"\"",
    "sol_bodies": [
      "    # Dijkstra's algorithm\n    import heapq\n    from collections import defaultdict\n    queue = [(0, u, u)]  # distance, node, trail\n\n    trails = {}\n    neighbors = defaultdict(set)\n    for (i, j) in edges:\n        neighbors[i].add(j)\n\n    while queue:\n        dist, i, j = heapq.heappop(queue)\n        if i in trails:\n            continue\n        trails[i] = j\n        if i == v:\n            break\n        for j in neighbors[i]:\n            if j not in trails:\n                heapq.heappush(queue, (dist + 1, j, i))\n    if v in trails:\n        rev_path = [v]\n        while rev_path[-1] != u:\n            rev_path.append(trails[rev_path[-1]])\n        return rev_path[::-1]"
    ],
    "module": "graphs.py",
    "notes": "Unweighted Shortest Path\n\nSee (Dijkstra's algorithm)[https://en.wikipedia.org/w/index.php?title=Dijkstra%27s_algorithm]",
    "weight": 1.0
  },
  {
    "name": "UnweightedShortestPath:2",
    "sat": "def sat(path: List[int], edges=[[2, 6], [6, 2], [2, 5], [4, 7], [4, 1], [0, 2], [3, 3], [6, 1], [4, 0], [1, 3], [5, 2], [4, 2], [6, 7], [2, 2], [2, 3], [4, 4], [5, 0], [0, 7], [4, 3], [6, 4], [0, 0], [3, 0], [2, 7], [1, 7], [3, 2], [1, 2], [2, 4], [7, 5]], u=1, v=2, bound=2):\n    assert path[0] == u and path[-1] == v and all([i, j] in edges for i, j in zip(path, path[1:]))\n    return len(path) <= bound",
    "ans_type": "List[int]",
    "sol_header": "def sol(u=1, v=2, edges=[[2, 6], [6, 2], [2, 5], [4, 7], [4, 1], [0, 2], [3, 3], [6, 1], [4, 0], [1, 3], [5, 2], [4, 2], [6, 7], [2, 2], [2, 3], [4, 4], [5, 0], [0, 7], [4, 3], [6, 4], [0, 0], [3, 0], [2, 7], [1, 7], [3, 2], [1, 2], [2, 4], [7, 5]], bound=2):",
    "sol_docstring": "    \"\"\"Find a path from node u to node v, of a bounded length, in the given digraph on vertices 0, 1,..., n.\"\"\"",
    "sol_bodies": [
      "    # Dijkstra's algorithm\n    import heapq\n    from collections import defaultdict\n    queue = [(0, u, u)]  # distance, node, trail\n\n    trails = {}\n    neighbors = defaultdict(set)\n    for (i, j) in edges:\n        neighbors[i].add(j)\n\n    while queue:\n        dist, i, j = heapq.heappop(queue)\n        if i in trails:\n            continue\n        trails[i] = j\n        if i == v:\n            break\n        for j in neighbors[i]:\n            if j not in trails:\n                heapq.heappush(queue, (dist + 1, j, i))\n    if v in trails:\n        rev_path = [v]\n        while rev_path[-1] != u:\n            rev_path.append(trails[rev_path[-1]])\n        return rev_path[::-1]"
    ],
    "module": "graphs.py",
    "notes": "Unweighted Shortest Path\n\nSee (Dijkstra's algorithm)[https://en.wikipedia.org/w/index.php?title=Dijkstra%27s_algorithm]",
    "weight": 1.0
  },
  {
    "name": "UnweightedShortestPath:3",
    "sat": "def sat(path: List[int], edges=[[6, 0], [6, 2], [6, 5], [6, 4], [1, 4], [4, 3], [5, 3], [4, 4], [3, 1], [4, 6], [4, 2], [0, 2], [6, 6], [2, 3], [1, 0], [1, 5], [0, 0], [5, 4], [0, 1], [1, 2], [0, 4], [2, 5], [3, 0]], u=4, v=2, bound=2):\n    assert path[0] == u and path[-1] == v and all([i, j] in edges for i, j in zip(path, path[1:]))\n    return len(path) <= bound",
    "ans_type": "List[int]",
    "sol_header": "def sol(u=4, v=2, edges=[[6, 0], [6, 2], [6, 5], [6, 4], [1, 4], [4, 3], [5, 3], [4, 4], [3, 1], [4, 6], [4, 2], [0, 2], [6, 6], [2, 3], [1, 0], [1, 5], [0, 0], [5, 4], [0, 1], [1, 2], [0, 4], [2, 5], [3, 0]], bound=2):",
    "sol_docstring": "    \"\"\"Find a path from node u to node v, of a bounded length, in the given digraph on vertices 0, 1,..., n.\"\"\"",
    "sol_bodies": [
      "    # Dijkstra's algorithm\n    import heapq\n    from collections import defaultdict\n    queue = [(0, u, u)]  # distance, node, trail\n\n    trails = {}\n    neighbors = defaultdict(set)\n    for (i, j) in edges:\n        neighbors[i].add(j)\n\n    while queue:\n        dist, i, j = heapq.heappop(queue)\n        if i in trails:\n            continue\n        trails[i] = j\n        if i == v:\n            break\n        for j in neighbors[i]:\n            if j not in trails:\n                heapq.heappush(queue, (dist + 1, j, i))\n    if v in trails:\n        rev_path = [v]\n        while rev_path[-1] != u:\n            rev_path.append(trails[rev_path[-1]])\n        return rev_path[::-1]"
    ],
    "module": "graphs.py",
    "notes": "Unweighted Shortest Path\n\nSee (Dijkstra's algorithm)[https://en.wikipedia.org/w/index.php?title=Dijkstra%27s_algorithm]",
    "weight": 1.0
  },
  {
    "name": "UnweightedShortestPath:4",
    "sat": "def sat(path: List[int], edges=[[1, 1], [2, 0], [1, 0], [2, 2]], u=1, v=1, bound=1):\n    assert path[0] == u and path[-1] == v and all([i, j] in edges for i, j in zip(path, path[1:]))\n    return len(path) <= bound",
    "ans_type": "List[int]",
    "sol_header": "def sol(u=1, v=1, edges=[[1, 1], [2, 0], [1, 0], [2, 2]], bound=1):",
    "sol_docstring": "    \"\"\"Find a path from node u to node v, of a bounded length, in the given digraph on vertices 0, 1,..., n.\"\"\"",
    "sol_bodies": [
      "    # Dijkstra's algorithm\n    import heapq\n    from collections import defaultdict\n    queue = [(0, u, u)]  # distance, node, trail\n\n    trails = {}\n    neighbors = defaultdict(set)\n    for (i, j) in edges:\n        neighbors[i].add(j)\n\n    while queue:\n        dist, i, j = heapq.heappop(queue)\n        if i in trails:\n            continue\n        trails[i] = j\n        if i == v:\n            break\n        for j in neighbors[i]:\n            if j not in trails:\n                heapq.heappush(queue, (dist + 1, j, i))\n    if v in trails:\n        rev_path = [v]\n        while rev_path[-1] != u:\n            rev_path.append(trails[rev_path[-1]])\n        return rev_path[::-1]"
    ],
    "module": "graphs.py",
    "notes": "Unweighted Shortest Path\n\nSee (Dijkstra's algorithm)[https://en.wikipedia.org/w/index.php?title=Dijkstra%27s_algorithm]",
    "weight": 1.0
  },
  {
    "name": "AnyPath:0",
    "sat": "def sat(path: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]):\n    for i in range(len(path) - 1):\n        assert [path[i], path[i + 1]] in edges\n    assert path[0] == 0\n    assert path[-1] == max(max(edge) for edge in edges)\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]):",
    "sol_docstring": "    \"\"\" Find any path from node 0 to node n in a given digraph on vertices 0, 1,..., n.\"\"\"",
    "sol_bodies": [
      "    n = max(max(edge) for edge in edges)\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)"
    ],
    "module": "graphs.py",
    "notes": "Any Path",
    "weight": 1.0
  },
  {
    "name": "AnyPath:1",
    "sat": "def sat(path: List[int], edges=[[16, 8], [13, 33], [29, 37], [25, 10], [3, 33], [43, 10], [19, 9], [26, 16], [0, 9], [18, 36], [40, 32], [24, 10], [25, 35], [15, 14], [18, 2], [17, 5], [15, 26], [28, 28], [4, 39], [26, 9], [35, 22], [42, 11], [44, 13], [6, 34], [33, 0], [36, 34], [41, 34], [31, 1], [41, 27], [20, 43], [30, 33], [15, 18], [8, 20], [31, 14], [21, 33], [40, 28], [35, 39], [19, 14], [35, 10], [3, 34], [14, 11], [34, 36], [29, 3], [20, 33], [27, 14], [5, 29], [15, 6], [21, 20], [36, 1], [30, 40], [44, 6], [24, 43], [24, 30], [3, 16], [8, 34], [15, 36], [33, 36], [19, 17], [35, 17], [20, 29], [0, 27], [36, 38], [1, 0], [43, 18], [5, 36], [22, 10], [5, 32], [11, 34], [4, 15], [4, 9], [4, 6], [24, 12], [8, 27], [42, 38], [25, 2], [2, 12], [1, 34], [36, 22], [24, 42], [4, 18], [30, 13], [16, 44], [4, 21], [22, 35], [33, 32], [24, 26], [21, 44]]):\n    for i in range(len(path) - 1):\n        assert [path[i], path[i + 1]] in edges\n    assert path[0] == 0\n    assert path[-1] == max(max(edge) for edge in edges)\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(edges=[[16, 8], [13, 33], [29, 37], [25, 10], [3, 33], [43, 10], [19, 9], [26, 16], [0, 9], [18, 36], [40, 32], [24, 10], [25, 35], [15, 14], [18, 2], [17, 5], [15, 26], [28, 28], [4, 39], [26, 9], [35, 22], [42, 11], [44, 13], [6, 34], [33, 0], [36, 34], [41, 34], [31, 1], [41, 27], [20, 43], [30, 33], [15, 18], [8, 20], [31, 14], [21, 33], [40, 28], [35, 39], [19, 14], [35, 10], [3, 34], [14, 11], [34, 36], [29, 3], [20, 33], [27, 14], [5, 29], [15, 6], [21, 20], [36, 1], [30, 40], [44, 6], [24, 43], [24, 30], [3, 16], [8, 34], [15, 36], [33, 36], [19, 17], [35, 17], [20, 29], [0, 27], [36, 38], [1, 0], [43, 18], [5, 36], [22, 10], [5, 32], [11, 34], [4, 15], [4, 9], [4, 6], [24, 12], [8, 27], [42, 38], [25, 2], [2, 12], [1, 34], [36, 22], [24, 42], [4, 18], [30, 13], [16, 44], [4, 21], [22, 35], [33, 32], [24, 26], [21, 44]]):",
    "sol_docstring": "    \"\"\" Find any path from node 0 to node n in a given digraph on vertices 0, 1,..., n.\"\"\"",
    "sol_bodies": [
      "    n = max(max(edge) for edge in edges)\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)"
    ],
    "module": "graphs.py",
    "notes": "Any Path",
    "weight": 1.0
  },
  {
    "name": "AnyPath:2",
    "sat": "def sat(path: List[int], edges=[[0, 0]]):\n    for i in range(len(path) - 1):\n        assert [path[i], path[i + 1]] in edges\n    assert path[0] == 0\n    assert path[-1] == max(max(edge) for edge in edges)\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(edges=[[0, 0]]):",
    "sol_docstring": "    \"\"\" Find any path from node 0 to node n in a given digraph on vertices 0, 1,..., n.\"\"\"",
    "sol_bodies": [
      "    n = max(max(edge) for edge in edges)\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)"
    ],
    "module": "graphs.py",
    "notes": "Any Path",
    "weight": 1.0
  },
  {
    "name": "AnyPath:3",
    "sat": "def sat(path: List[int], edges=[[2, 33], [39, 59], [22, 21], [55, 39], [34, 13], [28, 62], [34, 56], [41, 23], [52, 39], [27, 62], [19, 12], [14, 63], [48, 1], [53, 1], [47, 55], [43, 35], [13, 51], [18, 30], [7, 17], [25, 52], [35, 46], [16, 45], [7, 22], [42, 40], [35, 41], [21, 52], [35, 43], [22, 30], [20, 47], [48, 25], [32, 11], [38, 35], [39, 35], [34, 62], [19, 32], [15, 51], [62, 29], [54, 26], [1, 6], [42, 51], [26, 62], [18, 8], [47, 40], [30, 41], [42, 15], [35, 36], [12, 55], [38, 53], [52, 37], [4, 44], [13, 61], [2, 58], [9, 48], [2, 11], [52, 0], [11, 35], [33, 7], [49, 40], [21, 46], [1, 30], [60, 34], [36, 46], [8, 52], [43, 58], [53, 63], [61, 16], [50, 16], [33, 44], [23, 26], [27, 16], [52, 18], [59, 1], [29, 44], [37, 57], [25, 2], [3, 15], [33, 19], [22, 6], [59, 51], [58, 32], [46, 37], [15, 9], [1, 35], [48, 6], [15, 59], [58, 28], [6, 24], [4, 38], [37, 20], [52, 28], [43, 40], [28, 39], [58, 31], [62, 35], [63, 11], [24, 40], [44, 38], [0, 44], [57, 11], [0, 16], [41, 1], [62, 55], [8, 51], [5, 8], [46, 26], [40, 6], [45, 42], [24, 32], [19, 31], [6, 55], [30, 2], [43, 57], [25, 48], [53, 31], [29, 13], [63, 39], [37, 46], [32, 40], [16, 16], [53, 59], [11, 57], [33, 20], [19, 11], [47, 51], [50, 15], [19, 36]]):\n    for i in range(len(path) - 1):\n        assert [path[i], path[i + 1]] in edges\n    assert path[0] == 0\n    assert path[-1] == max(max(edge) for edge in edges)\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(edges=[[2, 33], [39, 59], [22, 21], [55, 39], [34, 13], [28, 62], [34, 56], [41, 23], [52, 39], [27, 62], [19, 12], [14, 63], [48, 1], [53, 1], [47, 55], [43, 35], [13, 51], [18, 30], [7, 17], [25, 52], [35, 46], [16, 45], [7, 22], [42, 40], [35, 41], [21, 52], [35, 43], [22, 30], [20, 47], [48, 25], [32, 11], [38, 35], [39, 35], [34, 62], [19, 32], [15, 51], [62, 29], [54, 26], [1, 6], [42, 51], [26, 62], [18, 8], [47, 40], [30, 41], [42, 15], [35, 36], [12, 55], [38, 53], [52, 37], [4, 44], [13, 61], [2, 58], [9, 48], [2, 11], [52, 0], [11, 35], [33, 7], [49, 40], [21, 46], [1, 30], [60, 34], [36, 46], [8, 52], [43, 58], [53, 63], [61, 16], [50, 16], [33, 44], [23, 26], [27, 16], [52, 18], [59, 1], [29, 44], [37, 57], [25, 2], [3, 15], [33, 19], [22, 6], [59, 51], [58, 32], [46, 37], [15, 9], [1, 35], [48, 6], [15, 59], [58, 28], [6, 24], [4, 38], [37, 20], [52, 28], [43, 40], [28, 39], [58, 31], [62, 35], [63, 11], [24, 40], [44, 38], [0, 44], [57, 11], [0, 16], [41, 1], [62, 55], [8, 51], [5, 8], [46, 26], [40, 6], [45, 42], [24, 32], [19, 31], [6, 55], [30, 2], [43, 57], [25, 48], [53, 31], [29, 13], [63, 39], [37, 46], [32, 40], [16, 16], [53, 59], [11, 57], [33, 20], [19, 11], [47, 51], [50, 15], [19, 36]]):",
    "sol_docstring": "    \"\"\" Find any path from node 0 to node n in a given digraph on vertices 0, 1,..., n.\"\"\"",
    "sol_bodies": [
      "    n = max(max(edge) for edge in edges)\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)"
    ],
    "module": "graphs.py",
    "notes": "Any Path",
    "weight": 1.0
  },
  {
    "name": "AnyPath:4",
    "sat": "def sat(path: List[int], edges=[[3, 5], [2, 1], [4, 5], [3, 6], [6, 7], [5, 3], [4, 3], [6, 2], [5, 2], [7, 0], [3, 4], [0, 5], [0, 0], [1, 0], [0, 2], [3, 1]]):\n    for i in range(len(path) - 1):\n        assert [path[i], path[i + 1]] in edges\n    assert path[0] == 0\n    assert path[-1] == max(max(edge) for edge in edges)\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(edges=[[3, 5], [2, 1], [4, 5], [3, 6], [6, 7], [5, 3], [4, 3], [6, 2], [5, 2], [7, 0], [3, 4], [0, 5], [0, 0], [1, 0], [0, 2], [3, 1]]):",
    "sol_docstring": "    \"\"\" Find any path from node 0 to node n in a given digraph on vertices 0, 1,..., n.\"\"\"",
    "sol_bodies": [
      "    n = max(max(edge) for edge in edges)\n    paths = {0: [0]}\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in paths and j not in paths:\n                paths[j] = paths[i] + [j]\n    return paths.get(n)"
    ],
    "module": "graphs.py",
    "notes": "Any Path",
    "weight": 1.0
  },
  {
    "name": "EvenPath:0",
    "sat": "def sat(path: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]):\n    assert path[0] == 0 and path[-1] == max(max(e) for e in edges)\n    assert all([[a, b] in edges for a, b in zip(path, path[1:])])\n    return len(path) % 2 == 0",
    "ans_type": "List[int]",
    "sol_header": "def sol(edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [1, 2]]):",
    "sol_docstring": "    \"\"\"Find a path with an even number of nodes from nodes 0 to n in the given digraph on vertices 0, 1,..., n.\"\"\"",
    "sol_bodies": [
      "    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)"
    ],
    "module": "graphs.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "EvenPath:1",
    "sat": "def sat(path: List[int], edges=[[3, 2], [2, 1], [0, 2], [1, 0], [2, 2], [2, 3], [2, 0]]):\n    assert path[0] == 0 and path[-1] == max(max(e) for e in edges)\n    assert all([[a, b] in edges for a, b in zip(path, path[1:])])\n    return len(path) % 2 == 0",
    "ans_type": "List[int]",
    "sol_header": "def sol(edges=[[3, 2], [2, 1], [0, 2], [1, 0], [2, 2], [2, 3], [2, 0]]):",
    "sol_docstring": "    \"\"\"Find a path with an even number of nodes from nodes 0 to n in the given digraph on vertices 0, 1,..., n.\"\"\"",
    "sol_bodies": [
      "    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)"
    ],
    "module": "graphs.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "EvenPath:2",
    "sat": "def sat(path: List[int], edges=[[5, 15], [51, 42], [23, 5], [36, 2], [18, 43], [8, 47], [37, 6], [20, 25], [13, 25], [17, 2], [53, 30], [4, 50], [25, 47], [27, 5], [47, 7], [6, 18], [16, 30], [51, 3], [6, 13], [3, 12], [30, 13], [14, 43], [0, 5], [20, 7], [8, 3], [29, 55], [13, 11], [18, 39], [37, 13], [25, 8], [45, 30], [32, 8], [55, 43], [34, 42], [31, 21], [26, 19], [18, 1], [51, 35], [51, 51], [53, 22], [8, 23], [29, 21], [0, 44], [16, 38], [7, 16], [22, 45], [37, 16], [54, 20], [24, 13], [47, 37], [11, 10], [31, 31], [37, 55], [18, 6], [27, 43], [51, 38], [33, 38], [31, 3], [15, 35], [42, 11], [53, 4], [51, 24], [14, 27], [13, 18], [9, 55], [29, 0], [50, 31], [16, 18], [46, 3], [42, 44], [25, 12], [50, 10], [28, 51], [3, 25], [18, 26], [16, 0], [15, 37], [45, 48], [23, 50], [1, 15], [29, 35], [48, 32], [27, 10], [39, 49], [0, 36], [46, 2], [51, 29], [39, 6], [51, 33], [30, 54], [53, 2], [26, 6], [6, 4], [15, 2], [35, 27], [6, 36], [53, 19], [49, 54], [4, 44], [53, 6], [47, 41], [37, 21], [50, 48], [42, 47], [6, 2], [5, 46], [2, 50], [39, 29], [11, 42], [46, 33], [11, 22]]):\n    assert path[0] == 0 and path[-1] == max(max(e) for e in edges)\n    assert all([[a, b] in edges for a, b in zip(path, path[1:])])\n    return len(path) % 2 == 0",
    "ans_type": "List[int]",
    "sol_header": "def sol(edges=[[5, 15], [51, 42], [23, 5], [36, 2], [18, 43], [8, 47], [37, 6], [20, 25], [13, 25], [17, 2], [53, 30], [4, 50], [25, 47], [27, 5], [47, 7], [6, 18], [16, 30], [51, 3], [6, 13], [3, 12], [30, 13], [14, 43], [0, 5], [20, 7], [8, 3], [29, 55], [13, 11], [18, 39], [37, 13], [25, 8], [45, 30], [32, 8], [55, 43], [34, 42], [31, 21], [26, 19], [18, 1], [51, 35], [51, 51], [53, 22], [8, 23], [29, 21], [0, 44], [16, 38], [7, 16], [22, 45], [37, 16], [54, 20], [24, 13], [47, 37], [11, 10], [31, 31], [37, 55], [18, 6], [27, 43], [51, 38], [33, 38], [31, 3], [15, 35], [42, 11], [53, 4], [51, 24], [14, 27], [13, 18], [9, 55], [29, 0], [50, 31], [16, 18], [46, 3], [42, 44], [25, 12], [50, 10], [28, 51], [3, 25], [18, 26], [16, 0], [15, 37], [45, 48], [23, 50], [1, 15], [29, 35], [48, 32], [27, 10], [39, 49], [0, 36], [46, 2], [51, 29], [39, 6], [51, 33], [30, 54], [53, 2], [26, 6], [6, 4], [15, 2], [35, 27], [6, 36], [53, 19], [49, 54], [4, 44], [53, 6], [47, 41], [37, 21], [50, 48], [42, 47], [6, 2], [5, 46], [2, 50], [39, 29], [11, 42], [46, 33], [11, 22]]):",
    "sol_docstring": "    \"\"\"Find a path with an even number of nodes from nodes 0 to n in the given digraph on vertices 0, 1,..., n.\"\"\"",
    "sol_bodies": [
      "    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)"
    ],
    "module": "graphs.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "EvenPath:3",
    "sat": "def sat(path: List[int], edges=[[13, 29], [70, 66], [46, 37], [1, 57], [37, 1], [43, 0], [71, 49], [49, 49], [1, 0], [13, 38], [34, 7], [56, 74], [44, 74], [35, 54], [41, 59], [53, 47], [48, 28], [52, 46], [36, 22], [74, 72], [43, 36], [65, 24], [14, 67], [64, 28], [8, 39], [71, 14], [22, 24], [20, 43], [67, 21], [12, 39], [40, 41], [54, 19], [26, 69], [48, 14], [24, 25], [24, 16], [45, 62], [43, 57], [71, 1], [31, 24], [27, 66], [64, 18], [73, 33], [25, 22], [31, 60], [67, 3], [4, 44], [41, 55], [0, 23], [7, 14], [46, 50], [40, 53], [4, 33], [8, 12], [64, 55], [19, 52], [52, 62], [3, 42], [33, 10], [67, 10], [1, 33], [39, 18], [18, 7], [2, 47], [29, 55], [29, 42], [44, 67], [55, 55], [25, 42], [39, 53], [59, 21], [44, 50], [31, 30], [60, 71], [49, 9], [20, 16], [37, 68], [58, 73], [41, 7], [30, 74], [61, 31], [71, 42], [72, 19], [66, 33], [24, 33], [57, 40], [3, 28], [59, 64], [16, 12], [72, 20], [3, 5], [59, 52], [70, 8], [71, 13], [20, 71], [64, 31], [22, 27], [53, 36], [49, 23], [40, 4], [55, 68], [32, 12], [21, 15], [57, 63], [8, 70], [72, 56], [33, 3], [41, 28], [4, 0], [44, 10], [33, 2], [36, 24], [59, 58], [45, 33], [61, 66], [21, 48], [10, 54], [46, 13], [40, 25], [28, 6], [65, 53], [0, 53], [51, 22], [71, 17], [52, 9], [30, 34], [68, 64], [54, 8], [35, 13], [64, 54], [45, 67], [47, 22], [69, 52], [18, 73], [21, 60], [72, 29], [7, 36], [68, 56], [17, 14], [44, 54], [46, 29], [72, 67], [17, 53], [54, 51], [26, 46], [65, 21], [27, 3], [50, 5]]):\n    assert path[0] == 0 and path[-1] == max(max(e) for e in edges)\n    assert all([[a, b] in edges for a, b in zip(path, path[1:])])\n    return len(path) % 2 == 0",
    "ans_type": "List[int]",
    "sol_header": "def sol(edges=[[13, 29], [70, 66], [46, 37], [1, 57], [37, 1], [43, 0], [71, 49], [49, 49], [1, 0], [13, 38], [34, 7], [56, 74], [44, 74], [35, 54], [41, 59], [53, 47], [48, 28], [52, 46], [36, 22], [74, 72], [43, 36], [65, 24], [14, 67], [64, 28], [8, 39], [71, 14], [22, 24], [20, 43], [67, 21], [12, 39], [40, 41], [54, 19], [26, 69], [48, 14], [24, 25], [24, 16], [45, 62], [43, 57], [71, 1], [31, 24], [27, 66], [64, 18], [73, 33], [25, 22], [31, 60], [67, 3], [4, 44], [41, 55], [0, 23], [7, 14], [46, 50], [40, 53], [4, 33], [8, 12], [64, 55], [19, 52], [52, 62], [3, 42], [33, 10], [67, 10], [1, 33], [39, 18], [18, 7], [2, 47], [29, 55], [29, 42], [44, 67], [55, 55], [25, 42], [39, 53], [59, 21], [44, 50], [31, 30], [60, 71], [49, 9], [20, 16], [37, 68], [58, 73], [41, 7], [30, 74], [61, 31], [71, 42], [72, 19], [66, 33], [24, 33], [57, 40], [3, 28], [59, 64], [16, 12], [72, 20], [3, 5], [59, 52], [70, 8], [71, 13], [20, 71], [64, 31], [22, 27], [53, 36], [49, 23], [40, 4], [55, 68], [32, 12], [21, 15], [57, 63], [8, 70], [72, 56], [33, 3], [41, 28], [4, 0], [44, 10], [33, 2], [36, 24], [59, 58], [45, 33], [61, 66], [21, 48], [10, 54], [46, 13], [40, 25], [28, 6], [65, 53], [0, 53], [51, 22], [71, 17], [52, 9], [30, 34], [68, 64], [54, 8], [35, 13], [64, 54], [45, 67], [47, 22], [69, 52], [18, 73], [21, 60], [72, 29], [7, 36], [68, 56], [17, 14], [44, 54], [46, 29], [72, 67], [17, 53], [54, 51], [26, 46], [65, 21], [27, 3], [50, 5]]):",
    "sol_docstring": "    \"\"\"Find a path with an even number of nodes from nodes 0 to n in the given digraph on vertices 0, 1,..., n.\"\"\"",
    "sol_bodies": [
      "    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)"
    ],
    "module": "graphs.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "EvenPath:4",
    "sat": "def sat(path: List[int], edges=[[67, 92], [18, 52], [25, 21], [83, 58], [36, 36], [26, 63], [48, 15], [53, 32], [62, 30], [41, 21], [91, 25], [82, 79], [33, 58], [65, 81], [57, 57], [62, 36], [85, 24], [14, 19], [58, 11], [20, 31], [76, 82], [92, 37], [73, 88], [90, 37], [68, 18], [70, 18], [45, 65], [45, 78], [87, 36], [41, 72], [66, 4], [25, 58], [18, 16], [72, 68], [21, 0], [44, 8], [51, 21], [30, 15], [18, 90], [75, 47], [42, 7], [13, 13], [27, 46], [78, 39], [71, 28], [85, 39], [56, 52], [60, 37], [37, 18], [82, 83], [84, 9], [31, 54], [81, 32], [46, 82], [10, 66], [85, 71], [3, 5], [15, 18], [83, 64], [9, 50], [60, 70], [7, 13], [81, 63], [32, 6], [18, 80], [22, 34], [60, 0], [88, 72], [9, 19], [74, 0], [87, 22], [41, 17], [66, 80], [33, 9], [71, 46], [23, 79], [64, 44], [40, 67], [78, 4], [8, 31], [15, 41], [42, 92], [22, 28], [57, 84], [69, 65], [35, 16], [1, 10], [7, 82], [62, 52], [8, 12], [51, 12], [5, 2], [83, 30], [76, 83], [0, 27], [30, 80], [33, 14], [39, 12], [51, 78], [30, 47], [25, 26], [11, 63], [52, 24], [32, 49], [0, 74], [51, 16], [1, 16], [14, 90], [49, 74], [69, 14], [72, 30], [61, 31], [54, 20], [46, 78], [4, 50], [13, 37], [61, 1], [4, 35], [29, 70], [20, 89], [28, 6], [74, 9], [86, 53], [58, 6], [57, 91], [10, 40], [15, 74], [23, 60], [5, 37], [50, 68], [78, 22], [90, 59], [74, 21], [80, 71], [92, 82], [42, 43], [68, 74], [43, 55], [67, 90], [87, 68], [40, 2], [55, 68], [52, 30], [10, 21], [44, 1], [39, 9], [12, 18], [61, 38], [65, 37], [10, 12], [21, 10], [81, 3], [65, 20], [31, 25], [59, 77], [43, 59], [75, 75], [71, 13], [17, 37], [31, 13], [6, 33], [24, 40], [52, 70], [70, 5], [4, 8], [20, 29], [11, 10], [43, 67], [11, 80], [49, 19], [81, 64], [44, 28], [18, 20], [91, 91], [90, 92], [81, 16], [31, 81], [7, 81], [54, 53], [65, 16], [91, 32]]):\n    assert path[0] == 0 and path[-1] == max(max(e) for e in edges)\n    assert all([[a, b] in edges for a, b in zip(path, path[1:])])\n    return len(path) % 2 == 0",
    "ans_type": "List[int]",
    "sol_header": "def sol(edges=[[67, 92], [18, 52], [25, 21], [83, 58], [36, 36], [26, 63], [48, 15], [53, 32], [62, 30], [41, 21], [91, 25], [82, 79], [33, 58], [65, 81], [57, 57], [62, 36], [85, 24], [14, 19], [58, 11], [20, 31], [76, 82], [92, 37], [73, 88], [90, 37], [68, 18], [70, 18], [45, 65], [45, 78], [87, 36], [41, 72], [66, 4], [25, 58], [18, 16], [72, 68], [21, 0], [44, 8], [51, 21], [30, 15], [18, 90], [75, 47], [42, 7], [13, 13], [27, 46], [78, 39], [71, 28], [85, 39], [56, 52], [60, 37], [37, 18], [82, 83], [84, 9], [31, 54], [81, 32], [46, 82], [10, 66], [85, 71], [3, 5], [15, 18], [83, 64], [9, 50], [60, 70], [7, 13], [81, 63], [32, 6], [18, 80], [22, 34], [60, 0], [88, 72], [9, 19], [74, 0], [87, 22], [41, 17], [66, 80], [33, 9], [71, 46], [23, 79], [64, 44], [40, 67], [78, 4], [8, 31], [15, 41], [42, 92], [22, 28], [57, 84], [69, 65], [35, 16], [1, 10], [7, 82], [62, 52], [8, 12], [51, 12], [5, 2], [83, 30], [76, 83], [0, 27], [30, 80], [33, 14], [39, 12], [51, 78], [30, 47], [25, 26], [11, 63], [52, 24], [32, 49], [0, 74], [51, 16], [1, 16], [14, 90], [49, 74], [69, 14], [72, 30], [61, 31], [54, 20], [46, 78], [4, 50], [13, 37], [61, 1], [4, 35], [29, 70], [20, 89], [28, 6], [74, 9], [86, 53], [58, 6], [57, 91], [10, 40], [15, 74], [23, 60], [5, 37], [50, 68], [78, 22], [90, 59], [74, 21], [80, 71], [92, 82], [42, 43], [68, 74], [43, 55], [67, 90], [87, 68], [40, 2], [55, 68], [52, 30], [10, 21], [44, 1], [39, 9], [12, 18], [61, 38], [65, 37], [10, 12], [21, 10], [81, 3], [65, 20], [31, 25], [59, 77], [43, 59], [75, 75], [71, 13], [17, 37], [31, 13], [6, 33], [24, 40], [52, 70], [70, 5], [4, 8], [20, 29], [11, 10], [43, 67], [11, 80], [49, 19], [81, 64], [44, 28], [18, 20], [91, 91], [90, 92], [81, 16], [31, 81], [7, 81], [54, 53], [65, 16], [91, 32]]):",
    "sol_docstring": "    \"\"\"Find a path with an even number of nodes from nodes 0 to n in the given digraph on vertices 0, 1,..., n.\"\"\"",
    "sol_bodies": [
      "    even_paths = {}\n    odd_paths = {0: [0]}\n    n = max(max(e) for e in edges)\n    for _ in range(n + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return even_paths.get(n)"
    ],
    "module": "graphs.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "OddPath:0",
    "sat": "def sat(p: List[int], edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for a, b in zip(p, p[1:])])",
    "ans_type": "List[int]",
    "sol_header": "def sol(edges=[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [3, 4], [5, 6], [6, 7], [6, 1]]):",
    "sol_docstring": "    \"\"\"Find a path with an even number of nodes from nodes 0 to 1 in the given digraph on vertices 0, 1,..., n.\"\"\"",
    "sol_bodies": [
      "    even_paths = {}\n    odd_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)"
    ],
    "module": "graphs.py",
    "notes": "To make it even more different than EvenPath, we changed to go from node 0 to node *1*.",
    "weight": 1.0
  },
  {
    "name": "OddPath:1",
    "sat": "def sat(p: List[int], edges=[[1, 6], [2, 3], [2, 7], [0, 8], [7, 8], [7, 2], [1, 5], [8, 7], [7, 0], [0, 0], [8, 1], [5, 7], [4, 7], [6, 1], [4, 4], [7, 4]]):\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for a, b in zip(p, p[1:])])",
    "ans_type": "List[int]",
    "sol_header": "def sol(edges=[[1, 6], [2, 3], [2, 7], [0, 8], [7, 8], [7, 2], [1, 5], [8, 7], [7, 0], [0, 0], [8, 1], [5, 7], [4, 7], [6, 1], [4, 4], [7, 4]]):",
    "sol_docstring": "    \"\"\"Find a path with an even number of nodes from nodes 0 to 1 in the given digraph on vertices 0, 1,..., n.\"\"\"",
    "sol_bodies": [
      "    even_paths = {}\n    odd_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)"
    ],
    "module": "graphs.py",
    "notes": "To make it even more different than EvenPath, we changed to go from node 0 to node *1*.",
    "weight": 1.0
  },
  {
    "name": "OddPath:2",
    "sat": "def sat(p: List[int], edges=[[40, 31], [16, 32], [41, 10], [14, 9], [36, 26], [14, 12], [22, 6], [36, 6], [13, 22], [0, 34], [6, 28], [27, 22], [31, 5], [2, 3], [34, 37], [17, 14], [1, 4], [22, 26], [32, 18], [20, 10], [28, 17], [2, 22], [22, 30], [36, 41], [7, 35], [24, 29], [31, 31], [26, 39], [14, 32], [33, 27], [33, 9], [30, 37], [40, 14], [19, 17], [15, 11], [7, 40], [6, 36], [20, 19], [7, 12], [17, 25], [14, 24], [34, 25], [27, 34], [35, 41], [34, 3], [25, 12], [34, 29], [21, 23], [2, 12], [25, 26], [28, 16], [17, 2], [15, 28], [29, 0], [32, 16], [13, 29], [23, 26], [3, 11], [39, 3], [40, 16], [22, 39], [12, 30], [12, 24], [38, 24], [5, 1], [21, 39], [33, 39], [29, 36], [23, 40], [34, 20], [35, 10], [13, 7], [10, 2], [32, 26], [37, 4], [36, 21], [1, 18], [23, 11], [19, 11], [35, 5], [10, 32], [9, 17], [21, 2]]):\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for a, b in zip(p, p[1:])])",
    "ans_type": "List[int]",
    "sol_header": "def sol(edges=[[40, 31], [16, 32], [41, 10], [14, 9], [36, 26], [14, 12], [22, 6], [36, 6], [13, 22], [0, 34], [6, 28], [27, 22], [31, 5], [2, 3], [34, 37], [17, 14], [1, 4], [22, 26], [32, 18], [20, 10], [28, 17], [2, 22], [22, 30], [36, 41], [7, 35], [24, 29], [31, 31], [26, 39], [14, 32], [33, 27], [33, 9], [30, 37], [40, 14], [19, 17], [15, 11], [7, 40], [6, 36], [20, 19], [7, 12], [17, 25], [14, 24], [34, 25], [27, 34], [35, 41], [34, 3], [25, 12], [34, 29], [21, 23], [2, 12], [25, 26], [28, 16], [17, 2], [15, 28], [29, 0], [32, 16], [13, 29], [23, 26], [3, 11], [39, 3], [40, 16], [22, 39], [12, 30], [12, 24], [38, 24], [5, 1], [21, 39], [33, 39], [29, 36], [23, 40], [34, 20], [35, 10], [13, 7], [10, 2], [32, 26], [37, 4], [36, 21], [1, 18], [23, 11], [19, 11], [35, 5], [10, 32], [9, 17], [21, 2]]):",
    "sol_docstring": "    \"\"\"Find a path with an even number of nodes from nodes 0 to 1 in the given digraph on vertices 0, 1,..., n.\"\"\"",
    "sol_bodies": [
      "    even_paths = {}\n    odd_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)"
    ],
    "module": "graphs.py",
    "notes": "To make it even more different than EvenPath, we changed to go from node 0 to node *1*.",
    "weight": 1.0
  },
  {
    "name": "OddPath:3",
    "sat": "def sat(p: List[int], edges=[[6, 6], [3, 6], [5, 0], [7, 16], [9, 12], [10, 3], [3, 5], [14, 17], [10, 14], [15, 3], [17, 15], [8, 18], [1, 12], [3, 7], [12, 17], [15, 15], [6, 2], [10, 9], [5, 13], [2, 15], [8, 5], [9, 15], [10, 6], [10, 17], [3, 9], [2, 6], [4, 1], [7, 12], [13, 1], [15, 17], [13, 5], [14, 10], [0, 17], [0, 11], [4, 17], [1, 11], [12, 18]]):\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for a, b in zip(p, p[1:])])",
    "ans_type": "List[int]",
    "sol_header": "def sol(edges=[[6, 6], [3, 6], [5, 0], [7, 16], [9, 12], [10, 3], [3, 5], [14, 17], [10, 14], [15, 3], [17, 15], [8, 18], [1, 12], [3, 7], [12, 17], [15, 15], [6, 2], [10, 9], [5, 13], [2, 15], [8, 5], [9, 15], [10, 6], [10, 17], [3, 9], [2, 6], [4, 1], [7, 12], [13, 1], [15, 17], [13, 5], [14, 10], [0, 17], [0, 11], [4, 17], [1, 11], [12, 18]]):",
    "sol_docstring": "    \"\"\"Find a path with an even number of nodes from nodes 0 to 1 in the given digraph on vertices 0, 1,..., n.\"\"\"",
    "sol_bodies": [
      "    even_paths = {}\n    odd_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)"
    ],
    "module": "graphs.py",
    "notes": "To make it even more different than EvenPath, we changed to go from node 0 to node *1*.",
    "weight": 1.0
  },
  {
    "name": "OddPath:4",
    "sat": "def sat(p: List[int], edges=[[4, 8], [7, 6], [2, 0], [3, 2], [6, 3], [4, 5], [11, 5], [11, 0], [1, 5], [12, 12], [12, 1], [4, 11], [3, 3], [2, 10], [10, 6], [0, 7], [2, 7], [6, 11], [2, 9], [7, 7], [8, 9], [2, 1], [4, 6], [9, 4]]):\n    return p[0] == 0 and p[-1] == 1 == len(p) % 2 and all([[a, b] in edges for a, b in zip(p, p[1:])])",
    "ans_type": "List[int]",
    "sol_header": "def sol(edges=[[4, 8], [7, 6], [2, 0], [3, 2], [6, 3], [4, 5], [11, 5], [11, 0], [1, 5], [12, 12], [12, 1], [4, 11], [3, 3], [2, 10], [10, 6], [0, 7], [2, 7], [6, 11], [2, 9], [7, 7], [8, 9], [2, 1], [4, 6], [9, 4]]):",
    "sol_docstring": "    \"\"\"Find a path with an even number of nodes from nodes 0 to 1 in the given digraph on vertices 0, 1,..., n.\"\"\"",
    "sol_bodies": [
      "    even_paths = {}\n    odd_paths = {0: [0]}\n    n = 1\n    for _ in range(max(max(e) for e in edges) + 1):\n        for i, j in edges:\n            if i in even_paths and j not in odd_paths:\n                odd_paths[j] = even_paths[i] + [j]\n            if i in odd_paths and j not in even_paths:\n                even_paths[j] = odd_paths[i] + [j]\n    return odd_paths.get(n)"
    ],
    "module": "graphs.py",
    "notes": "To make it even more different than EvenPath, we changed to go from node 0 to node *1*.",
    "weight": 1.0
  },
  {
    "name": "Zarankiewicz:0",
    "sat": "def sat(edges: List[List[int]], z=20, n=5, t=3):\n    from itertools import combinations\n    edges = {(a, b) for a, b in edges if a in range(n) and b in range(n)}  # convert to a set for efficiency\n    assert len(edges) >= z\n\n    return all(\n        any((a, b) not in edges for a in left for b in right)\n        for left in combinations(range(n), t)\n        for right in combinations(range(n), t)\n    )",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(z=20, n=5, t=3):",
    "sol_docstring": "    \"\"\"Find a bipartite graph with n vertices on each side, z edges, and no K_3,3 subgraph.\"\"\"",
    "sol_bodies": [
      "    from itertools import combinations\n    all_edges = [(a, b) for a in range(n) for b in range(n)]\n    for edges in combinations(all_edges, z):\n        edge_set = set(edges)\n        if all(any((a, b) not in edge_set for a in left for b in right)\n               for left in combinations(range(n), t)\n               for right in combinations(range(n), t)):\n            return [[a, b] for a, b in edges]"
    ],
    "module": "graphs.py",
    "notes": "[Zarankiewicz problem](https://en.wikipedia.org/wiki/Zarankiewicz_problem)",
    "weight": 1.0
  },
  {
    "name": "Zarankiewicz:1",
    "sat": "def sat(edges: List[List[int]], z=26, n=6, t=3):\n    from itertools import combinations\n    edges = {(a, b) for a, b in edges if a in range(n) and b in range(n)}  # convert to a set for efficiency\n    assert len(edges) >= z\n\n    return all(\n        any((a, b) not in edges for a in left for b in right)\n        for left in combinations(range(n), t)\n        for right in combinations(range(n), t)\n    )",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(z=26, n=6, t=3):",
    "sol_docstring": "    \"\"\"Find a bipartite graph with n vertices on each side, z edges, and no K_3,3 subgraph.\"\"\"",
    "sol_bodies": [],
    "module": "graphs.py",
    "notes": "[Zarankiewicz problem](https://en.wikipedia.org/wiki/Zarankiewicz_problem)",
    "weight": 1.0
  },
  {
    "name": "Zarankiewicz:2",
    "sat": "def sat(edges: List[List[int]], z=13, n=4, t=3):\n    from itertools import combinations\n    edges = {(a, b) for a, b in edges if a in range(n) and b in range(n)}  # convert to a set for efficiency\n    assert len(edges) >= z\n\n    return all(\n        any((a, b) not in edges for a in left for b in right)\n        for left in combinations(range(n), t)\n        for right in combinations(range(n), t)\n    )",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(z=13, n=4, t=3):",
    "sol_docstring": "    \"\"\"Find a bipartite graph with n vertices on each side, z edges, and no K_3,3 subgraph.\"\"\"",
    "sol_bodies": [
      "    from itertools import combinations\n    all_edges = [(a, b) for a in range(n) for b in range(n)]\n    for edges in combinations(all_edges, z):\n        edge_set = set(edges)\n        if all(any((a, b) not in edge_set for a in left for b in right)\n               for left in combinations(range(n), t)\n               for right in combinations(range(n), t)):\n            return [[a, b] for a, b in edges]"
    ],
    "module": "graphs.py",
    "notes": "[Zarankiewicz problem](https://en.wikipedia.org/wiki/Zarankiewicz_problem)",
    "weight": 1.0
  },
  {
    "name": "GraphIsomorphism:0",
    "sat": "def sat(bi: List[int], g1=[[0, 1], [1, 2], [2, 3], [3, 4], [2, 5]], g2=[[0, 4], [1, 5], [4, 1], [1, 2], [2, 3]]):\n    return len(bi) == len(set(bi)) and {(i, j) for i, j in g1} == {(bi[i], bi[j]) for i, j in g2}",
    "ans_type": "List[int]",
    "sol_header": "def sol(g1=[[0, 1], [1, 2], [2, 3], [3, 4], [2, 5]], g2=[[0, 4], [1, 5], [4, 1], [1, 2], [2, 3]]):",
    "sol_docstring": "    \"\"\"\n    You are given two graphs which are permutations of one another and the goal is to find the permutation.\n    Each graph is specified by a list of edges where each edge is a pair of integer vertex numbers.\n    \"\"\"",
    "sol_bodies": [
      "    # exponentially slow\n    from itertools import permutations\n    n = max(i for g in [g1, g2] for e in g for i in e) + 1\n    g1_set = {(i, j) for i, j in g1}\n    for pi in permutations(range(n)):\n        if all((pi[i], pi[j]) in g1_set for i, j in g2):\n            return list(pi)\n    assert False, f\"Graphs are not isomorphic {g1}, {g2}\""
    ],
    "module": "graphs.py",
    "notes": "The classic [Graph Isomorphism](https://en.wikipedia.org/wiki/Graph_isomorphism) problem.\nIt is unknown whether or not there exists a polynomial-time algorithm\nfor this problem, though an unpublished quasi-polynomial-time algorithm has been announced by Babai.\n\nThe classic version is a decision problem: given two graphs, determine whether or not they are isomorphic.\nHowever, it is polynomial-time equivalent to the one below through a standard reduction. In particular, if you\ncould solve the search problem below (finding the actual bijection), then you can decide isomorphism because the\nsearch solver would simply fail on non-isomorphic graphs. Conversely, if you could solve the decision problem,\nthen you can find a bijection as follows: if the decider determines that the graphs are isomorphic, for each node\nin the first graph, find a corresponding node in the second graph as follows. Add N self-edges from the node to\nitself where N is the maximum degree in the graph + 1, and do that for each candidate node in the second graph.\nFor each of these additions, test isomorphism. If the graphs are isomorphic then there must be a bijection that maps\nthe first node to the second. Repeat this for each node until you have found a bijection. (If self-loops are not\nallowed, one can do this by adding N additional nodes for each test.",
    "weight": 1.0
  },
  {
    "name": "GraphIsomorphism:1",
    "sat": "def sat(bi: List[int], g1=[[0, 6], [0, 8], [0, 10], [0, 11], [1, 3], [1, 5], [1, 7], [1, 10], [2, 4], [2, 5], [2, 7], [2, 8], [2, 9], [3, 5], [3, 7], [3, 10], [4, 4], [5, 1], [5, 2], [5, 7], [5, 8], [5, 10], [6, 1], [6, 2], [6, 3], [6, 4], [6, 6], [6, 7], [6, 8], [6, 9], [6, 10], [6, 11], [7, 0], [7, 2], [7, 9], [8, 4], [8, 6], [8, 9], [8, 10], [9, 1], [9, 3], [9, 4], [9, 5], [9, 6], [9, 7], [9, 9], [9, 10], [9, 11], [10, 1], [10, 3], [10, 6], [10, 8], [11, 1], [11, 2], [11, 4], [11, 8], [11, 9], [11, 11]], g2=[[0, 11], [9, 2], [10, 10], [6, 11], [7, 5], [5, 0], [9, 3], [8, 2], [10, 8], [2, 11], [4, 8], [0, 7], [2, 10], [11, 11], [4, 5], [10, 11], [6, 10], [9, 7], [6, 6], [8, 10], [1, 5], [2, 9], [10, 3], [0, 2], [9, 8], [5, 4], [0, 5], [6, 2], [8, 1], [1, 6], [6, 3], [0, 10], [0, 8], [10, 5], [2, 7], [0, 6], [0, 0], [10, 0], [3, 8], [5, 3], [5, 7], [10, 6], [6, 7], [7, 0], [3, 9], [3, 4], [0, 3], [0, 4], [1, 7], [4, 9], [7, 10], [9, 5], [7, 11], [3, 5], [10, 4], [10, 9], [2, 8], [1, 0]]):\n    return len(bi) == len(set(bi)) and {(i, j) for i, j in g1} == {(bi[i], bi[j]) for i, j in g2}",
    "ans_type": "List[int]",
    "sol_header": "def sol(g1=[[0, 6], [0, 8], [0, 10], [0, 11], [1, 3], [1, 5], [1, 7], [1, 10], [2, 4], [2, 5], [2, 7], [2, 8], [2, 9], [3, 5], [3, 7], [3, 10], [4, 4], [5, 1], [5, 2], [5, 7], [5, 8], [5, 10], [6, 1], [6, 2], [6, 3], [6, 4], [6, 6], [6, 7], [6, 8], [6, 9], [6, 10], [6, 11], [7, 0], [7, 2], [7, 9], [8, 4], [8, 6], [8, 9], [8, 10], [9, 1], [9, 3], [9, 4], [9, 5], [9, 6], [9, 7], [9, 9], [9, 10], [9, 11], [10, 1], [10, 3], [10, 6], [10, 8], [11, 1], [11, 2], [11, 4], [11, 8], [11, 9], [11, 11]], g2=[[0, 11], [9, 2], [10, 10], [6, 11], [7, 5], [5, 0], [9, 3], [8, 2], [10, 8], [2, 11], [4, 8], [0, 7], [2, 10], [11, 11], [4, 5], [10, 11], [6, 10], [9, 7], [6, 6], [8, 10], [1, 5], [2, 9], [10, 3], [0, 2], [9, 8], [5, 4], [0, 5], [6, 2], [8, 1], [1, 6], [6, 3], [0, 10], [0, 8], [10, 5], [2, 7], [0, 6], [0, 0], [10, 0], [3, 8], [5, 3], [5, 7], [10, 6], [6, 7], [7, 0], [3, 9], [3, 4], [0, 3], [0, 4], [1, 7], [4, 9], [7, 10], [9, 5], [7, 11], [3, 5], [10, 4], [10, 9], [2, 8], [1, 0]]):",
    "sol_docstring": "    \"\"\"\n    You are given two graphs which are permutations of one another and the goal is to find the permutation.\n    Each graph is specified by a list of edges where each edge is a pair of integer vertex numbers.\n    \"\"\"",
    "sol_bodies": [],
    "module": "graphs.py",
    "notes": "The classic [Graph Isomorphism](https://en.wikipedia.org/wiki/Graph_isomorphism) problem.\nIt is unknown whether or not there exists a polynomial-time algorithm\nfor this problem, though an unpublished quasi-polynomial-time algorithm has been announced by Babai.\n\nThe classic version is a decision problem: given two graphs, determine whether or not they are isomorphic.\nHowever, it is polynomial-time equivalent to the one below through a standard reduction. In particular, if you\ncould solve the search problem below (finding the actual bijection), then you can decide isomorphism because the\nsearch solver would simply fail on non-isomorphic graphs. Conversely, if you could solve the decision problem,\nthen you can find a bijection as follows: if the decider determines that the graphs are isomorphic, for each node\nin the first graph, find a corresponding node in the second graph as follows. Add N self-edges from the node to\nitself where N is the maximum degree in the graph + 1, and do that for each candidate node in the second graph.\nFor each of these additions, test isomorphism. If the graphs are isomorphic then there must be a bijection that maps\nthe first node to the second. Repeat this for each node until you have found a bijection. (If self-loops are not\nallowed, one can do this by adding N additional nodes for each test.",
    "weight": 1.0
  },
  {
    "name": "GraphIsomorphism:2",
    "sat": "def sat(bi: List[int], g1=[[0, 1], [0, 7], [1, 1], [2, 0], [2, 3], [2, 5], [2, 6], [3, 0], [3, 1], [3, 2], [3, 5], [3, 6], [3, 7], [4, 3], [4, 5], [4, 6], [5, 0], [5, 2], [5, 3], [6, 0], [6, 5], [6, 7], [7, 0], [7, 4], [7, 6]], g2=[[0, 7], [7, 1], [0, 2], [3, 1], [2, 0], [7, 0], [0, 6], [4, 7], [2, 7], [7, 6], [1, 6], [3, 6], [6, 5], [1, 3], [7, 3], [4, 0], [1, 0], [3, 4], [2, 1], [2, 6], [7, 2], [6, 3], [7, 5], [4, 1], [5, 5]]):\n    return len(bi) == len(set(bi)) and {(i, j) for i, j in g1} == {(bi[i], bi[j]) for i, j in g2}",
    "ans_type": "List[int]",
    "sol_header": "def sol(g1=[[0, 1], [0, 7], [1, 1], [2, 0], [2, 3], [2, 5], [2, 6], [3, 0], [3, 1], [3, 2], [3, 5], [3, 6], [3, 7], [4, 3], [4, 5], [4, 6], [5, 0], [5, 2], [5, 3], [6, 0], [6, 5], [6, 7], [7, 0], [7, 4], [7, 6]], g2=[[0, 7], [7, 1], [0, 2], [3, 1], [2, 0], [7, 0], [0, 6], [4, 7], [2, 7], [7, 6], [1, 6], [3, 6], [6, 5], [1, 3], [7, 3], [4, 0], [1, 0], [3, 4], [2, 1], [2, 6], [7, 2], [6, 3], [7, 5], [4, 1], [5, 5]]):",
    "sol_docstring": "    \"\"\"\n    You are given two graphs which are permutations of one another and the goal is to find the permutation.\n    Each graph is specified by a list of edges where each edge is a pair of integer vertex numbers.\n    \"\"\"",
    "sol_bodies": [
      "    # exponentially slow\n    from itertools import permutations\n    n = max(i for g in [g1, g2] for e in g for i in e) + 1\n    g1_set = {(i, j) for i, j in g1}\n    for pi in permutations(range(n)):\n        if all((pi[i], pi[j]) in g1_set for i, j in g2):\n            return list(pi)\n    assert False, f\"Graphs are not isomorphic {g1}, {g2}\""
    ],
    "module": "graphs.py",
    "notes": "The classic [Graph Isomorphism](https://en.wikipedia.org/wiki/Graph_isomorphism) problem.\nIt is unknown whether or not there exists a polynomial-time algorithm\nfor this problem, though an unpublished quasi-polynomial-time algorithm has been announced by Babai.\n\nThe classic version is a decision problem: given two graphs, determine whether or not they are isomorphic.\nHowever, it is polynomial-time equivalent to the one below through a standard reduction. In particular, if you\ncould solve the search problem below (finding the actual bijection), then you can decide isomorphism because the\nsearch solver would simply fail on non-isomorphic graphs. Conversely, if you could solve the decision problem,\nthen you can find a bijection as follows: if the decider determines that the graphs are isomorphic, for each node\nin the first graph, find a corresponding node in the second graph as follows. Add N self-edges from the node to\nitself where N is the maximum degree in the graph + 1, and do that for each candidate node in the second graph.\nFor each of these additions, test isomorphism. If the graphs are isomorphic then there must be a bijection that maps\nthe first node to the second. Repeat this for each node until you have found a bijection. (If self-loops are not\nallowed, one can do this by adding N additional nodes for each test.",
    "weight": 1.0
  },
  {
    "name": "GraphIsomorphism:3",
    "sat": "def sat(bi: List[int], g1=[[0, 0], [0, 5], [0, 6], [0, 9], [1, 1], [1, 2], [1, 3], [1, 5], [1, 7], [1, 8], [2, 1], [2, 4], [2, 8], [2, 9], [3, 0], [3, 4], [3, 7], [3, 9], [4, 2], [4, 3], [4, 5], [4, 9], [5, 6], [5, 7], [5, 8], [5, 9], [6, 0], [6, 4], [6, 7], [7, 5], [7, 6], [7, 8], [8, 1], [8, 7], [9, 1], [9, 4], [9, 8], [9, 9]], g2=[[1, 0], [2, 5], [0, 1], [5, 0], [6, 2], [8, 8], [0, 2], [9, 3], [3, 7], [5, 8], [1, 8], [8, 3], [5, 3], [0, 9], [6, 7], [1, 5], [8, 2], [7, 4], [6, 3], [9, 0], [4, 1], [1, 1], [7, 3], [7, 5], [2, 4], [5, 9], [3, 9], [7, 7], [7, 9], [4, 9], [4, 8], [8, 7], [7, 6], [9, 5], [6, 8], [2, 8], [4, 2], [2, 6]]):\n    return len(bi) == len(set(bi)) and {(i, j) for i, j in g1} == {(bi[i], bi[j]) for i, j in g2}",
    "ans_type": "List[int]",
    "sol_header": "def sol(g1=[[0, 0], [0, 5], [0, 6], [0, 9], [1, 1], [1, 2], [1, 3], [1, 5], [1, 7], [1, 8], [2, 1], [2, 4], [2, 8], [2, 9], [3, 0], [3, 4], [3, 7], [3, 9], [4, 2], [4, 3], [4, 5], [4, 9], [5, 6], [5, 7], [5, 8], [5, 9], [6, 0], [6, 4], [6, 7], [7, 5], [7, 6], [7, 8], [8, 1], [8, 7], [9, 1], [9, 4], [9, 8], [9, 9]], g2=[[1, 0], [2, 5], [0, 1], [5, 0], [6, 2], [8, 8], [0, 2], [9, 3], [3, 7], [5, 8], [1, 8], [8, 3], [5, 3], [0, 9], [6, 7], [1, 5], [8, 2], [7, 4], [6, 3], [9, 0], [4, 1], [1, 1], [7, 3], [7, 5], [2, 4], [5, 9], [3, 9], [7, 7], [7, 9], [4, 9], [4, 8], [8, 7], [7, 6], [9, 5], [6, 8], [2, 8], [4, 2], [2, 6]]):",
    "sol_docstring": "    \"\"\"\n    You are given two graphs which are permutations of one another and the goal is to find the permutation.\n    Each graph is specified by a list of edges where each edge is a pair of integer vertex numbers.\n    \"\"\"",
    "sol_bodies": [],
    "module": "graphs.py",
    "notes": "The classic [Graph Isomorphism](https://en.wikipedia.org/wiki/Graph_isomorphism) problem.\nIt is unknown whether or not there exists a polynomial-time algorithm\nfor this problem, though an unpublished quasi-polynomial-time algorithm has been announced by Babai.\n\nThe classic version is a decision problem: given two graphs, determine whether or not they are isomorphic.\nHowever, it is polynomial-time equivalent to the one below through a standard reduction. In particular, if you\ncould solve the search problem below (finding the actual bijection), then you can decide isomorphism because the\nsearch solver would simply fail on non-isomorphic graphs. Conversely, if you could solve the decision problem,\nthen you can find a bijection as follows: if the decider determines that the graphs are isomorphic, for each node\nin the first graph, find a corresponding node in the second graph as follows. Add N self-edges from the node to\nitself where N is the maximum degree in the graph + 1, and do that for each candidate node in the second graph.\nFor each of these additions, test isomorphism. If the graphs are isomorphic then there must be a bijection that maps\nthe first node to the second. Repeat this for each node until you have found a bijection. (If self-loops are not\nallowed, one can do this by adding N additional nodes for each test.",
    "weight": 1.0
  },
  {
    "name": "GraphIsomorphism:4",
    "sat": "def sat(bi: List[int], g1=[[1, 0], [1, 1], [1, 2], [2, 1]], g2=[[0, 2], [2, 2], [2, 0], [2, 1]]):\n    return len(bi) == len(set(bi)) and {(i, j) for i, j in g1} == {(bi[i], bi[j]) for i, j in g2}",
    "ans_type": "List[int]",
    "sol_header": "def sol(g1=[[1, 0], [1, 1], [1, 2], [2, 1]], g2=[[0, 2], [2, 2], [2, 0], [2, 1]]):",
    "sol_docstring": "    \"\"\"\n    You are given two graphs which are permutations of one another and the goal is to find the permutation.\n    Each graph is specified by a list of edges where each edge is a pair of integer vertex numbers.\n    \"\"\"",
    "sol_bodies": [
      "    # exponentially slow\n    from itertools import permutations\n    n = max(i for g in [g1, g2] for e in g for i in e) + 1\n    g1_set = {(i, j) for i, j in g1}\n    for pi in permutations(range(n)):\n        if all((pi[i], pi[j]) in g1_set for i, j in g2):\n            return list(pi)\n    assert False, f\"Graphs are not isomorphic {g1}, {g2}\""
    ],
    "module": "graphs.py",
    "notes": "The classic [Graph Isomorphism](https://en.wikipedia.org/wiki/Graph_isomorphism) problem.\nIt is unknown whether or not there exists a polynomial-time algorithm\nfor this problem, though an unpublished quasi-polynomial-time algorithm has been announced by Babai.\n\nThe classic version is a decision problem: given two graphs, determine whether or not they are isomorphic.\nHowever, it is polynomial-time equivalent to the one below through a standard reduction. In particular, if you\ncould solve the search problem below (finding the actual bijection), then you can decide isomorphism because the\nsearch solver would simply fail on non-isomorphic graphs. Conversely, if you could solve the decision problem,\nthen you can find a bijection as follows: if the decider determines that the graphs are isomorphic, for each node\nin the first graph, find a corresponding node in the second graph as follows. Add N self-edges from the node to\nitself where N is the maximum degree in the graph + 1, and do that for each candidate node in the second graph.\nFor each of these additions, test isomorphism. If the graphs are isomorphic then there must be a bijection that maps\nthe first node to the second. Repeat this for each node until you have found a bijection. (If self-loops are not\nallowed, one can do this by adding N additional nodes for each test.",
    "weight": 1.0
  },
  {
    "name": "ShortIntegerPath:0",
    "sat": "def sat(li: List[int]):\n    return all(j in {i - 1, i + 1, 3 * i} for i, j in zip([0] + li, li + [128])) and len(li) == 9",
    "ans_type": "List[int]",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"\n    Find a list of nine integers, starting with 0 and ending with 128, such that each integer either differs from\n    the previous one by one or is thrice the previous one.\n    \"\"\"",
    "sol_bodies": [
      "    return [1, 3, 4, 12, 13, 14, 42, 126, 127]"
    ],
    "module": "graphs.py",
    "notes": "This is a more interesting version of Study_20 with an additional length constraint. One can think of the graph\ndefined by the integer pairs.",
    "weight": 1.0
  },
  {
    "name": "BiPermutations:0",
    "sat": "def sat(perms: List[List[int]], prices0=[7, 7, 9, 5, 3, 7, 1, 2], prices1=[5, 5, 5, 4, 2, 5, 1, 1], heights0=[2, 4, 9, 3, 8, 5, 5, 4], heights1=[1, 3, 8, 1, 5, 4, 4, 2]):\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(prices0=[7, 7, 9, 5, 3, 7, 1, 2], prices1=[5, 5, 5, 4, 2, 5, 1, 1], heights0=[2, 4, 9, 3, 8, 5, 5, 4], heights1=[1, 3, 8, 1, 5, 4, 4, 2]):",
    "sol_docstring": "    \"\"\"\n    There are two rows of objects. Given the length-n integer arrays of prices and heights of objects in each\n    row, find a permutation of both rows so that the permuted prices are non-decreasing in each row and\n    so that the first row is taller than the second row.\n    \"\"\"",
    "sol_bodies": [
      "    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ],
    "module": "ICPC.py",
    "notes": "Inspired by\n[ICPC 2019 Problem A: Azulejos](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\nwhich is 2,287 characters.",
    "weight": 1.0
  },
  {
    "name": "BiPermutations:1",
    "sat": "def sat(perms: List[List[int]], prices0=[0, 0, 0, 0, 0], prices1=[0, 0, 0, 0, 0], heights0=[12, 5, 8, 13, 7], heights1=[2, 10, 4, 5, 9]):\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(prices0=[0, 0, 0, 0, 0], heights0=[12, 5, 8, 13, 7], prices1=[0, 0, 0, 0, 0], heights1=[2, 10, 4, 5, 9]):",
    "sol_docstring": "    \"\"\"\n    There are two rows of objects. Given the length-n integer arrays of prices and heights of objects in each\n    row, find a permutation of both rows so that the permuted prices are non-decreasing in each row and\n    so that the first row is taller than the second row.\n    \"\"\"",
    "sol_bodies": [
      "    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ],
    "module": "ICPC.py",
    "notes": "Inspired by\n[ICPC 2019 Problem A: Azulejos](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\nwhich is 2,287 characters.",
    "weight": 1.0
  },
  {
    "name": "BiPermutations:2",
    "sat": "def sat(perms: List[List[int]], prices0=[0, 0, 0, 0, 0], prices1=[0, 0, 0, 0, 0], heights0=[9, 10, 12, 14, 14], heights1=[6, 5, 7, 10, 10]):\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(prices0=[0, 0, 0, 0, 0], heights0=[9, 10, 12, 14, 14], prices1=[0, 0, 0, 0, 0], heights1=[6, 5, 7, 10, 10]):",
    "sol_docstring": "    \"\"\"\n    There are two rows of objects. Given the length-n integer arrays of prices and heights of objects in each\n    row, find a permutation of both rows so that the permuted prices are non-decreasing in each row and\n    so that the first row is taller than the second row.\n    \"\"\"",
    "sol_bodies": [
      "    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ],
    "module": "ICPC.py",
    "notes": "Inspired by\n[ICPC 2019 Problem A: Azulejos](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\nwhich is 2,287 characters.",
    "weight": 1.0
  },
  {
    "name": "BiPermutations:3",
    "sat": "def sat(perms: List[List[int]], prices0=[2, 5, 4, 2, 7, 3, 4, 5, 2, 3, 2, 1, 2, 7, 6, 1, 5, 2, 4, 6, 3, 7, 1, 2, 3, 5, 2, 2, 2, 2, 6, 5, 0, 2, 2, 0, 7, 3, 6, 4, 7, 0, 1, 5, 6, 1, 7, 6, 5, 4, 7, 7, 2, 5, 4, 5, 1, 4, 3, 3, 0, 2, 4, 0, 3, 0, 6, 4, 2, 6, 7, 5, 0, 5, 6, 2], prices1=[4, 5, 2, 5, 7, 0, 6, 6, 4, 5, 5, 6, 6, 2, 5, 4, 6, 0, 3, 3, 4, 5, 7, 7, 3, 3, 2, 5, 1, 7, 5, 6, 6, 3, 1, 4, 5, 0, 6, 7, 3, 7, 1, 5, 7, 4, 1, 0, 3, 6, 0, 1, 3, 3, 3, 5, 0, 4, 7, 3, 3, 2, 2, 3, 7, 7, 1, 1, 2, 2, 2, 5, 4, 7, 3, 0], heights0=[5, 4, 8, 9, 9, 11, 13, 6, 6, 6, 9, 13, 15, 8, 7, 14, 6, 5, 12, 7, 14, 9, 6, 13, 3, 10, 11, 8, 4, 14, 10, 10, 4, 8, 3, 7, 11, 8, 5, 5, 10, 11, 9, 9, 7, 11, 3, 13, 15, 5, 3, 7, 8, 10, 8, 13, 12, 3, 4, 13, 7, 7, 5, 5, 6, 10, 8, 11, 7, 5, 10, 15, 4, 15, 6, 8], heights1=[5, 9, 4, 4, 8, 7, 10, 1, 2, 5, 5, 3, 4, 1, 10, 1, 5, 3, 3, 5, 4, 8, 3, 9, 10, 5, 6, 9, 10, 2, 10, 4, 6, 10, 4, 3, 2, 4, 9, 2, 7, 8, 7, 7, 9, 10, 9, 1, 7, 6, 2, 4, 2, 10, 6, 6, 10, 2, 5, 3, 10, 5, 10, 4, 6, 2, 8, 5, 3, 10, 1, 8, 6, 2, 2, 2]):\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(prices0=[2, 5, 4, 2, 7, 3, 4, 5, 2, 3, 2, 1, 2, 7, 6, 1, 5, 2, 4, 6, 3, 7, 1, 2, 3, 5, 2, 2, 2, 2, 6, 5, 0, 2, 2, 0, 7, 3, 6, 4, 7, 0, 1, 5, 6, 1, 7, 6, 5, 4, 7, 7, 2, 5, 4, 5, 1, 4, 3, 3, 0, 2, 4, 0, 3, 0, 6, 4, 2, 6, 7, 5, 0, 5, 6, 2], heights0=[5, 4, 8, 9, 9, 11, 13, 6, 6, 6, 9, 13, 15, 8, 7, 14, 6, 5, 12, 7, 14, 9, 6, 13, 3, 10, 11, 8, 4, 14, 10, 10, 4, 8, 3, 7, 11, 8, 5, 5, 10, 11, 9, 9, 7, 11, 3, 13, 15, 5, 3, 7, 8, 10, 8, 13, 12, 3, 4, 13, 7, 7, 5, 5, 6, 10, 8, 11, 7, 5, 10, 15, 4, 15, 6, 8], prices1=[4, 5, 2, 5, 7, 0, 6, 6, 4, 5, 5, 6, 6, 2, 5, 4, 6, 0, 3, 3, 4, 5, 7, 7, 3, 3, 2, 5, 1, 7, 5, 6, 6, 3, 1, 4, 5, 0, 6, 7, 3, 7, 1, 5, 7, 4, 1, 0, 3, 6, 0, 1, 3, 3, 3, 5, 0, 4, 7, 3, 3, 2, 2, 3, 7, 7, 1, 1, 2, 2, 2, 5, 4, 7, 3, 0], heights1=[5, 9, 4, 4, 8, 7, 10, 1, 2, 5, 5, 3, 4, 1, 10, 1, 5, 3, 3, 5, 4, 8, 3, 9, 10, 5, 6, 9, 10, 2, 10, 4, 6, 10, 4, 3, 2, 4, 9, 2, 7, 8, 7, 7, 9, 10, 9, 1, 7, 6, 2, 4, 2, 10, 6, 6, 10, 2, 5, 3, 10, 5, 10, 4, 6, 2, 8, 5, 3, 10, 1, 8, 6, 2, 2, 2]):",
    "sol_docstring": "    \"\"\"\n    There are two rows of objects. Given the length-n integer arrays of prices and heights of objects in each\n    row, find a permutation of both rows so that the permuted prices are non-decreasing in each row and\n    so that the first row is taller than the second row.\n    \"\"\"",
    "sol_bodies": [
      "    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ],
    "module": "ICPC.py",
    "notes": "Inspired by\n[ICPC 2019 Problem A: Azulejos](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\nwhich is 2,287 characters.",
    "weight": 1.0
  },
  {
    "name": "BiPermutations:4",
    "sat": "def sat(perms: List[List[int]], prices0=[3, 6, 4, 0, 5, 6, 4, 3, 1, 7, 0, 4, 7, 5, 6, 1, 3, 3, 7, 4, 2, 5, 1, 7, 6, 7, 6, 3, 0, 2, 1, 7, 4, 3, 2, 7, 1, 3, 7, 6, 7, 0, 2, 0, 1, 1, 1, 3, 1, 1, 0, 0, 5, 2, 4, 6, 1, 5, 2, 5, 1, 5, 5, 3, 1, 7, 7, 1, 3, 6, 0, 6, 0, 0, 3, 6, 1], prices1=[1, 4, 0, 6, 3, 1, 4, 6, 3, 0, 4, 7, 2, 6, 4, 0, 2, 4, 6, 7, 7, 0, 4, 2, 6, 1, 6, 3, 0, 5, 3, 6, 0, 1, 4, 1, 0, 5, 1, 3, 4, 0, 0, 2, 5, 5, 5, 1, 2, 7, 7, 0, 7, 0, 7, 7, 5, 0, 1, 1, 0, 5, 7, 1, 0, 0, 2, 4, 1, 2, 6, 2, 3, 4, 0, 7, 6], heights0=[12, 13, 8, 14, 12, 10, 15, 4, 13, 8, 7, 4, 8, 4, 7, 13, 7, 11, 6, 7, 11, 14, 11, 13, 10, 10, 5, 9, 12, 5, 11, 12, 12, 6, 4, 11, 5, 3, 4, 6, 3, 4, 3, 15, 4, 13, 8, 10, 10, 10, 14, 6, 10, 7, 6, 4, 6, 12, 8, 11, 7, 9, 7, 12, 6, 8, 6, 7, 8, 5, 13, 6, 10, 13, 5, 7, 10], heights1=[5, 8, 9, 3, 4, 7, 2, 7, 10, 10, 10, 3, 3, 8, 3, 9, 4, 5, 8, 9, 1, 4, 2, 2, 5, 3, 4, 4, 2, 6, 8, 2, 6, 9, 9, 6, 10, 7, 2, 7, 1, 10, 8, 6, 2, 10, 6, 8, 4, 3, 3, 9, 5, 9, 3, 7, 5, 10, 3, 1, 8, 10, 5, 6, 3, 8, 1, 7, 3, 1, 10, 4, 8, 1, 2, 5, 2]):\n    n = len(prices0)\n    perm0, perm1 = perms\n    assert sorted(perm0) == sorted(perm1) == list(range(n)), \"Solution must be two permutations\"\n    for i in range(n - 1):\n        assert prices0[perm0[i]] <= prices0[perm0[i + 1]], \"Permuted prices must be nondecreasing (row 0)\"\n        assert prices1[perm1[i]] <= prices1[perm1[i + 1]], \"Permuted prices must be nondecreasing (row 1)\"\n    return all(heights0[i] > heights1[j] for i, j in zip(perm0, perm1))",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(prices0=[3, 6, 4, 0, 5, 6, 4, 3, 1, 7, 0, 4, 7, 5, 6, 1, 3, 3, 7, 4, 2, 5, 1, 7, 6, 7, 6, 3, 0, 2, 1, 7, 4, 3, 2, 7, 1, 3, 7, 6, 7, 0, 2, 0, 1, 1, 1, 3, 1, 1, 0, 0, 5, 2, 4, 6, 1, 5, 2, 5, 1, 5, 5, 3, 1, 7, 7, 1, 3, 6, 0, 6, 0, 0, 3, 6, 1], heights0=[12, 13, 8, 14, 12, 10, 15, 4, 13, 8, 7, 4, 8, 4, 7, 13, 7, 11, 6, 7, 11, 14, 11, 13, 10, 10, 5, 9, 12, 5, 11, 12, 12, 6, 4, 11, 5, 3, 4, 6, 3, 4, 3, 15, 4, 13, 8, 10, 10, 10, 14, 6, 10, 7, 6, 4, 6, 12, 8, 11, 7, 9, 7, 12, 6, 8, 6, 7, 8, 5, 13, 6, 10, 13, 5, 7, 10], prices1=[1, 4, 0, 6, 3, 1, 4, 6, 3, 0, 4, 7, 2, 6, 4, 0, 2, 4, 6, 7, 7, 0, 4, 2, 6, 1, 6, 3, 0, 5, 3, 6, 0, 1, 4, 1, 0, 5, 1, 3, 4, 0, 0, 2, 5, 5, 5, 1, 2, 7, 7, 0, 7, 0, 7, 7, 5, 0, 1, 1, 0, 5, 7, 1, 0, 0, 2, 4, 1, 2, 6, 2, 3, 4, 0, 7, 6], heights1=[5, 8, 9, 3, 4, 7, 2, 7, 10, 10, 10, 3, 3, 8, 3, 9, 4, 5, 8, 9, 1, 4, 2, 2, 5, 3, 4, 4, 2, 6, 8, 2, 6, 9, 9, 6, 10, 7, 2, 7, 1, 10, 8, 6, 2, 10, 6, 8, 4, 3, 3, 9, 5, 9, 3, 7, 5, 10, 3, 1, 8, 10, 5, 6, 3, 8, 1, 7, 3, 1, 10, 4, 8, 1, 2, 5, 2]):",
    "sol_docstring": "    \"\"\"\n    There are two rows of objects. Given the length-n integer arrays of prices and heights of objects in each\n    row, find a permutation of both rows so that the permuted prices are non-decreasing in each row and\n    so that the first row is taller than the second row.\n    \"\"\"",
    "sol_bodies": [
      "    n = len(prices0)\n    prices = [prices0, prices1]\n    orders = [sorted(range(n), key=lambda i: (prices0[i], heights0[i])),\n              sorted(range(n), key=lambda i: (prices1[i], -heights1[i]))]\n    jumps = [1, 1]  # next price increase locations\n    for i in range(n):\n        for r, (p, o) in enumerate(zip(prices, orders)):\n            while jumps[r] < n and p[o[jumps[r]]] == p[o[i]]:\n                jumps[r] += 1\n\n        to_fix = orders[jumps[0] < jumps[1]]\n        j = i\n        while heights0[orders[0][i]] <= heights1[orders[1][i]]:\n            j += 1\n            to_fix[i], to_fix[j] = to_fix[j], to_fix[i]\n\n    return orders"
    ],
    "module": "ICPC.py",
    "notes": "Inspired by\n[ICPC 2019 Problem A: Azulejos](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\nwhich is 2,287 characters.",
    "weight": 1.0
  },
  {
    "name": "OptimalBridges:0",
    "sat": "def sat(indices: List[int], H=60, alpha=18, beta=2, xs=[0, 10, 20, 30, 50, 80, 100, 120, 160, 190, 200], ys=[0, 30, 10, 30, 50, 40, 10, 20, 20, 55, 10], thresh=26020):\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "ans_type": "List[int]",
    "sol_header": "def sol(H=60, alpha=18, beta=2, xs=[0, 10, 20, 30, 50, 80, 100, 120, 160, 190, 200], ys=[0, 30, 10, 30, 50, 40, 10, 20, 20, 55, 10], thresh=26020):",
    "sol_docstring": "    \"\"\"\n    You are to choose locations for bridge bases from among a given set of mountain peaks located at\n    `xs, ys`, where `xs` and `ys` are lists of n integers of the same length. Your answer should be a sorted\n    list of indices starting at 0 and ending at n-1. The goal is to minimize building costs such that the bridges\n    are feasible. The bridges are all semicircles placed on top of the pillars. The feasibility constraints are that:\n    * The bridges may not extend above a given height `H`. Mathematically, if the distance between the two xs\n    of adjacent pillars is d, then the semicircle will have radius `d/2` and therefore the heights of the\n    selected mountain peaks must both be at most `H - d/2`.\n    *  The bridges must clear all the mountain peaks, which means that the semicircle must lie above the tops of the\n    peak. See the code for how this is determined mathematically.\n    * The total cost of all the bridges must be at most `thresh`, where the cost is parameter alpha * (the sum of\n    all pillar heights) + beta * (the sum of the squared diameters)\n    \"\"\"",
    "sol_bodies": [
      "    # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ],
    "module": "ICPC.py",
    "notes": "Inspired by\n[ICPC 2019 Problem B: Bridges](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\nwhich is 3,003 characters.",
    "weight": 1.0
  },
  {
    "name": "OptimalBridges:1",
    "sat": "def sat(indices: List[int], H=100000, alpha=17, beta=6, xs=[0, 3069, 5319, 5373, 5466, 5479, 5519, 6629, 9652, 9919, 11009, 11175, 11348, 12167, 13016, 13109, 13216, 13250, 13253, 14265, 15018, 16389, 20993, 22240, 23259, 23276, 23410, 25158, 27034, 30140, 31404, 31521, 31619, 31683, 31692, 31705, 34207, 55515, 64781, 71416, 76305, 77516, 81021, 85257, 85806, 86243, 91008, 97806, 100000], ys=[81112, 12485, 94379, 88854, 987, 76485, 42941, 64723, 81743, 86552, 93967, 41028, 583, 23986, 45831, 34204, 5856, 40242, 63968, 6777, 16745, 36621, 70993, 45840, 41901, 19003, 56321, 76109, 36482, 43746, 94401, 24752, 56908, 76875, 59498, 38391, 6693, 23419, 73740, 47413, 27170, 34095, 80071, 53942, 76129, 80538, 44026, 72982, 75701], thresh=4786941056):\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "ans_type": "List[int]",
    "sol_header": "def sol(H=100000, alpha=17, beta=6, xs=[0, 3069, 5319, 5373, 5466, 5479, 5519, 6629, 9652, 9919, 11009, 11175, 11348, 12167, 13016, 13109, 13216, 13250, 13253, 14265, 15018, 16389, 20993, 22240, 23259, 23276, 23410, 25158, 27034, 30140, 31404, 31521, 31619, 31683, 31692, 31705, 34207, 55515, 64781, 71416, 76305, 77516, 81021, 85257, 85806, 86243, 91008, 97806, 100000], ys=[81112, 12485, 94379, 88854, 987, 76485, 42941, 64723, 81743, 86552, 93967, 41028, 583, 23986, 45831, 34204, 5856, 40242, 63968, 6777, 16745, 36621, 70993, 45840, 41901, 19003, 56321, 76109, 36482, 43746, 94401, 24752, 56908, 76875, 59498, 38391, 6693, 23419, 73740, 47413, 27170, 34095, 80071, 53942, 76129, 80538, 44026, 72982, 75701], thresh=4786941056):",
    "sol_docstring": "    \"\"\"\n    You are to choose locations for bridge bases from among a given set of mountain peaks located at\n    `xs, ys`, where `xs` and `ys` are lists of n integers of the same length. Your answer should be a sorted\n    list of indices starting at 0 and ending at n-1. The goal is to minimize building costs such that the bridges\n    are feasible. The bridges are all semicircles placed on top of the pillars. The feasibility constraints are that:\n    * The bridges may not extend above a given height `H`. Mathematically, if the distance between the two xs\n    of adjacent pillars is d, then the semicircle will have radius `d/2` and therefore the heights of the\n    selected mountain peaks must both be at most `H - d/2`.\n    *  The bridges must clear all the mountain peaks, which means that the semicircle must lie above the tops of the\n    peak. See the code for how this is determined mathematically.\n    * The total cost of all the bridges must be at most `thresh`, where the cost is parameter alpha * (the sum of\n    all pillar heights) + beta * (the sum of the squared diameters)\n    \"\"\"",
    "sol_bodies": [
      "    # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ],
    "module": "ICPC.py",
    "notes": "Inspired by\n[ICPC 2019 Problem B: Bridges](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\nwhich is 3,003 characters.",
    "weight": 1.0
  },
  {
    "name": "OptimalBridges:2",
    "sat": "def sat(indices: List[int], H=100000, alpha=21, beta=40, xs=[0, 8094, 57578, 62776, 83547, 87398, 95828, 100000], ys=[14832, 27072, 77311, 50782, 82688, 11061, 50767, 3696], thresh=143624404582):\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "ans_type": "List[int]",
    "sol_header": "def sol(H=100000, alpha=21, beta=40, xs=[0, 8094, 57578, 62776, 83547, 87398, 95828, 100000], ys=[14832, 27072, 77311, 50782, 82688, 11061, 50767, 3696], thresh=143624404582):",
    "sol_docstring": "    \"\"\"\n    You are to choose locations for bridge bases from among a given set of mountain peaks located at\n    `xs, ys`, where `xs` and `ys` are lists of n integers of the same length. Your answer should be a sorted\n    list of indices starting at 0 and ending at n-1. The goal is to minimize building costs such that the bridges\n    are feasible. The bridges are all semicircles placed on top of the pillars. The feasibility constraints are that:\n    * The bridges may not extend above a given height `H`. Mathematically, if the distance between the two xs\n    of adjacent pillars is d, then the semicircle will have radius `d/2` and therefore the heights of the\n    selected mountain peaks must both be at most `H - d/2`.\n    *  The bridges must clear all the mountain peaks, which means that the semicircle must lie above the tops of the\n    peak. See the code for how this is determined mathematically.\n    * The total cost of all the bridges must be at most `thresh`, where the cost is parameter alpha * (the sum of\n    all pillar heights) + beta * (the sum of the squared diameters)\n    \"\"\"",
    "sol_bodies": [
      "    # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ],
    "module": "ICPC.py",
    "notes": "Inspired by\n[ICPC 2019 Problem B: Bridges](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\nwhich is 3,003 characters.",
    "weight": 1.0
  },
  {
    "name": "OptimalBridges:3",
    "sat": "def sat(indices: List[int], H=100000, alpha=975, beta=546, xs=[0, 102, 174, 281, 458, 554, 583, 590, 646, 1592, 1795, 1805, 1835, 1839, 1842, 1842, 1842, 1842, 1842, 1842, 1842, 1842, 1842, 1842, 1842, 1843, 2357, 2683, 3152, 3159, 3167, 3170, 3170, 3171, 3171, 3172, 3172, 3172, 3172, 3172, 3173, 4025, 4274, 4282, 4465, 4520, 4529, 4666, 4676, 4901, 4905, 5003, 5295, 5510, 5553, 5585, 5585, 5638, 5973, 6136, 6317, 6329, 6374, 6400, 6405, 6407, 6407, 6409, 6409, 6409, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6411, 6456, 6462, 6462, 6469, 6482, 6486, 6881, 6919, 7240, 7510, 7599, 7995, 8173, 8249, 8284, 8296, 8298, 8298, 8299, 8301, 8427, 8701, 8751, 8945, 9141, 9166, 9208, 9308, 9321, 9327, 9332, 9332, 9332, 9332, 9332, 9332, 9332, 9332, 9332, 9333, 10630, 11062, 11173, 11286, 11294, 11319, 11322, 11367, 11372, 11376, 11398, 11399, 11403, 11409, 11451, 11459, 11519, 11660, 11687, 11691, 11694, 11694, 11697, 12232, 12313, 12314, 12316, 12321, 12322, 12322, 12322, 12323, 13101, 13207, 13274, 13445, 13512, 13687, 13911, 13987, 14251, 14255, 14306, 14570, 14594, 14606, 14606, 14608, 14998, 15232, 15237, 15633, 15795, 15831, 15991, 16176, 16179, 16189, 16228, 16339, 16450, 16540, 16777, 16851, 16889, 17291, 17694, 18333, 18356, 19390, 19449, 19454, 19750, 20562, 22013, 22332, 22374, 22591, 23234, 23276, 23281, 23296, 23351, 23397, 23762, 23844, 23859, 23866, 23894, 23943, 24311, 24379, 24958, 25140, 25160, 25178, 25211, 25219, 25235, 25378, 25929, 26078, 26181, 26474, 26804, 26821, 26838, 26843, 26858, 26894, 26894, 26894, 26895, 27181, 27302, 27329, 27365, 27374, 27380, 27381, 27382, 27382, 27382, 27382, 27382, 27382, 27382, 27382, 27382, 27382, 27383, 27386, 27418, 27450, 27463, 27525, 27529, 27552, 27559, 27562, 27562, 27563, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27565, 27721, 27801, 27818, 27882, 28083, 28148, 28673, 29079, 29102, 29155, 29158, 29162, 29193, 29256, 29576, 29991, 29992, 29996, 29996, 29996, 29996, 29996, 29996, 29996, 29996, 29996, 29996, 29996, 29996, 29997, 30025, 30083, 30088, 30146, 30173, 30182, 30305, 30408, 30596, 30905, 31000, 31405, 31558, 31588, 31663, 31664, 31664, 31667, 31670, 31674, 31676, 31703, 32815, 32821, 32949, 33977, 34036, 34403, 34413, 34464, 34505, 34509, 34511, 34772, 34972, 35021, 35068, 35259, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35273, 35311, 35343, 35611, 35950, 36192, 36400, 36410, 36622, 36820, 36883, 36959, 36960, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36964, 37010, 37035, 37311, 37660, 37733, 37934, 38287, 38539, 39425, 39441, 39473, 40033, 40124, 40319, 40609, 40643, 40673, 40727, 40741, 40742, 40744, 40750, 41021, 41080, 41311, 41319, 41321, 41335, 41344, 41344, 41345, 41345, 41345, 41345, 41345, 41346, 41532, 41554, 42011, 42164, 42187, 42276, 42566, 42675, 43393, 43473, 43480, 43504, 43504, 43504, 43504, 43504, 43505, 44026, 44718, 45006, 45128, 45193, 45581, 45643, 45679, 45684, 45687, 45858, 45958, 46022, 46126, 46367, 46712, 46849, 47743, 47968, 48262, 49272, 49376, 50058, 50436, 51804, 51966, 52122, 52374, 53401, 53638, 54722, 55797, 55906, 56812, 56839, 57005, 58384, 58720, 58959, 59074, 59209, 59512, 59785, 60798, 61136, 61198, 61505, 62052, 62540, 62555, 62783, 63241, 63829, 64155, 64422, 64520, 65271, 65297, 67452, 67628, 68258, 68379, 69233, 69496, 69613, 69774, 70090, 70092, 70759, 70770, 70809, 71196, 71265, 71529, 72250, 72476, 72523, 72556, 72829, 73209, 73477, 73739, 73843, 74249, 74728, 74988, 75425, 75988, 76032, 76096, 76152, 76222, 76751, 77227, 77631, 77995, 78061, 78169, 78400, 78784, 79499, 80385, 80551, 80627, 80660, 81059, 81143, 81405, 81665, 82904, 83595, 83957, 83996, 84043, 84739, 85031, 85987, 86319, 86864, 86933, 86947, 87127, 87520, 87543, 87848, 88057, 88437, 89195, 89401, 90469, 90756, 90761, 91175, 91975, 92907, 92987, 94337, 94470, 95290, 96267, 96378, 96635, 97113, 97608, 97663, 97721, 98148, 98536, 98629, 98960, 99036, 99763, 99793, 100000], ys=[2773, 47376, 17008, 24785, 21921, 60359, 33137, 72146, 76002, 49654, 25696, 25832, 72474, 2917, 18229, 2385, 66151, 51868, 4760, 69187, 67221, 14320, 24425, 88890, 24553, 78751, 70869, 11279, 12625, 84959, 28885, 87499, 61816, 41222, 81997, 1265, 63632, 12863, 54939, 56081, 35629, 37122, 49133, 24893, 41731, 9182, 34407, 90952, 42360, 43861, 99296, 80331, 78826, 19484, 90699, 30578, 71697, 10304, 61318, 89870, 38599, 71160, 22805, 17850, 60106, 76742, 14571, 74280, 88847, 53537, 84726, 7279, 55376, 47707, 78111, 14855, 20855, 89936, 20706, 98672, 5385, 76357, 90172, 48891, 6243, 82298, 64602, 99637, 83220, 87261, 26190, 39457, 12610, 44567, 54545, 71246, 96608, 5086, 65811, 15907, 21012, 17278, 1139, 54815, 52416, 19440, 44857, 16066, 22379, 73573, 36087, 54255, 60304, 30497, 1202, 95520, 48378, 68296, 14032, 50456, 60555, 80390, 70975, 17531, 3761, 46399, 48927, 96320, 79008, 25360, 67058, 26409, 29891, 324, 67141, 24534, 69987, 11711, 99837, 82260, 8818, 67647, 66046, 76727, 25049, 48694, 96244, 42767, 13120, 53729, 90754, 47498, 40257, 7844, 79665, 35900, 33567, 80332, 68427, 29914, 91621, 38959, 35796, 7435, 65460, 434, 2785, 4710, 80793, 20827, 22155, 90320, 5066, 24178, 18875, 51294, 5222, 95816, 14268, 68478, 96761, 66479, 67335, 51513, 78673, 73143, 11679, 85300, 88785, 1004, 18064, 91085, 18999, 25640, 45379, 74924, 94706, 46916, 32682, 31715, 3086, 49466, 85098, 49913, 44647, 82331, 27219, 13875, 58769, 3667, 10298, 44795, 62204, 21497, 58731, 12965, 62569, 72238, 49525, 22899, 84200, 3845, 98178, 924, 35984, 32417, 22686, 22620, 47458, 87867, 29566, 77085, 10960, 14876, 89730, 21641, 13636, 79167, 53472, 30103, 56335, 39274, 74071, 68958, 66408, 47354, 84728, 28113, 99860, 49955, 79844, 1186, 85981, 39037, 60464, 80363, 89186, 92541, 16343, 48363, 7581, 73306, 68325, 65829, 84163, 74355, 53786, 58715, 98906, 39439, 27860, 76391, 76589, 39834, 27137, 81688, 64132, 49120, 56144, 86941, 95518, 72009, 82728, 96067, 97712, 79469, 44330, 67454, 39941, 97408, 58132, 5066, 93590, 77162, 72882, 39621, 31441, 23172, 65710, 88436, 34469, 86816, 9665, 5643, 68076, 70549, 80805, 94994, 91769, 84542, 62168, 74918, 61406, 45287, 5793, 54563, 3652, 92584, 61367, 28505, 30248, 20120, 86422, 81094, 83631, 58464, 55958, 40896, 81384, 55062, 40915, 58556, 32091, 34368, 54084, 77250, 25828, 15620, 90399, 20250, 73405, 26695, 2032, 83486, 95048, 94554, 30946, 28573, 74157, 43422, 85194, 47436, 36847, 40337, 44865, 44811, 69652, 13169, 41240, 48298, 72630, 51768, 49849, 81558, 51868, 75819, 14511, 36733, 35093, 77864, 36881, 97122, 60008, 48465, 10154, 94832, 12514, 47840, 15591, 65517, 68261, 63597, 80341, 6530, 76786, 97631, 2526, 47318, 83685, 23732, 20477, 36378, 4066, 79691, 93070, 83021, 37168, 52019, 85092, 72854, 20879, 55104, 61225, 87611, 84521, 9011, 27496, 39666, 61677, 49131, 80714, 29320, 98393, 71579, 39547, 34736, 99974, 53333, 26106, 50745, 92975, 84628, 24607, 5133, 38793, 24284, 43324, 50981, 51005, 22088, 10404, 59675, 84882, 52975, 94861, 17852, 74017, 42533, 53763, 1986, 59478, 96769, 77976, 58875, 25744, 68724, 10130, 52144, 73428, 10610, 97509, 64410, 37812, 59809, 8455, 65712, 89789, 87542, 22274, 94253, 59627, 42450, 26524, 12018, 35043, 27433, 94055, 79108, 64297, 39011, 68974, 69586, 87982, 71372, 62430, 43056, 15425, 80083, 68963, 38661, 45853, 44335, 71876, 28982, 2264, 61889, 6454, 58072, 242, 93781, 71755, 66290, 90497, 54071, 55444, 64765, 4058, 79429, 41630, 15024, 64603, 98934, 48326, 56618, 55522, 37470, 57495, 31975, 70970, 31709, 31945, 64378, 12831, 51921, 76994, 31476, 72360, 63265, 35422, 88813, 58864, 74401, 91076, 37836, 55027, 95549, 15618, 34969, 60039, 61528, 3321, 94087, 37316, 81288, 81268, 71368, 95150, 57625, 34979, 60444, 45713, 87417, 17729, 30256, 98375, 2527, 95619, 71929, 47741, 59345, 50186, 73234, 74055, 49179, 14980, 21318, 96240, 9917, 75849, 56534, 85371, 63765, 23611, 47419, 34402, 48943, 26048, 69611, 29375, 29430, 6553, 97428, 97806, 80481, 26953, 42600, 59032, 65854, 66035, 48964, 22269, 52171, 14513, 65468, 66339, 25356, 52393, 7853, 24853, 78187, 83930, 67307, 45091, 41518, 52101, 76047, 40529, 36318, 3755, 62784, 77519, 22200, 70689, 33135, 81934, 72265, 2971, 91369, 53872, 45818, 57790, 21607, 66120, 26696, 92619, 47305, 65861, 60602, 66559, 2054, 57820, 19261, 6596, 56435, 12167, 29581, 17598, 1729, 77111, 26411, 66914, 14722, 39615, 27758, 96587, 69153, 65407, 65952, 52604, 28856, 58297, 94511, 71028, 75000, 60829, 12334, 21754, 20048, 5488, 11184, 80078, 64552, 23655, 75130, 79850, 40299, 92970, 89686, 72265, 49906, 84405, 90304, 74509, 97608, 32383, 77555, 89457, 96493, 25090, 79130, 5238, 44242, 54197, 87027, 77862, 44899, 39596, 50314, 66002, 34789, 83144, 62992, 9580, 89205, 9252, 54862, 53171, 64280, 13361, 17974, 66583, 40129, 4768, 25940, 96021, 80579, 7235, 63726, 87348, 21304, 86007, 94534, 57733, 43068, 31145, 34295, 12128, 97580, 83653, 28797, 69504, 29790, 73946, 59341, 48155, 1463, 80083, 32469, 71782, 20850, 96205, 42015, 73041, 55026, 56528, 41902, 12404, 62462, 81533, 16708, 7415, 68387, 80571, 32027, 35225, 10946, 94144, 4194, 43504, 49796, 50362, 95023, 52994, 95205, 36035, 71247, 41720, 6865, 17427, 36924, 61894, 38538, 67742, 44575, 14625, 79002, 90627, 8841, 84462, 7945, 24927, 82064, 46459, 52759, 31226, 5657, 79441, 64942, 70601, 84159, 3713, 5819, 33208, 82518, 79984, 11805, 65691, 27461, 79491, 31649, 44872, 55358, 59545, 43403, 25937, 57129, 95086, 33073, 66761, 54601, 58418, 97317, 55033, 52664, 98134, 37723, 11301, 82638, 57741, 7107, 3684, 12886, 23805, 51818, 91767, 69982, 49206, 31880, 98404, 66281, 65126, 58401, 7132, 42216, 82869, 16032, 26488, 60581, 34013, 63817, 6519, 89872, 31855, 22997, 69212, 73604, 76079, 64953, 98735, 44812, 4732, 94488, 84054, 42787, 46869, 45010, 20732, 5560, 56309, 77803, 42883, 66324, 49402, 64847, 31627, 94225, 77195, 95635, 68166, 31386, 63128, 31631, 70432, 46143, 52182, 8113, 84606, 51625, 55982, 29418, 64146, 69813, 44592, 79603, 46634, 32362, 62318, 18402, 68531, 53415, 19852, 28919, 62513, 79532, 49718, 33065, 56835, 64306, 60638, 70658, 79161, 27512, 68976, 89331, 29937, 12813, 57173, 27550, 84813, 60721, 11582, 44931, 88702, 7688, 52433, 55498, 95194, 39528, 6913, 6693, 94386, 842, 12398, 45874, 68922, 71749, 4672, 93255, 10276, 30051, 18146, 1369, 34708, 13026, 81431, 18801, 4379, 1238, 53213, 33648, 8064, 76802, 41132, 22338, 2817, 16671, 85926, 86066, 41124, 36200, 37286, 96525, 59693, 83181, 87393, 35298, 17208, 90473, 22239, 61861, 41594, 2519, 54614, 59722, 37429, 49717, 81394, 55456, 64709, 76277, 23690, 55080, 41336, 29750, 97329, 28604, 24728, 76992, 67044, 34563, 32395, 24170, 30848, 56474, 78881, 4772, 23177, 28993, 11230, 77390, 62191, 24747, 29986, 50371, 34979, 66772, 80075, 19549, 78848, 11352, 48373, 96733, 93428, 45892, 86184, 62894, 19948, 70176, 16630, 69200, 28933, 93458, 73504, 54975, 55489, 8787, 47519, 97887, 16335], thresh=44238370995):\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "ans_type": "List[int]",
    "sol_header": "def sol(H=100000, alpha=975, beta=546, xs=[0, 102, 174, 281, 458, 554, 583, 590, 646, 1592, 1795, 1805, 1835, 1839, 1842, 1842, 1842, 1842, 1842, 1842, 1842, 1842, 1842, 1842, 1842, 1843, 2357, 2683, 3152, 3159, 3167, 3170, 3170, 3171, 3171, 3172, 3172, 3172, 3172, 3172, 3173, 4025, 4274, 4282, 4465, 4520, 4529, 4666, 4676, 4901, 4905, 5003, 5295, 5510, 5553, 5585, 5585, 5638, 5973, 6136, 6317, 6329, 6374, 6400, 6405, 6407, 6407, 6409, 6409, 6409, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6410, 6411, 6456, 6462, 6462, 6469, 6482, 6486, 6881, 6919, 7240, 7510, 7599, 7995, 8173, 8249, 8284, 8296, 8298, 8298, 8299, 8301, 8427, 8701, 8751, 8945, 9141, 9166, 9208, 9308, 9321, 9327, 9332, 9332, 9332, 9332, 9332, 9332, 9332, 9332, 9332, 9333, 10630, 11062, 11173, 11286, 11294, 11319, 11322, 11367, 11372, 11376, 11398, 11399, 11403, 11409, 11451, 11459, 11519, 11660, 11687, 11691, 11694, 11694, 11697, 12232, 12313, 12314, 12316, 12321, 12322, 12322, 12322, 12323, 13101, 13207, 13274, 13445, 13512, 13687, 13911, 13987, 14251, 14255, 14306, 14570, 14594, 14606, 14606, 14608, 14998, 15232, 15237, 15633, 15795, 15831, 15991, 16176, 16179, 16189, 16228, 16339, 16450, 16540, 16777, 16851, 16889, 17291, 17694, 18333, 18356, 19390, 19449, 19454, 19750, 20562, 22013, 22332, 22374, 22591, 23234, 23276, 23281, 23296, 23351, 23397, 23762, 23844, 23859, 23866, 23894, 23943, 24311, 24379, 24958, 25140, 25160, 25178, 25211, 25219, 25235, 25378, 25929, 26078, 26181, 26474, 26804, 26821, 26838, 26843, 26858, 26894, 26894, 26894, 26895, 27181, 27302, 27329, 27365, 27374, 27380, 27381, 27382, 27382, 27382, 27382, 27382, 27382, 27382, 27382, 27382, 27382, 27383, 27386, 27418, 27450, 27463, 27525, 27529, 27552, 27559, 27562, 27562, 27563, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27564, 27565, 27721, 27801, 27818, 27882, 28083, 28148, 28673, 29079, 29102, 29155, 29158, 29162, 29193, 29256, 29576, 29991, 29992, 29996, 29996, 29996, 29996, 29996, 29996, 29996, 29996, 29996, 29996, 29996, 29996, 29997, 30025, 30083, 30088, 30146, 30173, 30182, 30305, 30408, 30596, 30905, 31000, 31405, 31558, 31588, 31663, 31664, 31664, 31667, 31670, 31674, 31676, 31703, 32815, 32821, 32949, 33977, 34036, 34403, 34413, 34464, 34505, 34509, 34511, 34772, 34972, 35021, 35068, 35259, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35272, 35273, 35311, 35343, 35611, 35950, 36192, 36400, 36410, 36622, 36820, 36883, 36959, 36960, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36963, 36964, 37010, 37035, 37311, 37660, 37733, 37934, 38287, 38539, 39425, 39441, 39473, 40033, 40124, 40319, 40609, 40643, 40673, 40727, 40741, 40742, 40744, 40750, 41021, 41080, 41311, 41319, 41321, 41335, 41344, 41344, 41345, 41345, 41345, 41345, 41345, 41346, 41532, 41554, 42011, 42164, 42187, 42276, 42566, 42675, 43393, 43473, 43480, 43504, 43504, 43504, 43504, 43504, 43505, 44026, 44718, 45006, 45128, 45193, 45581, 45643, 45679, 45684, 45687, 45858, 45958, 46022, 46126, 46367, 46712, 46849, 47743, 47968, 48262, 49272, 49376, 50058, 50436, 51804, 51966, 52122, 52374, 53401, 53638, 54722, 55797, 55906, 56812, 56839, 57005, 58384, 58720, 58959, 59074, 59209, 59512, 59785, 60798, 61136, 61198, 61505, 62052, 62540, 62555, 62783, 63241, 63829, 64155, 64422, 64520, 65271, 65297, 67452, 67628, 68258, 68379, 69233, 69496, 69613, 69774, 70090, 70092, 70759, 70770, 70809, 71196, 71265, 71529, 72250, 72476, 72523, 72556, 72829, 73209, 73477, 73739, 73843, 74249, 74728, 74988, 75425, 75988, 76032, 76096, 76152, 76222, 76751, 77227, 77631, 77995, 78061, 78169, 78400, 78784, 79499, 80385, 80551, 80627, 80660, 81059, 81143, 81405, 81665, 82904, 83595, 83957, 83996, 84043, 84739, 85031, 85987, 86319, 86864, 86933, 86947, 87127, 87520, 87543, 87848, 88057, 88437, 89195, 89401, 90469, 90756, 90761, 91175, 91975, 92907, 92987, 94337, 94470, 95290, 96267, 96378, 96635, 97113, 97608, 97663, 97721, 98148, 98536, 98629, 98960, 99036, 99763, 99793, 100000], ys=[2773, 47376, 17008, 24785, 21921, 60359, 33137, 72146, 76002, 49654, 25696, 25832, 72474, 2917, 18229, 2385, 66151, 51868, 4760, 69187, 67221, 14320, 24425, 88890, 24553, 78751, 70869, 11279, 12625, 84959, 28885, 87499, 61816, 41222, 81997, 1265, 63632, 12863, 54939, 56081, 35629, 37122, 49133, 24893, 41731, 9182, 34407, 90952, 42360, 43861, 99296, 80331, 78826, 19484, 90699, 30578, 71697, 10304, 61318, 89870, 38599, 71160, 22805, 17850, 60106, 76742, 14571, 74280, 88847, 53537, 84726, 7279, 55376, 47707, 78111, 14855, 20855, 89936, 20706, 98672, 5385, 76357, 90172, 48891, 6243, 82298, 64602, 99637, 83220, 87261, 26190, 39457, 12610, 44567, 54545, 71246, 96608, 5086, 65811, 15907, 21012, 17278, 1139, 54815, 52416, 19440, 44857, 16066, 22379, 73573, 36087, 54255, 60304, 30497, 1202, 95520, 48378, 68296, 14032, 50456, 60555, 80390, 70975, 17531, 3761, 46399, 48927, 96320, 79008, 25360, 67058, 26409, 29891, 324, 67141, 24534, 69987, 11711, 99837, 82260, 8818, 67647, 66046, 76727, 25049, 48694, 96244, 42767, 13120, 53729, 90754, 47498, 40257, 7844, 79665, 35900, 33567, 80332, 68427, 29914, 91621, 38959, 35796, 7435, 65460, 434, 2785, 4710, 80793, 20827, 22155, 90320, 5066, 24178, 18875, 51294, 5222, 95816, 14268, 68478, 96761, 66479, 67335, 51513, 78673, 73143, 11679, 85300, 88785, 1004, 18064, 91085, 18999, 25640, 45379, 74924, 94706, 46916, 32682, 31715, 3086, 49466, 85098, 49913, 44647, 82331, 27219, 13875, 58769, 3667, 10298, 44795, 62204, 21497, 58731, 12965, 62569, 72238, 49525, 22899, 84200, 3845, 98178, 924, 35984, 32417, 22686, 22620, 47458, 87867, 29566, 77085, 10960, 14876, 89730, 21641, 13636, 79167, 53472, 30103, 56335, 39274, 74071, 68958, 66408, 47354, 84728, 28113, 99860, 49955, 79844, 1186, 85981, 39037, 60464, 80363, 89186, 92541, 16343, 48363, 7581, 73306, 68325, 65829, 84163, 74355, 53786, 58715, 98906, 39439, 27860, 76391, 76589, 39834, 27137, 81688, 64132, 49120, 56144, 86941, 95518, 72009, 82728, 96067, 97712, 79469, 44330, 67454, 39941, 97408, 58132, 5066, 93590, 77162, 72882, 39621, 31441, 23172, 65710, 88436, 34469, 86816, 9665, 5643, 68076, 70549, 80805, 94994, 91769, 84542, 62168, 74918, 61406, 45287, 5793, 54563, 3652, 92584, 61367, 28505, 30248, 20120, 86422, 81094, 83631, 58464, 55958, 40896, 81384, 55062, 40915, 58556, 32091, 34368, 54084, 77250, 25828, 15620, 90399, 20250, 73405, 26695, 2032, 83486, 95048, 94554, 30946, 28573, 74157, 43422, 85194, 47436, 36847, 40337, 44865, 44811, 69652, 13169, 41240, 48298, 72630, 51768, 49849, 81558, 51868, 75819, 14511, 36733, 35093, 77864, 36881, 97122, 60008, 48465, 10154, 94832, 12514, 47840, 15591, 65517, 68261, 63597, 80341, 6530, 76786, 97631, 2526, 47318, 83685, 23732, 20477, 36378, 4066, 79691, 93070, 83021, 37168, 52019, 85092, 72854, 20879, 55104, 61225, 87611, 84521, 9011, 27496, 39666, 61677, 49131, 80714, 29320, 98393, 71579, 39547, 34736, 99974, 53333, 26106, 50745, 92975, 84628, 24607, 5133, 38793, 24284, 43324, 50981, 51005, 22088, 10404, 59675, 84882, 52975, 94861, 17852, 74017, 42533, 53763, 1986, 59478, 96769, 77976, 58875, 25744, 68724, 10130, 52144, 73428, 10610, 97509, 64410, 37812, 59809, 8455, 65712, 89789, 87542, 22274, 94253, 59627, 42450, 26524, 12018, 35043, 27433, 94055, 79108, 64297, 39011, 68974, 69586, 87982, 71372, 62430, 43056, 15425, 80083, 68963, 38661, 45853, 44335, 71876, 28982, 2264, 61889, 6454, 58072, 242, 93781, 71755, 66290, 90497, 54071, 55444, 64765, 4058, 79429, 41630, 15024, 64603, 98934, 48326, 56618, 55522, 37470, 57495, 31975, 70970, 31709, 31945, 64378, 12831, 51921, 76994, 31476, 72360, 63265, 35422, 88813, 58864, 74401, 91076, 37836, 55027, 95549, 15618, 34969, 60039, 61528, 3321, 94087, 37316, 81288, 81268, 71368, 95150, 57625, 34979, 60444, 45713, 87417, 17729, 30256, 98375, 2527, 95619, 71929, 47741, 59345, 50186, 73234, 74055, 49179, 14980, 21318, 96240, 9917, 75849, 56534, 85371, 63765, 23611, 47419, 34402, 48943, 26048, 69611, 29375, 29430, 6553, 97428, 97806, 80481, 26953, 42600, 59032, 65854, 66035, 48964, 22269, 52171, 14513, 65468, 66339, 25356, 52393, 7853, 24853, 78187, 83930, 67307, 45091, 41518, 52101, 76047, 40529, 36318, 3755, 62784, 77519, 22200, 70689, 33135, 81934, 72265, 2971, 91369, 53872, 45818, 57790, 21607, 66120, 26696, 92619, 47305, 65861, 60602, 66559, 2054, 57820, 19261, 6596, 56435, 12167, 29581, 17598, 1729, 77111, 26411, 66914, 14722, 39615, 27758, 96587, 69153, 65407, 65952, 52604, 28856, 58297, 94511, 71028, 75000, 60829, 12334, 21754, 20048, 5488, 11184, 80078, 64552, 23655, 75130, 79850, 40299, 92970, 89686, 72265, 49906, 84405, 90304, 74509, 97608, 32383, 77555, 89457, 96493, 25090, 79130, 5238, 44242, 54197, 87027, 77862, 44899, 39596, 50314, 66002, 34789, 83144, 62992, 9580, 89205, 9252, 54862, 53171, 64280, 13361, 17974, 66583, 40129, 4768, 25940, 96021, 80579, 7235, 63726, 87348, 21304, 86007, 94534, 57733, 43068, 31145, 34295, 12128, 97580, 83653, 28797, 69504, 29790, 73946, 59341, 48155, 1463, 80083, 32469, 71782, 20850, 96205, 42015, 73041, 55026, 56528, 41902, 12404, 62462, 81533, 16708, 7415, 68387, 80571, 32027, 35225, 10946, 94144, 4194, 43504, 49796, 50362, 95023, 52994, 95205, 36035, 71247, 41720, 6865, 17427, 36924, 61894, 38538, 67742, 44575, 14625, 79002, 90627, 8841, 84462, 7945, 24927, 82064, 46459, 52759, 31226, 5657, 79441, 64942, 70601, 84159, 3713, 5819, 33208, 82518, 79984, 11805, 65691, 27461, 79491, 31649, 44872, 55358, 59545, 43403, 25937, 57129, 95086, 33073, 66761, 54601, 58418, 97317, 55033, 52664, 98134, 37723, 11301, 82638, 57741, 7107, 3684, 12886, 23805, 51818, 91767, 69982, 49206, 31880, 98404, 66281, 65126, 58401, 7132, 42216, 82869, 16032, 26488, 60581, 34013, 63817, 6519, 89872, 31855, 22997, 69212, 73604, 76079, 64953, 98735, 44812, 4732, 94488, 84054, 42787, 46869, 45010, 20732, 5560, 56309, 77803, 42883, 66324, 49402, 64847, 31627, 94225, 77195, 95635, 68166, 31386, 63128, 31631, 70432, 46143, 52182, 8113, 84606, 51625, 55982, 29418, 64146, 69813, 44592, 79603, 46634, 32362, 62318, 18402, 68531, 53415, 19852, 28919, 62513, 79532, 49718, 33065, 56835, 64306, 60638, 70658, 79161, 27512, 68976, 89331, 29937, 12813, 57173, 27550, 84813, 60721, 11582, 44931, 88702, 7688, 52433, 55498, 95194, 39528, 6913, 6693, 94386, 842, 12398, 45874, 68922, 71749, 4672, 93255, 10276, 30051, 18146, 1369, 34708, 13026, 81431, 18801, 4379, 1238, 53213, 33648, 8064, 76802, 41132, 22338, 2817, 16671, 85926, 86066, 41124, 36200, 37286, 96525, 59693, 83181, 87393, 35298, 17208, 90473, 22239, 61861, 41594, 2519, 54614, 59722, 37429, 49717, 81394, 55456, 64709, 76277, 23690, 55080, 41336, 29750, 97329, 28604, 24728, 76992, 67044, 34563, 32395, 24170, 30848, 56474, 78881, 4772, 23177, 28993, 11230, 77390, 62191, 24747, 29986, 50371, 34979, 66772, 80075, 19549, 78848, 11352, 48373, 96733, 93428, 45892, 86184, 62894, 19948, 70176, 16630, 69200, 28933, 93458, 73504, 54975, 55489, 8787, 47519, 97887, 16335], thresh=44238370995):",
    "sol_docstring": "    \"\"\"\n    You are to choose locations for bridge bases from among a given set of mountain peaks located at\n    `xs, ys`, where `xs` and `ys` are lists of n integers of the same length. Your answer should be a sorted\n    list of indices starting at 0 and ending at n-1. The goal is to minimize building costs such that the bridges\n    are feasible. The bridges are all semicircles placed on top of the pillars. The feasibility constraints are that:\n    * The bridges may not extend above a given height `H`. Mathematically, if the distance between the two xs\n    of adjacent pillars is d, then the semicircle will have radius `d/2` and therefore the heights of the\n    selected mountain peaks must both be at most `H - d/2`.\n    *  The bridges must clear all the mountain peaks, which means that the semicircle must lie above the tops of the\n    peak. See the code for how this is determined mathematically.\n    * The total cost of all the bridges must be at most `thresh`, where the cost is parameter alpha * (the sum of\n    all pillar heights) + beta * (the sum of the squared diameters)\n    \"\"\"",
    "sol_bodies": [
      "    # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ],
    "module": "ICPC.py",
    "notes": "Inspired by\n[ICPC 2019 Problem B: Bridges](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\nwhich is 3,003 characters.",
    "weight": 1.0
  },
  {
    "name": "OptimalBridges:4",
    "sat": "def sat(indices: List[int], H=100000, alpha=6, beta=2, xs=[0, 75202, 97997, 100000], ys=[24586, 7488, 4413, 30235], thresh=12359929344):\n    assert sorted({0, len(xs) - 1, *indices}) == indices, f\"Ans. should be sorted list [0, ..., {len(xs) - 1}]\"\n    cost = alpha * (H - ys[0])\n    for i, j in zip(indices, indices[1:]):\n        a, b, r = xs[i], xs[j], (xs[j] - xs[i]) / 2\n        assert max(ys[i], ys[j]) + r <= H, \"Bridge too tall\"\n        assert all(ys[k] <= H - r + ((b - xs[k]) * (xs[k] - a)) ** 0.5 for k in range(i + 1, j)), \\\n            \"Bridge too short\"\n        cost += alpha * (H - ys[j]) + beta * (b - a) ** 2\n    return cost <= thresh",
    "ans_type": "List[int]",
    "sol_header": "def sol(H=100000, alpha=6, beta=2, xs=[0, 75202, 97997, 100000], ys=[24586, 7488, 4413, 30235], thresh=12359929344):",
    "sol_docstring": "    \"\"\"\n    You are to choose locations for bridge bases from among a given set of mountain peaks located at\n    `xs, ys`, where `xs` and `ys` are lists of n integers of the same length. Your answer should be a sorted\n    list of indices starting at 0 and ending at n-1. The goal is to minimize building costs such that the bridges\n    are feasible. The bridges are all semicircles placed on top of the pillars. The feasibility constraints are that:\n    * The bridges may not extend above a given height `H`. Mathematically, if the distance between the two xs\n    of adjacent pillars is d, then the semicircle will have radius `d/2` and therefore the heights of the\n    selected mountain peaks must both be at most `H - d/2`.\n    *  The bridges must clear all the mountain peaks, which means that the semicircle must lie above the tops of the\n    peak. See the code for how this is determined mathematically.\n    * The total cost of all the bridges must be at most `thresh`, where the cost is parameter alpha * (the sum of\n    all pillar heights) + beta * (the sum of the squared diameters)\n    \"\"\"",
    "sol_bodies": [
      "    # thresh is ignored\n    n = len(xs)\n    cost = [-1] * n\n    prior = [n] * n\n    cost[0] = beta * (H - ys[0])\n    for i in range(n):\n        if cost[i] == -1:\n            continue\n        min_d = 0\n        max_d = 2 * (H - ys[i])\n        for j in range(i + 1, n):\n            d = xs[j] - xs[i]\n            h = H - ys[j]\n            if d > max_d:\n                break\n            if 2 * h <= d:\n                min_d = max(min_d, 2 * d + 2 * h - int((8 * d * h) ** 0.5))\n            max_d = min(max_d, 2 * d + 2 * h + int((8 * d * h) ** 0.5))\n            if min_d > max_d:\n                break\n            if min_d <= d <= max_d:\n                new_cost = cost[i] + alpha * h + beta * d * d\n                if cost[j] == -1 or cost[j] > new_cost:\n                    cost[j] = new_cost\n                    prior[j] = i\n    rev_ans = [n - 1]\n    while rev_ans[-1] != 0:\n        rev_ans.append(prior[rev_ans[-1]])\n    return rev_ans[::-1]"
    ],
    "module": "ICPC.py",
    "notes": "Inspired by\n[ICPC 2019 Problem B: Bridges](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\nwhich is 3,003 characters.",
    "weight": 1.0
  },
  {
    "name": "CheckersPosition:0",
    "sat": "def sat(position: List[List[int]], transcript=[[[3, 3], [5, 5], [3, 7]], [[5, 3], [6, 4]]]):\n    board = {(x, y): 0 for x in range(8) for y in range(8) if (x + y) % 2 == 0}  # empty board, 0 = empty\n    for x, y, p in position:\n        assert -2 <= p <= 2 and board[x, y] == 0  # -1, 1 is regular piece, -2, 2 is king\n        board[x, y] = p\n\n    def has_a_jump(x, y):\n        p = board[x, y]  # piece to move\n        deltas = [(dx, dy) for dx in [-1, 1] for dy in [-1, 1] if dy != -p]  # don't check backwards for non-kings\n        return any(board.get((x + 2 * dx, y + 2 * dy)) == 0 and board[x + dx, y + dy] * p < 0 for dx, dy in deltas)\n\n    sign = 1  # player 1 moves first\n    for move in transcript:\n        start, end = tuple(move[0]), tuple(move[-1])\n        p = board[start]  # piece to move\n        assert p * sign > 0, \"Moving square must be non-empty and players must be alternate signs\"\n        assert all(board[x, y] == 0 for x, y in move if [x, y] != move[0]), \"Moved to an occupied square\"\n\n        for (x1, y1), (x2, y2) in zip(move, move[1:]):\n            assert abs(p) != 1 or (y2 - y1) * p > 0, \"Non-kings can only move forward (in direction of sign)\"\n            if abs(x2 - x1) == 1:  # non-jump\n                assert not any(has_a_jump(*a) for a in board if board[a] * p > 0), \"Must make a jump if possible\"\n                break\n            mid = ((x1 + x2) // 2, (y1 + y2) // 2)\n            assert board[mid] * p < 0, \"Can only jump over piece of opposite sign\"\n            board[mid] = 0\n        board[start], board[end] = 0, p\n        assert abs(x2 - x1) == 1 or not has_a_jump(*end)\n        if abs(p) == 1 and any(y in {0, 7} for x, y in move[1:]):\n            board[end] *= 2  # king me at the end of turn after any jumps are done!\n        sign *= -1\n\n    return True",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(transcript=[[[3, 3], [5, 5], [3, 7]], [[5, 3], [6, 4]]]):",
    "sol_docstring": "    \"\"\"\n    You are given a partial transcript a checkers game. Find an initial position such that the transcript\n    would be a legal set of moves. The board positions are [x, y] pairs with 0 <= x, y < 8 and x + y even.\n    There are two players which we call -1 and 1 for convenience, and player 1 must move first in transcript.\n    The initial position is represented as a list [x, y, piece] where piece means:\n    * 0 is empty square\n    * 1 or -1 is piece that moves only in the y = 1 or y = -1 dir, respectively\n    * 2 or -2 is king for player 1 or player 2 respectively\n\n    Additional rules:\n    * You must jump if you can, and you must continue jumping until one can't any longer.\n    * You cannot start the position with any non-kings on your last rank.\n    * Promotion happens after the turn ends\n    \"\"\"",
    "sol_bodies": [
      "    START_PLAYER = 1  # assumed\n\n    class InitOpts:\n        def __init__(self, x, y):\n            self.x, self.y = x, y\n            self.opts = {-2, -1, 0, 1, 2}\n            if y == 0:\n                self.opts.remove(-1)\n            if y == 7:\n                self.opts.remove(1)\n            self.promoted = 2 ** 63  # on which step was it promoted t >= 0\n            self.jumped = 2 ** 63  # on which step was it jumped t >= 0\n\n    # def board2str(board):  # for debugging\n    #     mapping = \".bBWw\"\n    #     ans = \"\"\n    #     for y in range(7, -1, -1):\n    #         ans += \"\".join(\" \" if (x+y)%2 else mapping[board[x,y]] for x in range(8)) + \"\\n\"\n    #     return ans\n\n    init_opts = {(x, y): InitOpts(x, y) for x in range(8) for y in range(8) if (x + y) % 2 == 0}\n    # board = {(x, y): (1 if y < 3 else -1 if y > 4 else 0) for x in range(8) for y in range(8) if\n    #          (x + y) % 2 == 0}  # new board\n\n    transcript = [[tuple(a) for a in move] for move in transcript]\n\n    permuted_opts = init_opts.copy()\n    sign = START_PLAYER\n    for t, move in enumerate(transcript):\n        start, end = tuple(move[0]), tuple(move[-1])\n        p = permuted_opts[start]  # opts to move\n        assert p.jumped >= t\n        p.opts -= {-sign, -2 * sign, 0}\n        if any((y2 - y1) * sign < 0 for (x1, y1), (x2, y2) in zip(move, move[1:])):  # backward move!\n            if p.promoted >= t:\n                p.opts -= {sign}  # must be a king!\n\n        for a, b in zip(move, move[1:]):\n            if permuted_opts[b].jumped >= t:\n                permuted_opts[b].opts -= {-2, -1, 1, 2}  # must be empty\n            assert permuted_opts[a].jumped >= t\n            permuted_opts[a], permuted_opts[b] = permuted_opts[b], permuted_opts[a]\n            # board[a], board[b] = board[b], board[a]\n            (x1, y1), (x2, y2) = a, b\n            if abs(x2 - x1) == 2:  # jump\n                mid = ((x1 + x2) // 2, (y1 + y2) // 2)\n                assert permuted_opts[mid].jumped >= t\n                permuted_opts[mid].opts -= {0, sign, 2 * sign}  # Can only jump over piece of opposite sign\n                permuted_opts[mid].jumped = t\n                # board[mid] = 0\n\n        if any(y in {0, 7} for x, y in move[1:]):\n            if p.promoted > t:\n                p.promoted = t\n            # if abs(board[x2, y2]) == 1:\n            #     board[x2, y2] *= 2\n\n        sign *= -1\n\n    for y in range(7, -1, -1):\n        for x in range(8):\n            if (x, y) in init_opts:\n                s = init_opts[x, y].opts\n                if {1, 2} <= s:\n                    s.remove(2)\n                if {-1, -2} <= s:\n                    s.remove(-2)\n\n    def helper():  # returns True if success and store everything, otherwise None\n        my_opts = init_opts.copy()\n        sign = START_PLAYER  # player 1 always starts\n\n        for t, move in enumerate(transcript):\n            if abs(move[0][0] - move[1][0]) == 1:  # not a jump\n                check_no_jumps = [a for a, p in my_opts.items() if p.jumped >= t and p.opts <= {sign, 2 * sign}]\n            else:\n                for a, b in zip(move, move[1:]):\n                    my_opts[a], my_opts[b] = my_opts[b], my_opts[a]\n                check_no_jumps = [b]\n\n            for x, y in check_no_jumps:\n                p = my_opts[x, y]\n                [o] = p.opts\n                assert o * sign > 0\n                dys = [o] if (abs(o) == 1 and p.promoted >= t) else [-1, 1]  # only check forward jumps\n                for dx in [-1, 1]:\n                    for dy in dys:\n                        target_o = my_opts.get((x + 2 * dx, y + 2 * dy))\n                        if target_o is not None and (0 in target_o.opts or target_o.jumped < t):\n                            mid_o = my_opts[x + dx, y + dy]\n                            if mid_o.jumped > t and mid_o.opts <= {-sign, -2 * sign}:  # ok if jumped at t\n                                if target_o.jumped < t or target_o.opts == {0}:\n                                    return False\n                                old_opts = target_o.opts\n                                for v in target_o.opts:\n                                    if v != 0:\n                                        target_o.opts = {v}\n                                        h = helper()\n                                        if h:\n                                            return True\n                                target_o.opts = old_opts\n                                return False\n\n            if abs(move[0][0] - move[1][0]) == 1:  # not a jump\n                a, b = move[0], move[1]\n                my_opts[a], my_opts[b] = my_opts[b], my_opts[a]\n\n            sign *= -1\n        return True\n\n    res = helper()\n    assert res\n\n    def get_opt(opts):\n        if 0 in opts.opts:\n            return 0\n        assert len(opts.opts) == 1\n        return list(opts.opts)[0]\n\n    return [[x, y, get_opt(opts)] for (x, y), opts in init_opts.items()]"
    ],
    "module": "ICPC.py",
    "notes": "Inspired by\n[ICPC 2019 Problem C: Checks Post Facto](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\n\nNobody solved this problem during the competition -- it is pretty difficult!",
    "weight": 1.0
  },
  {
    "name": "CheckersPosition:1",
    "sat": "def sat(position: List[List[int]], transcript=[]):\n    board = {(x, y): 0 for x in range(8) for y in range(8) if (x + y) % 2 == 0}  # empty board, 0 = empty\n    for x, y, p in position:\n        assert -2 <= p <= 2 and board[x, y] == 0  # -1, 1 is regular piece, -2, 2 is king\n        board[x, y] = p\n\n    def has_a_jump(x, y):\n        p = board[x, y]  # piece to move\n        deltas = [(dx, dy) for dx in [-1, 1] for dy in [-1, 1] if dy != -p]  # don't check backwards for non-kings\n        return any(board.get((x + 2 * dx, y + 2 * dy)) == 0 and board[x + dx, y + dy] * p < 0 for dx, dy in deltas)\n\n    sign = 1  # player 1 moves first\n    for move in transcript:\n        start, end = tuple(move[0]), tuple(move[-1])\n        p = board[start]  # piece to move\n        assert p * sign > 0, \"Moving square must be non-empty and players must be alternate signs\"\n        assert all(board[x, y] == 0 for x, y in move if [x, y] != move[0]), \"Moved to an occupied square\"\n\n        for (x1, y1), (x2, y2) in zip(move, move[1:]):\n            assert abs(p) != 1 or (y2 - y1) * p > 0, \"Non-kings can only move forward (in direction of sign)\"\n            if abs(x2 - x1) == 1:  # non-jump\n                assert not any(has_a_jump(*a) for a in board if board[a] * p > 0), \"Must make a jump if possible\"\n                break\n            mid = ((x1 + x2) // 2, (y1 + y2) // 2)\n            assert board[mid] * p < 0, \"Can only jump over piece of opposite sign\"\n            board[mid] = 0\n        board[start], board[end] = 0, p\n        assert abs(x2 - x1) == 1 or not has_a_jump(*end)\n        if abs(p) == 1 and any(y in {0, 7} for x, y in move[1:]):\n            board[end] *= 2  # king me at the end of turn after any jumps are done!\n        sign *= -1\n\n    return True",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(transcript=[]):",
    "sol_docstring": "    \"\"\"\n    You are given a partial transcript a checkers game. Find an initial position such that the transcript\n    would be a legal set of moves. The board positions are [x, y] pairs with 0 <= x, y < 8 and x + y even.\n    There are two players which we call -1 and 1 for convenience, and player 1 must move first in transcript.\n    The initial position is represented as a list [x, y, piece] where piece means:\n    * 0 is empty square\n    * 1 or -1 is piece that moves only in the y = 1 or y = -1 dir, respectively\n    * 2 or -2 is king for player 1 or player 2 respectively\n\n    Additional rules:\n    * You must jump if you can, and you must continue jumping until one can't any longer.\n    * You cannot start the position with any non-kings on your last rank.\n    * Promotion happens after the turn ends\n    \"\"\"",
    "sol_bodies": [
      "    START_PLAYER = 1  # assumed\n\n    class InitOpts:\n        def __init__(self, x, y):\n            self.x, self.y = x, y\n            self.opts = {-2, -1, 0, 1, 2}\n            if y == 0:\n                self.opts.remove(-1)\n            if y == 7:\n                self.opts.remove(1)\n            self.promoted = 2 ** 63  # on which step was it promoted t >= 0\n            self.jumped = 2 ** 63  # on which step was it jumped t >= 0\n\n    # def board2str(board):  # for debugging\n    #     mapping = \".bBWw\"\n    #     ans = \"\"\n    #     for y in range(7, -1, -1):\n    #         ans += \"\".join(\" \" if (x+y)%2 else mapping[board[x,y]] for x in range(8)) + \"\\n\"\n    #     return ans\n\n    init_opts = {(x, y): InitOpts(x, y) for x in range(8) for y in range(8) if (x + y) % 2 == 0}\n    # board = {(x, y): (1 if y < 3 else -1 if y > 4 else 0) for x in range(8) for y in range(8) if\n    #          (x + y) % 2 == 0}  # new board\n\n    transcript = [[tuple(a) for a in move] for move in transcript]\n\n    permuted_opts = init_opts.copy()\n    sign = START_PLAYER\n    for t, move in enumerate(transcript):\n        start, end = tuple(move[0]), tuple(move[-1])\n        p = permuted_opts[start]  # opts to move\n        assert p.jumped >= t\n        p.opts -= {-sign, -2 * sign, 0}\n        if any((y2 - y1) * sign < 0 for (x1, y1), (x2, y2) in zip(move, move[1:])):  # backward move!\n            if p.promoted >= t:\n                p.opts -= {sign}  # must be a king!\n\n        for a, b in zip(move, move[1:]):\n            if permuted_opts[b].jumped >= t:\n                permuted_opts[b].opts -= {-2, -1, 1, 2}  # must be empty\n            assert permuted_opts[a].jumped >= t\n            permuted_opts[a], permuted_opts[b] = permuted_opts[b], permuted_opts[a]\n            # board[a], board[b] = board[b], board[a]\n            (x1, y1), (x2, y2) = a, b\n            if abs(x2 - x1) == 2:  # jump\n                mid = ((x1 + x2) // 2, (y1 + y2) // 2)\n                assert permuted_opts[mid].jumped >= t\n                permuted_opts[mid].opts -= {0, sign, 2 * sign}  # Can only jump over piece of opposite sign\n                permuted_opts[mid].jumped = t\n                # board[mid] = 0\n\n        if any(y in {0, 7} for x, y in move[1:]):\n            if p.promoted > t:\n                p.promoted = t\n            # if abs(board[x2, y2]) == 1:\n            #     board[x2, y2] *= 2\n\n        sign *= -1\n\n    for y in range(7, -1, -1):\n        for x in range(8):\n            if (x, y) in init_opts:\n                s = init_opts[x, y].opts\n                if {1, 2} <= s:\n                    s.remove(2)\n                if {-1, -2} <= s:\n                    s.remove(-2)\n\n    def helper():  # returns True if success and store everything, otherwise None\n        my_opts = init_opts.copy()\n        sign = START_PLAYER  # player 1 always starts\n\n        for t, move in enumerate(transcript):\n            if abs(move[0][0] - move[1][0]) == 1:  # not a jump\n                check_no_jumps = [a for a, p in my_opts.items() if p.jumped >= t and p.opts <= {sign, 2 * sign}]\n            else:\n                for a, b in zip(move, move[1:]):\n                    my_opts[a], my_opts[b] = my_opts[b], my_opts[a]\n                check_no_jumps = [b]\n\n            for x, y in check_no_jumps:\n                p = my_opts[x, y]\n                [o] = p.opts\n                assert o * sign > 0\n                dys = [o] if (abs(o) == 1 and p.promoted >= t) else [-1, 1]  # only check forward jumps\n                for dx in [-1, 1]:\n                    for dy in dys:\n                        target_o = my_opts.get((x + 2 * dx, y + 2 * dy))\n                        if target_o is not None and (0 in target_o.opts or target_o.jumped < t):\n                            mid_o = my_opts[x + dx, y + dy]\n                            if mid_o.jumped > t and mid_o.opts <= {-sign, -2 * sign}:  # ok if jumped at t\n                                if target_o.jumped < t or target_o.opts == {0}:\n                                    return False\n                                old_opts = target_o.opts\n                                for v in target_o.opts:\n                                    if v != 0:\n                                        target_o.opts = {v}\n                                        h = helper()\n                                        if h:\n                                            return True\n                                target_o.opts = old_opts\n                                return False\n\n            if abs(move[0][0] - move[1][0]) == 1:  # not a jump\n                a, b = move[0], move[1]\n                my_opts[a], my_opts[b] = my_opts[b], my_opts[a]\n\n            sign *= -1\n        return True\n\n    res = helper()\n    assert res\n\n    def get_opt(opts):\n        if 0 in opts.opts:\n            return 0\n        assert len(opts.opts) == 1\n        return list(opts.opts)[0]\n\n    return [[x, y, get_opt(opts)] for (x, y), opts in init_opts.items()]"
    ],
    "module": "ICPC.py",
    "notes": "Inspired by\n[ICPC 2019 Problem C: Checks Post Facto](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\n\nNobody solved this problem during the competition -- it is pretty difficult!",
    "weight": 1.0
  },
  {
    "name": "CheckersPosition:2",
    "sat": "def sat(position: List[List[int]], transcript=[[[6, 4], [5, 5]], [[4, 6], [6, 4]], [[7, 3], [5, 5]], [[3, 5], [4, 4]], [[4, 2], [6, 4]], [[3, 7], [2, 6]], [[5, 5], [6, 6]], [[7, 7], [5, 5], [7, 3]], [[1, 1], [0, 2]], [[7, 3], [6, 2]], [[0, 0], [1, 1]], [[6, 2], [5, 1]], [[4, 0], [6, 2]], [[4, 4], [3, 3]], [[1, 1], [2, 2]], [[3, 3], [1, 1]], [[6, 2], [7, 3]], [[5, 7], [6, 6]], [[0, 2], [1, 3]], [[2, 4], [0, 2]], [[3, 1], [2, 2]], [[1, 7], [0, 6]]]):\n    board = {(x, y): 0 for x in range(8) for y in range(8) if (x + y) % 2 == 0}  # empty board, 0 = empty\n    for x, y, p in position:\n        assert -2 <= p <= 2 and board[x, y] == 0  # -1, 1 is regular piece, -2, 2 is king\n        board[x, y] = p\n\n    def has_a_jump(x, y):\n        p = board[x, y]  # piece to move\n        deltas = [(dx, dy) for dx in [-1, 1] for dy in [-1, 1] if dy != -p]  # don't check backwards for non-kings\n        return any(board.get((x + 2 * dx, y + 2 * dy)) == 0 and board[x + dx, y + dy] * p < 0 for dx, dy in deltas)\n\n    sign = 1  # player 1 moves first\n    for move in transcript:\n        start, end = tuple(move[0]), tuple(move[-1])\n        p = board[start]  # piece to move\n        assert p * sign > 0, \"Moving square must be non-empty and players must be alternate signs\"\n        assert all(board[x, y] == 0 for x, y in move if [x, y] != move[0]), \"Moved to an occupied square\"\n\n        for (x1, y1), (x2, y2) in zip(move, move[1:]):\n            assert abs(p) != 1 or (y2 - y1) * p > 0, \"Non-kings can only move forward (in direction of sign)\"\n            if abs(x2 - x1) == 1:  # non-jump\n                assert not any(has_a_jump(*a) for a in board if board[a] * p > 0), \"Must make a jump if possible\"\n                break\n            mid = ((x1 + x2) // 2, (y1 + y2) // 2)\n            assert board[mid] * p < 0, \"Can only jump over piece of opposite sign\"\n            board[mid] = 0\n        board[start], board[end] = 0, p\n        assert abs(x2 - x1) == 1 or not has_a_jump(*end)\n        if abs(p) == 1 and any(y in {0, 7} for x, y in move[1:]):\n            board[end] *= 2  # king me at the end of turn after any jumps are done!\n        sign *= -1\n\n    return True",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(transcript=[[[6, 4], [5, 5]], [[4, 6], [6, 4]], [[7, 3], [5, 5]], [[3, 5], [4, 4]], [[4, 2], [6, 4]], [[3, 7], [2, 6]], [[5, 5], [6, 6]], [[7, 7], [5, 5], [7, 3]], [[1, 1], [0, 2]], [[7, 3], [6, 2]], [[0, 0], [1, 1]], [[6, 2], [5, 1]], [[4, 0], [6, 2]], [[4, 4], [3, 3]], [[1, 1], [2, 2]], [[3, 3], [1, 1]], [[6, 2], [7, 3]], [[5, 7], [6, 6]], [[0, 2], [1, 3]], [[2, 4], [0, 2]], [[3, 1], [2, 2]], [[1, 7], [0, 6]]]):",
    "sol_docstring": "    \"\"\"\n    You are given a partial transcript a checkers game. Find an initial position such that the transcript\n    would be a legal set of moves. The board positions are [x, y] pairs with 0 <= x, y < 8 and x + y even.\n    There are two players which we call -1 and 1 for convenience, and player 1 must move first in transcript.\n    The initial position is represented as a list [x, y, piece] where piece means:\n    * 0 is empty square\n    * 1 or -1 is piece that moves only in the y = 1 or y = -1 dir, respectively\n    * 2 or -2 is king for player 1 or player 2 respectively\n\n    Additional rules:\n    * You must jump if you can, and you must continue jumping until one can't any longer.\n    * You cannot start the position with any non-kings on your last rank.\n    * Promotion happens after the turn ends\n    \"\"\"",
    "sol_bodies": [
      "    START_PLAYER = 1  # assumed\n\n    class InitOpts:\n        def __init__(self, x, y):\n            self.x, self.y = x, y\n            self.opts = {-2, -1, 0, 1, 2}\n            if y == 0:\n                self.opts.remove(-1)\n            if y == 7:\n                self.opts.remove(1)\n            self.promoted = 2 ** 63  # on which step was it promoted t >= 0\n            self.jumped = 2 ** 63  # on which step was it jumped t >= 0\n\n    # def board2str(board):  # for debugging\n    #     mapping = \".bBWw\"\n    #     ans = \"\"\n    #     for y in range(7, -1, -1):\n    #         ans += \"\".join(\" \" if (x+y)%2 else mapping[board[x,y]] for x in range(8)) + \"\\n\"\n    #     return ans\n\n    init_opts = {(x, y): InitOpts(x, y) for x in range(8) for y in range(8) if (x + y) % 2 == 0}\n    # board = {(x, y): (1 if y < 3 else -1 if y > 4 else 0) for x in range(8) for y in range(8) if\n    #          (x + y) % 2 == 0}  # new board\n\n    transcript = [[tuple(a) for a in move] for move in transcript]\n\n    permuted_opts = init_opts.copy()\n    sign = START_PLAYER\n    for t, move in enumerate(transcript):\n        start, end = tuple(move[0]), tuple(move[-1])\n        p = permuted_opts[start]  # opts to move\n        assert p.jumped >= t\n        p.opts -= {-sign, -2 * sign, 0}\n        if any((y2 - y1) * sign < 0 for (x1, y1), (x2, y2) in zip(move, move[1:])):  # backward move!\n            if p.promoted >= t:\n                p.opts -= {sign}  # must be a king!\n\n        for a, b in zip(move, move[1:]):\n            if permuted_opts[b].jumped >= t:\n                permuted_opts[b].opts -= {-2, -1, 1, 2}  # must be empty\n            assert permuted_opts[a].jumped >= t\n            permuted_opts[a], permuted_opts[b] = permuted_opts[b], permuted_opts[a]\n            # board[a], board[b] = board[b], board[a]\n            (x1, y1), (x2, y2) = a, b\n            if abs(x2 - x1) == 2:  # jump\n                mid = ((x1 + x2) // 2, (y1 + y2) // 2)\n                assert permuted_opts[mid].jumped >= t\n                permuted_opts[mid].opts -= {0, sign, 2 * sign}  # Can only jump over piece of opposite sign\n                permuted_opts[mid].jumped = t\n                # board[mid] = 0\n\n        if any(y in {0, 7} for x, y in move[1:]):\n            if p.promoted > t:\n                p.promoted = t\n            # if abs(board[x2, y2]) == 1:\n            #     board[x2, y2] *= 2\n\n        sign *= -1\n\n    for y in range(7, -1, -1):\n        for x in range(8):\n            if (x, y) in init_opts:\n                s = init_opts[x, y].opts\n                if {1, 2} <= s:\n                    s.remove(2)\n                if {-1, -2} <= s:\n                    s.remove(-2)\n\n    def helper():  # returns True if success and store everything, otherwise None\n        my_opts = init_opts.copy()\n        sign = START_PLAYER  # player 1 always starts\n\n        for t, move in enumerate(transcript):\n            if abs(move[0][0] - move[1][0]) == 1:  # not a jump\n                check_no_jumps = [a for a, p in my_opts.items() if p.jumped >= t and p.opts <= {sign, 2 * sign}]\n            else:\n                for a, b in zip(move, move[1:]):\n                    my_opts[a], my_opts[b] = my_opts[b], my_opts[a]\n                check_no_jumps = [b]\n\n            for x, y in check_no_jumps:\n                p = my_opts[x, y]\n                [o] = p.opts\n                assert o * sign > 0\n                dys = [o] if (abs(o) == 1 and p.promoted >= t) else [-1, 1]  # only check forward jumps\n                for dx in [-1, 1]:\n                    for dy in dys:\n                        target_o = my_opts.get((x + 2 * dx, y + 2 * dy))\n                        if target_o is not None and (0 in target_o.opts or target_o.jumped < t):\n                            mid_o = my_opts[x + dx, y + dy]\n                            if mid_o.jumped > t and mid_o.opts <= {-sign, -2 * sign}:  # ok if jumped at t\n                                if target_o.jumped < t or target_o.opts == {0}:\n                                    return False\n                                old_opts = target_o.opts\n                                for v in target_o.opts:\n                                    if v != 0:\n                                        target_o.opts = {v}\n                                        h = helper()\n                                        if h:\n                                            return True\n                                target_o.opts = old_opts\n                                return False\n\n            if abs(move[0][0] - move[1][0]) == 1:  # not a jump\n                a, b = move[0], move[1]\n                my_opts[a], my_opts[b] = my_opts[b], my_opts[a]\n\n            sign *= -1\n        return True\n\n    res = helper()\n    assert res\n\n    def get_opt(opts):\n        if 0 in opts.opts:\n            return 0\n        assert len(opts.opts) == 1\n        return list(opts.opts)[0]\n\n    return [[x, y, get_opt(opts)] for (x, y), opts in init_opts.items()]"
    ],
    "module": "ICPC.py",
    "notes": "Inspired by\n[ICPC 2019 Problem C: Checks Post Facto](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\n\nNobody solved this problem during the competition -- it is pretty difficult!",
    "weight": 1.0
  },
  {
    "name": "CheckersPosition:3",
    "sat": "def sat(position: List[List[int]], transcript=[[[3, 1], [1, 3]]]):\n    board = {(x, y): 0 for x in range(8) for y in range(8) if (x + y) % 2 == 0}  # empty board, 0 = empty\n    for x, y, p in position:\n        assert -2 <= p <= 2 and board[x, y] == 0  # -1, 1 is regular piece, -2, 2 is king\n        board[x, y] = p\n\n    def has_a_jump(x, y):\n        p = board[x, y]  # piece to move\n        deltas = [(dx, dy) for dx in [-1, 1] for dy in [-1, 1] if dy != -p]  # don't check backwards for non-kings\n        return any(board.get((x + 2 * dx, y + 2 * dy)) == 0 and board[x + dx, y + dy] * p < 0 for dx, dy in deltas)\n\n    sign = 1  # player 1 moves first\n    for move in transcript:\n        start, end = tuple(move[0]), tuple(move[-1])\n        p = board[start]  # piece to move\n        assert p * sign > 0, \"Moving square must be non-empty and players must be alternate signs\"\n        assert all(board[x, y] == 0 for x, y in move if [x, y] != move[0]), \"Moved to an occupied square\"\n\n        for (x1, y1), (x2, y2) in zip(move, move[1:]):\n            assert abs(p) != 1 or (y2 - y1) * p > 0, \"Non-kings can only move forward (in direction of sign)\"\n            if abs(x2 - x1) == 1:  # non-jump\n                assert not any(has_a_jump(*a) for a in board if board[a] * p > 0), \"Must make a jump if possible\"\n                break\n            mid = ((x1 + x2) // 2, (y1 + y2) // 2)\n            assert board[mid] * p < 0, \"Can only jump over piece of opposite sign\"\n            board[mid] = 0\n        board[start], board[end] = 0, p\n        assert abs(x2 - x1) == 1 or not has_a_jump(*end)\n        if abs(p) == 1 and any(y in {0, 7} for x, y in move[1:]):\n            board[end] *= 2  # king me at the end of turn after any jumps are done!\n        sign *= -1\n\n    return True",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(transcript=[[[3, 1], [1, 3]]]):",
    "sol_docstring": "    \"\"\"\n    You are given a partial transcript a checkers game. Find an initial position such that the transcript\n    would be a legal set of moves. The board positions are [x, y] pairs with 0 <= x, y < 8 and x + y even.\n    There are two players which we call -1 and 1 for convenience, and player 1 must move first in transcript.\n    The initial position is represented as a list [x, y, piece] where piece means:\n    * 0 is empty square\n    * 1 or -1 is piece that moves only in the y = 1 or y = -1 dir, respectively\n    * 2 or -2 is king for player 1 or player 2 respectively\n\n    Additional rules:\n    * You must jump if you can, and you must continue jumping until one can't any longer.\n    * You cannot start the position with any non-kings on your last rank.\n    * Promotion happens after the turn ends\n    \"\"\"",
    "sol_bodies": [
      "    START_PLAYER = 1  # assumed\n\n    class InitOpts:\n        def __init__(self, x, y):\n            self.x, self.y = x, y\n            self.opts = {-2, -1, 0, 1, 2}\n            if y == 0:\n                self.opts.remove(-1)\n            if y == 7:\n                self.opts.remove(1)\n            self.promoted = 2 ** 63  # on which step was it promoted t >= 0\n            self.jumped = 2 ** 63  # on which step was it jumped t >= 0\n\n    # def board2str(board):  # for debugging\n    #     mapping = \".bBWw\"\n    #     ans = \"\"\n    #     for y in range(7, -1, -1):\n    #         ans += \"\".join(\" \" if (x+y)%2 else mapping[board[x,y]] for x in range(8)) + \"\\n\"\n    #     return ans\n\n    init_opts = {(x, y): InitOpts(x, y) for x in range(8) for y in range(8) if (x + y) % 2 == 0}\n    # board = {(x, y): (1 if y < 3 else -1 if y > 4 else 0) for x in range(8) for y in range(8) if\n    #          (x + y) % 2 == 0}  # new board\n\n    transcript = [[tuple(a) for a in move] for move in transcript]\n\n    permuted_opts = init_opts.copy()\n    sign = START_PLAYER\n    for t, move in enumerate(transcript):\n        start, end = tuple(move[0]), tuple(move[-1])\n        p = permuted_opts[start]  # opts to move\n        assert p.jumped >= t\n        p.opts -= {-sign, -2 * sign, 0}\n        if any((y2 - y1) * sign < 0 for (x1, y1), (x2, y2) in zip(move, move[1:])):  # backward move!\n            if p.promoted >= t:\n                p.opts -= {sign}  # must be a king!\n\n        for a, b in zip(move, move[1:]):\n            if permuted_opts[b].jumped >= t:\n                permuted_opts[b].opts -= {-2, -1, 1, 2}  # must be empty\n            assert permuted_opts[a].jumped >= t\n            permuted_opts[a], permuted_opts[b] = permuted_opts[b], permuted_opts[a]\n            # board[a], board[b] = board[b], board[a]\n            (x1, y1), (x2, y2) = a, b\n            if abs(x2 - x1) == 2:  # jump\n                mid = ((x1 + x2) // 2, (y1 + y2) // 2)\n                assert permuted_opts[mid].jumped >= t\n                permuted_opts[mid].opts -= {0, sign, 2 * sign}  # Can only jump over piece of opposite sign\n                permuted_opts[mid].jumped = t\n                # board[mid] = 0\n\n        if any(y in {0, 7} for x, y in move[1:]):\n            if p.promoted > t:\n                p.promoted = t\n            # if abs(board[x2, y2]) == 1:\n            #     board[x2, y2] *= 2\n\n        sign *= -1\n\n    for y in range(7, -1, -1):\n        for x in range(8):\n            if (x, y) in init_opts:\n                s = init_opts[x, y].opts\n                if {1, 2} <= s:\n                    s.remove(2)\n                if {-1, -2} <= s:\n                    s.remove(-2)\n\n    def helper():  # returns True if success and store everything, otherwise None\n        my_opts = init_opts.copy()\n        sign = START_PLAYER  # player 1 always starts\n\n        for t, move in enumerate(transcript):\n            if abs(move[0][0] - move[1][0]) == 1:  # not a jump\n                check_no_jumps = [a for a, p in my_opts.items() if p.jumped >= t and p.opts <= {sign, 2 * sign}]\n            else:\n                for a, b in zip(move, move[1:]):\n                    my_opts[a], my_opts[b] = my_opts[b], my_opts[a]\n                check_no_jumps = [b]\n\n            for x, y in check_no_jumps:\n                p = my_opts[x, y]\n                [o] = p.opts\n                assert o * sign > 0\n                dys = [o] if (abs(o) == 1 and p.promoted >= t) else [-1, 1]  # only check forward jumps\n                for dx in [-1, 1]:\n                    for dy in dys:\n                        target_o = my_opts.get((x + 2 * dx, y + 2 * dy))\n                        if target_o is not None and (0 in target_o.opts or target_o.jumped < t):\n                            mid_o = my_opts[x + dx, y + dy]\n                            if mid_o.jumped > t and mid_o.opts <= {-sign, -2 * sign}:  # ok if jumped at t\n                                if target_o.jumped < t or target_o.opts == {0}:\n                                    return False\n                                old_opts = target_o.opts\n                                for v in target_o.opts:\n                                    if v != 0:\n                                        target_o.opts = {v}\n                                        h = helper()\n                                        if h:\n                                            return True\n                                target_o.opts = old_opts\n                                return False\n\n            if abs(move[0][0] - move[1][0]) == 1:  # not a jump\n                a, b = move[0], move[1]\n                my_opts[a], my_opts[b] = my_opts[b], my_opts[a]\n\n            sign *= -1\n        return True\n\n    res = helper()\n    assert res\n\n    def get_opt(opts):\n        if 0 in opts.opts:\n            return 0\n        assert len(opts.opts) == 1\n        return list(opts.opts)[0]\n\n    return [[x, y, get_opt(opts)] for (x, y), opts in init_opts.items()]"
    ],
    "module": "ICPC.py",
    "notes": "Inspired by\n[ICPC 2019 Problem C: Checks Post Facto](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\n\nNobody solved this problem during the competition -- it is pretty difficult!",
    "weight": 1.0
  },
  {
    "name": "CheckersPosition:4",
    "sat": "def sat(position: List[List[int]], transcript=[[[5, 1], [3, 3], [5, 5], [3, 7]], [[7, 3], [5, 1]], [[6, 0], [4, 2]], [[3, 5], [2, 4]], [[1, 3], [3, 5]], [[7, 5], [6, 4]], [[1, 1], [2, 2]], [[6, 4], [7, 3]], [[4, 2], [3, 3]], [[6, 6], [5, 5]], [[0, 2], [1, 3]], [[5, 7], [4, 6]], [[3, 5], [5, 7]], [[1, 5], [2, 4]], [[3, 3], [1, 5]], [[0, 6], [2, 4], [0, 2]], [[2, 2], [1, 3]], [[5, 5], [4, 4]], [[7, 1], [6, 2]], [[7, 3], [5, 1]], [[1, 3], [2, 4]], [[7, 7], [6, 6]], [[5, 7], [7, 5]], [[0, 2], [1, 1]], [[0, 0], [2, 2]], [[4, 4], [5, 3]], [[7, 5], [6, 4]], [[5, 3], [4, 2]], [[6, 4], [7, 5]], [[5, 1], [6, 0]], [[2, 4], [3, 5]], [[6, 0], [7, 1]], [[2, 2], [1, 3]], [[7, 1], [6, 0]], [[3, 5], [4, 6]], [[4, 2], [5, 1]], [[2, 0], [3, 1]], [[6, 0], [7, 1]], [[1, 3], [0, 4]], [[5, 1], [6, 0]], [[7, 5], [6, 6]], [[7, 1], [6, 2]], [[6, 6], [7, 7]], [[6, 0], [5, 1]], [[7, 7], [6, 6]], [[6, 2], [5, 3]], [[3, 1], [4, 2]], [[5, 3], [3, 1]], [[6, 6], [5, 5]], [[3, 1], [2, 0]], [[3, 7], [2, 6]], [[2, 0], [3, 1]], [[5, 5], [4, 4]], [[5, 1], [6, 2]], [[4, 4], [5, 5]], [[3, 1], [2, 2]], [[0, 4], [1, 5]], [[2, 2], [3, 3]], [[2, 6], [1, 7]], [[3, 3], [2, 2]], [[4, 6], [5, 7]], [[2, 2], [3, 3]], [[1, 7], [2, 6]], [[6, 2], [5, 3]], [[5, 7], [4, 6]]]):\n    board = {(x, y): 0 for x in range(8) for y in range(8) if (x + y) % 2 == 0}  # empty board, 0 = empty\n    for x, y, p in position:\n        assert -2 <= p <= 2 and board[x, y] == 0  # -1, 1 is regular piece, -2, 2 is king\n        board[x, y] = p\n\n    def has_a_jump(x, y):\n        p = board[x, y]  # piece to move\n        deltas = [(dx, dy) for dx in [-1, 1] for dy in [-1, 1] if dy != -p]  # don't check backwards for non-kings\n        return any(board.get((x + 2 * dx, y + 2 * dy)) == 0 and board[x + dx, y + dy] * p < 0 for dx, dy in deltas)\n\n    sign = 1  # player 1 moves first\n    for move in transcript:\n        start, end = tuple(move[0]), tuple(move[-1])\n        p = board[start]  # piece to move\n        assert p * sign > 0, \"Moving square must be non-empty and players must be alternate signs\"\n        assert all(board[x, y] == 0 for x, y in move if [x, y] != move[0]), \"Moved to an occupied square\"\n\n        for (x1, y1), (x2, y2) in zip(move, move[1:]):\n            assert abs(p) != 1 or (y2 - y1) * p > 0, \"Non-kings can only move forward (in direction of sign)\"\n            if abs(x2 - x1) == 1:  # non-jump\n                assert not any(has_a_jump(*a) for a in board if board[a] * p > 0), \"Must make a jump if possible\"\n                break\n            mid = ((x1 + x2) // 2, (y1 + y2) // 2)\n            assert board[mid] * p < 0, \"Can only jump over piece of opposite sign\"\n            board[mid] = 0\n        board[start], board[end] = 0, p\n        assert abs(x2 - x1) == 1 or not has_a_jump(*end)\n        if abs(p) == 1 and any(y in {0, 7} for x, y in move[1:]):\n            board[end] *= 2  # king me at the end of turn after any jumps are done!\n        sign *= -1\n\n    return True",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(transcript=[[[5, 1], [3, 3], [5, 5], [3, 7]], [[7, 3], [5, 1]], [[6, 0], [4, 2]], [[3, 5], [2, 4]], [[1, 3], [3, 5]], [[7, 5], [6, 4]], [[1, 1], [2, 2]], [[6, 4], [7, 3]], [[4, 2], [3, 3]], [[6, 6], [5, 5]], [[0, 2], [1, 3]], [[5, 7], [4, 6]], [[3, 5], [5, 7]], [[1, 5], [2, 4]], [[3, 3], [1, 5]], [[0, 6], [2, 4], [0, 2]], [[2, 2], [1, 3]], [[5, 5], [4, 4]], [[7, 1], [6, 2]], [[7, 3], [5, 1]], [[1, 3], [2, 4]], [[7, 7], [6, 6]], [[5, 7], [7, 5]], [[0, 2], [1, 1]], [[0, 0], [2, 2]], [[4, 4], [5, 3]], [[7, 5], [6, 4]], [[5, 3], [4, 2]], [[6, 4], [7, 5]], [[5, 1], [6, 0]], [[2, 4], [3, 5]], [[6, 0], [7, 1]], [[2, 2], [1, 3]], [[7, 1], [6, 0]], [[3, 5], [4, 6]], [[4, 2], [5, 1]], [[2, 0], [3, 1]], [[6, 0], [7, 1]], [[1, 3], [0, 4]], [[5, 1], [6, 0]], [[7, 5], [6, 6]], [[7, 1], [6, 2]], [[6, 6], [7, 7]], [[6, 0], [5, 1]], [[7, 7], [6, 6]], [[6, 2], [5, 3]], [[3, 1], [4, 2]], [[5, 3], [3, 1]], [[6, 6], [5, 5]], [[3, 1], [2, 0]], [[3, 7], [2, 6]], [[2, 0], [3, 1]], [[5, 5], [4, 4]], [[5, 1], [6, 2]], [[4, 4], [5, 5]], [[3, 1], [2, 2]], [[0, 4], [1, 5]], [[2, 2], [3, 3]], [[2, 6], [1, 7]], [[3, 3], [2, 2]], [[4, 6], [5, 7]], [[2, 2], [3, 3]], [[1, 7], [2, 6]], [[6, 2], [5, 3]], [[5, 7], [4, 6]]]):",
    "sol_docstring": "    \"\"\"\n    You are given a partial transcript a checkers game. Find an initial position such that the transcript\n    would be a legal set of moves. The board positions are [x, y] pairs with 0 <= x, y < 8 and x + y even.\n    There are two players which we call -1 and 1 for convenience, and player 1 must move first in transcript.\n    The initial position is represented as a list [x, y, piece] where piece means:\n    * 0 is empty square\n    * 1 or -1 is piece that moves only in the y = 1 or y = -1 dir, respectively\n    * 2 or -2 is king for player 1 or player 2 respectively\n\n    Additional rules:\n    * You must jump if you can, and you must continue jumping until one can't any longer.\n    * You cannot start the position with any non-kings on your last rank.\n    * Promotion happens after the turn ends\n    \"\"\"",
    "sol_bodies": [
      "    START_PLAYER = 1  # assumed\n\n    class InitOpts:\n        def __init__(self, x, y):\n            self.x, self.y = x, y\n            self.opts = {-2, -1, 0, 1, 2}\n            if y == 0:\n                self.opts.remove(-1)\n            if y == 7:\n                self.opts.remove(1)\n            self.promoted = 2 ** 63  # on which step was it promoted t >= 0\n            self.jumped = 2 ** 63  # on which step was it jumped t >= 0\n\n    # def board2str(board):  # for debugging\n    #     mapping = \".bBWw\"\n    #     ans = \"\"\n    #     for y in range(7, -1, -1):\n    #         ans += \"\".join(\" \" if (x+y)%2 else mapping[board[x,y]] for x in range(8)) + \"\\n\"\n    #     return ans\n\n    init_opts = {(x, y): InitOpts(x, y) for x in range(8) for y in range(8) if (x + y) % 2 == 0}\n    # board = {(x, y): (1 if y < 3 else -1 if y > 4 else 0) for x in range(8) for y in range(8) if\n    #          (x + y) % 2 == 0}  # new board\n\n    transcript = [[tuple(a) for a in move] for move in transcript]\n\n    permuted_opts = init_opts.copy()\n    sign = START_PLAYER\n    for t, move in enumerate(transcript):\n        start, end = tuple(move[0]), tuple(move[-1])\n        p = permuted_opts[start]  # opts to move\n        assert p.jumped >= t\n        p.opts -= {-sign, -2 * sign, 0}\n        if any((y2 - y1) * sign < 0 for (x1, y1), (x2, y2) in zip(move, move[1:])):  # backward move!\n            if p.promoted >= t:\n                p.opts -= {sign}  # must be a king!\n\n        for a, b in zip(move, move[1:]):\n            if permuted_opts[b].jumped >= t:\n                permuted_opts[b].opts -= {-2, -1, 1, 2}  # must be empty\n            assert permuted_opts[a].jumped >= t\n            permuted_opts[a], permuted_opts[b] = permuted_opts[b], permuted_opts[a]\n            # board[a], board[b] = board[b], board[a]\n            (x1, y1), (x2, y2) = a, b\n            if abs(x2 - x1) == 2:  # jump\n                mid = ((x1 + x2) // 2, (y1 + y2) // 2)\n                assert permuted_opts[mid].jumped >= t\n                permuted_opts[mid].opts -= {0, sign, 2 * sign}  # Can only jump over piece of opposite sign\n                permuted_opts[mid].jumped = t\n                # board[mid] = 0\n\n        if any(y in {0, 7} for x, y in move[1:]):\n            if p.promoted > t:\n                p.promoted = t\n            # if abs(board[x2, y2]) == 1:\n            #     board[x2, y2] *= 2\n\n        sign *= -1\n\n    for y in range(7, -1, -1):\n        for x in range(8):\n            if (x, y) in init_opts:\n                s = init_opts[x, y].opts\n                if {1, 2} <= s:\n                    s.remove(2)\n                if {-1, -2} <= s:\n                    s.remove(-2)\n\n    def helper():  # returns True if success and store everything, otherwise None\n        my_opts = init_opts.copy()\n        sign = START_PLAYER  # player 1 always starts\n\n        for t, move in enumerate(transcript):\n            if abs(move[0][0] - move[1][0]) == 1:  # not a jump\n                check_no_jumps = [a for a, p in my_opts.items() if p.jumped >= t and p.opts <= {sign, 2 * sign}]\n            else:\n                for a, b in zip(move, move[1:]):\n                    my_opts[a], my_opts[b] = my_opts[b], my_opts[a]\n                check_no_jumps = [b]\n\n            for x, y in check_no_jumps:\n                p = my_opts[x, y]\n                [o] = p.opts\n                assert o * sign > 0\n                dys = [o] if (abs(o) == 1 and p.promoted >= t) else [-1, 1]  # only check forward jumps\n                for dx in [-1, 1]:\n                    for dy in dys:\n                        target_o = my_opts.get((x + 2 * dx, y + 2 * dy))\n                        if target_o is not None and (0 in target_o.opts or target_o.jumped < t):\n                            mid_o = my_opts[x + dx, y + dy]\n                            if mid_o.jumped > t and mid_o.opts <= {-sign, -2 * sign}:  # ok if jumped at t\n                                if target_o.jumped < t or target_o.opts == {0}:\n                                    return False\n                                old_opts = target_o.opts\n                                for v in target_o.opts:\n                                    if v != 0:\n                                        target_o.opts = {v}\n                                        h = helper()\n                                        if h:\n                                            return True\n                                target_o.opts = old_opts\n                                return False\n\n            if abs(move[0][0] - move[1][0]) == 1:  # not a jump\n                a, b = move[0], move[1]\n                my_opts[a], my_opts[b] = my_opts[b], my_opts[a]\n\n            sign *= -1\n        return True\n\n    res = helper()\n    assert res\n\n    def get_opt(opts):\n        if 0 in opts.opts:\n            return 0\n        assert len(opts.opts) == 1\n        return list(opts.opts)[0]\n\n    return [[x, y, get_opt(opts)] for (x, y), opts in init_opts.items()]"
    ],
    "module": "ICPC.py",
    "notes": "Inspired by\n[ICPC 2019 Problem C: Checks Post Facto](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\n\nNobody solved this problem during the competition -- it is pretty difficult!",
    "weight": 1.0
  },
  {
    "name": "MatchingMarkers:0",
    "sat": "def sat(cut_position: int, ring=\"yRrsmOkLCHSDJywpVDEDsjgCwSUmtvHMefxxPFdmBIpM\", lower=5):\n    line = ring[cut_position:] + ring[:cut_position]\n    matches = {c: 0 for c in line.lower()}\n    for c in line:\n        if c.islower():\n            matches[c] -= (1 if matches[c] > 0 else len(line))\n        else:\n            matches[c.lower()] += 1\n    return sum(i == 0 for i in matches.values()) >= lower",
    "ans_type": "int",
    "sol_header": "def sol(ring=\"yRrsmOkLCHSDJywpVDEDsjgCwSUmtvHMefxxPFdmBIpM\", lower=5):",
    "sol_docstring": "    \"\"\"\n    The input is a string of start and end markers \"aaBAcGeg\" where upper-case characters indicate start markers\n    and lower-case characters indicate ending markers. The string indicates a ring (joined at the ends) and the goal is\n    to find a location to split the ring so that there are a maximal number of matched start/end chars where a character\n    (like \"a\"/\"A\") is matched if starting at the split and going around the ring, the start-end pairs form a valid\n    nesting like nested parentheses. Can you solve it in linear time?\n    \"\"\"",
    "sol_bodies": [
      "    cumulatives = {c: [(0, 0)] for c in ring.lower()}\n    n = len(ring)\n    for i, c in enumerate(ring):\n        v = cumulatives[c.lower()]\n        v.append((i, v[-1][1] + (-1 if c.islower() else 1)))\n\n    scores = [0]*n\n    cumulatives = {c: v for c, v in cumulatives.items() if v[-1][1]==0}\n    for c, v in cumulatives.items():\n        if v[-1][1] != 0: # ignore things with unequal numbers of opens and closes\n            continue\n        m = min(t for i, t in v)\n        for (i, t), (i2, t2) in zip(v, v[1:] + [(n, 0)]):\n            if t == m:\n                for j in range(i+1, i2+1):\n                    scores[j % n] += 1\n    b = max(scores)\n    for i in range(n):\n        if scores[i] == b:\n            return i"
    ],
    "module": "ICPC.py",
    "notes": "Inspired by\n[ICPC 2019 Problem D: Circular DNA](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\n\nThis is trivial in quadratic time, but the challenge is to solve it quickly (i.e., linear time).",
    "weight": 1.0
  },
  {
    "name": "MatchingMarkers:1",
    "sat": "def sat(cut_position: int, ring=\"MvI\", lower=0):\n    line = ring[cut_position:] + ring[:cut_position]\n    matches = {c: 0 for c in line.lower()}\n    for c in line:\n        if c.islower():\n            matches[c] -= (1 if matches[c] > 0 else len(line))\n        else:\n            matches[c.lower()] += 1\n    return sum(i == 0 for i in matches.values()) >= lower",
    "ans_type": "int",
    "sol_header": "def sol(ring=\"MvI\", lower=0):",
    "sol_docstring": "    \"\"\"\n    The input is a string of start and end markers \"aaBAcGeg\" where upper-case characters indicate start markers\n    and lower-case characters indicate ending markers. The string indicates a ring (joined at the ends) and the goal is\n    to find a location to split the ring so that there are a maximal number of matched start/end chars where a character\n    (like \"a\"/\"A\") is matched if starting at the split and going around the ring, the start-end pairs form a valid\n    nesting like nested parentheses. Can you solve it in linear time?\n    \"\"\"",
    "sol_bodies": [
      "    cumulatives = {c: [(0, 0)] for c in ring.lower()}\n    n = len(ring)\n    for i, c in enumerate(ring):\n        v = cumulatives[c.lower()]\n        v.append((i, v[-1][1] + (-1 if c.islower() else 1)))\n\n    scores = [0]*n\n    cumulatives = {c: v for c, v in cumulatives.items() if v[-1][1]==0}\n    for c, v in cumulatives.items():\n        if v[-1][1] != 0: # ignore things with unequal numbers of opens and closes\n            continue\n        m = min(t for i, t in v)\n        for (i, t), (i2, t2) in zip(v, v[1:] + [(n, 0)]):\n            if t == m:\n                for j in range(i+1, i2+1):\n                    scores[j % n] += 1\n    b = max(scores)\n    for i in range(n):\n        if scores[i] == b:\n            return i"
    ],
    "module": "ICPC.py",
    "notes": "Inspired by\n[ICPC 2019 Problem D: Circular DNA](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\n\nThis is trivial in quadratic time, but the challenge is to solve it quickly (i.e., linear time).",
    "weight": 1.0
  },
  {
    "name": "MatchingMarkers:2",
    "sat": "def sat(cut_position: int, ring=\"s\", lower=0):\n    line = ring[cut_position:] + ring[:cut_position]\n    matches = {c: 0 for c in line.lower()}\n    for c in line:\n        if c.islower():\n            matches[c] -= (1 if matches[c] > 0 else len(line))\n        else:\n            matches[c.lower()] += 1\n    return sum(i == 0 for i in matches.values()) >= lower",
    "ans_type": "int",
    "sol_header": "def sol(ring=\"s\", lower=0):",
    "sol_docstring": "    \"\"\"\n    The input is a string of start and end markers \"aaBAcGeg\" where upper-case characters indicate start markers\n    and lower-case characters indicate ending markers. The string indicates a ring (joined at the ends) and the goal is\n    to find a location to split the ring so that there are a maximal number of matched start/end chars where a character\n    (like \"a\"/\"A\") is matched if starting at the split and going around the ring, the start-end pairs form a valid\n    nesting like nested parentheses. Can you solve it in linear time?\n    \"\"\"",
    "sol_bodies": [
      "    cumulatives = {c: [(0, 0)] for c in ring.lower()}\n    n = len(ring)\n    for i, c in enumerate(ring):\n        v = cumulatives[c.lower()]\n        v.append((i, v[-1][1] + (-1 if c.islower() else 1)))\n\n    scores = [0]*n\n    cumulatives = {c: v for c, v in cumulatives.items() if v[-1][1]==0}\n    for c, v in cumulatives.items():\n        if v[-1][1] != 0: # ignore things with unequal numbers of opens and closes\n            continue\n        m = min(t for i, t in v)\n        for (i, t), (i2, t2) in zip(v, v[1:] + [(n, 0)]):\n            if t == m:\n                for j in range(i+1, i2+1):\n                    scores[j % n] += 1\n    b = max(scores)\n    for i in range(n):\n        if scores[i] == b:\n            return i"
    ],
    "module": "ICPC.py",
    "notes": "Inspired by\n[ICPC 2019 Problem D: Circular DNA](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\n\nThis is trivial in quadratic time, but the challenge is to solve it quickly (i.e., linear time).",
    "weight": 1.0
  },
  {
    "name": "MatchingMarkers:3",
    "sat": "def sat(cut_position: int, ring=\"fyVYVBfGHVYsBrYVgsgHYvVD\", lower=0):\n    line = ring[cut_position:] + ring[:cut_position]\n    matches = {c: 0 for c in line.lower()}\n    for c in line:\n        if c.islower():\n            matches[c] -= (1 if matches[c] > 0 else len(line))\n        else:\n            matches[c.lower()] += 1\n    return sum(i == 0 for i in matches.values()) >= lower",
    "ans_type": "int",
    "sol_header": "def sol(ring=\"fyVYVBfGHVYsBrYVgsgHYvVD\", lower=0):",
    "sol_docstring": "    \"\"\"\n    The input is a string of start and end markers \"aaBAcGeg\" where upper-case characters indicate start markers\n    and lower-case characters indicate ending markers. The string indicates a ring (joined at the ends) and the goal is\n    to find a location to split the ring so that there are a maximal number of matched start/end chars where a character\n    (like \"a\"/\"A\") is matched if starting at the split and going around the ring, the start-end pairs form a valid\n    nesting like nested parentheses. Can you solve it in linear time?\n    \"\"\"",
    "sol_bodies": [
      "    cumulatives = {c: [(0, 0)] for c in ring.lower()}\n    n = len(ring)\n    for i, c in enumerate(ring):\n        v = cumulatives[c.lower()]\n        v.append((i, v[-1][1] + (-1 if c.islower() else 1)))\n\n    scores = [0]*n\n    cumulatives = {c: v for c, v in cumulatives.items() if v[-1][1]==0}\n    for c, v in cumulatives.items():\n        if v[-1][1] != 0: # ignore things with unequal numbers of opens and closes\n            continue\n        m = min(t for i, t in v)\n        for (i, t), (i2, t2) in zip(v, v[1:] + [(n, 0)]):\n            if t == m:\n                for j in range(i+1, i2+1):\n                    scores[j % n] += 1\n    b = max(scores)\n    for i in range(n):\n        if scores[i] == b:\n            return i"
    ],
    "module": "ICPC.py",
    "notes": "Inspired by\n[ICPC 2019 Problem D: Circular DNA](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\n\nThis is trivial in quadratic time, but the challenge is to solve it quickly (i.e., linear time).",
    "weight": 1.0
  },
  {
    "name": "MatchingMarkers:4",
    "sat": "def sat(cut_position: int, ring=\"ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf\", lower=1):\n    line = ring[cut_position:] + ring[:cut_position]\n    matches = {c: 0 for c in line.lower()}\n    for c in line:\n        if c.islower():\n            matches[c] -= (1 if matches[c] > 0 else len(line))\n        else:\n            matches[c.lower()] += 1\n    return sum(i == 0 for i in matches.values()) >= lower",
    "ans_type": "int",
    "sol_header": "def sol(ring=\"ClaKdLCuSddLdafuRKuqUqSLqquLCSlrCfFdcRAlfkLlqqqccQSacsDCUqDaLurDlqqfcAaKasCf\", lower=1):",
    "sol_docstring": "    \"\"\"\n    The input is a string of start and end markers \"aaBAcGeg\" where upper-case characters indicate start markers\n    and lower-case characters indicate ending markers. The string indicates a ring (joined at the ends) and the goal is\n    to find a location to split the ring so that there are a maximal number of matched start/end chars where a character\n    (like \"a\"/\"A\") is matched if starting at the split and going around the ring, the start-end pairs form a valid\n    nesting like nested parentheses. Can you solve it in linear time?\n    \"\"\"",
    "sol_bodies": [
      "    cumulatives = {c: [(0, 0)] for c in ring.lower()}\n    n = len(ring)\n    for i, c in enumerate(ring):\n        v = cumulatives[c.lower()]\n        v.append((i, v[-1][1] + (-1 if c.islower() else 1)))\n\n    scores = [0]*n\n    cumulatives = {c: v for c, v in cumulatives.items() if v[-1][1]==0}\n    for c, v in cumulatives.items():\n        if v[-1][1] != 0: # ignore things with unequal numbers of opens and closes\n            continue\n        m = min(t for i, t in v)\n        for (i, t), (i2, t2) in zip(v, v[1:] + [(n, 0)]):\n            if t == m:\n                for j in range(i+1, i2+1):\n                    scores[j % n] += 1\n    b = max(scores)\n    for i in range(n):\n        if scores[i] == b:\n            return i"
    ],
    "module": "ICPC.py",
    "notes": "Inspired by\n[ICPC 2019 Problem D: Circular DNA](https://icpc.global/worldfinals/problems/2019%20ACM-ICPC%20World%20Finals/icpc2019.pdf)\n\nThis is trivial in quadratic time, but the challenge is to solve it quickly (i.e., linear time).",
    "weight": 1.0
  },
  {
    "name": "ExponentialCoinMoves:0",
    "sat": "def sat(states: List[List[int]], n=16385):\n    assert states[0] == [1] * 5 and all(len(li) == 5 for li in states) and all(i >= 0 for li in states for i in li)\n    for prev, cur in zip(states, states[1:]):\n        for i in range(5):\n            if cur[i] != prev[i]:\n                break\n        assert cur[i] < prev[i]\n        assert (\n                cur[i + 1] - prev[i + 1] == 2 * (prev[i] - cur[i]) and cur[i + 2:] == prev[i + 2:]  # k decrements\n                or\n                cur[i:i + 3] == [prev[i] - 1, prev[i + 2], prev[i + 1]] and cur[i + 3:] == prev[i + 3:]  # swap\n        )\n\n    return states[-1][-1] == 2 ** n",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(n=16385):",
    "sol_docstring": "    \"\"\"\n    There are five boxes each having one coin initially. Two types of moves are allowed:\n    * (advance) remove `k > 0` coins from box `i` and add `2k` coins to box `i + 1`\n    * (swap) remove a coin from box `i` and swap the contents of boxes `i+1` and `i+2`\n    Given `0 <= n <= 16385`, find a sequence of states that result in 2^n coins in the last box.\n    Note that `n` can be as large as 16385 yielding 2^16385 coins (a number with 4,933 digits) in the last\n    box. Encode each state as a list of the numbers of coins in the five boxes.\n\n    Sample Input:\n    `n = 2`\n\n    Sample Output:\n    `[[1, 1, 1, 1, 1], [0, 3, 1, 1, 1], [0, 1, 5, 1, 1], [0, 1, 4, 1, 1], [0, 0, 1, 4, 1], [0, 0, 0, 1, 4]]`\n\n    The last box now has 2^2 coins. This is a sequence of two advances followed by three swaps.\n\n    states is encoded by lists of 5 coin counts\n    \"\"\"",
    "sol_bodies": [
      "    assert n >= 1\n    ans = [[1] * 5, [0, 3, 1, 1, 1], [0, 2, 3, 1, 1], [0, 2, 2, 3, 1], [0, 2, 2, 0, 7], [0, 2, 1, 7, 0],\n           [0, 2, 1, 0, 14], [0, 2, 0, 14, 0], [0, 1, 14, 0, 0]]\n\n    def exp_move():  # shifts last 3 [..., a, 0, 0] to [..., 0, 2^a, 0] for a>0\n        state = ans[-1][:]\n        state[2] -= 1\n        state[3] += 2\n        ans.append(state[:])\n        while state[2]:\n            state[3], state[4] = 0, 2 * state[3]\n            ans.append(state[:])\n            state[2:] = [state[2] - 1, state[4], 0]\n            ans.append(state[:])\n\n    exp_move()\n    assert ans[-1] == [0, 1, 0, 2 ** 14, 0]\n    ans.append([0, 0, 2 ** 14, 0, 0])\n    if n <= 16:\n        ans.append([0, 0, 0, 2 ** 15, 0])\n    else:\n        exp_move()\n        assert ans[-1] == [0, 0, 0, 2 ** (2 ** 14), 0]\n    state = ans[-1][:]\n    state[-2] -= 2 ** (n - 1)\n    state[-1] = 2 ** n\n    ans.append(state)\n    return ans"
    ],
    "module": "IMO.py",
    "notes": "This problem has *long* answers, not that the code to solve it is long but that what the solution outputs is long.\n\nThe version below uses only 5 boxes (unlike the IMO problem with 6 boxes since 2010^2010^2010 is too big\nfor computers) but the solution is quite similar to the solution to the IMO problem. Because the solution\nrequires exponential many moves, our representation allows combining multiple Type-1 (advance) operations\ninto a single step.\n\nInspired by [IMO 2010 Problem 5](https://www.imo-official.org/problems.aspx)",
    "weight": 10.0
  },
  {
    "name": "ExponentialCoinMoves:1",
    "sat": "def sat(states: List[List[int]], n=1):\n    assert states[0] == [1] * 5 and all(len(li) == 5 for li in states) and all(i >= 0 for li in states for i in li)\n    for prev, cur in zip(states, states[1:]):\n        for i in range(5):\n            if cur[i] != prev[i]:\n                break\n        assert cur[i] < prev[i]\n        assert (\n                cur[i + 1] - prev[i + 1] == 2 * (prev[i] - cur[i]) and cur[i + 2:] == prev[i + 2:]  # k decrements\n                or\n                cur[i:i + 3] == [prev[i] - 1, prev[i + 2], prev[i + 1]] and cur[i + 3:] == prev[i + 3:]  # swap\n        )\n\n    return states[-1][-1] == 2 ** n",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(n=1):",
    "sol_docstring": "    \"\"\"\n    There are five boxes each having one coin initially. Two types of moves are allowed:\n    * (advance) remove `k > 0` coins from box `i` and add `2k` coins to box `i + 1`\n    * (swap) remove a coin from box `i` and swap the contents of boxes `i+1` and `i+2`\n    Given `0 <= n <= 16385`, find a sequence of states that result in 2^n coins in the last box.\n    Note that `n` can be as large as 16385 yielding 2^16385 coins (a number with 4,933 digits) in the last\n    box. Encode each state as a list of the numbers of coins in the five boxes.\n\n    Sample Input:\n    `n = 2`\n\n    Sample Output:\n    `[[1, 1, 1, 1, 1], [0, 3, 1, 1, 1], [0, 1, 5, 1, 1], [0, 1, 4, 1, 1], [0, 0, 1, 4, 1], [0, 0, 0, 1, 4]]`\n\n    The last box now has 2^2 coins. This is a sequence of two advances followed by three swaps.\n\n    states is encoded by lists of 5 coin counts\n    \"\"\"",
    "sol_bodies": [
      "    assert n >= 1\n    ans = [[1] * 5, [0, 3, 1, 1, 1], [0, 2, 3, 1, 1], [0, 2, 2, 3, 1], [0, 2, 2, 0, 7], [0, 2, 1, 7, 0],\n           [0, 2, 1, 0, 14], [0, 2, 0, 14, 0], [0, 1, 14, 0, 0]]\n\n    def exp_move():  # shifts last 3 [..., a, 0, 0] to [..., 0, 2^a, 0] for a>0\n        state = ans[-1][:]\n        state[2] -= 1\n        state[3] += 2\n        ans.append(state[:])\n        while state[2]:\n            state[3], state[4] = 0, 2 * state[3]\n            ans.append(state[:])\n            state[2:] = [state[2] - 1, state[4], 0]\n            ans.append(state[:])\n\n    exp_move()\n    assert ans[-1] == [0, 1, 0, 2 ** 14, 0]\n    ans.append([0, 0, 2 ** 14, 0, 0])\n    if n <= 16:\n        ans.append([0, 0, 0, 2 ** 15, 0])\n    else:\n        exp_move()\n        assert ans[-1] == [0, 0, 0, 2 ** (2 ** 14), 0]\n    state = ans[-1][:]\n    state[-2] -= 2 ** (n - 1)\n    state[-1] = 2 ** n\n    ans.append(state)\n    return ans"
    ],
    "module": "IMO.py",
    "notes": "This problem has *long* answers, not that the code to solve it is long but that what the solution outputs is long.\n\nThe version below uses only 5 boxes (unlike the IMO problem with 6 boxes since 2010^2010^2010 is too big\nfor computers) but the solution is quite similar to the solution to the IMO problem. Because the solution\nrequires exponential many moves, our representation allows combining multiple Type-1 (advance) operations\ninto a single step.\n\nInspired by [IMO 2010 Problem 5](https://www.imo-official.org/problems.aspx)",
    "weight": 1.0
  },
  {
    "name": "ExponentialCoinMoves:2",
    "sat": "def sat(states: List[List[int]], n=2):\n    assert states[0] == [1] * 5 and all(len(li) == 5 for li in states) and all(i >= 0 for li in states for i in li)\n    for prev, cur in zip(states, states[1:]):\n        for i in range(5):\n            if cur[i] != prev[i]:\n                break\n        assert cur[i] < prev[i]\n        assert (\n                cur[i + 1] - prev[i + 1] == 2 * (prev[i] - cur[i]) and cur[i + 2:] == prev[i + 2:]  # k decrements\n                or\n                cur[i:i + 3] == [prev[i] - 1, prev[i + 2], prev[i + 1]] and cur[i + 3:] == prev[i + 3:]  # swap\n        )\n\n    return states[-1][-1] == 2 ** n",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(n=2):",
    "sol_docstring": "    \"\"\"\n    There are five boxes each having one coin initially. Two types of moves are allowed:\n    * (advance) remove `k > 0` coins from box `i` and add `2k` coins to box `i + 1`\n    * (swap) remove a coin from box `i` and swap the contents of boxes `i+1` and `i+2`\n    Given `0 <= n <= 16385`, find a sequence of states that result in 2^n coins in the last box.\n    Note that `n` can be as large as 16385 yielding 2^16385 coins (a number with 4,933 digits) in the last\n    box. Encode each state as a list of the numbers of coins in the five boxes.\n\n    Sample Input:\n    `n = 2`\n\n    Sample Output:\n    `[[1, 1, 1, 1, 1], [0, 3, 1, 1, 1], [0, 1, 5, 1, 1], [0, 1, 4, 1, 1], [0, 0, 1, 4, 1], [0, 0, 0, 1, 4]]`\n\n    The last box now has 2^2 coins. This is a sequence of two advances followed by three swaps.\n\n    states is encoded by lists of 5 coin counts\n    \"\"\"",
    "sol_bodies": [
      "    assert n >= 1\n    ans = [[1] * 5, [0, 3, 1, 1, 1], [0, 2, 3, 1, 1], [0, 2, 2, 3, 1], [0, 2, 2, 0, 7], [0, 2, 1, 7, 0],\n           [0, 2, 1, 0, 14], [0, 2, 0, 14, 0], [0, 1, 14, 0, 0]]\n\n    def exp_move():  # shifts last 3 [..., a, 0, 0] to [..., 0, 2^a, 0] for a>0\n        state = ans[-1][:]\n        state[2] -= 1\n        state[3] += 2\n        ans.append(state[:])\n        while state[2]:\n            state[3], state[4] = 0, 2 * state[3]\n            ans.append(state[:])\n            state[2:] = [state[2] - 1, state[4], 0]\n            ans.append(state[:])\n\n    exp_move()\n    assert ans[-1] == [0, 1, 0, 2 ** 14, 0]\n    ans.append([0, 0, 2 ** 14, 0, 0])\n    if n <= 16:\n        ans.append([0, 0, 0, 2 ** 15, 0])\n    else:\n        exp_move()\n        assert ans[-1] == [0, 0, 0, 2 ** (2 ** 14), 0]\n    state = ans[-1][:]\n    state[-2] -= 2 ** (n - 1)\n    state[-1] = 2 ** n\n    ans.append(state)\n    return ans"
    ],
    "module": "IMO.py",
    "notes": "This problem has *long* answers, not that the code to solve it is long but that what the solution outputs is long.\n\nThe version below uses only 5 boxes (unlike the IMO problem with 6 boxes since 2010^2010^2010 is too big\nfor computers) but the solution is quite similar to the solution to the IMO problem. Because the solution\nrequires exponential many moves, our representation allows combining multiple Type-1 (advance) operations\ninto a single step.\n\nInspired by [IMO 2010 Problem 5](https://www.imo-official.org/problems.aspx)",
    "weight": 1.0
  },
  {
    "name": "ExponentialCoinMoves:3",
    "sat": "def sat(states: List[List[int]], n=4):\n    assert states[0] == [1] * 5 and all(len(li) == 5 for li in states) and all(i >= 0 for li in states for i in li)\n    for prev, cur in zip(states, states[1:]):\n        for i in range(5):\n            if cur[i] != prev[i]:\n                break\n        assert cur[i] < prev[i]\n        assert (\n                cur[i + 1] - prev[i + 1] == 2 * (prev[i] - cur[i]) and cur[i + 2:] == prev[i + 2:]  # k decrements\n                or\n                cur[i:i + 3] == [prev[i] - 1, prev[i + 2], prev[i + 1]] and cur[i + 3:] == prev[i + 3:]  # swap\n        )\n\n    return states[-1][-1] == 2 ** n",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(n=4):",
    "sol_docstring": "    \"\"\"\n    There are five boxes each having one coin initially. Two types of moves are allowed:\n    * (advance) remove `k > 0` coins from box `i` and add `2k` coins to box `i + 1`\n    * (swap) remove a coin from box `i` and swap the contents of boxes `i+1` and `i+2`\n    Given `0 <= n <= 16385`, find a sequence of states that result in 2^n coins in the last box.\n    Note that `n` can be as large as 16385 yielding 2^16385 coins (a number with 4,933 digits) in the last\n    box. Encode each state as a list of the numbers of coins in the five boxes.\n\n    Sample Input:\n    `n = 2`\n\n    Sample Output:\n    `[[1, 1, 1, 1, 1], [0, 3, 1, 1, 1], [0, 1, 5, 1, 1], [0, 1, 4, 1, 1], [0, 0, 1, 4, 1], [0, 0, 0, 1, 4]]`\n\n    The last box now has 2^2 coins. This is a sequence of two advances followed by three swaps.\n\n    states is encoded by lists of 5 coin counts\n    \"\"\"",
    "sol_bodies": [
      "    assert n >= 1\n    ans = [[1] * 5, [0, 3, 1, 1, 1], [0, 2, 3, 1, 1], [0, 2, 2, 3, 1], [0, 2, 2, 0, 7], [0, 2, 1, 7, 0],\n           [0, 2, 1, 0, 14], [0, 2, 0, 14, 0], [0, 1, 14, 0, 0]]\n\n    def exp_move():  # shifts last 3 [..., a, 0, 0] to [..., 0, 2^a, 0] for a>0\n        state = ans[-1][:]\n        state[2] -= 1\n        state[3] += 2\n        ans.append(state[:])\n        while state[2]:\n            state[3], state[4] = 0, 2 * state[3]\n            ans.append(state[:])\n            state[2:] = [state[2] - 1, state[4], 0]\n            ans.append(state[:])\n\n    exp_move()\n    assert ans[-1] == [0, 1, 0, 2 ** 14, 0]\n    ans.append([0, 0, 2 ** 14, 0, 0])\n    if n <= 16:\n        ans.append([0, 0, 0, 2 ** 15, 0])\n    else:\n        exp_move()\n        assert ans[-1] == [0, 0, 0, 2 ** (2 ** 14), 0]\n    state = ans[-1][:]\n    state[-2] -= 2 ** (n - 1)\n    state[-1] = 2 ** n\n    ans.append(state)\n    return ans"
    ],
    "module": "IMO.py",
    "notes": "This problem has *long* answers, not that the code to solve it is long but that what the solution outputs is long.\n\nThe version below uses only 5 boxes (unlike the IMO problem with 6 boxes since 2010^2010^2010 is too big\nfor computers) but the solution is quite similar to the solution to the IMO problem. Because the solution\nrequires exponential many moves, our representation allows combining multiple Type-1 (advance) operations\ninto a single step.\n\nInspired by [IMO 2010 Problem 5](https://www.imo-official.org/problems.aspx)",
    "weight": 1.0
  },
  {
    "name": "ExponentialCoinMoves:4",
    "sat": "def sat(states: List[List[int]], n=8):\n    assert states[0] == [1] * 5 and all(len(li) == 5 for li in states) and all(i >= 0 for li in states for i in li)\n    for prev, cur in zip(states, states[1:]):\n        for i in range(5):\n            if cur[i] != prev[i]:\n                break\n        assert cur[i] < prev[i]\n        assert (\n                cur[i + 1] - prev[i + 1] == 2 * (prev[i] - cur[i]) and cur[i + 2:] == prev[i + 2:]  # k decrements\n                or\n                cur[i:i + 3] == [prev[i] - 1, prev[i + 2], prev[i + 1]] and cur[i + 3:] == prev[i + 3:]  # swap\n        )\n\n    return states[-1][-1] == 2 ** n",
    "ans_type": "List[List[int]]",
    "sol_header": "def sol(n=8):",
    "sol_docstring": "    \"\"\"\n    There are five boxes each having one coin initially. Two types of moves are allowed:\n    * (advance) remove `k > 0` coins from box `i` and add `2k` coins to box `i + 1`\n    * (swap) remove a coin from box `i` and swap the contents of boxes `i+1` and `i+2`\n    Given `0 <= n <= 16385`, find a sequence of states that result in 2^n coins in the last box.\n    Note that `n` can be as large as 16385 yielding 2^16385 coins (a number with 4,933 digits) in the last\n    box. Encode each state as a list of the numbers of coins in the five boxes.\n\n    Sample Input:\n    `n = 2`\n\n    Sample Output:\n    `[[1, 1, 1, 1, 1], [0, 3, 1, 1, 1], [0, 1, 5, 1, 1], [0, 1, 4, 1, 1], [0, 0, 1, 4, 1], [0, 0, 0, 1, 4]]`\n\n    The last box now has 2^2 coins. This is a sequence of two advances followed by three swaps.\n\n    states is encoded by lists of 5 coin counts\n    \"\"\"",
    "sol_bodies": [
      "    assert n >= 1\n    ans = [[1] * 5, [0, 3, 1, 1, 1], [0, 2, 3, 1, 1], [0, 2, 2, 3, 1], [0, 2, 2, 0, 7], [0, 2, 1, 7, 0],\n           [0, 2, 1, 0, 14], [0, 2, 0, 14, 0], [0, 1, 14, 0, 0]]\n\n    def exp_move():  # shifts last 3 [..., a, 0, 0] to [..., 0, 2^a, 0] for a>0\n        state = ans[-1][:]\n        state[2] -= 1\n        state[3] += 2\n        ans.append(state[:])\n        while state[2]:\n            state[3], state[4] = 0, 2 * state[3]\n            ans.append(state[:])\n            state[2:] = [state[2] - 1, state[4], 0]\n            ans.append(state[:])\n\n    exp_move()\n    assert ans[-1] == [0, 1, 0, 2 ** 14, 0]\n    ans.append([0, 0, 2 ** 14, 0, 0])\n    if n <= 16:\n        ans.append([0, 0, 0, 2 ** 15, 0])\n    else:\n        exp_move()\n        assert ans[-1] == [0, 0, 0, 2 ** (2 ** 14), 0]\n    state = ans[-1][:]\n    state[-2] -= 2 ** (n - 1)\n    state[-1] = 2 ** n\n    ans.append(state)\n    return ans"
    ],
    "module": "IMO.py",
    "notes": "This problem has *long* answers, not that the code to solve it is long but that what the solution outputs is long.\n\nThe version below uses only 5 boxes (unlike the IMO problem with 6 boxes since 2010^2010^2010 is too big\nfor computers) but the solution is quite similar to the solution to the IMO problem. Because the solution\nrequires exponential many moves, our representation allows combining multiple Type-1 (advance) operations\ninto a single step.\n\nInspired by [IMO 2010 Problem 5](https://www.imo-official.org/problems.aspx)",
    "weight": 8.0
  },
  {
    "name": "NoRelativePrimes:0",
    "sat": "def sat(nums: List[int], b=7, m=6):\n    assert len(nums) == len(set(nums)) == m and min(nums) >= 0\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    for a in nums:\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        assert all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums)\n\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(b=7, m=6):",
    "sol_docstring": "    \"\"\"\n    Let P(n) = n^2 + n + 1.\n\n    Given b>=6 and m>=1, find m non-negative integers for which the set {P(a+1), P(a+2), ..., P(a+b)} has\n    the property that there is no element that is relatively prime to every other element.\n\n    Sample input:\n    b = 6\n    m = 2\n\n    Sample output:\n    [195, 196]\n    \"\"\"",
    "sol_bodies": [
      "    ans = []\n\n    seen = set()\n    deltas = set()\n\n    def go(a):\n        if a < 0 or a in seen or len(ans) == m:\n            return\n        seen.add(a)\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        if all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums):\n            new_deltas = [abs(a - a2) for a2 in ans if a != a2 and abs(a - a2) not in deltas]\n            ans.append(a)\n            for delta in new_deltas:\n                for a2 in ans:\n                    go(a2 + delta)\n                    go(a2 - delta)\n            deltas.update(new_deltas)\n            for delta in sorted(deltas):\n                go(a + delta)\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    a = 0\n\n    while len(ans) < m:\n        go(a)\n        a += 1\n\n    return ans"
    ],
    "module": "IMO.py",
    "notes": "Inspired by [IMO 2016 Problem 4](https://www.imo-official.org/problems.aspx)\n\nQuestion: Is there a more efficient solution than the brute-force one we give, perhaps using the Chinese remainder\ntheorem?",
    "weight": 1.0
  },
  {
    "name": "NoRelativePrimes:1",
    "sat": "def sat(nums: List[int], b=7, m=26):\n    assert len(nums) == len(set(nums)) == m and min(nums) >= 0\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    for a in nums:\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        assert all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums)\n\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(b=7, m=26):",
    "sol_docstring": "    \"\"\"\n    Let P(n) = n^2 + n + 1.\n\n    Given b>=6 and m>=1, find m non-negative integers for which the set {P(a+1), P(a+2), ..., P(a+b)} has\n    the property that there is no element that is relatively prime to every other element.\n\n    Sample input:\n    b = 6\n    m = 2\n\n    Sample output:\n    [195, 196]\n    \"\"\"",
    "sol_bodies": [
      "    ans = []\n\n    seen = set()\n    deltas = set()\n\n    def go(a):\n        if a < 0 or a in seen or len(ans) == m:\n            return\n        seen.add(a)\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        if all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums):\n            new_deltas = [abs(a - a2) for a2 in ans if a != a2 and abs(a - a2) not in deltas]\n            ans.append(a)\n            for delta in new_deltas:\n                for a2 in ans:\n                    go(a2 + delta)\n                    go(a2 - delta)\n            deltas.update(new_deltas)\n            for delta in sorted(deltas):\n                go(a + delta)\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    a = 0\n\n    while len(ans) < m:\n        go(a)\n        a += 1\n\n    return ans"
    ],
    "module": "IMO.py",
    "notes": "Inspired by [IMO 2016 Problem 4](https://www.imo-official.org/problems.aspx)\n\nQuestion: Is there a more efficient solution than the brute-force one we give, perhaps using the Chinese remainder\ntheorem?",
    "weight": 1.0
  },
  {
    "name": "NoRelativePrimes:2",
    "sat": "def sat(nums: List[int], b=6, m=73):\n    assert len(nums) == len(set(nums)) == m and min(nums) >= 0\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    for a in nums:\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        assert all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums)\n\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(b=6, m=73):",
    "sol_docstring": "    \"\"\"\n    Let P(n) = n^2 + n + 1.\n\n    Given b>=6 and m>=1, find m non-negative integers for which the set {P(a+1), P(a+2), ..., P(a+b)} has\n    the property that there is no element that is relatively prime to every other element.\n\n    Sample input:\n    b = 6\n    m = 2\n\n    Sample output:\n    [195, 196]\n    \"\"\"",
    "sol_bodies": [
      "    ans = []\n\n    seen = set()\n    deltas = set()\n\n    def go(a):\n        if a < 0 or a in seen or len(ans) == m:\n            return\n        seen.add(a)\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        if all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums):\n            new_deltas = [abs(a - a2) for a2 in ans if a != a2 and abs(a - a2) not in deltas]\n            ans.append(a)\n            for delta in new_deltas:\n                for a2 in ans:\n                    go(a2 + delta)\n                    go(a2 - delta)\n            deltas.update(new_deltas)\n            for delta in sorted(deltas):\n                go(a + delta)\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    a = 0\n\n    while len(ans) < m:\n        go(a)\n        a += 1\n\n    return ans"
    ],
    "module": "IMO.py",
    "notes": "Inspired by [IMO 2016 Problem 4](https://www.imo-official.org/problems.aspx)\n\nQuestion: Is there a more efficient solution than the brute-force one we give, perhaps using the Chinese remainder\ntheorem?",
    "weight": 1.0
  },
  {
    "name": "NoRelativePrimes:3",
    "sat": "def sat(nums: List[int], b=17, m=37):\n    assert len(nums) == len(set(nums)) == m and min(nums) >= 0\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    for a in nums:\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        assert all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums)\n\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(b=17, m=37):",
    "sol_docstring": "    \"\"\"\n    Let P(n) = n^2 + n + 1.\n\n    Given b>=6 and m>=1, find m non-negative integers for which the set {P(a+1), P(a+2), ..., P(a+b)} has\n    the property that there is no element that is relatively prime to every other element.\n\n    Sample input:\n    b = 6\n    m = 2\n\n    Sample output:\n    [195, 196]\n    \"\"\"",
    "sol_bodies": [],
    "module": "IMO.py",
    "notes": "Inspired by [IMO 2016 Problem 4](https://www.imo-official.org/problems.aspx)\n\nQuestion: Is there a more efficient solution than the brute-force one we give, perhaps using the Chinese remainder\ntheorem?",
    "weight": 1.0
  },
  {
    "name": "NoRelativePrimes:4",
    "sat": "def sat(nums: List[int], b=7, m=92):\n    assert len(nums) == len(set(nums)) == m and min(nums) >= 0\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    for a in nums:\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        assert all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums)\n\n    return True",
    "ans_type": "List[int]",
    "sol_header": "def sol(b=7, m=92):",
    "sol_docstring": "    \"\"\"\n    Let P(n) = n^2 + n + 1.\n\n    Given b>=6 and m>=1, find m non-negative integers for which the set {P(a+1), P(a+2), ..., P(a+b)} has\n    the property that there is no element that is relatively prime to every other element.\n\n    Sample input:\n    b = 6\n    m = 2\n\n    Sample output:\n    [195, 196]\n    \"\"\"",
    "sol_bodies": [
      "    ans = []\n\n    seen = set()\n    deltas = set()\n\n    def go(a):\n        if a < 0 or a in seen or len(ans) == m:\n            return\n        seen.add(a)\n        nums = [(a + i + 1) ** 2 + (a + i + 1) + 1 for i in range(b)]\n        if all(any(i != j and gcd(i, j) > 1 for j in nums) for i in nums):\n            new_deltas = [abs(a - a2) for a2 in ans if a != a2 and abs(a - a2) not in deltas]\n            ans.append(a)\n            for delta in new_deltas:\n                for a2 in ans:\n                    go(a2 + delta)\n                    go(a2 - delta)\n            deltas.update(new_deltas)\n            for delta in sorted(deltas):\n                go(a + delta)\n\n    def gcd(i, j):\n        r, s = max(i, j), min(i, j)\n        while s >= 1:\n            r, s = s, (r % s)\n        return r\n\n    a = 0\n\n    while len(ans) < m:\n        go(a)\n        a += 1\n\n    return ans"
    ],
    "module": "IMO.py",
    "notes": "Inspired by [IMO 2016 Problem 4](https://www.imo-official.org/problems.aspx)\n\nQuestion: Is there a more efficient solution than the brute-force one we give, perhaps using the Chinese remainder\ntheorem?",
    "weight": 1.0
  },
  {
    "name": "FindRepeats:0",
    "sat": "def sat(indices: List[int], a0=123):\n    assert a0 >= 0 and a0 % 3 == 0, \"Hint: a_0 is a multiple of 3.\"\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and len({s[i] for i in indices}) == 1",
    "ans_type": "List[int]",
    "sol_header": "def sol(a0=123):",
    "sol_docstring": "    \"\"\"\n    Find a repeating integer in an infinite sequence of integers, specifically the indices for which the same value\n    occurs 1000 times. The sequence is defined by a starting value a_0 and each subsequent term is:\n    a_{n+1} = the square root of a_n if the a_n is a perfect square, and a_n + 3 otherwise.\n\n    For a given a_0 (that is a multiple of 3), the goal is to find 1000 indices where the a_i's are all equal.\n\n    Sample input:\n    9\n\n    Sample output:\n    [0, 3, 6, ..., 2997]\n\n    The sequence starting with a0=9 is [9, 3, 6, 9, 3, 6, 9, ...] thus a_n at where n is a multiple of 3 are\n    all equal in this case.\n    \"\"\"",
    "sol_bodies": [
      "    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans"
    ],
    "module": "IMO.py",
    "notes": "Note: This problem is much easier than the IMO problem which also required a proof that it is impossible\nfor a_0 not divisible by 3.\n\nInspired by [IMO 2017 Problem 1](https://www.imo-official.org/problems.aspx)",
    "weight": 1.0
  },
  {
    "name": "FindRepeats:1",
    "sat": "def sat(indices: List[int], a0=2827347):\n    assert a0 >= 0 and a0 % 3 == 0, \"Hint: a_0 is a multiple of 3.\"\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and len({s[i] for i in indices}) == 1",
    "ans_type": "List[int]",
    "sol_header": "def sol(a0=2827347):",
    "sol_docstring": "    \"\"\"\n    Find a repeating integer in an infinite sequence of integers, specifically the indices for which the same value\n    occurs 1000 times. The sequence is defined by a starting value a_0 and each subsequent term is:\n    a_{n+1} = the square root of a_n if the a_n is a perfect square, and a_n + 3 otherwise.\n\n    For a given a_0 (that is a multiple of 3), the goal is to find 1000 indices where the a_i's are all equal.\n\n    Sample input:\n    9\n\n    Sample output:\n    [0, 3, 6, ..., 2997]\n\n    The sequence starting with a0=9 is [9, 3, 6, 9, 3, 6, 9, ...] thus a_n at where n is a multiple of 3 are\n    all equal in this case.\n    \"\"\"",
    "sol_bodies": [
      "    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans"
    ],
    "module": "IMO.py",
    "notes": "Note: This problem is much easier than the IMO problem which also required a proof that it is impossible\nfor a_0 not divisible by 3.\n\nInspired by [IMO 2017 Problem 1](https://www.imo-official.org/problems.aspx)",
    "weight": 1.0
  },
  {
    "name": "FindRepeats:2",
    "sat": "def sat(indices: List[int], a0=2362263):\n    assert a0 >= 0 and a0 % 3 == 0, \"Hint: a_0 is a multiple of 3.\"\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and len({s[i] for i in indices}) == 1",
    "ans_type": "List[int]",
    "sol_header": "def sol(a0=2362263):",
    "sol_docstring": "    \"\"\"\n    Find a repeating integer in an infinite sequence of integers, specifically the indices for which the same value\n    occurs 1000 times. The sequence is defined by a starting value a_0 and each subsequent term is:\n    a_{n+1} = the square root of a_n if the a_n is a perfect square, and a_n + 3 otherwise.\n\n    For a given a_0 (that is a multiple of 3), the goal is to find 1000 indices where the a_i's are all equal.\n\n    Sample input:\n    9\n\n    Sample output:\n    [0, 3, 6, ..., 2997]\n\n    The sequence starting with a0=9 is [9, 3, 6, 9, 3, 6, 9, ...] thus a_n at where n is a multiple of 3 are\n    all equal in this case.\n    \"\"\"",
    "sol_bodies": [
      "    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans"
    ],
    "module": "IMO.py",
    "notes": "Note: This problem is much easier than the IMO problem which also required a proof that it is impossible\nfor a_0 not divisible by 3.\n\nInspired by [IMO 2017 Problem 1](https://www.imo-official.org/problems.aspx)",
    "weight": 1.0
  },
  {
    "name": "FindRepeats:3",
    "sat": "def sat(indices: List[int], a0=1703235):\n    assert a0 >= 0 and a0 % 3 == 0, \"Hint: a_0 is a multiple of 3.\"\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and len({s[i] for i in indices}) == 1",
    "ans_type": "List[int]",
    "sol_header": "def sol(a0=1703235):",
    "sol_docstring": "    \"\"\"\n    Find a repeating integer in an infinite sequence of integers, specifically the indices for which the same value\n    occurs 1000 times. The sequence is defined by a starting value a_0 and each subsequent term is:\n    a_{n+1} = the square root of a_n if the a_n is a perfect square, and a_n + 3 otherwise.\n\n    For a given a_0 (that is a multiple of 3), the goal is to find 1000 indices where the a_i's are all equal.\n\n    Sample input:\n    9\n\n    Sample output:\n    [0, 3, 6, ..., 2997]\n\n    The sequence starting with a0=9 is [9, 3, 6, 9, 3, 6, 9, ...] thus a_n at where n is a multiple of 3 are\n    all equal in this case.\n    \"\"\"",
    "sol_bodies": [
      "    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans"
    ],
    "module": "IMO.py",
    "notes": "Note: This problem is much easier than the IMO problem which also required a proof that it is impossible\nfor a_0 not divisible by 3.\n\nInspired by [IMO 2017 Problem 1](https://www.imo-official.org/problems.aspx)",
    "weight": 1.0
  },
  {
    "name": "FindRepeats:4",
    "sat": "def sat(indices: List[int], a0=962856):\n    assert a0 >= 0 and a0 % 3 == 0, \"Hint: a_0 is a multiple of 3.\"\n    s = [a0]\n    for i in range(max(indices)):\n        s.append(int(s[-1] ** 0.5) if int(s[-1] ** 0.5) ** 2 == s[-1] else s[-1] + 3)\n    return len(indices) == len(set(indices)) == 1000 and min(indices) >= 0 and len({s[i] for i in indices}) == 1",
    "ans_type": "List[int]",
    "sol_header": "def sol(a0=962856):",
    "sol_docstring": "    \"\"\"\n    Find a repeating integer in an infinite sequence of integers, specifically the indices for which the same value\n    occurs 1000 times. The sequence is defined by a starting value a_0 and each subsequent term is:\n    a_{n+1} = the square root of a_n if the a_n is a perfect square, and a_n + 3 otherwise.\n\n    For a given a_0 (that is a multiple of 3), the goal is to find 1000 indices where the a_i's are all equal.\n\n    Sample input:\n    9\n\n    Sample output:\n    [0, 3, 6, ..., 2997]\n\n    The sequence starting with a0=9 is [9, 3, 6, 9, 3, 6, 9, ...] thus a_n at where n is a multiple of 3 are\n    all equal in this case.\n    \"\"\"",
    "sol_bodies": [
      "    n = a0\n    ans = []\n    i = 0\n    while len(ans) < 1000:\n        if n == 3:  # use the fact that 3 will repeat infinitely often\n            ans.append(i)\n        n = int(n ** 0.5) if int(n ** 0.5) ** 2 == n else n + 3\n        i += 1\n    return ans"
    ],
    "module": "IMO.py",
    "notes": "Note: This problem is much easier than the IMO problem which also required a proof that it is impossible\nfor a_0 not divisible by 3.\n\nInspired by [IMO 2017 Problem 1](https://www.imo-official.org/problems.aspx)",
    "weight": 1.0
  },
  {
    "name": "PickNearNeighbors:0",
    "sat": "def sat(keep: List[bool], heights=[10, 2, 14, 1, 8, 19, 16, 6, 12, 3, 17, 0, 9, 18, 5, 7, 11, 13, 15, 4]):\n    n = int(len(heights) ** 0.5)\n    assert sorted(heights) == list(range(n * n + n)), \"hint: heights is a permutation of range(n * n + n)\"\n    kept = [i for i, k in zip(heights, keep) if k]\n    assert len(kept) == 2 * n, \"must keep 2n items\"\n    pi = sorted(range(2 * n), key=lambda i: kept[i])  # the sort indices\n    return all(abs(pi[2 * i] - pi[2 * i + 1]) == 1 for i in range(n))",
    "ans_type": "List[bool]",
    "sol_header": "def sol(heights=[10, 2, 14, 1, 8, 19, 16, 6, 12, 3, 17, 0, 9, 18, 5, 7, 11, 13, 15, 4]):",
    "sol_docstring": "    \"\"\"\n    Given a permutation of the integers up to n(n+1) as a list, choose 2n numbers to keep (in the same order)\n    so that the remaining list of numbers satisfies:\n    * its largest number is next to its second largest number\n    * its third largest number is next to its fourth largest number\n    ...\n    * its second smallest number is next to its smallest number\n\n    Sample input:\n    [4, 0, 5, 3, 1, 2]\n    n = 2\n\n    Sample output:\n    [True, False, True, False, True, True]\n\n    Keeping these indices results in the sublist [4, 5, 1, 2] where 4 and 5 are adjacent as are 1 and 2.\n    \"\"\"",
    "sol_bodies": [
      "    # Based on the judge's solution.\n    n = int(len(heights) ** 0.5)\n    assert sorted(heights) == list(range(n * (n + 1)))\n    groups = [h // (n + 1) for h in heights]\n    ans = [False] * len(heights)\n    a = 0\n    used_groups = set()\n    while sum(ans) < 2 * n:\n        group_tracker = {}\n        b = a\n        while groups[b] not in group_tracker or groups[b] in used_groups:\n            group_tracker[groups[b]] = b\n            b += 1\n        ans[group_tracker[groups[b]]] = True\n        ans[b] = True\n        used_groups.add(groups[b])\n        a = b + 1\n    return ans"
    ],
    "module": "IMO.py",
    "notes": "Inspired by [IMO 2017 Problem 5](https://www.imo-official.org/problems.aspx)\n\nThe puzzle solution follows the judge's proof closely.",
    "weight": 1.0
  },
  {
    "name": "PickNearNeighbors:1",
    "sat": "def sat(keep: List[bool], heights=[6, 12, 26, 4, 25, 20, 15, 14, 18, 22, 19, 23, 27, 13, 9, 28, 17, 11, 29, 7, 1, 10, 2, 0, 21, 3, 5, 8, 16, 24]):\n    n = int(len(heights) ** 0.5)\n    assert sorted(heights) == list(range(n * n + n)), \"hint: heights is a permutation of range(n * n + n)\"\n    kept = [i for i, k in zip(heights, keep) if k]\n    assert len(kept) == 2 * n, \"must keep 2n items\"\n    pi = sorted(range(2 * n), key=lambda i: kept[i])  # the sort indices\n    return all(abs(pi[2 * i] - pi[2 * i + 1]) == 1 for i in range(n))",
    "ans_type": "List[bool]",
    "sol_header": "def sol(heights=[6, 12, 26, 4, 25, 20, 15, 14, 18, 22, 19, 23, 27, 13, 9, 28, 17, 11, 29, 7, 1, 10, 2, 0, 21, 3, 5, 8, 16, 24]):",
    "sol_docstring": "    \"\"\"\n    Given a permutation of the integers up to n(n+1) as a list, choose 2n numbers to keep (in the same order)\n    so that the remaining list of numbers satisfies:\n    * its largest number is next to its second largest number\n    * its third largest number is next to its fourth largest number\n    ...\n    * its second smallest number is next to its smallest number\n\n    Sample input:\n    [4, 0, 5, 3, 1, 2]\n    n = 2\n\n    Sample output:\n    [True, False, True, False, True, True]\n\n    Keeping these indices results in the sublist [4, 5, 1, 2] where 4 and 5 are adjacent as are 1 and 2.\n    \"\"\"",
    "sol_bodies": [
      "    # Based on the judge's solution.\n    n = int(len(heights) ** 0.5)\n    assert sorted(heights) == list(range(n * (n + 1)))\n    groups = [h // (n + 1) for h in heights]\n    ans = [False] * len(heights)\n    a = 0\n    used_groups = set()\n    while sum(ans) < 2 * n:\n        group_tracker = {}\n        b = a\n        while groups[b] not in group_tracker or groups[b] in used_groups:\n            group_tracker[groups[b]] = b\n            b += 1\n        ans[group_tracker[groups[b]]] = True\n        ans[b] = True\n        used_groups.add(groups[b])\n        a = b + 1\n    return ans"
    ],
    "module": "IMO.py",
    "notes": "Inspired by [IMO 2017 Problem 5](https://www.imo-official.org/problems.aspx)\n\nThe puzzle solution follows the judge's proof closely.",
    "weight": 1.0
  },
  {
    "name": "PickNearNeighbors:2",
    "sat": "def sat(keep: List[bool], heights=[6, 8, 0, 7, 4, 9, 10, 1, 5, 3, 11, 2]):\n    n = int(len(heights) ** 0.5)\n    assert sorted(heights) == list(range(n * n + n)), \"hint: heights is a permutation of range(n * n + n)\"\n    kept = [i for i, k in zip(heights, keep) if k]\n    assert len(kept) == 2 * n, \"must keep 2n items\"\n    pi = sorted(range(2 * n), key=lambda i: kept[i])  # the sort indices\n    return all(abs(pi[2 * i] - pi[2 * i + 1]) == 1 for i in range(n))",
    "ans_type": "List[bool]",
    "sol_header": "def sol(heights=[6, 8, 0, 7, 4, 9, 10, 1, 5, 3, 11, 2]):",
    "sol_docstring": "    \"\"\"\n    Given a permutation of the integers up to n(n+1) as a list, choose 2n numbers to keep (in the same order)\n    so that the remaining list of numbers satisfies:\n    * its largest number is next to its second largest number\n    * its third largest number is next to its fourth largest number\n    ...\n    * its second smallest number is next to its smallest number\n\n    Sample input:\n    [4, 0, 5, 3, 1, 2]\n    n = 2\n\n    Sample output:\n    [True, False, True, False, True, True]\n\n    Keeping these indices results in the sublist [4, 5, 1, 2] where 4 and 5 are adjacent as are 1 and 2.\n    \"\"\"",
    "sol_bodies": [
      "    # Based on the judge's solution.\n    n = int(len(heights) ** 0.5)\n    assert sorted(heights) == list(range(n * (n + 1)))\n    groups = [h // (n + 1) for h in heights]\n    ans = [False] * len(heights)\n    a = 0\n    used_groups = set()\n    while sum(ans) < 2 * n:\n        group_tracker = {}\n        b = a\n        while groups[b] not in group_tracker or groups[b] in used_groups:\n            group_tracker[groups[b]] = b\n            b += 1\n        ans[group_tracker[groups[b]]] = True\n        ans[b] = True\n        used_groups.add(groups[b])\n        a = b + 1\n    return ans"
    ],
    "module": "IMO.py",
    "notes": "Inspired by [IMO 2017 Problem 5](https://www.imo-official.org/problems.aspx)\n\nThe puzzle solution follows the judge's proof closely.",
    "weight": 1.0
  },
  {
    "name": "PickNearNeighbors:3",
    "sat": "def sat(keep: List[bool], heights=[46, 61, 80, 16, 71, 32, 13, 12, 2, 75, 62, 56, 17, 28, 67, 54, 22, 27, 38, 63, 69, 84, 70, 57, 86, 72, 66, 8, 41, 3, 23, 88, 83, 58, 36, 50, 65, 30, 34, 25, 39, 20, 78, 79, 59, 4, 21, 73, 45, 37, 48, 77, 10, 44, 14, 43, 42, 0, 33, 29, 7, 52, 5, 60, 68, 9, 26, 49, 40, 76, 31, 6, 85, 74, 24, 51, 1, 89, 11, 47, 18, 19, 81, 87, 35, 64, 82, 15, 55, 53]):\n    n = int(len(heights) ** 0.5)\n    assert sorted(heights) == list(range(n * n + n)), \"hint: heights is a permutation of range(n * n + n)\"\n    kept = [i for i, k in zip(heights, keep) if k]\n    assert len(kept) == 2 * n, \"must keep 2n items\"\n    pi = sorted(range(2 * n), key=lambda i: kept[i])  # the sort indices\n    return all(abs(pi[2 * i] - pi[2 * i + 1]) == 1 for i in range(n))",
    "ans_type": "List[bool]",
    "sol_header": "def sol(heights=[46, 61, 80, 16, 71, 32, 13, 12, 2, 75, 62, 56, 17, 28, 67, 54, 22, 27, 38, 63, 69, 84, 70, 57, 86, 72, 66, 8, 41, 3, 23, 88, 83, 58, 36, 50, 65, 30, 34, 25, 39, 20, 78, 79, 59, 4, 21, 73, 45, 37, 48, 77, 10, 44, 14, 43, 42, 0, 33, 29, 7, 52, 5, 60, 68, 9, 26, 49, 40, 76, 31, 6, 85, 74, 24, 51, 1, 89, 11, 47, 18, 19, 81, 87, 35, 64, 82, 15, 55, 53]):",
    "sol_docstring": "    \"\"\"\n    Given a permutation of the integers up to n(n+1) as a list, choose 2n numbers to keep (in the same order)\n    so that the remaining list of numbers satisfies:\n    * its largest number is next to its second largest number\n    * its third largest number is next to its fourth largest number\n    ...\n    * its second smallest number is next to its smallest number\n\n    Sample input:\n    [4, 0, 5, 3, 1, 2]\n    n = 2\n\n    Sample output:\n    [True, False, True, False, True, True]\n\n    Keeping these indices results in the sublist [4, 5, 1, 2] where 4 and 5 are adjacent as are 1 and 2.\n    \"\"\"",
    "sol_bodies": [
      "    # Based on the judge's solution.\n    n = int(len(heights) ** 0.5)\n    assert sorted(heights) == list(range(n * (n + 1)))\n    groups = [h // (n + 1) for h in heights]\n    ans = [False] * len(heights)\n    a = 0\n    used_groups = set()\n    while sum(ans) < 2 * n:\n        group_tracker = {}\n        b = a\n        while groups[b] not in group_tracker or groups[b] in used_groups:\n            group_tracker[groups[b]] = b\n            b += 1\n        ans[group_tracker[groups[b]]] = True\n        ans[b] = True\n        used_groups.add(groups[b])\n        a = b + 1\n    return ans"
    ],
    "module": "IMO.py",
    "notes": "Inspired by [IMO 2017 Problem 5](https://www.imo-official.org/problems.aspx)\n\nThe puzzle solution follows the judge's proof closely.",
    "weight": 1.0
  },
  {
    "name": "PickNearNeighbors:4",
    "sat": "def sat(keep: List[bool], heights=[26, 11, 62, 24, 56, 80, 39, 77, 23, 86, 53, 73, 3, 44, 45, 70, 75, 0, 13, 40, 4, 87, 30, 7, 50, 34, 59, 22, 17, 41, 71, 10, 29, 89, 36, 31, 52, 9, 2, 51, 28, 61, 21, 1, 15, 72, 84, 88, 79, 19, 27, 63, 55, 83, 57, 18, 5, 12, 37, 16, 49, 8, 6, 65, 32, 20, 47, 82, 42, 33, 81, 58, 35, 67, 48, 74, 78, 85, 14, 68, 43, 25, 46, 69, 76, 64, 38, 54, 66, 60]):\n    n = int(len(heights) ** 0.5)\n    assert sorted(heights) == list(range(n * n + n)), \"hint: heights is a permutation of range(n * n + n)\"\n    kept = [i for i, k in zip(heights, keep) if k]\n    assert len(kept) == 2 * n, \"must keep 2n items\"\n    pi = sorted(range(2 * n), key=lambda i: kept[i])  # the sort indices\n    return all(abs(pi[2 * i] - pi[2 * i + 1]) == 1 for i in range(n))",
    "ans_type": "List[bool]",
    "sol_header": "def sol(heights=[26, 11, 62, 24, 56, 80, 39, 77, 23, 86, 53, 73, 3, 44, 45, 70, 75, 0, 13, 40, 4, 87, 30, 7, 50, 34, 59, 22, 17, 41, 71, 10, 29, 89, 36, 31, 52, 9, 2, 51, 28, 61, 21, 1, 15, 72, 84, 88, 79, 19, 27, 63, 55, 83, 57, 18, 5, 12, 37, 16, 49, 8, 6, 65, 32, 20, 47, 82, 42, 33, 81, 58, 35, 67, 48, 74, 78, 85, 14, 68, 43, 25, 46, 69, 76, 64, 38, 54, 66, 60]):",
    "sol_docstring": "    \"\"\"\n    Given a permutation of the integers up to n(n+1) as a list, choose 2n numbers to keep (in the same order)\n    so that the remaining list of numbers satisfies:\n    * its largest number is next to its second largest number\n    * its third largest number is next to its fourth largest number\n    ...\n    * its second smallest number is next to its smallest number\n\n    Sample input:\n    [4, 0, 5, 3, 1, 2]\n    n = 2\n\n    Sample output:\n    [True, False, True, False, True, True]\n\n    Keeping these indices results in the sublist [4, 5, 1, 2] where 4 and 5 are adjacent as are 1 and 2.\n    \"\"\"",
    "sol_bodies": [
      "    # Based on the judge's solution.\n    n = int(len(heights) ** 0.5)\n    assert sorted(heights) == list(range(n * (n + 1)))\n    groups = [h // (n + 1) for h in heights]\n    ans = [False] * len(heights)\n    a = 0\n    used_groups = set()\n    while sum(ans) < 2 * n:\n        group_tracker = {}\n        b = a\n        while groups[b] not in group_tracker or groups[b] in used_groups:\n            group_tracker[groups[b]] = b\n            b += 1\n        ans[group_tracker[groups[b]]] = True\n        ans[b] = True\n        used_groups.add(groups[b])\n        a = b + 1\n    return ans"
    ],
    "module": "IMO.py",
    "notes": "Inspired by [IMO 2017 Problem 5](https://www.imo-official.org/problems.aspx)\n\nThe puzzle solution follows the judge's proof closely.",
    "weight": 1.0
  },
  {
    "name": "FindProductiveList:0",
    "sat": "def sat(li: List[int], n=18):\n    assert n % 3 == 0, \"Hint: n is a multiple of 3\"\n    return len(li) == n and all(li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n))",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=18):",
    "sol_docstring": "    \"\"\"\n    Given n, find n integers such that li[i] * li[i+1] + 1 == li[i+2], for i = 0, 1, ..., n-1\n    where indices >= n \"wrap around\". Note: only n multiples of 3 are given since this is only possible for n\n    that are multiples of 3 (as proven in the IMO problem).\n\n    Sample input:\n    6\n\n    Sample output:\n    [_, _, _, _, _, _]\n\n    (Sample output hidden because showing sample output would give away too much information.)\n    \"\"\"",
    "sol_bodies": [
      "    return [-1, -1, 2] * (n // 3)"
    ],
    "module": "IMO.py",
    "notes": "Note: This problem is easier than the IMO problem because the hard part is proving that sequences do not\nexists for non-multiples of 3.\n\nInspired by [IMO 2010 Problem 5](https://www.imo-official.org/problems.aspx)",
    "weight": 1.0
  },
  {
    "name": "FindProductiveList:1",
    "sat": "def sat(li: List[int], n=3):\n    assert n % 3 == 0, \"Hint: n is a multiple of 3\"\n    return len(li) == n and all(li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n))",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=3):",
    "sol_docstring": "    \"\"\"\n    Given n, find n integers such that li[i] * li[i+1] + 1 == li[i+2], for i = 0, 1, ..., n-1\n    where indices >= n \"wrap around\". Note: only n multiples of 3 are given since this is only possible for n\n    that are multiples of 3 (as proven in the IMO problem).\n\n    Sample input:\n    6\n\n    Sample output:\n    [_, _, _, _, _, _]\n\n    (Sample output hidden because showing sample output would give away too much information.)\n    \"\"\"",
    "sol_bodies": [
      "    return [-1, -1, 2] * (n // 3)"
    ],
    "module": "IMO.py",
    "notes": "Note: This problem is easier than the IMO problem because the hard part is proving that sequences do not\nexists for non-multiples of 3.\n\nInspired by [IMO 2010 Problem 5](https://www.imo-official.org/problems.aspx)",
    "weight": 1.0
  },
  {
    "name": "FindProductiveList:2",
    "sat": "def sat(li: List[int], n=6):\n    assert n % 3 == 0, \"Hint: n is a multiple of 3\"\n    return len(li) == n and all(li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n))",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=6):",
    "sol_docstring": "    \"\"\"\n    Given n, find n integers such that li[i] * li[i+1] + 1 == li[i+2], for i = 0, 1, ..., n-1\n    where indices >= n \"wrap around\". Note: only n multiples of 3 are given since this is only possible for n\n    that are multiples of 3 (as proven in the IMO problem).\n\n    Sample input:\n    6\n\n    Sample output:\n    [_, _, _, _, _, _]\n\n    (Sample output hidden because showing sample output would give away too much information.)\n    \"\"\"",
    "sol_bodies": [
      "    return [-1, -1, 2] * (n // 3)"
    ],
    "module": "IMO.py",
    "notes": "Note: This problem is easier than the IMO problem because the hard part is proving that sequences do not\nexists for non-multiples of 3.\n\nInspired by [IMO 2010 Problem 5](https://www.imo-official.org/problems.aspx)",
    "weight": 1.0
  },
  {
    "name": "FindProductiveList:3",
    "sat": "def sat(li: List[int], n=9):\n    assert n % 3 == 0, \"Hint: n is a multiple of 3\"\n    return len(li) == n and all(li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n))",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=9):",
    "sol_docstring": "    \"\"\"\n    Given n, find n integers such that li[i] * li[i+1] + 1 == li[i+2], for i = 0, 1, ..., n-1\n    where indices >= n \"wrap around\". Note: only n multiples of 3 are given since this is only possible for n\n    that are multiples of 3 (as proven in the IMO problem).\n\n    Sample input:\n    6\n\n    Sample output:\n    [_, _, _, _, _, _]\n\n    (Sample output hidden because showing sample output would give away too much information.)\n    \"\"\"",
    "sol_bodies": [
      "    return [-1, -1, 2] * (n // 3)"
    ],
    "module": "IMO.py",
    "notes": "Note: This problem is easier than the IMO problem because the hard part is proving that sequences do not\nexists for non-multiples of 3.\n\nInspired by [IMO 2010 Problem 5](https://www.imo-official.org/problems.aspx)",
    "weight": 1.0
  },
  {
    "name": "FindProductiveList:4",
    "sat": "def sat(li: List[int], n=12):\n    assert n % 3 == 0, \"Hint: n is a multiple of 3\"\n    return len(li) == n and all(li[(i + 2) % n] == 1 + li[(i + 1) % n] * li[i] for i in range(n))",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=12):",
    "sol_docstring": "    \"\"\"\n    Given n, find n integers such that li[i] * li[i+1] + 1 == li[i+2], for i = 0, 1, ..., n-1\n    where indices >= n \"wrap around\". Note: only n multiples of 3 are given since this is only possible for n\n    that are multiples of 3 (as proven in the IMO problem).\n\n    Sample input:\n    6\n\n    Sample output:\n    [_, _, _, _, _, _]\n\n    (Sample output hidden because showing sample output would give away too much information.)\n    \"\"\"",
    "sol_bodies": [
      "    return [-1, -1, 2] * (n // 3)"
    ],
    "module": "IMO.py",
    "notes": "Note: This problem is easier than the IMO problem because the hard part is proving that sequences do not\nexists for non-multiples of 3.\n\nInspired by [IMO 2010 Problem 5](https://www.imo-official.org/problems.aspx)",
    "weight": 1.0
  },
  {
    "name": "HalfTag:0",
    "sat": "def sat(li: List[int], tags=[3, 0, 3, 2, 0, 1, 0, 3, 1, 1, 2, 2, 0, 2, 1, 3]):\n    n = max(tags) + 1\n    assert sorted(tags) == sorted(list(range(n)) * 4), \"hint: each tag occurs exactly four times\"\n    assert len(li) == len(set(li)) and min(li) >= 0\n    return sum(li) * 2 == sum(range(4 * n)) and sorted([tags[i] for i in li]) == [i // 2 for i in range(2 * n)]",
    "ans_type": "List[int]",
    "sol_header": "def sol(tags=[3, 0, 3, 2, 0, 1, 0, 3, 1, 1, 2, 2, 0, 2, 1, 3]):",
    "sol_docstring": "    \"\"\"\n    The input tags is a list of 4n integer tags each in range(n) with each tag occurring 4 times.\n    The goal is to find a subset (list) li of half the indices such that:\n    * The sum of the indices equals the sum of the sum of the missing indices.\n    * The tags of the chosen indices contains exactly each number in range(n) twice.\n\n    Sample input:\n    n = 3\n    tags = [0, 1, 2, 0, 0, 1, 1, 1, 2, 2, 0, 2]\n\n    Sample output:\n    [0, 3, 5, 6, 8, 11]\n\n    Note the sum of the output is 33 = (0+1+2+...+11)/2 and the selected tags are [0, 0, 1, 1, 2, 2]\n    \"\"\"",
    "sol_bodies": [
      "    n = max(tags) + 1\n    pairs = {(i, 4 * n - i - 1) for i in range(2 * n)}\n    by_tag = {tag: [] for tag in range(n)}\n    for p in pairs:\n        a, b = [tags[i] for i in p]\n        by_tag[a].append(p)\n        by_tag[b].append(p)\n    cycles = []\n    cycle = []\n    while pairs:\n        if not cycle:  # start new cycle\n            p = pairs.pop()\n            pairs.add(p)  # just to pick a tag\n            tag = tags[p[0]]\n            # print(\"Starting cycle with tag\", tag)\n        p = by_tag[tag].pop()\n        a, b = [tags[i] for i in p]\n        # print(p, a, b)\n        tag = a if a != tag else b\n        by_tag[tag].remove(p)\n        cycle.append(p if tag == b else p[::-1])\n        pairs.remove(p)\n        if not by_tag[tag]:\n            cycles.append(cycle)\n            cycle = []\n\n    while any(len(c) % 2 for c in cycles):\n        cycle_tags = [{tags[k] for p in c for k in p} for c in cycles]\n        merged = False\n        for i in range(len(cycles)):\n            for j in range(i):\n                intersection = cycle_tags[i].intersection(cycle_tags[j])\n                if intersection:\n                    c = intersection.pop()\n                    # print(f\"Merging cycle {i} and cycle {j} at tag {c}\", cycles)\n                    cycle_i = cycles.pop(i)\n                    for i1, p in enumerate(cycle_i):\n                        if tags[p[0]] == c:\n                            break\n                    for j1, p in enumerate(cycles[j]):\n                        if tags[p[0]] == c:\n                            break\n                    cycles[j][j1:j1] = cycle_i[i1:] + cycle_i[:i1]\n                    merged = True\n                    break\n            if merged:\n                break\n\n    ans = []\n    for c in cycles:\n        for i, p in enumerate(c):\n            if i % 2:\n                ans += p\n\n    return ans"
    ],
    "module": "IMO.py",
    "notes": "Inspired by [IMO 2020 Problem 3](https://www.imo-official.org/problems.aspx)",
    "weight": 1.0
  },
  {
    "name": "HalfTag:1",
    "sat": "def sat(li: List[int], tags=[2, 3, 1, 0, 3, 3, 0, 2, 1, 3, 1, 0, 1, 2, 2, 0]):\n    n = max(tags) + 1\n    assert sorted(tags) == sorted(list(range(n)) * 4), \"hint: each tag occurs exactly four times\"\n    assert len(li) == len(set(li)) and min(li) >= 0\n    return sum(li) * 2 == sum(range(4 * n)) and sorted([tags[i] for i in li]) == [i // 2 for i in range(2 * n)]",
    "ans_type": "List[int]",
    "sol_header": "def sol(tags=[2, 3, 1, 0, 3, 3, 0, 2, 1, 3, 1, 0, 1, 2, 2, 0]):",
    "sol_docstring": "    \"\"\"\n    The input tags is a list of 4n integer tags each in range(n) with each tag occurring 4 times.\n    The goal is to find a subset (list) li of half the indices such that:\n    * The sum of the indices equals the sum of the sum of the missing indices.\n    * The tags of the chosen indices contains exactly each number in range(n) twice.\n\n    Sample input:\n    n = 3\n    tags = [0, 1, 2, 0, 0, 1, 1, 1, 2, 2, 0, 2]\n\n    Sample output:\n    [0, 3, 5, 6, 8, 11]\n\n    Note the sum of the output is 33 = (0+1+2+...+11)/2 and the selected tags are [0, 0, 1, 1, 2, 2]\n    \"\"\"",
    "sol_bodies": [
      "    n = max(tags) + 1\n    pairs = {(i, 4 * n - i - 1) for i in range(2 * n)}\n    by_tag = {tag: [] for tag in range(n)}\n    for p in pairs:\n        a, b = [tags[i] for i in p]\n        by_tag[a].append(p)\n        by_tag[b].append(p)\n    cycles = []\n    cycle = []\n    while pairs:\n        if not cycle:  # start new cycle\n            p = pairs.pop()\n            pairs.add(p)  # just to pick a tag\n            tag = tags[p[0]]\n            # print(\"Starting cycle with tag\", tag)\n        p = by_tag[tag].pop()\n        a, b = [tags[i] for i in p]\n        # print(p, a, b)\n        tag = a if a != tag else b\n        by_tag[tag].remove(p)\n        cycle.append(p if tag == b else p[::-1])\n        pairs.remove(p)\n        if not by_tag[tag]:\n            cycles.append(cycle)\n            cycle = []\n\n    while any(len(c) % 2 for c in cycles):\n        cycle_tags = [{tags[k] for p in c for k in p} for c in cycles]\n        merged = False\n        for i in range(len(cycles)):\n            for j in range(i):\n                intersection = cycle_tags[i].intersection(cycle_tags[j])\n                if intersection:\n                    c = intersection.pop()\n                    # print(f\"Merging cycle {i} and cycle {j} at tag {c}\", cycles)\n                    cycle_i = cycles.pop(i)\n                    for i1, p in enumerate(cycle_i):\n                        if tags[p[0]] == c:\n                            break\n                    for j1, p in enumerate(cycles[j]):\n                        if tags[p[0]] == c:\n                            break\n                    cycles[j][j1:j1] = cycle_i[i1:] + cycle_i[:i1]\n                    merged = True\n                    break\n            if merged:\n                break\n\n    ans = []\n    for c in cycles:\n        for i, p in enumerate(c):\n            if i % 2:\n                ans += p\n\n    return ans"
    ],
    "module": "IMO.py",
    "notes": "Inspired by [IMO 2020 Problem 3](https://www.imo-official.org/problems.aspx)",
    "weight": 1.0
  },
  {
    "name": "HalfTag:2",
    "sat": "def sat(li: List[int], tags=[4, 1, 6, 5, 6, 4, 2, 1, 6, 2, 3, 1, 4, 6, 5, 2, 3, 5, 0, 5, 0, 3, 0, 0, 4, 2, 3, 1]):\n    n = max(tags) + 1\n    assert sorted(tags) == sorted(list(range(n)) * 4), \"hint: each tag occurs exactly four times\"\n    assert len(li) == len(set(li)) and min(li) >= 0\n    return sum(li) * 2 == sum(range(4 * n)) and sorted([tags[i] for i in li]) == [i // 2 for i in range(2 * n)]",
    "ans_type": "List[int]",
    "sol_header": "def sol(tags=[4, 1, 6, 5, 6, 4, 2, 1, 6, 2, 3, 1, 4, 6, 5, 2, 3, 5, 0, 5, 0, 3, 0, 0, 4, 2, 3, 1]):",
    "sol_docstring": "    \"\"\"\n    The input tags is a list of 4n integer tags each in range(n) with each tag occurring 4 times.\n    The goal is to find a subset (list) li of half the indices such that:\n    * The sum of the indices equals the sum of the sum of the missing indices.\n    * The tags of the chosen indices contains exactly each number in range(n) twice.\n\n    Sample input:\n    n = 3\n    tags = [0, 1, 2, 0, 0, 1, 1, 1, 2, 2, 0, 2]\n\n    Sample output:\n    [0, 3, 5, 6, 8, 11]\n\n    Note the sum of the output is 33 = (0+1+2+...+11)/2 and the selected tags are [0, 0, 1, 1, 2, 2]\n    \"\"\"",
    "sol_bodies": [
      "    n = max(tags) + 1\n    pairs = {(i, 4 * n - i - 1) for i in range(2 * n)}\n    by_tag = {tag: [] for tag in range(n)}\n    for p in pairs:\n        a, b = [tags[i] for i in p]\n        by_tag[a].append(p)\n        by_tag[b].append(p)\n    cycles = []\n    cycle = []\n    while pairs:\n        if not cycle:  # start new cycle\n            p = pairs.pop()\n            pairs.add(p)  # just to pick a tag\n            tag = tags[p[0]]\n            # print(\"Starting cycle with tag\", tag)\n        p = by_tag[tag].pop()\n        a, b = [tags[i] for i in p]\n        # print(p, a, b)\n        tag = a if a != tag else b\n        by_tag[tag].remove(p)\n        cycle.append(p if tag == b else p[::-1])\n        pairs.remove(p)\n        if not by_tag[tag]:\n            cycles.append(cycle)\n            cycle = []\n\n    while any(len(c) % 2 for c in cycles):\n        cycle_tags = [{tags[k] for p in c for k in p} for c in cycles]\n        merged = False\n        for i in range(len(cycles)):\n            for j in range(i):\n                intersection = cycle_tags[i].intersection(cycle_tags[j])\n                if intersection:\n                    c = intersection.pop()\n                    # print(f\"Merging cycle {i} and cycle {j} at tag {c}\", cycles)\n                    cycle_i = cycles.pop(i)\n                    for i1, p in enumerate(cycle_i):\n                        if tags[p[0]] == c:\n                            break\n                    for j1, p in enumerate(cycles[j]):\n                        if tags[p[0]] == c:\n                            break\n                    cycles[j][j1:j1] = cycle_i[i1:] + cycle_i[:i1]\n                    merged = True\n                    break\n            if merged:\n                break\n\n    ans = []\n    for c in cycles:\n        for i, p in enumerate(c):\n            if i % 2:\n                ans += p\n\n    return ans"
    ],
    "module": "IMO.py",
    "notes": "Inspired by [IMO 2020 Problem 3](https://www.imo-official.org/problems.aspx)",
    "weight": 1.0
  },
  {
    "name": "HalfTag:3",
    "sat": "def sat(li: List[int], tags=[0, 2, 1, 1, 1, 1, 2, 2, 0, 0, 0, 2]):\n    n = max(tags) + 1\n    assert sorted(tags) == sorted(list(range(n)) * 4), \"hint: each tag occurs exactly four times\"\n    assert len(li) == len(set(li)) and min(li) >= 0\n    return sum(li) * 2 == sum(range(4 * n)) and sorted([tags[i] for i in li]) == [i // 2 for i in range(2 * n)]",
    "ans_type": "List[int]",
    "sol_header": "def sol(tags=[0, 2, 1, 1, 1, 1, 2, 2, 0, 0, 0, 2]):",
    "sol_docstring": "    \"\"\"\n    The input tags is a list of 4n integer tags each in range(n) with each tag occurring 4 times.\n    The goal is to find a subset (list) li of half the indices such that:\n    * The sum of the indices equals the sum of the sum of the missing indices.\n    * The tags of the chosen indices contains exactly each number in range(n) twice.\n\n    Sample input:\n    n = 3\n    tags = [0, 1, 2, 0, 0, 1, 1, 1, 2, 2, 0, 2]\n\n    Sample output:\n    [0, 3, 5, 6, 8, 11]\n\n    Note the sum of the output is 33 = (0+1+2+...+11)/2 and the selected tags are [0, 0, 1, 1, 2, 2]\n    \"\"\"",
    "sol_bodies": [
      "    n = max(tags) + 1\n    pairs = {(i, 4 * n - i - 1) for i in range(2 * n)}\n    by_tag = {tag: [] for tag in range(n)}\n    for p in pairs:\n        a, b = [tags[i] for i in p]\n        by_tag[a].append(p)\n        by_tag[b].append(p)\n    cycles = []\n    cycle = []\n    while pairs:\n        if not cycle:  # start new cycle\n            p = pairs.pop()\n            pairs.add(p)  # just to pick a tag\n            tag = tags[p[0]]\n            # print(\"Starting cycle with tag\", tag)\n        p = by_tag[tag].pop()\n        a, b = [tags[i] for i in p]\n        # print(p, a, b)\n        tag = a if a != tag else b\n        by_tag[tag].remove(p)\n        cycle.append(p if tag == b else p[::-1])\n        pairs.remove(p)\n        if not by_tag[tag]:\n            cycles.append(cycle)\n            cycle = []\n\n    while any(len(c) % 2 for c in cycles):\n        cycle_tags = [{tags[k] for p in c for k in p} for c in cycles]\n        merged = False\n        for i in range(len(cycles)):\n            for j in range(i):\n                intersection = cycle_tags[i].intersection(cycle_tags[j])\n                if intersection:\n                    c = intersection.pop()\n                    # print(f\"Merging cycle {i} and cycle {j} at tag {c}\", cycles)\n                    cycle_i = cycles.pop(i)\n                    for i1, p in enumerate(cycle_i):\n                        if tags[p[0]] == c:\n                            break\n                    for j1, p in enumerate(cycles[j]):\n                        if tags[p[0]] == c:\n                            break\n                    cycles[j][j1:j1] = cycle_i[i1:] + cycle_i[:i1]\n                    merged = True\n                    break\n            if merged:\n                break\n\n    ans = []\n    for c in cycles:\n        for i, p in enumerate(c):\n            if i % 2:\n                ans += p\n\n    return ans"
    ],
    "module": "IMO.py",
    "notes": "Inspired by [IMO 2020 Problem 3](https://www.imo-official.org/problems.aspx)",
    "weight": 1.0
  },
  {
    "name": "HalfTag:4",
    "sat": "def sat(li: List[int], tags=[1, 2, 6, 0, 6, 2, 4, 7, 4, 0, 0, 5, 0, 3, 2, 1, 7, 5, 5, 3, 1, 7, 2, 7, 6, 6, 3, 3, 1, 4, 4, 5]):\n    n = max(tags) + 1\n    assert sorted(tags) == sorted(list(range(n)) * 4), \"hint: each tag occurs exactly four times\"\n    assert len(li) == len(set(li)) and min(li) >= 0\n    return sum(li) * 2 == sum(range(4 * n)) and sorted([tags[i] for i in li]) == [i // 2 for i in range(2 * n)]",
    "ans_type": "List[int]",
    "sol_header": "def sol(tags=[1, 2, 6, 0, 6, 2, 4, 7, 4, 0, 0, 5, 0, 3, 2, 1, 7, 5, 5, 3, 1, 7, 2, 7, 6, 6, 3, 3, 1, 4, 4, 5]):",
    "sol_docstring": "    \"\"\"\n    The input tags is a list of 4n integer tags each in range(n) with each tag occurring 4 times.\n    The goal is to find a subset (list) li of half the indices such that:\n    * The sum of the indices equals the sum of the sum of the missing indices.\n    * The tags of the chosen indices contains exactly each number in range(n) twice.\n\n    Sample input:\n    n = 3\n    tags = [0, 1, 2, 0, 0, 1, 1, 1, 2, 2, 0, 2]\n\n    Sample output:\n    [0, 3, 5, 6, 8, 11]\n\n    Note the sum of the output is 33 = (0+1+2+...+11)/2 and the selected tags are [0, 0, 1, 1, 2, 2]\n    \"\"\"",
    "sol_bodies": [
      "    n = max(tags) + 1\n    pairs = {(i, 4 * n - i - 1) for i in range(2 * n)}\n    by_tag = {tag: [] for tag in range(n)}\n    for p in pairs:\n        a, b = [tags[i] for i in p]\n        by_tag[a].append(p)\n        by_tag[b].append(p)\n    cycles = []\n    cycle = []\n    while pairs:\n        if not cycle:  # start new cycle\n            p = pairs.pop()\n            pairs.add(p)  # just to pick a tag\n            tag = tags[p[0]]\n            # print(\"Starting cycle with tag\", tag)\n        p = by_tag[tag].pop()\n        a, b = [tags[i] for i in p]\n        # print(p, a, b)\n        tag = a if a != tag else b\n        by_tag[tag].remove(p)\n        cycle.append(p if tag == b else p[::-1])\n        pairs.remove(p)\n        if not by_tag[tag]:\n            cycles.append(cycle)\n            cycle = []\n\n    while any(len(c) % 2 for c in cycles):\n        cycle_tags = [{tags[k] for p in c for k in p} for c in cycles]\n        merged = False\n        for i in range(len(cycles)):\n            for j in range(i):\n                intersection = cycle_tags[i].intersection(cycle_tags[j])\n                if intersection:\n                    c = intersection.pop()\n                    # print(f\"Merging cycle {i} and cycle {j} at tag {c}\", cycles)\n                    cycle_i = cycles.pop(i)\n                    for i1, p in enumerate(cycle_i):\n                        if tags[p[0]] == c:\n                            break\n                    for j1, p in enumerate(cycles[j]):\n                        if tags[p[0]] == c:\n                            break\n                    cycles[j][j1:j1] = cycle_i[i1:] + cycle_i[:i1]\n                    merged = True\n                    break\n            if merged:\n                break\n\n    ans = []\n    for c in cycles:\n        for i, p in enumerate(c):\n            if i % 2:\n                ans += p\n\n    return ans"
    ],
    "module": "IMO.py",
    "notes": "Inspired by [IMO 2020 Problem 3](https://www.imo-official.org/problems.aspx)",
    "weight": 1.0
  },
  {
    "name": "LearnParity:0",
    "sat": "def sat(inds: List[int], vecs=[169, 203, 409, 50, 37, 479, 370, 133, 53, 159, 161, 367, 474, 107, 82, 447, 385]):\n    return all(sum((v >> i) & 1 for i in inds) % 2 == 1 for v in vecs)",
    "ans_type": "List[int]",
    "sol_header": "def sol(vecs=[169, 203, 409, 50, 37, 479, 370, 133, 53, 159, 161, 367, 474, 107, 82, 447, 385]):",
    "sol_docstring": "    \"\"\"\n    Parity learning: Given binary vectors in a subspace, find the secret set S of indices such that:\n    $\\\\sum_{i \\in S} x_i = 1 (mod 2)$\n    \"\"\"",
    "sol_bodies": [
      "    # Gaussian elimination\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]"
    ],
    "module": "lattices.py",
    "notes": "Parity learning (Gaussian elimination)\n\nThe canonical solution to this \n[Parity learning problem](https://en.wikipedia.org/w/index.php?title=Parity_learning)\nis to use \n[Gaussian Elimination](https://en.wikipedia.org/w/index.php?title=Gaussian_elimination).\n\nThe vectors are encoded as binary integers for succinctness.",
    "weight": 1.0
  },
  {
    "name": "LearnParity:1",
    "sat": "def sat(inds: List[int], vecs=[1958328232218124020, 1643963198527225549, 7078739564566717736, 5024292785179305436, 7542959674027422755, 7659875763009862123, 1092205956673651924, 1597643013927748621, 8004819259007286467, 4932826233956818838, 6008121031475439847, 8573976126290476773, 5118247667071056636, 2694646426329419247, 7155733006249399377, 5712876295003741481, 4259768476395554763, 1716249993608899326, 4687736672428229301, 6210681778471018663, 9062452952374764930, 3938723877971063326, 1992502139321214948, 583369363030182394, 3457048586868388189, 3089092548449370843, 8968870310908511767, 5874530422138404750, 7922800580005142654, 6443496666193763033, 6602916053749454337, 5035040733581952127, 2475911752718112891, 4473209659299430662, 7743622118433343293, 8456447367870793728, 644758190253851892, 854623538268336285, 4412207913445082380, 1836729508450597237, 8168398572945385599, 8115567202327609458, 6194127909595936682, 5497664877254277127, 3302554889776464399, 169133116278786893, 6157732824159736422, 6607461935760996261, 2653530464165680377, 6097504979385382936, 7193369373130246620, 5417605562101462110, 6648984412934108645, 8700023834459359946, 1861165113396388865, 2257883046437023829, 9079372065509233820, 68562947383617624, 3628292069813906054, 5937308782381616795, 7333187108059679183, 3810197266775096468, 6798325309591425591, 4704339148457093019, 7860858474470684593, 1611780128804878195, 8654679384628229346, 8183430433492711995, 6645671523533669548, 8558081500613788587, 7159783655071677682, 812798558819423092]):\n    return all(sum((v >> i) & 1 for i in inds) % 2 == 1 for v in vecs)",
    "ans_type": "List[int]",
    "sol_header": "def sol(vecs=[1958328232218124020, 1643963198527225549, 7078739564566717736, 5024292785179305436, 7542959674027422755, 7659875763009862123, 1092205956673651924, 1597643013927748621, 8004819259007286467, 4932826233956818838, 6008121031475439847, 8573976126290476773, 5118247667071056636, 2694646426329419247, 7155733006249399377, 5712876295003741481, 4259768476395554763, 1716249993608899326, 4687736672428229301, 6210681778471018663, 9062452952374764930, 3938723877971063326, 1992502139321214948, 583369363030182394, 3457048586868388189, 3089092548449370843, 8968870310908511767, 5874530422138404750, 7922800580005142654, 6443496666193763033, 6602916053749454337, 5035040733581952127, 2475911752718112891, 4473209659299430662, 7743622118433343293, 8456447367870793728, 644758190253851892, 854623538268336285, 4412207913445082380, 1836729508450597237, 8168398572945385599, 8115567202327609458, 6194127909595936682, 5497664877254277127, 3302554889776464399, 169133116278786893, 6157732824159736422, 6607461935760996261, 2653530464165680377, 6097504979385382936, 7193369373130246620, 5417605562101462110, 6648984412934108645, 8700023834459359946, 1861165113396388865, 2257883046437023829, 9079372065509233820, 68562947383617624, 3628292069813906054, 5937308782381616795, 7333187108059679183, 3810197266775096468, 6798325309591425591, 4704339148457093019, 7860858474470684593, 1611780128804878195, 8654679384628229346, 8183430433492711995, 6645671523533669548, 8558081500613788587, 7159783655071677682, 812798558819423092]):",
    "sol_docstring": "    \"\"\"\n    Parity learning: Given binary vectors in a subspace, find the secret set S of indices such that:\n    $\\\\sum_{i \\in S} x_i = 1 (mod 2)$\n    \"\"\"",
    "sol_bodies": [
      "    # Gaussian elimination\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]"
    ],
    "module": "lattices.py",
    "notes": "Parity learning (Gaussian elimination)\n\nThe canonical solution to this \n[Parity learning problem](https://en.wikipedia.org/w/index.php?title=Parity_learning)\nis to use \n[Gaussian Elimination](https://en.wikipedia.org/w/index.php?title=Gaussian_elimination).\n\nThe vectors are encoded as binary integers for succinctness.",
    "weight": 10.0
  },
  {
    "name": "LearnParity:2",
    "sat": "def sat(inds: List[int], vecs=[22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12]):\n    return all(sum((v >> i) & 1 for i in inds) % 2 == 1 for v in vecs)",
    "ans_type": "List[int]",
    "sol_header": "def sol(vecs=[22, 30, 1, 28, 28, 12, 20, 28, 6, 14, 14, 6, 1, 12]):",
    "sol_docstring": "    \"\"\"\n    Parity learning: Given binary vectors in a subspace, find the secret set S of indices such that:\n    $\\\\sum_{i \\in S} x_i = 1 (mod 2)$\n    \"\"\"",
    "sol_bodies": [
      "    # Gaussian elimination\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]"
    ],
    "module": "lattices.py",
    "notes": "Parity learning (Gaussian elimination)\n\nThe canonical solution to this \n[Parity learning problem](https://en.wikipedia.org/w/index.php?title=Parity_learning)\nis to use \n[Gaussian Elimination](https://en.wikipedia.org/w/index.php?title=Gaussian_elimination).\n\nThe vectors are encoded as binary integers for succinctness.",
    "weight": 1.0
  },
  {
    "name": "LearnParity:3",
    "sat": "def sat(inds: List[int], vecs=[5, 6, 9, 55, 6, 31, 6, 16, 24, 41, 48, 28, 52, 23, 27]):\n    return all(sum((v >> i) & 1 for i in inds) % 2 == 1 for v in vecs)",
    "ans_type": "List[int]",
    "sol_header": "def sol(vecs=[5, 6, 9, 55, 6, 31, 6, 16, 24, 41, 48, 28, 52, 23, 27]):",
    "sol_docstring": "    \"\"\"\n    Parity learning: Given binary vectors in a subspace, find the secret set S of indices such that:\n    $\\\\sum_{i \\in S} x_i = 1 (mod 2)$\n    \"\"\"",
    "sol_bodies": [
      "    # Gaussian elimination\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]"
    ],
    "module": "lattices.py",
    "notes": "Parity learning (Gaussian elimination)\n\nThe canonical solution to this \n[Parity learning problem](https://en.wikipedia.org/w/index.php?title=Parity_learning)\nis to use \n[Gaussian Elimination](https://en.wikipedia.org/w/index.php?title=Gaussian_elimination).\n\nThe vectors are encoded as binary integers for succinctness.",
    "weight": 1.0
  },
  {
    "name": "LearnParity:4",
    "sat": "def sat(inds: List[int], vecs=[8516734225993, 8185100182945, 925681191808, 6852758827443, 1647526447482, 7173415494645, 7272627207575, 490684374058, 309453951198, 5010777449329, 3573909388048, 5418552144685, 2354966949738, 3516400490509, 1958065498191, 4517527902759, 8040889847030, 5932888153522, 1902421695527, 1024437640956, 929625005771, 7393117046567, 5563161916036, 217261697321, 6156537114007, 2387336255324, 2725651274113, 8047481621773, 6241870535779, 6997209576680, 7206687196929, 7040183664174, 5422186929747, 8413033840571, 8315880876934, 3242378478727, 7554967308490, 3436019794305, 2038166434726, 276174723638, 4876351900994, 2206273239244, 6687501613941, 6284647259481, 4489528628587, 2300167942640, 1193551771601, 5445384214694, 4685093545143, 1178537925748, 8564249470306, 6913390362890]):\n    return all(sum((v >> i) & 1 for i in inds) % 2 == 1 for v in vecs)",
    "ans_type": "List[int]",
    "sol_header": "def sol(vecs=[8516734225993, 8185100182945, 925681191808, 6852758827443, 1647526447482, 7173415494645, 7272627207575, 490684374058, 309453951198, 5010777449329, 3573909388048, 5418552144685, 2354966949738, 3516400490509, 1958065498191, 4517527902759, 8040889847030, 5932888153522, 1902421695527, 1024437640956, 929625005771, 7393117046567, 5563161916036, 217261697321, 6156537114007, 2387336255324, 2725651274113, 8047481621773, 6241870535779, 6997209576680, 7206687196929, 7040183664174, 5422186929747, 8413033840571, 8315880876934, 3242378478727, 7554967308490, 3436019794305, 2038166434726, 276174723638, 4876351900994, 2206273239244, 6687501613941, 6284647259481, 4489528628587, 2300167942640, 1193551771601, 5445384214694, 4685093545143, 1178537925748, 8564249470306, 6913390362890]):",
    "sol_docstring": "    \"\"\"\n    Parity learning: Given binary vectors in a subspace, find the secret set S of indices such that:\n    $\\\\sum_{i \\in S} x_i = 1 (mod 2)$\n    \"\"\"",
    "sol_bodies": [
      "    # Gaussian elimination\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n    ans = []\n    pool = [[0] * (d + 1) for _ in range(d)] + [v + [1] for v in vecs]\n    for i in range(d):\n        pool[i][i] = 1\n\n    for i in range(d):  # zero out bit i\n        for v in pool[d:]:\n            if v[i] == 1:\n                break\n        if v[i] == 0:\n            v = pool[i]\n        assert v[i] == 1  # found a vector with v[i] = 1, subtract it off from those with a 1 in the ith coordinate\n        w = v[:]\n        for v in pool:\n            if v[i] == 1:\n                for j in range(d + 1):\n                    v[j] ^= w[j]\n\n    return [i for i in range(d) if pool[i][-1]]"
    ],
    "module": "lattices.py",
    "notes": "Parity learning (Gaussian elimination)\n\nThe canonical solution to this \n[Parity learning problem](https://en.wikipedia.org/w/index.php?title=Parity_learning)\nis to use \n[Gaussian Elimination](https://en.wikipedia.org/w/index.php?title=Gaussian_elimination).\n\nThe vectors are encoded as binary integers for succinctness.",
    "weight": 10.0
  },
  {
    "name": "LearnParityWithNoise:0",
    "sat": "def sat(inds: List[int], vecs=[26, 5, 32, 3, 15, 18, 31, 13, 24, 25, 34, 5, 15, 24, 16, 13, 0, 27, 37]):\n    return sum(sum((v >> i) & 1 for i in inds) % 2 for v in vecs) >= len(vecs) * 3 / 4",
    "ans_type": "List[int]",
    "sol_header": "def sol(vecs=[26, 5, 32, 3, 15, 18, 31, 13, 24, 25, 34, 5, 15, 24, 16, 13, 0, 27, 37]):",
    "sol_docstring": "    \"\"\"\n    Learning parity with noise: Given binary vectors, find the secret set $S$ of indices such that, for at least\n    3/4 of the vectors, $$sum_{i \\in S} x_i = 1 (mod 2)$$\n    \"\"\"",
    "sol_bodies": [
      "    # brute force\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans"
    ],
    "module": "lattices.py",
    "notes": "Learn parity with noise (*unsolved*)\n\nThe fastest known algorithm to this\n[Parity learning problem](https://en.wikipedia.org/w/index.php?title=Parity_learning)\nruns in time $2^(d/(log d))$\n\nThe example puzzle has small dimension so is easily solvable, but other instances are much harder.",
    "weight": 1.0
  },
  {
    "name": "LearnParityWithNoise:1",
    "sat": "def sat(inds: List[int], vecs=[3026078031409368634, 7146400157417466997, 5230715399550451735, 5711439032267145442, 7548327835869100414, 6708827919346401215, 3738394021903457634, 8572217357536520619, 2068990701252216912, 2527297846676040375, 8268732787978254795, 61203570143025212, 7342810871883169101, 5130109338028331308, 7559050022362805022, 4688300453824606274, 6132540541907873970, 4336830827866175311, 4658177358737495247, 5084071062462878715, 189501720066641238, 8940114256708424722, 5113924146720829221, 4787179834139114336, 4911869756119486218, 8254870450128749041, 4438177035195637074, 5842829643884011320, 4053162460261950208, 2418313591679938260, 3183962173259338720, 5424349679395645015, 8721363683850881601, 4309489519137374818, 4668810188571429750, 1619719991930582198, 7466888377266384808, 9012877516210312432, 5806707934012633661, 4901689063540216433, 5129789419720858519, 5461292526835029654, 8002292066627476387, 22896265023092245, 6377528370731564059, 8326396311104510171, 6275763356808207618, 5855722006919947060, 5284812396814908585, 4183862905187398029, 961125315693824082, 3066435959716339320, 4359457050975539676, 3745610113055211253, 5616892323431402644, 2423996313938618029, 3342319460472332063, 4574429521762476750, 530929890003939982, 6518361635319838485, 4705876417632921613, 8702130161668730198, 7903182592921575528, 141670616557704814, 6302770439830462635, 8261043567365748099, 438838480425402424, 5938030420618506624, 6388919631545923446, 6289510808724564483, 6268010263591290952, 14114260020922590, 7967256030154091406, 7834360030773781051, 7195168470041102120, 2144111587187695127, 4188284497153593189, 7490392562013822833, 2395367579472417027, 1234942756280497811, 149618691938860164, 7115847656533661705, 2829618956277039440, 2931490206384957203, 6476287337767581762, 945977554281930779, 8036974190540567032, 5620546732979542987, 7534852936547208732, 3612963124933737363, 3304259407192763500, 6531357621325258614, 2061695547096959296, 3891046108540743566, 3659303839675510400, 2840571068268977729, 6021300208671005128, 5523531622352728473, 3164481775218709281, 1433373373144701739, 5040760773694741353, 8699918547789986541, 9211723439219092053, 3601466436760036882, 7470213384180375061, 1117614654415514338, 6489709663619239074, 5606821764793080769, 5533040684385323261, 1663669870068057261, 117658820550690687, 5802967177524872313, 824677791803551085, 8130960541536503068, 7941328653734718836, 3551730520657107195, 3183297803310667173, 1744452363855034208, 2206249608643212372, 6805671707252313743, 3765414947444962371, 6871722428624542946, 5429903326499666841, 9118768768355899725, 2775018401536039120, 2838922854846376990, 3633686101842554817, 7756171914139767657, 1797750566355726798, 1145745704236160436, 7192058872525801155]):\n    return sum(sum((v >> i) & 1 for i in inds) % 2 for v in vecs) >= len(vecs) * 3 / 4",
    "ans_type": "List[int]",
    "sol_header": "def sol(vecs=[3026078031409368634, 7146400157417466997, 5230715399550451735, 5711439032267145442, 7548327835869100414, 6708827919346401215, 3738394021903457634, 8572217357536520619, 2068990701252216912, 2527297846676040375, 8268732787978254795, 61203570143025212, 7342810871883169101, 5130109338028331308, 7559050022362805022, 4688300453824606274, 6132540541907873970, 4336830827866175311, 4658177358737495247, 5084071062462878715, 189501720066641238, 8940114256708424722, 5113924146720829221, 4787179834139114336, 4911869756119486218, 8254870450128749041, 4438177035195637074, 5842829643884011320, 4053162460261950208, 2418313591679938260, 3183962173259338720, 5424349679395645015, 8721363683850881601, 4309489519137374818, 4668810188571429750, 1619719991930582198, 7466888377266384808, 9012877516210312432, 5806707934012633661, 4901689063540216433, 5129789419720858519, 5461292526835029654, 8002292066627476387, 22896265023092245, 6377528370731564059, 8326396311104510171, 6275763356808207618, 5855722006919947060, 5284812396814908585, 4183862905187398029, 961125315693824082, 3066435959716339320, 4359457050975539676, 3745610113055211253, 5616892323431402644, 2423996313938618029, 3342319460472332063, 4574429521762476750, 530929890003939982, 6518361635319838485, 4705876417632921613, 8702130161668730198, 7903182592921575528, 141670616557704814, 6302770439830462635, 8261043567365748099, 438838480425402424, 5938030420618506624, 6388919631545923446, 6289510808724564483, 6268010263591290952, 14114260020922590, 7967256030154091406, 7834360030773781051, 7195168470041102120, 2144111587187695127, 4188284497153593189, 7490392562013822833, 2395367579472417027, 1234942756280497811, 149618691938860164, 7115847656533661705, 2829618956277039440, 2931490206384957203, 6476287337767581762, 945977554281930779, 8036974190540567032, 5620546732979542987, 7534852936547208732, 3612963124933737363, 3304259407192763500, 6531357621325258614, 2061695547096959296, 3891046108540743566, 3659303839675510400, 2840571068268977729, 6021300208671005128, 5523531622352728473, 3164481775218709281, 1433373373144701739, 5040760773694741353, 8699918547789986541, 9211723439219092053, 3601466436760036882, 7470213384180375061, 1117614654415514338, 6489709663619239074, 5606821764793080769, 5533040684385323261, 1663669870068057261, 117658820550690687, 5802967177524872313, 824677791803551085, 8130960541536503068, 7941328653734718836, 3551730520657107195, 3183297803310667173, 1744452363855034208, 2206249608643212372, 6805671707252313743, 3765414947444962371, 6871722428624542946, 5429903326499666841, 9118768768355899725, 2775018401536039120, 2838922854846376990, 3633686101842554817, 7756171914139767657, 1797750566355726798, 1145745704236160436, 7192058872525801155]):",
    "sol_docstring": "    \"\"\"\n    Learning parity with noise: Given binary vectors, find the secret set $S$ of indices such that, for at least\n    3/4 of the vectors, $$sum_{i \\in S} x_i = 1 (mod 2)$$\n    \"\"\"",
    "sol_bodies": [],
    "module": "lattices.py",
    "notes": "Learn parity with noise (*unsolved*)\n\nThe fastest known algorithm to this\n[Parity learning problem](https://en.wikipedia.org/w/index.php?title=Parity_learning)\nruns in time $2^(d/(log d))$\n\nThe example puzzle has small dimension so is easily solvable, but other instances are much harder.",
    "weight": 1000.0
  },
  {
    "name": "LearnParityWithNoise:2",
    "sat": "def sat(inds: List[int], vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):\n    return sum(sum((v >> i) & 1 for i in inds) % 2 for v in vecs) >= len(vecs) * 3 / 4",
    "ans_type": "List[int]",
    "sol_header": "def sol(vecs=[576, 823, 480, 899, 652, 1017, 830, 125, 627, 889, 312, 663, 232, 856, 664, 594, 423, 810, 740, 828, 605, 580, 450, 905, 348]):",
    "sol_docstring": "    \"\"\"\n    Learning parity with noise: Given binary vectors, find the secret set $S$ of indices such that, for at least\n    3/4 of the vectors, $$sum_{i \\in S} x_i = 1 (mod 2)$$\n    \"\"\"",
    "sol_bodies": [
      "    # brute force\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans"
    ],
    "module": "lattices.py",
    "notes": "Learn parity with noise (*unsolved*)\n\nThe fastest known algorithm to this\n[Parity learning problem](https://en.wikipedia.org/w/index.php?title=Parity_learning)\nruns in time $2^(d/(log d))$\n\nThe example puzzle has small dimension so is easily solvable, but other instances are much harder.",
    "weight": 1.0
  },
  {
    "name": "LearnParityWithNoise:3",
    "sat": "def sat(inds: List[int], vecs=[378, 819, 695, 649, 492, 277, 471, 241, 159, 733, 625, 355, 300, 241, 683, 445, 769, 167, 985, 346, 243, 546, 851, 476, 309]):\n    return sum(sum((v >> i) & 1 for i in inds) % 2 for v in vecs) >= len(vecs) * 3 / 4",
    "ans_type": "List[int]",
    "sol_header": "def sol(vecs=[378, 819, 695, 649, 492, 277, 471, 241, 159, 733, 625, 355, 300, 241, 683, 445, 769, 167, 985, 346, 243, 546, 851, 476, 309]):",
    "sol_docstring": "    \"\"\"\n    Learning parity with noise: Given binary vectors, find the secret set $S$ of indices such that, for at least\n    3/4 of the vectors, $$sum_{i \\in S} x_i = 1 (mod 2)$$\n    \"\"\"",
    "sol_bodies": [
      "    # brute force\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans"
    ],
    "module": "lattices.py",
    "notes": "Learn parity with noise (*unsolved*)\n\nThe fastest known algorithm to this\n[Parity learning problem](https://en.wikipedia.org/w/index.php?title=Parity_learning)\nruns in time $2^(d/(log d))$\n\nThe example puzzle has small dimension so is easily solvable, but other instances are much harder.",
    "weight": 1.0
  },
  {
    "name": "LearnParityWithNoise:4",
    "sat": "def sat(inds: List[int], vecs=[5, 7, 4, 5, 4, 3, 6, 5, 5, 0, 7]):\n    return sum(sum((v >> i) & 1 for i in inds) % 2 for v in vecs) >= len(vecs) * 3 / 4",
    "ans_type": "List[int]",
    "sol_header": "def sol(vecs=[5, 7, 4, 5, 4, 3, 6, 5, 5, 0, 7]):",
    "sol_docstring": "    \"\"\"\n    Learning parity with noise: Given binary vectors, find the secret set $S$ of indices such that, for at least\n    3/4 of the vectors, $$sum_{i \\in S} x_i = 1 (mod 2)$$\n    \"\"\"",
    "sol_bodies": [
      "    # brute force\n    d = 0  # decode vectors into arrays\n    m = max(vecs)\n    while m:\n        m >>= 1\n        d += 1\n    vecs = [[(n >> i) & 1 for i in range(d)] for n in vecs]\n\n    import random\n    rand = random.Random(0)\n    target = (len(vecs) * 3) // 4\n    max_attempts = 10 ** 5\n    for _ in range(max_attempts):\n        ans = [i for i in range(d) if rand.randrange(2)]\n        if sum(sum(v[i] for i in ans) % 2 for v in vecs) >= len(vecs) * 3 / 4:\n            return ans"
    ],
    "module": "lattices.py",
    "notes": "Learn parity with noise (*unsolved*)\n\nThe fastest known algorithm to this\n[Parity learning problem](https://en.wikipedia.org/w/index.php?title=Parity_learning)\nruns in time $2^(d/(log d))$\n\nThe example puzzle has small dimension so is easily solvable, but other instances are much harder.",
    "weight": 1.0
  },
  {
    "name": "FermatsLastTheorem:0",
    "sat": "def sat(nums: List[int]):\n    a, b, c, n = nums\n    return (a ** n + b ** n == c ** n) and min(a, b, c) > 0 and n > 2",
    "ans_type": "List[int]",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"Find integers a,b,c > 0, n > 2, such such that a^n + b^n == c^n\"\"\"",
    "sol_bodies": [],
    "module": "number_theory.py",
    "notes": "[Fermat's last theorem](https://en.wikipedia.org/w/index.php?title=Fermat%27s_Last_Theorem)\n\nSupposedly unsolvable, but how confident are really in the super-complicated proof?\n\nSee [Wiles, Andrew. \"Modular elliptic curves and Fermat's last theorem.\" Annals of mathematics 141.3 (1995): 443-551.](https://www.jstor.org/stable/2118559)",
    "weight": 1.0
  },
  {
    "name": "GCD:0",
    "sat": "def sat(n: int, a=15482, b=23223, lower_bound=5):\n    return a % n == 0 and b % n == 0 and n >= lower_bound",
    "ans_type": "int",
    "sol_header": "def sol(a=15482, b=23223, lower_bound=5):",
    "sol_docstring": "    \"\"\"Find a large common divisor of two integers.\"\"\"",
    "sol_bodies": [
      "    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n",
      "    def gcd(m, n):\n        if m > n:\n            return gcd(n, m)\n        if m == 0:\n            return n\n        return gcd(n % m, m)\n\n    return gcd(a, b)"
    ],
    "module": "number_theory.py",
    "notes": "[Greatest Common Divisor](https://en.wikipedia.org/w/index.php?title=Greatest_common_divisor&oldid=990943381)\n(GCD)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "weight": 1.0
  },
  {
    "name": "GCD:1",
    "sat": "def sat(n: int, a=9, b=9, lower_bound=6):\n    return a % n == 0 and b % n == 0 and n >= lower_bound",
    "ans_type": "int",
    "sol_header": "def sol(a=9, b=9, lower_bound=6):",
    "sol_docstring": "    \"\"\"Find a large common divisor of two integers.\"\"\"",
    "sol_bodies": [
      "    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n",
      "    def gcd(m, n):\n        if m > n:\n            return gcd(n, m)\n        if m == 0:\n            return n\n        return gcd(n % m, m)\n\n    return gcd(a, b)"
    ],
    "module": "number_theory.py",
    "notes": "[Greatest Common Divisor](https://en.wikipedia.org/w/index.php?title=Greatest_common_divisor&oldid=990943381)\n(GCD)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "weight": 1.0
  },
  {
    "name": "GCD:2",
    "sat": "def sat(n: int, a=232610, b=3131721474, lower_bound=15000):\n    return a % n == 0 and b % n == 0 and n >= lower_bound",
    "ans_type": "int",
    "sol_header": "def sol(a=232610, b=3131721474, lower_bound=15000):",
    "sol_docstring": "    \"\"\"Find a large common divisor of two integers.\"\"\"",
    "sol_bodies": [
      "    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n",
      "    def gcd(m, n):\n        if m > n:\n            return gcd(n, m)\n        if m == 0:\n            return n\n        return gcd(n % m, m)\n\n    return gcd(a, b)"
    ],
    "module": "number_theory.py",
    "notes": "[Greatest Common Divisor](https://en.wikipedia.org/w/index.php?title=Greatest_common_divisor&oldid=990943381)\n(GCD)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "weight": 1.0
  },
  {
    "name": "GCD:3",
    "sat": "def sat(n: int, a=247586288427023352, b=372021520735824432, lower_bound=1709054537):\n    return a % n == 0 and b % n == 0 and n >= lower_bound",
    "ans_type": "int",
    "sol_header": "def sol(a=247586288427023352, b=372021520735824432, lower_bound=1709054537):",
    "sol_docstring": "    \"\"\"Find a large common divisor of two integers.\"\"\"",
    "sol_bodies": [
      "    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n",
      "    def gcd(m, n):\n        if m > n:\n            return gcd(n, m)\n        if m == 0:\n            return n\n        return gcd(n % m, m)\n\n    return gcd(a, b)"
    ],
    "module": "number_theory.py",
    "notes": "[Greatest Common Divisor](https://en.wikipedia.org/w/index.php?title=Greatest_common_divisor&oldid=990943381)\n(GCD)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "weight": 1.0
  },
  {
    "name": "GCD:4",
    "sat": "def sat(n: int, a=8797233, b=2370036150831, lower_bound=8364173):\n    return a % n == 0 and b % n == 0 and n >= lower_bound",
    "ans_type": "int",
    "sol_header": "def sol(a=8797233, b=2370036150831, lower_bound=8364173):",
    "sol_docstring": "    \"\"\"Find a large common divisor of two integers.\"\"\"",
    "sol_bodies": [
      "    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return n",
      "    def gcd(m, n):\n        if m > n:\n            return gcd(n, m)\n        if m == 0:\n            return n\n        return gcd(n % m, m)\n\n    return gcd(a, b)"
    ],
    "module": "number_theory.py",
    "notes": "[Greatest Common Divisor](https://en.wikipedia.org/w/index.php?title=Greatest_common_divisor&oldid=990943381)\n(GCD)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "weight": 1.0
  },
  {
    "name": "GCD_multi:0",
    "sat": "def sat(n: int, nums=[77410, 23223, 54187], lower_bound=2):\n    return all(i % n == 0 for i in nums) and n >= lower_bound",
    "ans_type": "int",
    "sol_header": "def sol(nums=[77410, 23223, 54187], lower_bound=2):",
    "sol_docstring": "    \"\"\"Find a large common divisor of the list of integers.\"\"\"",
    "sol_bodies": [
      "    n = 0\n    for i in nums:\n        m, n = min(i, n), max(i, n)\n        while m > 0:\n            m, n = n % m, m\n    return n"
    ],
    "module": "number_theory.py",
    "notes": "[Greatest Common Divisor](https://en.wikipedia.org/w/index.php?title=Greatest_common_divisor&oldid=990943381)\n(GCD)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "weight": 1.0
  },
  {
    "name": "GCD_multi:1",
    "sat": "def sat(n: int, nums=[14, 551755893, 902110495], lower_bound=1):\n    return all(i % n == 0 for i in nums) and n >= lower_bound",
    "ans_type": "int",
    "sol_header": "def sol(nums=[14, 551755893, 902110495], lower_bound=1):",
    "sol_docstring": "    \"\"\"Find a large common divisor of the list of integers.\"\"\"",
    "sol_bodies": [
      "    n = 0\n    for i in nums:\n        m, n = min(i, n), max(i, n)\n        while m > 0:\n            m, n = n % m, m\n    return n"
    ],
    "module": "number_theory.py",
    "notes": "[Greatest Common Divisor](https://en.wikipedia.org/w/index.php?title=Greatest_common_divisor&oldid=990943381)\n(GCD)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "weight": 1.0
  },
  {
    "name": "GCD_multi:2",
    "sat": "def sat(n: int, nums=[287260676668, 33263981357337, 47314720, 295717, 2957170], lower_bound=98647):\n    return all(i % n == 0 for i in nums) and n >= lower_bound",
    "ans_type": "int",
    "sol_header": "def sol(nums=[287260676668, 33263981357337, 47314720, 295717, 2957170], lower_bound=98647):",
    "sol_docstring": "    \"\"\"Find a large common divisor of the list of integers.\"\"\"",
    "sol_bodies": [
      "    n = 0\n    for i in nums:\n        m, n = min(i, n), max(i, n)\n        while m > 0:\n            m, n = n % m, m\n    return n"
    ],
    "module": "number_theory.py",
    "notes": "[Greatest Common Divisor](https://en.wikipedia.org/w/index.php?title=Greatest_common_divisor&oldid=990943381)\n(GCD)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "weight": 1.0
  },
  {
    "name": "GCD_multi:3",
    "sat": "def sat(n: int, nums=[452452, 111673658096, 83221402264, 5027670648, 61177116, 154154, 116116, 1508784124848, 17036343324, 29091062, 100726626], lower_bound=977):\n    return all(i % n == 0 for i in nums) and n >= lower_bound",
    "ans_type": "int",
    "sol_header": "def sol(nums=[452452, 111673658096, 83221402264, 5027670648, 61177116, 154154, 116116, 1508784124848, 17036343324, 29091062, 100726626], lower_bound=977):",
    "sol_docstring": "    \"\"\"Find a large common divisor of the list of integers.\"\"\"",
    "sol_bodies": [
      "    n = 0\n    for i in nums:\n        m, n = min(i, n), max(i, n)\n        while m > 0:\n            m, n = n % m, m\n    return n"
    ],
    "module": "number_theory.py",
    "notes": "[Greatest Common Divisor](https://en.wikipedia.org/w/index.php?title=Greatest_common_divisor&oldid=990943381)\n(GCD)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "weight": 1.0
  },
  {
    "name": "GCD_multi:4",
    "sat": "def sat(n: int, nums=[8154539588421190, 128861795], lower_bound=64216730):\n    return all(i % n == 0 for i in nums) and n >= lower_bound",
    "ans_type": "int",
    "sol_header": "def sol(nums=[8154539588421190, 128861795], lower_bound=64216730):",
    "sol_docstring": "    \"\"\"Find a large common divisor of the list of integers.\"\"\"",
    "sol_bodies": [
      "    n = 0\n    for i in nums:\n        m, n = min(i, n), max(i, n)\n        while m > 0:\n            m, n = n % m, m\n    return n"
    ],
    "module": "number_theory.py",
    "notes": "[Greatest Common Divisor](https://en.wikipedia.org/w/index.php?title=Greatest_common_divisor&oldid=990943381)\n(GCD)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "weight": 1.0
  },
  {
    "name": "LCM:0",
    "sat": "def sat(n: int, a=15, b=27, upper_bound=150):\n    return n % a == 0 and n % b == 0 and 0 < n <= upper_bound",
    "ans_type": "int",
    "sol_header": "def sol(a=15, b=27, upper_bound=150):",
    "sol_docstring": "    \"\"\"Find a small common multiple of two integers.\"\"\"",
    "sol_bodies": [
      "    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)"
    ],
    "module": "number_theory.py",
    "notes": "[Least Common Multiple](https://en.wikipedia.org/wiki/Least_common_multiple)\n(LCM)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "weight": 1.0
  },
  {
    "name": "LCM:1",
    "sat": "def sat(n: int, a=41234205765, b=597597185, upper_bound=73349253728):\n    return n % a == 0 and n % b == 0 and 0 < n <= upper_bound",
    "ans_type": "int",
    "sol_header": "def sol(a=41234205765, b=597597185, upper_bound=73349253728):",
    "sol_docstring": "    \"\"\"Find a small common multiple of two integers.\"\"\"",
    "sol_bodies": [
      "    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)"
    ],
    "module": "number_theory.py",
    "notes": "[Least Common Multiple](https://en.wikipedia.org/wiki/Least_common_multiple)\n(LCM)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "weight": 1.0
  },
  {
    "name": "LCM:2",
    "sat": "def sat(n: int, a=7601351956456, b=2974663988, upper_bound=389421039754872576):\n    return n % a == 0 and n % b == 0 and 0 < n <= upper_bound",
    "ans_type": "int",
    "sol_header": "def sol(a=7601351956456, b=2974663988, upper_bound=389421039754872576):",
    "sol_docstring": "    \"\"\"Find a small common multiple of two integers.\"\"\"",
    "sol_bodies": [
      "    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)"
    ],
    "module": "number_theory.py",
    "notes": "[Least Common Multiple](https://en.wikipedia.org/wiki/Least_common_multiple)\n(LCM)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "weight": 1.0
  },
  {
    "name": "LCM:3",
    "sat": "def sat(n: int, a=201717041833890, b=3585167190, upper_bound=731493653565433):\n    return n % a == 0 and n % b == 0 and 0 < n <= upper_bound",
    "ans_type": "int",
    "sol_header": "def sol(a=201717041833890, b=3585167190, upper_bound=731493653565433):",
    "sol_docstring": "    \"\"\"Find a small common multiple of two integers.\"\"\"",
    "sol_bodies": [
      "    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)"
    ],
    "module": "number_theory.py",
    "notes": "[Least Common Multiple](https://en.wikipedia.org/wiki/Least_common_multiple)\n(LCM)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "weight": 1.0
  },
  {
    "name": "LCM:4",
    "sat": "def sat(n: int, a=79680, b=661339968, upper_bound=410128528659):\n    return n % a == 0 and n % b == 0 and 0 < n <= upper_bound",
    "ans_type": "int",
    "sol_header": "def sol(a=79680, b=661339968, upper_bound=410128528659):",
    "sol_docstring": "    \"\"\"Find a small common multiple of two integers.\"\"\"",
    "sol_bodies": [
      "    m, n = min(a, b), max(a, b)\n    while m > 0:\n        m, n = n % m, m\n    return a * (b // n)"
    ],
    "module": "number_theory.py",
    "notes": "[Least Common Multiple](https://en.wikipedia.org/wiki/Least_common_multiple)\n(LCM)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "weight": 1.0
  },
  {
    "name": "LCM_multi:0",
    "sat": "def sat(n: int, nums=[15, 27, 102], upper_bound=5000):\n    return all(n % i == 0 for i in nums) and 0 < n <= upper_bound",
    "ans_type": "int",
    "sol_header": "def sol(nums=[15, 27, 102], upper_bound=5000):",
    "sol_docstring": "    \"\"\"Find a small common multiple of a list of integers.\"\"\"",
    "sol_bodies": [
      "    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans"
    ],
    "module": "number_theory.py",
    "notes": "[Least Common Multiple](https://en.wikipedia.org/wiki/Least_common_multiple)\n(LCM)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "weight": 1.0
  },
  {
    "name": "LCM_multi:1",
    "sat": "def sat(n: int, nums=[46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound=82396663973139497934429093888):\n    return all(n % i == 0 for i in nums) and 0 < n <= upper_bound",
    "ans_type": "int",
    "sol_header": "def sol(nums=[46477686772963437, 15649966299, 37939312240, 14036122804591, 39209330717234], upper_bound=82396663973139497934429093888):",
    "sol_docstring": "    \"\"\"Find a small common multiple of a list of integers.\"\"\"",
    "sol_bodies": [
      "    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans"
    ],
    "module": "number_theory.py",
    "notes": "[Least Common Multiple](https://en.wikipedia.org/wiki/Least_common_multiple)\n(LCM)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "weight": 1.0
  },
  {
    "name": "LCM_multi:2",
    "sat": "def sat(n: int, nums=[55040126016, 4373970014334], upper_bound=219074883886936):\n    return all(n % i == 0 for i in nums) and 0 < n <= upper_bound",
    "ans_type": "int",
    "sol_header": "def sol(nums=[55040126016, 4373970014334], upper_bound=219074883886936):",
    "sol_docstring": "    \"\"\"Find a small common multiple of a list of integers.\"\"\"",
    "sol_bodies": [
      "    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans"
    ],
    "module": "number_theory.py",
    "notes": "[Least Common Multiple](https://en.wikipedia.org/wiki/Least_common_multiple)\n(LCM)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "weight": 1.0
  },
  {
    "name": "LCM_multi:3",
    "sat": "def sat(n: int, nums=[9140, 4882496600, 119119770064, 107772494796, 102424668, 3656, 1188591500932, 116992, 14700627932, 997397016], upper_bound=238661269929569213628364588516267312050595558326272):\n    return all(n % i == 0 for i in nums) and 0 < n <= upper_bound",
    "ans_type": "int",
    "sol_header": "def sol(nums=[9140, 4882496600, 119119770064, 107772494796, 102424668, 3656, 1188591500932, 116992, 14700627932, 997397016], upper_bound=238661269929569213628364588516267312050595558326272):",
    "sol_docstring": "    \"\"\"Find a small common multiple of a list of integers.\"\"\"",
    "sol_bodies": [
      "    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans"
    ],
    "module": "number_theory.py",
    "notes": "[Least Common Multiple](https://en.wikipedia.org/wiki/Least_common_multiple)\n(LCM)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "weight": 1.0
  },
  {
    "name": "LCM_multi:4",
    "sat": "def sat(n: int, nums=[173261568, 4270662976], upper_bound=17025943527197098):\n    return all(n % i == 0 for i in nums) and 0 < n <= upper_bound",
    "ans_type": "int",
    "sol_header": "def sol(nums=[173261568, 4270662976], upper_bound=17025943527197098):",
    "sol_docstring": "    \"\"\"Find a small common multiple of a list of integers.\"\"\"",
    "sol_bodies": [
      "    ans = 1\n    for i in nums:\n        m, n = min(i, ans), max(i, ans)\n        while m > 0:\n            m, n = n % m, m\n        ans *= (i // n)\n    return ans"
    ],
    "module": "number_theory.py",
    "notes": "[Least Common Multiple](https://en.wikipedia.org/wiki/Least_common_multiple)\n(LCM)\n\nSee also the [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)",
    "weight": 1.0
  },
  {
    "name": "SmallExponentBigSolution:0",
    "sat": "def sat(n: int, b=2, target=5):\n    return (b ** n) % n == target",
    "ans_type": "int",
    "sol_header": "def sol(b=2, target=5):",
    "sol_docstring": "    \"\"\"Solve for n: b^n = target (mod n)\"\"\"",
    "sol_bodies": [
      "    for n in range(1, 10 ** 5):\n        if pow(b, n, n) == target:\n            return n"
    ],
    "module": "number_theory.py",
    "notes": "Small exponent, big solution\n\nProblems have small b and target but solution is typically a large n.\nSome of them are really hard, for example, for `b=2, target=3`, the smallest solution is `n=4700063497`\n\nSee [Richard K. Guy \"The strong law of small numbers\", (problem 13)](https://doi.org/10.2307/2322249)",
    "weight": 1.0
  },
  {
    "name": "SmallExponentBigSolution:1",
    "sat": "def sat(n: int, b=2, target=3):\n    return (b ** n) % n == target",
    "ans_type": "int",
    "sol_header": "def sol(b=2, target=3):",
    "sol_docstring": "    \"\"\"Solve for n: b^n = target (mod n)\"\"\"",
    "sol_bodies": [],
    "module": "number_theory.py",
    "notes": "Small exponent, big solution\n\nProblems have small b and target but solution is typically a large n.\nSome of them are really hard, for example, for `b=2, target=3`, the smallest solution is `n=4700063497`\n\nSee [Richard K. Guy \"The strong law of small numbers\", (problem 13)](https://doi.org/10.2307/2322249)",
    "weight": 1.0
  },
  {
    "name": "SmallExponentBigSolution:2",
    "sat": "def sat(n: int, b=1, target=2):\n    return (b ** n) % n == target",
    "ans_type": "int",
    "sol_header": "def sol(b=1, target=2):",
    "sol_docstring": "    \"\"\"Solve for n: b^n = target (mod n)\"\"\"",
    "sol_bodies": [],
    "module": "number_theory.py",
    "notes": "Small exponent, big solution\n\nProblems have small b and target but solution is typically a large n.\nSome of them are really hard, for example, for `b=2, target=3`, the smallest solution is `n=4700063497`\n\nSee [Richard K. Guy \"The strong law of small numbers\", (problem 13)](https://doi.org/10.2307/2322249)",
    "weight": 1.0
  },
  {
    "name": "SmallExponentBigSolution:3",
    "sat": "def sat(n: int, b=69, target=2):\n    return (b ** n) % n == target",
    "ans_type": "int",
    "sol_header": "def sol(b=69, target=2):",
    "sol_docstring": "    \"\"\"Solve for n: b^n = target (mod n)\"\"\"",
    "sol_bodies": [
      "    for n in range(1, 10 ** 5):\n        if pow(b, n, n) == target:\n            return n"
    ],
    "module": "number_theory.py",
    "notes": "Small exponent, big solution\n\nProblems have small b and target but solution is typically a large n.\nSome of them are really hard, for example, for `b=2, target=3`, the smallest solution is `n=4700063497`\n\nSee [Richard K. Guy \"The strong law of small numbers\", (problem 13)](https://doi.org/10.2307/2322249)",
    "weight": 1.0
  },
  {
    "name": "ThreeCubes:0",
    "sat": "def sat(nums: List[int], target=983):\n    assert target % 9 not in [4, 5], \"Hint\"\n    return len(nums) == 3 and sum([i ** 3 for i in nums]) == target",
    "ans_type": "List[int]",
    "sol_header": "def sol(target=983):",
    "sol_docstring": "    \"\"\"Given n, find integers a, b, c such that a^3 + b^3 + c^3 = n.\"\"\"",
    "sol_bodies": [
      "    assert target % 9 not in {4, 5}\n    for i in range(20):\n        for j in range(i + 1):\n            for k in range(-20, j + 1):\n                n = i ** 3 + j ** 3 + k ** 3\n                if n == target:\n                    return [i, j, k]\n                if n == -target:\n                    return [-i, -j, -k]"
    ],
    "module": "number_theory.py",
    "notes": "Sum of three cubes\n\nGiven `n`, find integers `a`, `b`, `c` such that `a**3 + b**3 + c**3 = n`. This is unsolvable for `n % 9 in {4, 5}`.\nConjectured to be true for all other n, i.e., `n % 9 not in {4, 5}`.\n`a`, `b`, `c` may be positive or negative\n\nSee [wikipedia entry](https://en.wikipedia.org/wiki/Sums_of_three_cubes) or\n[Andrew R. Booker, Andrew V. Sutherland (2020). \"On a question of Mordell.\"](https://arxiv.org/abs/2007.01209)",
    "weight": 1.0
  },
  {
    "name": "ThreeCubes:1",
    "sat": "def sat(nums: List[int], target=114):\n    assert target % 9 not in [4, 5], \"Hint\"\n    return len(nums) == 3 and sum([i ** 3 for i in nums]) == target",
    "ans_type": "List[int]",
    "sol_header": "def sol(target=114):",
    "sol_docstring": "    \"\"\"Given n, find integers a, b, c such that a^3 + b^3 + c^3 = n.\"\"\"",
    "sol_bodies": [],
    "module": "number_theory.py",
    "notes": "Sum of three cubes\n\nGiven `n`, find integers `a`, `b`, `c` such that `a**3 + b**3 + c**3 = n`. This is unsolvable for `n % 9 in {4, 5}`.\nConjectured to be true for all other n, i.e., `n % 9 not in {4, 5}`.\n`a`, `b`, `c` may be positive or negative\n\nSee [wikipedia entry](https://en.wikipedia.org/wiki/Sums_of_three_cubes) or\n[Andrew R. Booker, Andrew V. Sutherland (2020). \"On a question of Mordell.\"](https://arxiv.org/abs/2007.01209)",
    "weight": 1.0
  },
  {
    "name": "ThreeCubes:2",
    "sat": "def sat(nums: List[int], target=390):\n    assert target % 9 not in [4, 5], \"Hint\"\n    return len(nums) == 3 and sum([i ** 3 for i in nums]) == target",
    "ans_type": "List[int]",
    "sol_header": "def sol(target=390):",
    "sol_docstring": "    \"\"\"Given n, find integers a, b, c such that a^3 + b^3 + c^3 = n.\"\"\"",
    "sol_bodies": [],
    "module": "number_theory.py",
    "notes": "Sum of three cubes\n\nGiven `n`, find integers `a`, `b`, `c` such that `a**3 + b**3 + c**3 = n`. This is unsolvable for `n % 9 in {4, 5}`.\nConjectured to be true for all other n, i.e., `n % 9 not in {4, 5}`.\n`a`, `b`, `c` may be positive or negative\n\nSee [wikipedia entry](https://en.wikipedia.org/wiki/Sums_of_three_cubes) or\n[Andrew R. Booker, Andrew V. Sutherland (2020). \"On a question of Mordell.\"](https://arxiv.org/abs/2007.01209)",
    "weight": 1.0
  },
  {
    "name": "ThreeCubes:3",
    "sat": "def sat(nums: List[int], target=579):\n    assert target % 9 not in [4, 5], \"Hint\"\n    return len(nums) == 3 and sum([i ** 3 for i in nums]) == target",
    "ans_type": "List[int]",
    "sol_header": "def sol(target=579):",
    "sol_docstring": "    \"\"\"Given n, find integers a, b, c such that a^3 + b^3 + c^3 = n.\"\"\"",
    "sol_bodies": [],
    "module": "number_theory.py",
    "notes": "Sum of three cubes\n\nGiven `n`, find integers `a`, `b`, `c` such that `a**3 + b**3 + c**3 = n`. This is unsolvable for `n % 9 in {4, 5}`.\nConjectured to be true for all other n, i.e., `n % 9 not in {4, 5}`.\n`a`, `b`, `c` may be positive or negative\n\nSee [wikipedia entry](https://en.wikipedia.org/wiki/Sums_of_three_cubes) or\n[Andrew R. Booker, Andrew V. Sutherland (2020). \"On a question of Mordell.\"](https://arxiv.org/abs/2007.01209)",
    "weight": 1.0
  },
  {
    "name": "ThreeCubes:4",
    "sat": "def sat(nums: List[int], target=69294):\n    assert target % 9 not in [4, 5], \"Hint\"\n    return len(nums) == 3 and sum([i ** 3 for i in nums]) == target",
    "ans_type": "List[int]",
    "sol_header": "def sol(target=69294):",
    "sol_docstring": "    \"\"\"Given n, find integers a, b, c such that a^3 + b^3 + c^3 = n.\"\"\"",
    "sol_bodies": [],
    "module": "number_theory.py",
    "notes": "Sum of three cubes\n\nGiven `n`, find integers `a`, `b`, `c` such that `a**3 + b**3 + c**3 = n`. This is unsolvable for `n % 9 in {4, 5}`.\nConjectured to be true for all other n, i.e., `n % 9 not in {4, 5}`.\n`a`, `b`, `c` may be positive or negative\n\nSee [wikipedia entry](https://en.wikipedia.org/wiki/Sums_of_three_cubes) or\n[Andrew R. Booker, Andrew V. Sutherland (2020). \"On a question of Mordell.\"](https://arxiv.org/abs/2007.01209)",
    "weight": 1.0
  },
  {
    "name": "FourSquares:0",
    "sat": "def sat(nums: List[int], n=12345):\n    return len(nums) <= 4 and sum(i ** 2 for i in nums) == n",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=12345):",
    "sol_docstring": "    \"\"\"Find four integers whose squares sum to n\"\"\"",
    "sol_bodies": [
      "    m = n\n    squares = {i ** 2: i for i in range(int(m ** 0.5) + 2) if i ** 2 <= m}\n    sums_of_squares = {i + j: [a, b] for i, a in squares.items() for j, b in squares.items()}\n    for s in sums_of_squares:\n        if m - s in sums_of_squares:\n            return sums_of_squares[m - s] + sums_of_squares[s]\n    assert False, \"Should never reach here\""
    ],
    "module": "number_theory.py",
    "notes": "Sum of four squares\n\n[Lagrange's Four Square Theorem](https://en.wikipedia.org/w/index.php?title=Lagrange%27s_four-square_theorem)\n\nGiven a non-negative integer `n`, a classic theorem of Lagrange says that `n` can be written as the sum of four\nintegers. The problem here is to find them. This is a nice problem and we give an elementary solution\nthat runs in time \tilde{O}(n),\nwhich is not \"polynomial time\" because it is not polynomial in log(n), the length of n. A poly-log(n)\nalgorithm using quaternions is described in the book:\n[\"Randomized algorithms in number theory\" by Michael O. Rabin and Jeffery O. Shallit (1986)](https://doi.org/10.1002/cpa.3160390713)\n\nThe first half of the problems involve small numbers and the second half involve some numbers up to 50 digits.",
    "weight": 1.0
  },
  {
    "name": "FourSquares:1",
    "sat": "def sat(nums: List[int], n=1):\n    return len(nums) <= 4 and sum(i ** 2 for i in nums) == n",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=1):",
    "sol_docstring": "    \"\"\"Find four integers whose squares sum to n\"\"\"",
    "sol_bodies": [
      "    m = n\n    squares = {i ** 2: i for i in range(int(m ** 0.5) + 2) if i ** 2 <= m}\n    sums_of_squares = {i + j: [a, b] for i, a in squares.items() for j, b in squares.items()}\n    for s in sums_of_squares:\n        if m - s in sums_of_squares:\n            return sums_of_squares[m - s] + sums_of_squares[s]\n    assert False, \"Should never reach here\""
    ],
    "module": "number_theory.py",
    "notes": "Sum of four squares\n\n[Lagrange's Four Square Theorem](https://en.wikipedia.org/w/index.php?title=Lagrange%27s_four-square_theorem)\n\nGiven a non-negative integer `n`, a classic theorem of Lagrange says that `n` can be written as the sum of four\nintegers. The problem here is to find them. This is a nice problem and we give an elementary solution\nthat runs in time \tilde{O}(n),\nwhich is not \"polynomial time\" because it is not polynomial in log(n), the length of n. A poly-log(n)\nalgorithm using quaternions is described in the book:\n[\"Randomized algorithms in number theory\" by Michael O. Rabin and Jeffery O. Shallit (1986)](https://doi.org/10.1002/cpa.3160390713)\n\nThe first half of the problems involve small numbers and the second half involve some numbers up to 50 digits.",
    "weight": 1.0
  },
  {
    "name": "FourSquares:2",
    "sat": "def sat(nums: List[int], n=0):\n    return len(nums) <= 4 and sum(i ** 2 for i in nums) == n",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=0):",
    "sol_docstring": "    \"\"\"Find four integers whose squares sum to n\"\"\"",
    "sol_bodies": [
      "    m = n\n    squares = {i ** 2: i for i in range(int(m ** 0.5) + 2) if i ** 2 <= m}\n    sums_of_squares = {i + j: [a, b] for i, a in squares.items() for j, b in squares.items()}\n    for s in sums_of_squares:\n        if m - s in sums_of_squares:\n            return sums_of_squares[m - s] + sums_of_squares[s]\n    assert False, \"Should never reach here\""
    ],
    "module": "number_theory.py",
    "notes": "Sum of four squares\n\n[Lagrange's Four Square Theorem](https://en.wikipedia.org/w/index.php?title=Lagrange%27s_four-square_theorem)\n\nGiven a non-negative integer `n`, a classic theorem of Lagrange says that `n` can be written as the sum of four\nintegers. The problem here is to find them. This is a nice problem and we give an elementary solution\nthat runs in time \tilde{O}(n),\nwhich is not \"polynomial time\" because it is not polynomial in log(n), the length of n. A poly-log(n)\nalgorithm using quaternions is described in the book:\n[\"Randomized algorithms in number theory\" by Michael O. Rabin and Jeffery O. Shallit (1986)](https://doi.org/10.1002/cpa.3160390713)\n\nThe first half of the problems involve small numbers and the second half involve some numbers up to 50 digits.",
    "weight": 1.0
  },
  {
    "name": "FourSquares:3",
    "sat": "def sat(nums: List[int], n=1321806837666853665854863414407013350963513):\n    return len(nums) <= 4 and sum(i ** 2 for i in nums) == n",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=1321806837666853665854863414407013350963513):",
    "sol_docstring": "    \"\"\"Find four integers whose squares sum to n\"\"\"",
    "sol_bodies": [],
    "module": "number_theory.py",
    "notes": "Sum of four squares\n\n[Lagrange's Four Square Theorem](https://en.wikipedia.org/w/index.php?title=Lagrange%27s_four-square_theorem)\n\nGiven a non-negative integer `n`, a classic theorem of Lagrange says that `n` can be written as the sum of four\nintegers. The problem here is to find them. This is a nice problem and we give an elementary solution\nthat runs in time \tilde{O}(n),\nwhich is not \"polynomial time\" because it is not polynomial in log(n), the length of n. A poly-log(n)\nalgorithm using quaternions is described in the book:\n[\"Randomized algorithms in number theory\" by Michael O. Rabin and Jeffery O. Shallit (1986)](https://doi.org/10.1002/cpa.3160390713)\n\nThe first half of the problems involve small numbers and the second half involve some numbers up to 50 digits.",
    "weight": 1.0
  },
  {
    "name": "FourSquares:4",
    "sat": "def sat(nums: List[int], n=254723967601711775999551029856500295000994603):\n    return len(nums) <= 4 and sum(i ** 2 for i in nums) == n",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=254723967601711775999551029856500295000994603):",
    "sol_docstring": "    \"\"\"Find four integers whose squares sum to n\"\"\"",
    "sol_bodies": [],
    "module": "number_theory.py",
    "notes": "Sum of four squares\n\n[Lagrange's Four Square Theorem](https://en.wikipedia.org/w/index.php?title=Lagrange%27s_four-square_theorem)\n\nGiven a non-negative integer `n`, a classic theorem of Lagrange says that `n` can be written as the sum of four\nintegers. The problem here is to find them. This is a nice problem and we give an elementary solution\nthat runs in time \tilde{O}(n),\nwhich is not \"polynomial time\" because it is not polynomial in log(n), the length of n. A poly-log(n)\nalgorithm using quaternions is described in the book:\n[\"Randomized algorithms in number theory\" by Michael O. Rabin and Jeffery O. Shallit (1986)](https://doi.org/10.1002/cpa.3160390713)\n\nThe first half of the problems involve small numbers and the second half involve some numbers up to 50 digits.",
    "weight": 1.0
  },
  {
    "name": "Factoring:0",
    "sat": "def sat(i: int, n=241864633):\n    return 1 < i < n and n % i == 0",
    "ans_type": "int",
    "sol_header": "def sol(n=241864633):",
    "sol_docstring": "    \"\"\"Find a non-trivial factor of integer n\"\"\"",
    "sol_bodies": [
      "    if n % 2 == 0:\n        return 2\n\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return i\n\n    assert False, \"problem defined for composite n only\""
    ],
    "module": "number_theory.py",
    "notes": "[Factoring](https://en.wikipedia.org/w/index.php?title=Integer_factorization) and\n[RSA challenge](https://en.wikipedia.org/w/index.php?title=RSA_numbers)\n\n*See class FermatComposite in codex.py for an easier composite test puzzle*\n\nThe factoring problems require one to find any nontrivial factor of n, which is equivalent to factoring by a\nsimple repetition process. Problems range from small (single-digit n) all the way to the \"RSA challenges\"\nwhich include several *unsolved* factoring problems put out by the RSA company. The challenge was closed in 2007,\nwith hundreds of thousands of dollars in unclaimed prize money for factoring their given numbers. People\ncontinue to work on them, nonetheless, and only the first 22/53 have RSA challenges have been solved thusfar.\n\nFrom Wikipedia:\n\nRSA-2048 has 617 decimal digits (2,048 bits). It is the largest of the RSA numbers and carried the largest\ncash prize for its factorization, $200,000. The RSA-2048 may not be factorizable for many years to come,\nunless considerable advances are made in integer factorization or computational power in the near future.",
    "weight": 1.0
  },
  {
    "name": "Factoring:1",
    "sat": "def sat(i: int, n=16):\n    return 1 < i < n and n % i == 0",
    "ans_type": "int",
    "sol_header": "def sol(n=16):",
    "sol_docstring": "    \"\"\"Find a non-trivial factor of integer n\"\"\"",
    "sol_bodies": [
      "    if n % 2 == 0:\n        return 2\n\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return i\n\n    assert False, \"problem defined for composite n only\""
    ],
    "module": "number_theory.py",
    "notes": "[Factoring](https://en.wikipedia.org/w/index.php?title=Integer_factorization) and\n[RSA challenge](https://en.wikipedia.org/w/index.php?title=RSA_numbers)\n\n*See class FermatComposite in codex.py for an easier composite test puzzle*\n\nThe factoring problems require one to find any nontrivial factor of n, which is equivalent to factoring by a\nsimple repetition process. Problems range from small (single-digit n) all the way to the \"RSA challenges\"\nwhich include several *unsolved* factoring problems put out by the RSA company. The challenge was closed in 2007,\nwith hundreds of thousands of dollars in unclaimed prize money for factoring their given numbers. People\ncontinue to work on them, nonetheless, and only the first 22/53 have RSA challenges have been solved thusfar.\n\nFrom Wikipedia:\n\nRSA-2048 has 617 decimal digits (2,048 bits). It is the largest of the RSA numbers and carried the largest\ncash prize for its factorization, $200,000. The RSA-2048 may not be factorizable for many years to come,\nunless considerable advances are made in integer factorization or computational power in the near future.",
    "weight": 1.0
  },
  {
    "name": "Factoring:2",
    "sat": "def sat(i: int, n=1522605027922533360535618378132637429718068114961380688657908494580122963258952897654000350692006139):\n    return 1 < i < n and n % i == 0",
    "ans_type": "int",
    "sol_header": "def sol(n=1522605027922533360535618378132637429718068114961380688657908494580122963258952897654000350692006139):",
    "sol_docstring": "    \"\"\"Find a non-trivial factor of integer n\"\"\"",
    "sol_bodies": [],
    "module": "number_theory.py",
    "notes": "[Factoring](https://en.wikipedia.org/w/index.php?title=Integer_factorization) and\n[RSA challenge](https://en.wikipedia.org/w/index.php?title=RSA_numbers)\n\n*See class FermatComposite in codex.py for an easier composite test puzzle*\n\nThe factoring problems require one to find any nontrivial factor of n, which is equivalent to factoring by a\nsimple repetition process. Problems range from small (single-digit n) all the way to the \"RSA challenges\"\nwhich include several *unsolved* factoring problems put out by the RSA company. The challenge was closed in 2007,\nwith hundreds of thousands of dollars in unclaimed prize money for factoring their given numbers. People\ncontinue to work on them, nonetheless, and only the first 22/53 have RSA challenges have been solved thusfar.\n\nFrom Wikipedia:\n\nRSA-2048 has 617 decimal digits (2,048 bits). It is the largest of the RSA numbers and carried the largest\ncash prize for its factorization, $200,000. The RSA-2048 may not be factorizable for many years to come,\nunless considerable advances are made in integer factorization or computational power in the near future.",
    "weight": 1.0
  },
  {
    "name": "Factoring:3",
    "sat": "def sat(i: int, n=35794234179725868774991807832568455403003778024228226193532908190484670252364677411513516111204504060317568667):\n    return 1 < i < n and n % i == 0",
    "ans_type": "int",
    "sol_header": "def sol(n=35794234179725868774991807832568455403003778024228226193532908190484670252364677411513516111204504060317568667):",
    "sol_docstring": "    \"\"\"Find a non-trivial factor of integer n\"\"\"",
    "sol_bodies": [],
    "module": "number_theory.py",
    "notes": "[Factoring](https://en.wikipedia.org/w/index.php?title=Integer_factorization) and\n[RSA challenge](https://en.wikipedia.org/w/index.php?title=RSA_numbers)\n\n*See class FermatComposite in codex.py for an easier composite test puzzle*\n\nThe factoring problems require one to find any nontrivial factor of n, which is equivalent to factoring by a\nsimple repetition process. Problems range from small (single-digit n) all the way to the \"RSA challenges\"\nwhich include several *unsolved* factoring problems put out by the RSA company. The challenge was closed in 2007,\nwith hundreds of thousands of dollars in unclaimed prize money for factoring their given numbers. People\ncontinue to work on them, nonetheless, and only the first 22/53 have RSA challenges have been solved thusfar.\n\nFrom Wikipedia:\n\nRSA-2048 has 617 decimal digits (2,048 bits). It is the largest of the RSA numbers and carried the largest\ncash prize for its factorization, $200,000. The RSA-2048 may not be factorizable for many years to come,\nunless considerable advances are made in integer factorization or computational power in the near future.",
    "weight": 1.0
  },
  {
    "name": "Factoring:4",
    "sat": "def sat(i: int, n=3363):\n    return 1 < i < n and n % i == 0",
    "ans_type": "int",
    "sol_header": "def sol(n=3363):",
    "sol_docstring": "    \"\"\"Find a non-trivial factor of integer n\"\"\"",
    "sol_bodies": [
      "    if n % 2 == 0:\n        return 2\n\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return i\n\n    assert False, \"problem defined for composite n only\""
    ],
    "module": "number_theory.py",
    "notes": "[Factoring](https://en.wikipedia.org/w/index.php?title=Integer_factorization) and\n[RSA challenge](https://en.wikipedia.org/w/index.php?title=RSA_numbers)\n\n*See class FermatComposite in codex.py for an easier composite test puzzle*\n\nThe factoring problems require one to find any nontrivial factor of n, which is equivalent to factoring by a\nsimple repetition process. Problems range from small (single-digit n) all the way to the \"RSA challenges\"\nwhich include several *unsolved* factoring problems put out by the RSA company. The challenge was closed in 2007,\nwith hundreds of thousands of dollars in unclaimed prize money for factoring their given numbers. People\ncontinue to work on them, nonetheless, and only the first 22/53 have RSA challenges have been solved thusfar.\n\nFrom Wikipedia:\n\nRSA-2048 has 617 decimal digits (2,048 bits). It is the largest of the RSA numbers and carried the largest\ncash prize for its factorization, $200,000. The RSA-2048 may not be factorizable for many years to come,\nunless considerable advances are made in integer factorization or computational power in the near future.",
    "weight": 1.0
  },
  {
    "name": "DiscreteLog:0",
    "sat": "def sat(n: int, g=44337, p=69337, t=38187):\n    return pow(g, n, p) == t",
    "ans_type": "int",
    "sol_header": "def sol(g=44337, p=69337, t=38187):",
    "sol_docstring": "    \"\"\"Find n such that g^n is congruent to t mod n\"\"\"",
    "sol_bodies": [
      "    for n in range(p):\n        if pow(g, n, p) == t:\n            return n\n    assert False, f\"unsolvable discrete log problem g={g}, t={t}, p={p}\""
    ],
    "module": "number_theory.py",
    "notes": "Discrete Log\n\nThe discrete logarithm problem is (given `g`, `t`, and `p`) to find n such that:\n\n`g ** n % p == t`\n\nFrom [Wikipedia article](https://en.wikipedia.org/w/index.php?title=Discrete_logarithm_records):\n\n\"Several important algorithms in public-key cryptography base their security on the assumption\nthat the discrete logarithm problem over carefully chosen problems has no efficient solution.\"\n\nThe problem is *unsolved* in the sense that no known polynomial-time algorithm has been found.\n\nWe include McCurley's discrete log challenge from\n[Weber D., Denny T. (1998) \"The solution of McCurley's discrete log challenge.\"](https://link.springer.com/content/pdf/10.1007/BFb0055747.pdf)",
    "weight": 1.0
  },
  {
    "name": "DiscreteLog:1",
    "sat": "def sat(n: int, g=7, p=204706270385532838059744535166974274803608394340123459695798674591526591372685229510652847339705797622075505069831043486651682279, t=127402180119973946824269244334322849749382042586931621654557735290322914679095998681860978813046595166455458144280588076766033781):\n    return pow(g, n, p) == t",
    "ans_type": "int",
    "sol_header": "def sol(g=7, p=204706270385532838059744535166974274803608394340123459695798674591526591372685229510652847339705797622075505069831043486651682279, t=127402180119973946824269244334322849749382042586931621654557735290322914679095998681860978813046595166455458144280588076766033781):",
    "sol_docstring": "    \"\"\"Find n such that g^n is congruent to t mod n\"\"\"",
    "sol_bodies": [],
    "module": "number_theory.py",
    "notes": "Discrete Log\n\nThe discrete logarithm problem is (given `g`, `t`, and `p`) to find n such that:\n\n`g ** n % p == t`\n\nFrom [Wikipedia article](https://en.wikipedia.org/w/index.php?title=Discrete_logarithm_records):\n\n\"Several important algorithms in public-key cryptography base their security on the assumption\nthat the discrete logarithm problem over carefully chosen problems has no efficient solution.\"\n\nThe problem is *unsolved* in the sense that no known polynomial-time algorithm has been found.\n\nWe include McCurley's discrete log challenge from\n[Weber D., Denny T. (1998) \"The solution of McCurley's discrete log challenge.\"](https://link.springer.com/content/pdf/10.1007/BFb0055747.pdf)",
    "weight": 1.0
  },
  {
    "name": "DiscreteLog:2",
    "sat": "def sat(n: int, g=13, p=21, t=1):\n    return pow(g, n, p) == t",
    "ans_type": "int",
    "sol_header": "def sol(g=13, p=21, t=1):",
    "sol_docstring": "    \"\"\"Find n such that g^n is congruent to t mod n\"\"\"",
    "sol_bodies": [
      "    for n in range(p):\n        if pow(g, n, p) == t:\n            return n\n    assert False, f\"unsolvable discrete log problem g={g}, t={t}, p={p}\""
    ],
    "module": "number_theory.py",
    "notes": "Discrete Log\n\nThe discrete logarithm problem is (given `g`, `t`, and `p`) to find n such that:\n\n`g ** n % p == t`\n\nFrom [Wikipedia article](https://en.wikipedia.org/w/index.php?title=Discrete_logarithm_records):\n\n\"Several important algorithms in public-key cryptography base their security on the assumption\nthat the discrete logarithm problem over carefully chosen problems has no efficient solution.\"\n\nThe problem is *unsolved* in the sense that no known polynomial-time algorithm has been found.\n\nWe include McCurley's discrete log challenge from\n[Weber D., Denny T. (1998) \"The solution of McCurley's discrete log challenge.\"](https://link.springer.com/content/pdf/10.1007/BFb0055747.pdf)",
    "weight": 1.0
  },
  {
    "name": "DiscreteLog:3",
    "sat": "def sat(n: int, g=101873924449108026052, p=576036946901458671597, t=330515716425197141833):\n    return pow(g, n, p) == t",
    "ans_type": "int",
    "sol_header": "def sol(g=101873924449108026052, p=576036946901458671597, t=330515716425197141833):",
    "sol_docstring": "    \"\"\"Find n such that g^n is congruent to t mod n\"\"\"",
    "sol_bodies": [],
    "module": "number_theory.py",
    "notes": "Discrete Log\n\nThe discrete logarithm problem is (given `g`, `t`, and `p`) to find n such that:\n\n`g ** n % p == t`\n\nFrom [Wikipedia article](https://en.wikipedia.org/w/index.php?title=Discrete_logarithm_records):\n\n\"Several important algorithms in public-key cryptography base their security on the assumption\nthat the discrete logarithm problem over carefully chosen problems has no efficient solution.\"\n\nThe problem is *unsolved* in the sense that no known polynomial-time algorithm has been found.\n\nWe include McCurley's discrete log challenge from\n[Weber D., Denny T. (1998) \"The solution of McCurley's discrete log challenge.\"](https://link.springer.com/content/pdf/10.1007/BFb0055747.pdf)",
    "weight": 1.0
  },
  {
    "name": "DiscreteLog:4",
    "sat": "def sat(n: int, g=1696881788, p=8006168143, t=7111327686):\n    return pow(g, n, p) == t",
    "ans_type": "int",
    "sol_header": "def sol(g=1696881788, p=8006168143, t=7111327686):",
    "sol_docstring": "    \"\"\"Find n such that g^n is congruent to t mod n\"\"\"",
    "sol_bodies": [],
    "module": "number_theory.py",
    "notes": "Discrete Log\n\nThe discrete logarithm problem is (given `g`, `t`, and `p`) to find n such that:\n\n`g ** n % p == t`\n\nFrom [Wikipedia article](https://en.wikipedia.org/w/index.php?title=Discrete_logarithm_records):\n\n\"Several important algorithms in public-key cryptography base their security on the assumption\nthat the discrete logarithm problem over carefully chosen problems has no efficient solution.\"\n\nThe problem is *unsolved* in the sense that no known polynomial-time algorithm has been found.\n\nWe include McCurley's discrete log challenge from\n[Weber D., Denny T. (1998) \"The solution of McCurley's discrete log challenge.\"](https://link.springer.com/content/pdf/10.1007/BFb0055747.pdf)",
    "weight": 1.0
  },
  {
    "name": "GCD17:0",
    "sat": "def sat(n: int):\n    i = n ** 17 + 9\n    j = (n + 1) ** 17 + 9\n\n    while i != 0:  # compute gcd using Euclid's algorithm\n        (i, j) = (j % i, i)\n\n    return n >= 0 and j != 1",
    "ans_type": "int",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"Find n for which gcd(n^17+9, (n+1)^17+9) != 1\"\"\"",
    "sol_bodies": [],
    "module": "number_theory.py",
    "notes": "According to [this article](https://primes.utm.edu/glossary/page.php?sort=LawOfSmall), the smallest\nsolution is 8424432925592889329288197322308900672459420460792433",
    "weight": 1.0
  },
  {
    "name": "Znam:0",
    "sat": "def sat(li: List[int], k=5):\n    def prod(nums):\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n\n    return min(li) > 1 and len(li) == k and all((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k))",
    "ans_type": "List[int]",
    "sol_header": "def sol(k=5):",
    "sol_docstring": "    \"\"\"Find k positive integers such that each integer divides (the product of the rest plus 1).\"\"\"",
    "sol_bodies": [
      "    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans"
    ],
    "module": "number_theory.py",
    "notes": "[Znam's Problem](https://en.wikipedia.org/wiki/Zn%C3%A1m%27s_problem)\n\nFor example [2, 3, 7, 47, 395] is a solution for k=5",
    "weight": 1.0
  },
  {
    "name": "Znam:1",
    "sat": "def sat(li: List[int], k=6):\n    def prod(nums):\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n\n    return min(li) > 1 and len(li) == k and all((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k))",
    "ans_type": "List[int]",
    "sol_header": "def sol(k=6):",
    "sol_docstring": "    \"\"\"Find k positive integers such that each integer divides (the product of the rest plus 1).\"\"\"",
    "sol_bodies": [
      "    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans"
    ],
    "module": "number_theory.py",
    "notes": "[Znam's Problem](https://en.wikipedia.org/wiki/Zn%C3%A1m%27s_problem)\n\nFor example [2, 3, 7, 47, 395] is a solution for k=5",
    "weight": 1.0
  },
  {
    "name": "Znam:2",
    "sat": "def sat(li: List[int], k=7):\n    def prod(nums):\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n\n    return min(li) > 1 and len(li) == k and all((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k))",
    "ans_type": "List[int]",
    "sol_header": "def sol(k=7):",
    "sol_docstring": "    \"\"\"Find k positive integers such that each integer divides (the product of the rest plus 1).\"\"\"",
    "sol_bodies": [
      "    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans"
    ],
    "module": "number_theory.py",
    "notes": "[Znam's Problem](https://en.wikipedia.org/wiki/Zn%C3%A1m%27s_problem)\n\nFor example [2, 3, 7, 47, 395] is a solution for k=5",
    "weight": 1.0
  },
  {
    "name": "Znam:3",
    "sat": "def sat(li: List[int], k=8):\n    def prod(nums):\n        ans = 1\n        for i in nums:\n            ans *= i\n        return ans\n\n    return min(li) > 1 and len(li) == k and all((1 + prod(li[:i] + li[i + 1:])) % li[i] == 0 for i in range(k))",
    "ans_type": "List[int]",
    "sol_header": "def sol(k=8):",
    "sol_docstring": "    \"\"\"Find k positive integers such that each integer divides (the product of the rest plus 1).\"\"\"",
    "sol_bodies": [
      "    n = 2\n    prod = 1\n    ans = []\n    while len(ans) < k:\n        ans.append(n)\n        prod *= n\n        n = prod + 1\n    return ans"
    ],
    "module": "number_theory.py",
    "notes": "[Znam's Problem](https://en.wikipedia.org/wiki/Zn%C3%A1m%27s_problem)\n\nFor example [2, 3, 7, 47, 395] is a solution for k=5",
    "weight": 1.0
  },
  {
    "name": "CollatzCycleUnsolved:0",
    "sat": "def sat(n: int):\n    m = n\n    while n > 4:\n        n = 3 * n + 1 if n % 2 else n // 2\n        if n == m:\n            return True",
    "ans_type": "int",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"\n    Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n    * if n is even, divide n by 2,\n    * if n is odd, multiply n by 3 and add 1\n    Find n > 4 which is part of a cycle of this process\n    \"\"\"",
    "sol_bodies": [],
    "module": "number_theory.py",
    "notes": "Collatz Conjecture\n\nA solution to this problem would disprove the *Collatz Conjecture*, also called the *3n + 1 problem*,\nas well as the *Generalized Collatz Conjecture* (see the next problem).\nAccording to the [Wikipedia article](https://en.wikipedia.org/wiki/Collatz_conjecture):\n> Paul Erdos said about the Collatz conjecture: \"Mathematics may not be ready for such problems.\"\n> He also offered US$500 for its solution. Jeffrey Lagarias stated in 2010 that the Collatz conjecture\n> \"is an extraordinarily difficult problem, completely out of reach of present day mathematics.\"\n\nConsider the following process. Start with an integer `n` and repeatedly applying the operation:\n* if n is even, divide n by 2,\n* if n is odd, multiply n by 3 and add 1\n\nThe conjecture is to that all `n > 0` eventually reach `n=1`. If this conjecture is false, then\nthere is either a cycle or a sequence that increases without bound. This problem seeks a cycle.",
    "weight": 1.0
  },
  {
    "name": "CollatzGeneralizedUnsolved:0",
    "sat": "def sat(start: int):\n    n = start  # could be positive or negative ...\n    while abs(n) > 1000:\n        n = 3 * n + 1 if n % 2 else n // 2\n        if n == start:\n            return True",
    "ans_type": "int",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"\n    Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n    * if n is even, divide n by 2,\n    * if n is odd, multiply n by 3 and add 1\n    Find n which is part of a cycle of this process that has |n| > 1000\n    \"\"\"",
    "sol_bodies": [],
    "module": "number_theory.py",
    "notes": "Generalized Collatz Conjecture\n\nThis version, permits negative n and seek a cycle with a number of magnitude greater than 1000,\nwhich would disprove the Generalized conjecture that states that the only cycles are the known 5 cycles\n(which don't have positive integers).\n\nSee the [Wikipedia article](https://en.wikipedia.org/wiki/Collatz_conjecture)",
    "weight": 1.0
  },
  {
    "name": "CollatzDelay:0",
    "sat": "def sat(n: int, t=197, upper=20):\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= 2 ** upper",
    "ans_type": "int",
    "sol_header": "def sol(t=197, upper=20):",
    "sol_docstring": "    \"\"\"\n    Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n    * if n is even, divide n by 2,\n    * if n is odd, multiply n by 3 and add 1\n    Find `0 < n < upper` so that it takes exactly `t` steps to reach 1.\n    \"\"\"",
    "sol_bodies": [
      "    # Faster solution for simultaneously solving multiple problems is of course possible\n    bound = t + 10\n    while True:\n        bound *= 2\n        prev = {1}\n        seen = set()\n        for delay in range(t):\n            seen.update(prev)\n            curr = {2 * n for n in prev}\n            curr.update({(n - 1) // 3 for n in prev if n % 6 == 4})\n            prev = {n for n in curr if n <= bound} - seen\n        if prev:\n            return min(prev)"
    ],
    "module": "number_theory.py",
    "notes": "Collatz Delay\n\nConsider the following process. Start with an integer `n` and repeatedly applying the operation:\n* if n is even, divide n by 2,\n* if n is odd, multiply n by 3 and add 1\nFind `0 < n < upper` so that it takes exactly `t` steps to reach 1.\n\n\nFor instance,\nthe number `n=9780657630` takes 1,132 steps and the number `n=93,571,393,692,802,302` takes\n2,091 steps, according to the [Wikipedia article](https://en.wikipedia.org/wiki/Collatz_conjecture)\n\nNow, this problem can be solved trivially by taking exponentially large `n = 2 ** t` so we also bound the\nnumber of bits of the solution to be upper.\n\nSee [this webpage](http://www.ericr.nl/wondrous/delrecs.html) for up-to-date records.",
    "weight": 1.0
  },
  {
    "name": "CollatzDelay:1",
    "sat": "def sat(n: int, t=1000, upper=150):\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= 2 ** upper",
    "ans_type": "int",
    "sol_header": "def sol(t=1000, upper=150):",
    "sol_docstring": "    \"\"\"\n    Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n    * if n is even, divide n by 2,\n    * if n is odd, multiply n by 3 and add 1\n    Find `0 < n < upper` so that it takes exactly `t` steps to reach 1.\n    \"\"\"",
    "sol_bodies": [],
    "module": "number_theory.py",
    "notes": "Collatz Delay\n\nConsider the following process. Start with an integer `n` and repeatedly applying the operation:\n* if n is even, divide n by 2,\n* if n is odd, multiply n by 3 and add 1\nFind `0 < n < upper` so that it takes exactly `t` steps to reach 1.\n\n\nFor instance,\nthe number `n=9780657630` takes 1,132 steps and the number `n=93,571,393,692,802,302` takes\n2,091 steps, according to the [Wikipedia article](https://en.wikipedia.org/wiki/Collatz_conjecture)\n\nNow, this problem can be solved trivially by taking exponentially large `n = 2 ** t` so we also bound the\nnumber of bits of the solution to be upper.\n\nSee [this webpage](http://www.ericr.nl/wondrous/delrecs.html) for up-to-date records.",
    "weight": 1.0
  },
  {
    "name": "CollatzDelay:2",
    "sat": "def sat(n: int, t=2000, upper=206):\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= 2 ** upper",
    "ans_type": "int",
    "sol_header": "def sol(t=2000, upper=206):",
    "sol_docstring": "    \"\"\"\n    Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n    * if n is even, divide n by 2,\n    * if n is odd, multiply n by 3 and add 1\n    Find `0 < n < upper` so that it takes exactly `t` steps to reach 1.\n    \"\"\"",
    "sol_bodies": [],
    "module": "number_theory.py",
    "notes": "Collatz Delay\n\nConsider the following process. Start with an integer `n` and repeatedly applying the operation:\n* if n is even, divide n by 2,\n* if n is odd, multiply n by 3 and add 1\nFind `0 < n < upper` so that it takes exactly `t` steps to reach 1.\n\n\nFor instance,\nthe number `n=9780657630` takes 1,132 steps and the number `n=93,571,393,692,802,302` takes\n2,091 steps, according to the [Wikipedia article](https://en.wikipedia.org/wiki/Collatz_conjecture)\n\nNow, this problem can be solved trivially by taking exponentially large `n = 2 ** t` so we also bound the\nnumber of bits of the solution to be upper.\n\nSee [this webpage](http://www.ericr.nl/wondrous/delrecs.html) for up-to-date records.",
    "weight": 1.0
  },
  {
    "name": "CollatzDelay:3",
    "sat": "def sat(n: int, t=2283, upper=238):\n    m = n\n    for i in range(t):\n        if n <= 1:\n            return False\n        n = 3 * n + 1 if n % 2 else n // 2\n    return n == 1 and m <= 2 ** upper",
    "ans_type": "int",
    "sol_header": "def sol(t=2283, upper=238):",
    "sol_docstring": "    \"\"\"\n    Consider the following process. Start with an integer `n` and repeatedly applying the operation:\n    * if n is even, divide n by 2,\n    * if n is odd, multiply n by 3 and add 1\n    Find `0 < n < upper` so that it takes exactly `t` steps to reach 1.\n    \"\"\"",
    "sol_bodies": [],
    "module": "number_theory.py",
    "notes": "Collatz Delay\n\nConsider the following process. Start with an integer `n` and repeatedly applying the operation:\n* if n is even, divide n by 2,\n* if n is odd, multiply n by 3 and add 1\nFind `0 < n < upper` so that it takes exactly `t` steps to reach 1.\n\n\nFor instance,\nthe number `n=9780657630` takes 1,132 steps and the number `n=93,571,393,692,802,302` takes\n2,091 steps, according to the [Wikipedia article](https://en.wikipedia.org/wiki/Collatz_conjecture)\n\nNow, this problem can be solved trivially by taking exponentially large `n = 2 ** t` so we also bound the\nnumber of bits of the solution to be upper.\n\nSee [this webpage](http://www.ericr.nl/wondrous/delrecs.html) for up-to-date records.",
    "weight": 1.0
  },
  {
    "name": "Lehmer:0",
    "sat": "def sat(n: int):\n    return pow(2, n, n) == 3",
    "ans_type": "int",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"Find n  such that 2^n mod n = 3\"\"\"",
    "sol_bodies": [
      "    return 4700063497"
    ],
    "module": "number_theory.py",
    "notes": "Lehmer puzzle\n\nAccording to [The Strong Law of Large Numbers](https://doi.org/10.2307/2322249) Richard K. Guy states that\n    D. H. & Emma Lehmer discovered that 2^n = 3 (mod n) for n = 4700063497,\n    but for no smaller n > 1",
    "weight": 1.0
  },
  {
    "name": "BirthdayParadox:0",
    "sat": "def sat(n: int, year_len=365):\n    prob = 1.0\n    for i in range(n):\n        prob *= (year_len - i) / year_len\n    return (prob - 0.5) ** 2 <= 1/year_len",
    "ans_type": "int",
    "sol_header": "def sol(year_len=365):",
    "sol_docstring": "    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/2.\"\"\"",
    "sol_bodies": [
      "    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]"
    ],
    "module": "probability.py",
    "notes": "Adaptation of the classic\n[Birthday Problem](https://en.wikipedia.org/wiki/Birthday_problem (Mathematical Problems category)).\n\nThe year length is year_len (365 is earth, while Neptune year is 60,182).",
    "weight": 1.0
  },
  {
    "name": "BirthdayParadox:1",
    "sat": "def sat(n: int, year_len=60182):\n    prob = 1.0\n    for i in range(n):\n        prob *= (year_len - i) / year_len\n    return (prob - 0.5) ** 2 <= 1/year_len",
    "ans_type": "int",
    "sol_header": "def sol(year_len=60182):",
    "sol_docstring": "    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/2.\"\"\"",
    "sol_bodies": [
      "    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]"
    ],
    "module": "probability.py",
    "notes": "Adaptation of the classic\n[Birthday Problem](https://en.wikipedia.org/wiki/Birthday_problem (Mathematical Problems category)).\n\nThe year length is year_len (365 is earth, while Neptune year is 60,182).",
    "weight": 1.0
  },
  {
    "name": "BirthdayParadox:2",
    "sat": "def sat(n: int, year_len=2):\n    prob = 1.0\n    for i in range(n):\n        prob *= (year_len - i) / year_len\n    return (prob - 0.5) ** 2 <= 1/year_len",
    "ans_type": "int",
    "sol_header": "def sol(year_len=2):",
    "sol_docstring": "    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/2.\"\"\"",
    "sol_bodies": [
      "    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]"
    ],
    "module": "probability.py",
    "notes": "Adaptation of the classic\n[Birthday Problem](https://en.wikipedia.org/wiki/Birthday_problem (Mathematical Problems category)).\n\nThe year length is year_len (365 is earth, while Neptune year is 60,182).",
    "weight": 1.0
  },
  {
    "name": "BirthdayParadox:3",
    "sat": "def sat(n: int, year_len=3):\n    prob = 1.0\n    for i in range(n):\n        prob *= (year_len - i) / year_len\n    return (prob - 0.5) ** 2 <= 1/year_len",
    "ans_type": "int",
    "sol_header": "def sol(year_len=3):",
    "sol_docstring": "    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/2.\"\"\"",
    "sol_bodies": [
      "    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]"
    ],
    "module": "probability.py",
    "notes": "Adaptation of the classic\n[Birthday Problem](https://en.wikipedia.org/wiki/Birthday_problem (Mathematical Problems category)).\n\nThe year length is year_len (365 is earth, while Neptune year is 60,182).",
    "weight": 1.0
  },
  {
    "name": "BirthdayParadoxMonteCarlo:0",
    "sat": "def sat(n: int, year_len=365):\n    import random\n    random.seed(0)\n    K = 1000  # number of samples\n    prob = sum(len({random.randrange(year_len) for i in range(n)}) < n for j in range(K)) / K\n    return (prob - 0.5) ** 2 <= year_len",
    "ans_type": "int",
    "sol_header": "def sol(year_len=365):",
    "sol_docstring": "    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/2.\"\"\"",
    "sol_bodies": [
      "    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]"
    ],
    "module": "probability.py",
    "notes": "A slower, Monte Carlo version of the above Birthday Paradox problem.",
    "weight": 1.0
  },
  {
    "name": "BirthdayParadoxMonteCarlo:1",
    "sat": "def sat(n: int, year_len=60182):\n    import random\n    random.seed(0)\n    K = 1000  # number of samples\n    prob = sum(len({random.randrange(year_len) for i in range(n)}) < n for j in range(K)) / K\n    return (prob - 0.5) ** 2 <= year_len",
    "ans_type": "int",
    "sol_header": "def sol(year_len=60182):",
    "sol_docstring": "    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/2.\"\"\"",
    "sol_bodies": [
      "    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]"
    ],
    "module": "probability.py",
    "notes": "A slower, Monte Carlo version of the above Birthday Paradox problem.",
    "weight": 1.0
  },
  {
    "name": "BirthdayParadoxMonteCarlo:2",
    "sat": "def sat(n: int, year_len=2):\n    import random\n    random.seed(0)\n    K = 1000  # number of samples\n    prob = sum(len({random.randrange(year_len) for i in range(n)}) < n for j in range(K)) / K\n    return (prob - 0.5) ** 2 <= year_len",
    "ans_type": "int",
    "sol_header": "def sol(year_len=2):",
    "sol_docstring": "    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/2.\"\"\"",
    "sol_bodies": [
      "    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]"
    ],
    "module": "probability.py",
    "notes": "A slower, Monte Carlo version of the above Birthday Paradox problem.",
    "weight": 1.0
  },
  {
    "name": "BirthdayParadoxMonteCarlo:3",
    "sat": "def sat(n: int, year_len=3):\n    import random\n    random.seed(0)\n    K = 1000  # number of samples\n    prob = sum(len({random.randrange(year_len) for i in range(n)}) < n for j in range(K)) / K\n    return (prob - 0.5) ** 2 <= year_len",
    "ans_type": "int",
    "sol_header": "def sol(year_len=3):",
    "sol_docstring": "    \"\"\"Find n such that the probability of two people having the same birthday in a group of n is near 1/2.\"\"\"",
    "sol_bodies": [
      "    n = 1\n    distinct_prob = 1.0\n    best = (0.5, 1)  # (difference between probability and 1/2, n)\n    while distinct_prob > 0.5:\n        distinct_prob *= (year_len - n) / year_len\n        n += 1\n        best = min(best, (abs(0.5 - distinct_prob), n))\n\n    return best[1]"
    ],
    "module": "probability.py",
    "notes": "A slower, Monte Carlo version of the above Birthday Paradox problem.",
    "weight": 1.0
  },
  {
    "name": "BallotProblem:0",
    "sat": "def sat(counts: List[int], target_prob=0.5):\n    m, n = counts  # m = num 1's, n = num -1's\n    probs = [1.0] + [0.0] * n  # probs[n] is probability for current m, starting with m = 1\n    for i in range(2, m + 1):  # compute probs using dynamic programming for m = i\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = (\n                    j / (i + j) * probs[j - 1]  # last element is a -1 so use probs\n                    +\n                    i / (i + j) * old_probs[j]  # last element is a 1 so use old_probs, m = i - 1\n            )\n    return abs(probs[n] - target_prob) < 1e-6",
    "ans_type": "List[int]",
    "sol_header": "def sol(target_prob=0.5):",
    "sol_docstring": "    \"\"\"\n    Suppose a list of m 1's and n -1's are permuted at random.\n    What is the probability that all of the cumulative sums are positive?\n    The goal is to find counts = [m, n] that make the probability of the ballot problem close to target_prob.\n    \"\"\"",
    "sol_bodies": [
      "    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]"
    ],
    "module": "probability.py",
    "notes": "See the [Wikipedia article](https://en.wikipedia.org/wiki/Bertrand%27s_ballot_theorem) or\nor  [Addario-Berry L., Reed B.A. (2008) Ballot Theorems, Old and New. In: Gyori E., Katona G.O.H., Lov\u00e1sz L.,\nS\u00e1gi G. (eds) Horizons of Combinatorics. Bolyai Society Mathematical Studies, vol 17.\nSpringer, Berlin, Heidelberg.](https://doi.org/10.1007/978-3-540-77200-2_1)",
    "weight": 1.0
  },
  {
    "name": "BallotProblem:1",
    "sat": "def sat(counts: List[int], target_prob=0.1791044776119403):\n    m, n = counts  # m = num 1's, n = num -1's\n    probs = [1.0] + [0.0] * n  # probs[n] is probability for current m, starting with m = 1\n    for i in range(2, m + 1):  # compute probs using dynamic programming for m = i\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = (\n                    j / (i + j) * probs[j - 1]  # last element is a -1 so use probs\n                    +\n                    i / (i + j) * old_probs[j]  # last element is a 1 so use old_probs, m = i - 1\n            )\n    return abs(probs[n] - target_prob) < 1e-6",
    "ans_type": "List[int]",
    "sol_header": "def sol(target_prob=0.1791044776119403):",
    "sol_docstring": "    \"\"\"\n    Suppose a list of m 1's and n -1's are permuted at random.\n    What is the probability that all of the cumulative sums are positive?\n    The goal is to find counts = [m, n] that make the probability of the ballot problem close to target_prob.\n    \"\"\"",
    "sol_bodies": [
      "    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]"
    ],
    "module": "probability.py",
    "notes": "See the [Wikipedia article](https://en.wikipedia.org/wiki/Bertrand%27s_ballot_theorem) or\nor  [Addario-Berry L., Reed B.A. (2008) Ballot Theorems, Old and New. In: Gyori E., Katona G.O.H., Lov\u00e1sz L.,\nS\u00e1gi G. (eds) Horizons of Combinatorics. Bolyai Society Mathematical Studies, vol 17.\nSpringer, Berlin, Heidelberg.](https://doi.org/10.1007/978-3-540-77200-2_1)",
    "weight": 1.0
  },
  {
    "name": "BallotProblem:2",
    "sat": "def sat(counts: List[int], target_prob=0.03125):\n    m, n = counts  # m = num 1's, n = num -1's\n    probs = [1.0] + [0.0] * n  # probs[n] is probability for current m, starting with m = 1\n    for i in range(2, m + 1):  # compute probs using dynamic programming for m = i\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = (\n                    j / (i + j) * probs[j - 1]  # last element is a -1 so use probs\n                    +\n                    i / (i + j) * old_probs[j]  # last element is a 1 so use old_probs, m = i - 1\n            )\n    return abs(probs[n] - target_prob) < 1e-6",
    "ans_type": "List[int]",
    "sol_header": "def sol(target_prob=0.03125):",
    "sol_docstring": "    \"\"\"\n    Suppose a list of m 1's and n -1's are permuted at random.\n    What is the probability that all of the cumulative sums are positive?\n    The goal is to find counts = [m, n] that make the probability of the ballot problem close to target_prob.\n    \"\"\"",
    "sol_bodies": [
      "    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]"
    ],
    "module": "probability.py",
    "notes": "See the [Wikipedia article](https://en.wikipedia.org/wiki/Bertrand%27s_ballot_theorem) or\nor  [Addario-Berry L., Reed B.A. (2008) Ballot Theorems, Old and New. In: Gyori E., Katona G.O.H., Lov\u00e1sz L.,\nS\u00e1gi G. (eds) Horizons of Combinatorics. Bolyai Society Mathematical Studies, vol 17.\nSpringer, Berlin, Heidelberg.](https://doi.org/10.1007/978-3-540-77200-2_1)",
    "weight": 1.0
  },
  {
    "name": "BallotProblem:3",
    "sat": "def sat(counts: List[int], target_prob=0.5803571428571429):\n    m, n = counts  # m = num 1's, n = num -1's\n    probs = [1.0] + [0.0] * n  # probs[n] is probability for current m, starting with m = 1\n    for i in range(2, m + 1):  # compute probs using dynamic programming for m = i\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = (\n                    j / (i + j) * probs[j - 1]  # last element is a -1 so use probs\n                    +\n                    i / (i + j) * old_probs[j]  # last element is a 1 so use old_probs, m = i - 1\n            )\n    return abs(probs[n] - target_prob) < 1e-6",
    "ans_type": "List[int]",
    "sol_header": "def sol(target_prob=0.5803571428571429):",
    "sol_docstring": "    \"\"\"\n    Suppose a list of m 1's and n -1's are permuted at random.\n    What is the probability that all of the cumulative sums are positive?\n    The goal is to find counts = [m, n] that make the probability of the ballot problem close to target_prob.\n    \"\"\"",
    "sol_bodies": [
      "    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]"
    ],
    "module": "probability.py",
    "notes": "See the [Wikipedia article](https://en.wikipedia.org/wiki/Bertrand%27s_ballot_theorem) or\nor  [Addario-Berry L., Reed B.A. (2008) Ballot Theorems, Old and New. In: Gyori E., Katona G.O.H., Lov\u00e1sz L.,\nS\u00e1gi G. (eds) Horizons of Combinatorics. Bolyai Society Mathematical Studies, vol 17.\nSpringer, Berlin, Heidelberg.](https://doi.org/10.1007/978-3-540-77200-2_1)",
    "weight": 1.0
  },
  {
    "name": "BallotProblem:4",
    "sat": "def sat(counts: List[int], target_prob=0.7142857142857143):\n    m, n = counts  # m = num 1's, n = num -1's\n    probs = [1.0] + [0.0] * n  # probs[n] is probability for current m, starting with m = 1\n    for i in range(2, m + 1):  # compute probs using dynamic programming for m = i\n        old_probs = probs\n        probs = [1.0] + [0.0] * n\n        for j in range(1, min(n + 1, i)):\n            probs[j] = (\n                    j / (i + j) * probs[j - 1]  # last element is a -1 so use probs\n                    +\n                    i / (i + j) * old_probs[j]  # last element is a 1 so use old_probs, m = i - 1\n            )\n    return abs(probs[n] - target_prob) < 1e-6",
    "ans_type": "List[int]",
    "sol_header": "def sol(target_prob=0.7142857142857143):",
    "sol_docstring": "    \"\"\"\n    Suppose a list of m 1's and n -1's are permuted at random.\n    What is the probability that all of the cumulative sums are positive?\n    The goal is to find counts = [m, n] that make the probability of the ballot problem close to target_prob.\n    \"\"\"",
    "sol_bodies": [
      "    for m in range(1, 10000):\n        n = round(m * (1 - target_prob) / (1 + target_prob))\n        if abs(target_prob - (m - n) / (m + n)) < 1e-6:\n            return [m, n]"
    ],
    "module": "probability.py",
    "notes": "See the [Wikipedia article](https://en.wikipedia.org/wiki/Bertrand%27s_ballot_theorem) or\nor  [Addario-Berry L., Reed B.A. (2008) Ballot Theorems, Old and New. In: Gyori E., Katona G.O.H., Lov\u00e1sz L.,\nS\u00e1gi G. (eds) Horizons of Combinatorics. Bolyai Society Mathematical Studies, vol 17.\nSpringer, Berlin, Heidelberg.](https://doi.org/10.1007/978-3-540-77200-2_1)",
    "weight": 1.0
  },
  {
    "name": "BinomialProbabilities:0",
    "sat": "def sat(counts: List[int], p=0.5, target_prob=0.0625):\n    from itertools import product\n    a, b = counts\n    n = a + b\n    prob = (p ** a) * ((1-p) ** b)\n    tot = sum([prob for sample in product([0, 1], repeat=n) if sum(sample) == a])\n    return abs(tot - target_prob) < 1e-6",
    "ans_type": "List[int]",
    "sol_header": "def sol(p=0.5, target_prob=0.0625):",
    "sol_docstring": "    \"\"\"Find counts = [a, b] so that the probability of  a H's and b T's among a + b coin flips is ~ target_prob.\"\"\"",
    "sol_bodies": [
      "    probs = [1.0]\n    q = 1 - p\n    while len(probs) < 20:\n        probs = [(p * a + q * b) for a, b in zip([0] + probs, probs + [0])]\n        answers = [i for i, p in enumerate(probs) if abs(p - target_prob) < 1e-6]\n        if answers:\n            return [answers[0], len(probs) - 1 - answers[0]]"
    ],
    "module": "probability.py",
    "notes": "See [Binomial distribution](https://en.wikipedia.org/wiki/Binomial_distribution)",
    "weight": 1.0
  },
  {
    "name": "BinomialProbabilities:1",
    "sat": "def sat(counts: List[int], p=0.7588822808660473, target_prob=0.41658075878732215):\n    from itertools import product\n    a, b = counts\n    n = a + b\n    prob = (p ** a) * ((1-p) ** b)\n    tot = sum([prob for sample in product([0, 1], repeat=n) if sum(sample) == a])\n    return abs(tot - target_prob) < 1e-6",
    "ans_type": "List[int]",
    "sol_header": "def sol(p=0.7588822808660473, target_prob=0.41658075878732215):",
    "sol_docstring": "    \"\"\"Find counts = [a, b] so that the probability of  a H's and b T's among a + b coin flips is ~ target_prob.\"\"\"",
    "sol_bodies": [
      "    probs = [1.0]\n    q = 1 - p\n    while len(probs) < 20:\n        probs = [(p * a + q * b) for a, b in zip([0] + probs, probs + [0])]\n        answers = [i for i, p in enumerate(probs) if abs(p - target_prob) < 1e-6]\n        if answers:\n            return [answers[0], len(probs) - 1 - answers[0]]"
    ],
    "module": "probability.py",
    "notes": "See [Binomial distribution](https://en.wikipedia.org/wiki/Binomial_distribution)",
    "weight": 1.0
  },
  {
    "name": "BinomialProbabilities:2",
    "sat": "def sat(counts: List[int], p=0.6569421516251613, target_prob=0.01872902529162693):\n    from itertools import product\n    a, b = counts\n    n = a + b\n    prob = (p ** a) * ((1-p) ** b)\n    tot = sum([prob for sample in product([0, 1], repeat=n) if sum(sample) == a])\n    return abs(tot - target_prob) < 1e-6",
    "ans_type": "List[int]",
    "sol_header": "def sol(p=0.6569421516251613, target_prob=0.01872902529162693):",
    "sol_docstring": "    \"\"\"Find counts = [a, b] so that the probability of  a H's and b T's among a + b coin flips is ~ target_prob.\"\"\"",
    "sol_bodies": [
      "    probs = [1.0]\n    q = 1 - p\n    while len(probs) < 20:\n        probs = [(p * a + q * b) for a, b in zip([0] + probs, probs + [0])]\n        answers = [i for i, p in enumerate(probs) if abs(p - target_prob) < 1e-6]\n        if answers:\n            return [answers[0], len(probs) - 1 - answers[0]]"
    ],
    "module": "probability.py",
    "notes": "See [Binomial distribution](https://en.wikipedia.org/wiki/Binomial_distribution)",
    "weight": 1.0
  },
  {
    "name": "BinomialProbabilities:3",
    "sat": "def sat(counts: List[int], p=0.20001220211746595, target_prob=0.13419930454361995):\n    from itertools import product\n    a, b = counts\n    n = a + b\n    prob = (p ** a) * ((1-p) ** b)\n    tot = sum([prob for sample in product([0, 1], repeat=n) if sum(sample) == a])\n    return abs(tot - target_prob) < 1e-6",
    "ans_type": "List[int]",
    "sol_header": "def sol(p=0.20001220211746595, target_prob=0.13419930454361995):",
    "sol_docstring": "    \"\"\"Find counts = [a, b] so that the probability of  a H's and b T's among a + b coin flips is ~ target_prob.\"\"\"",
    "sol_bodies": [
      "    probs = [1.0]\n    q = 1 - p\n    while len(probs) < 20:\n        probs = [(p * a + q * b) for a, b in zip([0] + probs, probs + [0])]\n        answers = [i for i, p in enumerate(probs) if abs(p - target_prob) < 1e-6]\n        if answers:\n            return [answers[0], len(probs) - 1 - answers[0]]"
    ],
    "module": "probability.py",
    "notes": "See [Binomial distribution](https://en.wikipedia.org/wiki/Binomial_distribution)",
    "weight": 1.0
  },
  {
    "name": "BinomialProbabilities:4",
    "sat": "def sat(counts: List[int], p=0.004837079863490135, target_prob=3.5517791266002235e-13):\n    from itertools import product\n    a, b = counts\n    n = a + b\n    prob = (p ** a) * ((1-p) ** b)\n    tot = sum([prob for sample in product([0, 1], repeat=n) if sum(sample) == a])\n    return abs(tot - target_prob) < 1e-6",
    "ans_type": "List[int]",
    "sol_header": "def sol(p=0.004837079863490135, target_prob=3.5517791266002235e-13):",
    "sol_docstring": "    \"\"\"Find counts = [a, b] so that the probability of  a H's and b T's among a + b coin flips is ~ target_prob.\"\"\"",
    "sol_bodies": [
      "    probs = [1.0]\n    q = 1 - p\n    while len(probs) < 20:\n        probs = [(p * a + q * b) for a, b in zip([0] + probs, probs + [0])]\n        answers = [i for i, p in enumerate(probs) if abs(p - target_prob) < 1e-6]\n        if answers:\n            return [answers[0], len(probs) - 1 - answers[0]]"
    ],
    "module": "probability.py",
    "notes": "See [Binomial distribution](https://en.wikipedia.org/wiki/Binomial_distribution)",
    "weight": 1.0
  },
  {
    "name": "ExponentialProbability:0",
    "sat": "def sat(p_stop: float, steps=10, target_prob=0.5):\n    prob = sum(p_stop*(1-p_stop)**t for t in range(steps))\n    return abs(prob - target_prob) < 1e-6",
    "ans_type": "float",
    "sol_header": "def sol(steps=10, target_prob=0.5):",
    "sol_docstring": "    \"\"\"\n    Find p_stop so that the probability of stopping in steps or fewer time steps is the given target_prob if you\n    stop each step with probability p_stop\n    \"\"\"",
    "sol_bodies": [
      "    return 1 - (1 - target_prob) ** (1.0/steps)"
    ],
    "module": "probability.py",
    "notes": "See [Exponential distribution](https://en.wikipedia.org/wiki/Exponential_distribution)",
    "weight": 1.0
  },
  {
    "name": "ExponentialProbability:1",
    "sat": "def sat(p_stop: float, steps=43, target_prob=0.2661542669448821):\n    prob = sum(p_stop*(1-p_stop)**t for t in range(steps))\n    return abs(prob - target_prob) < 1e-6",
    "ans_type": "float",
    "sol_header": "def sol(steps=43, target_prob=0.2661542669448821):",
    "sol_docstring": "    \"\"\"\n    Find p_stop so that the probability of stopping in steps or fewer time steps is the given target_prob if you\n    stop each step with probability p_stop\n    \"\"\"",
    "sol_bodies": [
      "    return 1 - (1 - target_prob) ** (1.0/steps)"
    ],
    "module": "probability.py",
    "notes": "See [Exponential distribution](https://en.wikipedia.org/wiki/Exponential_distribution)",
    "weight": 1.0
  },
  {
    "name": "ExponentialProbability:2",
    "sat": "def sat(p_stop: float, steps=91, target_prob=0.03729141037377781):\n    prob = sum(p_stop*(1-p_stop)**t for t in range(steps))\n    return abs(prob - target_prob) < 1e-6",
    "ans_type": "float",
    "sol_header": "def sol(steps=91, target_prob=0.03729141037377781):",
    "sol_docstring": "    \"\"\"\n    Find p_stop so that the probability of stopping in steps or fewer time steps is the given target_prob if you\n    stop each step with probability p_stop\n    \"\"\"",
    "sol_bodies": [
      "    return 1 - (1 - target_prob) ** (1.0/steps)"
    ],
    "module": "probability.py",
    "notes": "See [Exponential distribution](https://en.wikipedia.org/wiki/Exponential_distribution)",
    "weight": 1.0
  },
  {
    "name": "ExponentialProbability:3",
    "sat": "def sat(p_stop: float, steps=11, target_prob=0.9742781783529525):\n    prob = sum(p_stop*(1-p_stop)**t for t in range(steps))\n    return abs(prob - target_prob) < 1e-6",
    "ans_type": "float",
    "sol_header": "def sol(steps=11, target_prob=0.9742781783529525):",
    "sol_docstring": "    \"\"\"\n    Find p_stop so that the probability of stopping in steps or fewer time steps is the given target_prob if you\n    stop each step with probability p_stop\n    \"\"\"",
    "sol_bodies": [
      "    return 1 - (1 - target_prob) ** (1.0/steps)"
    ],
    "module": "probability.py",
    "notes": "See [Exponential distribution](https://en.wikipedia.org/wiki/Exponential_distribution)",
    "weight": 1.0
  },
  {
    "name": "ExponentialProbability:4",
    "sat": "def sat(p_stop: float, steps=65, target_prob=0.8318555442956944):\n    prob = sum(p_stop*(1-p_stop)**t for t in range(steps))\n    return abs(prob - target_prob) < 1e-6",
    "ans_type": "float",
    "sol_header": "def sol(steps=65, target_prob=0.8318555442956944):",
    "sol_docstring": "    \"\"\"\n    Find p_stop so that the probability of stopping in steps or fewer time steps is the given target_prob if you\n    stop each step with probability p_stop\n    \"\"\"",
    "sol_bodies": [
      "    return 1 - (1 - target_prob) ** (1.0/steps)"
    ],
    "module": "probability.py",
    "notes": "See [Exponential distribution](https://en.wikipedia.org/wiki/Exponential_distribution)",
    "weight": 1.0
  },
  {
    "name": "HelloWorld:0",
    "sat": "def sat(s: str):\n    return s + 'world' == 'Hello world'",
    "ans_type": "str",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"Find a string that when concatenated onto 'world' gives 'Hello world'.\"\"\"",
    "sol_bodies": [],
    "module": "trivial_inverse.py",
    "notes": "Trivial example, no solutions provided",
    "weight": 0.2
  },
  {
    "name": "BackWorlds:0",
    "sat": "def sat(s: str):\n    return s[::-1] + 'world' == 'Hello world'",
    "ans_type": "str",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"Find a string that when reversed and concatenated onto 'world' gives 'Hello world'.\"\"\"",
    "sol_bodies": [
      "    return ' olleH'",
      "    # solution methods must begin with 'sol'\n    return 'Hello '[::-1]"
    ],
    "module": "trivial_inverse.py",
    "notes": "We provide two solutions",
    "weight": 0.2
  },
  {
    "name": "StrAdd:0",
    "sat": "def sat(st: str, a=\"world\", b=\"Hello world\"):\n    return st + a == b",
    "ans_type": "str",
    "sol_header": "def sol(a=\"world\", b=\"Hello world\"):",
    "sol_docstring": "    \"\"\"Solve simple string addition problem.\"\"\"",
    "sol_bodies": [
      "    return b[:len(b) - len(a)]"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrAdd:1",
    "sat": "def sat(st: str, a=\"zine\", b=\"cerofilimybazine\"):\n    return st + a == b",
    "ans_type": "str",
    "sol_header": "def sol(a=\"zine\", b=\"cerofilimybazine\"):",
    "sol_docstring": "    \"\"\"Solve simple string addition problem.\"\"\"",
    "sol_bodies": [
      "    return b[:len(b) - len(a)]"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrAdd:2",
    "sat": "def sat(st: str, a=\"id\", b=\"xakid\"):\n    return st + a == b",
    "ans_type": "str",
    "sol_header": "def sol(a=\"id\", b=\"xakid\"):",
    "sol_docstring": "    \"\"\"Solve simple string addition problem.\"\"\"",
    "sol_bodies": [
      "    return b[:len(b) - len(a)]"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrAdd:3",
    "sat": "def sat(st: str, a=\"dyr\", b=\"dyr\"):\n    return st + a == b",
    "ans_type": "str",
    "sol_header": "def sol(a=\"dyr\", b=\"dyr\"):",
    "sol_docstring": "    \"\"\"Solve simple string addition problem.\"\"\"",
    "sol_bodies": [
      "    return b[:len(b) - len(a)]"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrAdd:4",
    "sat": "def sat(st: str, a=\"s\", b=\"tos\"):\n    return st + a == b",
    "ans_type": "str",
    "sol_header": "def sol(a=\"s\", b=\"tos\"):",
    "sol_docstring": "    \"\"\"Solve simple string addition problem.\"\"\"",
    "sol_bodies": [
      "    return b[:len(b) - len(a)]"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrSetLen:0",
    "sat": "def sat(s: str, dups=2021):\n    return len(set(s)) == len(s) - dups",
    "ans_type": "str",
    "sol_header": "def sol(dups=2021):",
    "sol_docstring": "    \"\"\"Find a string with dups duplicate chars\"\"\"",
    "sol_bodies": [
      "    return \"a\" * (dups + 1)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrSetLen:1",
    "sat": "def sat(s: str, dups=0):\n    return len(set(s)) == len(s) - dups",
    "ans_type": "str",
    "sol_header": "def sol(dups=0):",
    "sol_docstring": "    \"\"\"Find a string with dups duplicate chars\"\"\"",
    "sol_bodies": [
      "    return \"a\" * (dups + 1)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrSetLen:2",
    "sat": "def sat(s: str, dups=1):\n    return len(set(s)) == len(s) - dups",
    "ans_type": "str",
    "sol_header": "def sol(dups=1):",
    "sol_docstring": "    \"\"\"Find a string with dups duplicate chars\"\"\"",
    "sol_bodies": [
      "    return \"a\" * (dups + 1)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrSetLen:3",
    "sat": "def sat(s: str, dups=2):\n    return len(set(s)) == len(s) - dups",
    "ans_type": "str",
    "sol_header": "def sol(dups=2):",
    "sol_docstring": "    \"\"\"Find a string with dups duplicate chars\"\"\"",
    "sol_bodies": [
      "    return \"a\" * (dups + 1)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrMul:0",
    "sat": "def sat(s: str, target=\"foofoofoofoo\", n=2):\n    return s * n == target",
    "ans_type": "str",
    "sol_header": "def sol(target=\"foofoofoofoo\", n=2):",
    "sol_docstring": "    \"\"\"Find a string which when repeated n times gives target\"\"\"",
    "sol_bodies": [
      "    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrMul:1",
    "sat": "def sat(s: str, target=\"biquacagegichisykbiquacagegichisykbiquacagegichisyk\", n=3):\n    return s * n == target",
    "ans_type": "str",
    "sol_header": "def sol(target=\"biquacagegichisykbiquacagegichisykbiquacagegichisyk\", n=3):",
    "sol_docstring": "    \"\"\"Find a string which when repeated n times gives target\"\"\"",
    "sol_bodies": [
      "    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrMul:2",
    "sat": "def sat(s: str, target=\"hutextogoxanithiru\", n=1):\n    return s * n == target",
    "ans_type": "str",
    "sol_header": "def sol(target=\"hutextogoxanithiru\", n=1):",
    "sol_docstring": "    \"\"\"Find a string which when repeated n times gives target\"\"\"",
    "sol_bodies": [
      "    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrMul:3",
    "sat": "def sat(s: str, target=\"sisisisisisisisisisisisisisi\", n=7):\n    return s * n == target",
    "ans_type": "str",
    "sol_header": "def sol(target=\"sisisisisisisisisisisisisisi\", n=7):",
    "sol_docstring": "    \"\"\"Find a string which when repeated n times gives target\"\"\"",
    "sol_bodies": [
      "    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrMul:4",
    "sat": "def sat(s: str, target=\"fuchomurybaxefuchomurybaxefuchomurybaxefuchomurybaxefuchomurybaxefuchomurybaxefuchomurybaxe\", n=7):\n    return s * n == target",
    "ans_type": "str",
    "sol_header": "def sol(target=\"fuchomurybaxefuchomurybaxefuchomurybaxefuchomurybaxefuchomurybaxefuchomurybaxefuchomurybaxe\", n=7):",
    "sol_docstring": "    \"\"\"Find a string which when repeated n times gives target\"\"\"",
    "sol_bodies": [
      "    if n == 0:\n        return ''\n    return target[:len(target) // n]"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrMul2:0",
    "sat": "def sat(n: int, target=\"foofoofoofoo\", s=\"foofoo\"):\n    return s * n == target",
    "ans_type": "int",
    "sol_header": "def sol(target=\"foofoofoofoo\", s=\"foofoo\"):",
    "sol_docstring": "    \"\"\"Find n such that s repeated n times gives target\"\"\"",
    "sol_bodies": [
      "    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrMul2:1",
    "sat": "def sat(n: int, target=\"\", s=\"jan\"):\n    return s * n == target",
    "ans_type": "int",
    "sol_header": "def sol(target=\"\", s=\"jan\"):",
    "sol_docstring": "    \"\"\"Find n such that s repeated n times gives target\"\"\"",
    "sol_bodies": [
      "    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrMul2:2",
    "sat": "def sat(n: int, target=\"koquuwibehyckoquuwibehyckoquuwibehyckoquuwibehyckoquuwibehyckoquuwibehyckoquuwibehyc\", s=\"koquuwibehyc\"):\n    return s * n == target",
    "ans_type": "int",
    "sol_header": "def sol(target=\"koquuwibehyckoquuwibehyckoquuwibehyckoquuwibehyckoquuwibehyckoquuwibehyckoquuwibehyc\", s=\"koquuwibehyc\"):",
    "sol_docstring": "    \"\"\"Find n such that s repeated n times gives target\"\"\"",
    "sol_bodies": [
      "    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrMul2:3",
    "sat": "def sat(n: int, target=\"kasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyz\", s=\"kasujyzkasujyz\"):\n    return s * n == target",
    "ans_type": "int",
    "sol_header": "def sol(target=\"kasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyzkasujyz\", s=\"kasujyzkasujyz\"):",
    "sol_docstring": "    \"\"\"Find n such that s repeated n times gives target\"\"\"",
    "sol_bodies": [
      "    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrMul2:4",
    "sat": "def sat(n: int, target=\"kedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuth\", s=\"kedezygijithequuthkedezygijithequuth\"):\n    return s * n == target",
    "ans_type": "int",
    "sol_header": "def sol(target=\"kedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuthkedezygijithequuth\", s=\"kedezygijithequuthkedezygijithequuth\"):",
    "sol_docstring": "    \"\"\"Find n such that s repeated n times gives target\"\"\"",
    "sol_bodies": [
      "    if len(s) == 0:\n        return 1\n    return len(target) // len(s)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrLen:0",
    "sat": "def sat(s: str, n=1000):\n    return len(s) == n",
    "ans_type": "str",
    "sol_header": "def sol(n=1000):",
    "sol_docstring": "    \"\"\"Find a string of length n\"\"\"",
    "sol_bodies": [
      "    return 'a' * n"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrLen:1",
    "sat": "def sat(s: str, n=39):\n    return len(s) == n",
    "ans_type": "str",
    "sol_header": "def sol(n=39):",
    "sol_docstring": "    \"\"\"Find a string of length n\"\"\"",
    "sol_bodies": [
      "    return 'a' * n"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrLen:2",
    "sat": "def sat(s: str, n=790):\n    return len(s) == n",
    "ans_type": "str",
    "sol_header": "def sol(n=790):",
    "sol_docstring": "    \"\"\"Find a string of length n\"\"\"",
    "sol_bodies": [
      "    return 'a' * n"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrLen:3",
    "sat": "def sat(s: str, n=485):\n    return len(s) == n",
    "ans_type": "str",
    "sol_header": "def sol(n=485):",
    "sol_docstring": "    \"\"\"Find a string of length n\"\"\"",
    "sol_bodies": [
      "    return 'a' * n"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrLen:4",
    "sat": "def sat(s: str, n=4031):\n    return len(s) == n",
    "ans_type": "str",
    "sol_header": "def sol(n=4031):",
    "sol_docstring": "    \"\"\"Find a string of length n\"\"\"",
    "sol_bodies": [
      "    return 'a' * n"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrAt:0",
    "sat": "def sat(i: int, s=\"cat\", target=\"a\"):\n    return s[i] == target",
    "ans_type": "int",
    "sol_header": "def sol(s=\"cat\", target=\"a\"):",
    "sol_docstring": "    \"\"\"Find the index of target in string s\"\"\"",
    "sol_bodies": [
      "    return s.index(target)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrAt:1",
    "sat": "def sat(i: int, s=\"quadyquady\", target=\"a\"):\n    return s[i] == target",
    "ans_type": "int",
    "sol_header": "def sol(s=\"quadyquady\", target=\"a\"):",
    "sol_docstring": "    \"\"\"Find the index of target in string s\"\"\"",
    "sol_bodies": [
      "    return s.index(target)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrAt:2",
    "sat": "def sat(i: int, s=\"quixatextofazejate\", target=\"i\"):\n    return s[i] == target",
    "ans_type": "int",
    "sol_header": "def sol(s=\"quixatextofazejate\", target=\"i\"):",
    "sol_docstring": "    \"\"\"Find the index of target in string s\"\"\"",
    "sol_bodies": [
      "    return s.index(target)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrAt:3",
    "sat": "def sat(i: int, s=\"thethe\", target=\"e\"):\n    return s[i] == target",
    "ans_type": "int",
    "sol_header": "def sol(s=\"thethe\", target=\"e\"):",
    "sol_docstring": "    \"\"\"Find the index of target in string s\"\"\"",
    "sol_bodies": [
      "    return s.index(target)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrAt:4",
    "sat": "def sat(i: int, s=\"bucudibucudibucudi\", target=\"b\"):\n    return s[i] == target",
    "ans_type": "int",
    "sol_header": "def sol(s=\"bucudibucudibucudi\", target=\"b\"):",
    "sol_docstring": "    \"\"\"Find the index of target in string s\"\"\"",
    "sol_bodies": [
      "    return s.index(target)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrNegAt:0",
    "sat": "def sat(i: int, s=\"cat\", target=\"a\"):\n    return s[i] == target and i < 0",
    "ans_type": "int",
    "sol_header": "def sol(s=\"cat\", target=\"a\"):",
    "sol_docstring": "    \"\"\"Find the index of target in s using a negative index.\"\"\"",
    "sol_bodies": [
      "    return - (len(s) - s.index(target))"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrNegAt:1",
    "sat": "def sat(i: int, s=\"ch\", target=\"c\"):\n    return s[i] == target and i < 0",
    "ans_type": "int",
    "sol_header": "def sol(s=\"ch\", target=\"c\"):",
    "sol_docstring": "    \"\"\"Find the index of target in s using a negative index.\"\"\"",
    "sol_bodies": [
      "    return - (len(s) - s.index(target))"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrNegAt:2",
    "sat": "def sat(i: int, s=\"nydivimocuvacetext\", target=\"y\"):\n    return s[i] == target and i < 0",
    "ans_type": "int",
    "sol_header": "def sol(s=\"nydivimocuvacetext\", target=\"y\"):",
    "sol_docstring": "    \"\"\"Find the index of target in s using a negative index.\"\"\"",
    "sol_bodies": [
      "    return - (len(s) - s.index(target))"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrNegAt:3",
    "sat": "def sat(i: int, s=\"chyxchyx\", target=\"x\"):\n    return s[i] == target and i < 0",
    "ans_type": "int",
    "sol_header": "def sol(s=\"chyxchyx\", target=\"x\"):",
    "sol_docstring": "    \"\"\"Find the index of target in s using a negative index.\"\"\"",
    "sol_bodies": [
      "    return - (len(s) - s.index(target))"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrNegAt:4",
    "sat": "def sat(i: int, s=\"tuchuworyquofojyzusutuchuworyquofojyzusutuchuworyquofojyzusu\", target=\"h\"):\n    return s[i] == target and i < 0",
    "ans_type": "int",
    "sol_header": "def sol(s=\"tuchuworyquofojyzusutuchuworyquofojyzusutuchuworyquofojyzusu\", target=\"h\"):",
    "sol_docstring": "    \"\"\"Find the index of target in s using a negative index.\"\"\"",
    "sol_bodies": [
      "    return - (len(s) - s.index(target))"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrSlice:0",
    "sat": "def sat(inds: List[int], s=\"hello world\", target=\"do\"):\n    i, j, k = inds\n    return s[i:j:k] == target",
    "ans_type": "List[int]",
    "sol_header": "def sol(s=\"hello world\", target=\"do\"):",
    "sol_docstring": "    \"\"\"Find the three slice indices that give the specific target in string s\"\"\"",
    "sol_bodies": [
      "    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrSlice:1",
    "sat": "def sat(inds: List[int], s=\"ninykofiwimninykofiwim\", target=\"\"):\n    i, j, k = inds\n    return s[i:j:k] == target",
    "ans_type": "List[int]",
    "sol_header": "def sol(s=\"ninykofiwimninykofiwim\", target=\"\"):",
    "sol_docstring": "    \"\"\"Find the three slice indices that give the specific target in string s\"\"\"",
    "sol_bodies": [
      "    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrSlice:2",
    "sat": "def sat(inds: List[int], s=\"limerybinylimerybiny\", target=\"n\"):\n    i, j, k = inds\n    return s[i:j:k] == target",
    "ans_type": "List[int]",
    "sol_header": "def sol(s=\"limerybinylimerybiny\", target=\"n\"):",
    "sol_docstring": "    \"\"\"Find the three slice indices that give the specific target in string s\"\"\"",
    "sol_bodies": [
      "    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrSlice:3",
    "sat": "def sat(inds: List[int], s=\"fyzihurothevirechahfyzihurothevirechah\", target=\"\"):\n    i, j, k = inds\n    return s[i:j:k] == target",
    "ans_type": "List[int]",
    "sol_header": "def sol(s=\"fyzihurothevirechahfyzihurothevirechah\", target=\"\"):",
    "sol_docstring": "    \"\"\"Find the three slice indices that give the specific target in string s\"\"\"",
    "sol_bodies": [
      "    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrSlice:4",
    "sat": "def sat(inds: List[int], s=\"kibozekiboze\", target=\"\"):\n    i, j, k = inds\n    return s[i:j:k] == target",
    "ans_type": "List[int]",
    "sol_header": "def sol(s=\"kibozekiboze\", target=\"\"):",
    "sol_docstring": "    \"\"\"Find the three slice indices that give the specific target in string s\"\"\"",
    "sol_bodies": [
      "    from itertools import product\n    for i, j, k in product(range(-len(s) - 1, len(s) + 1), repeat=3):\n        try:\n            if s[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrIndex:0",
    "sat": "def sat(s: str, big_str=\"foobar\", index=2):\n    return big_str.index(s) == index",
    "ans_type": "str",
    "sol_header": "def sol(big_str=\"foobar\", index=2):",
    "sol_docstring": "    \"\"\"Find a string whose *first* index in big_str is index\"\"\"",
    "sol_bodies": [
      "    return big_str[index:]"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrIndex:1",
    "sat": "def sat(s: str, big_str=\"fukulagatextuj\", index=10):\n    return big_str.index(s) == index",
    "ans_type": "str",
    "sol_header": "def sol(big_str=\"fukulagatextuj\", index=10):",
    "sol_docstring": "    \"\"\"Find a string whose *first* index in big_str is index\"\"\"",
    "sol_bodies": [
      "    return big_str[index:]"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrIndex:2",
    "sat": "def sat(s: str, big_str=\"nunalurejijunopyrewithocukopojot\", index=12):\n    return big_str.index(s) == index",
    "ans_type": "str",
    "sol_header": "def sol(big_str=\"nunalurejijunopyrewithocukopojot\", index=12):",
    "sol_docstring": "    \"\"\"Find a string whose *first* index in big_str is index\"\"\"",
    "sol_bodies": [
      "    return big_str[index:]"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrIndex:3",
    "sat": "def sat(s: str, big_str=\"fu\", index=1):\n    return big_str.index(s) == index",
    "ans_type": "str",
    "sol_header": "def sol(big_str=\"fu\", index=1):",
    "sol_docstring": "    \"\"\"Find a string whose *first* index in big_str is index\"\"\"",
    "sol_bodies": [
      "    return big_str[index:]"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrIndex:4",
    "sat": "def sat(s: str, big_str=\"fatextemedyrotichipicecojon\", index=24):\n    return big_str.index(s) == index",
    "ans_type": "str",
    "sol_header": "def sol(big_str=\"fatextemedyrotichipicecojon\", index=24):",
    "sol_docstring": "    \"\"\"Find a string whose *first* index in big_str is index\"\"\"",
    "sol_bodies": [
      "    return big_str[index:]"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrIndex2:0",
    "sat": "def sat(big_str: str, sub_str=\"foobar\", index=2):\n    return big_str.index(sub_str) == index",
    "ans_type": "str",
    "sol_header": "def sol(sub_str=\"foobar\", index=2):",
    "sol_docstring": "    \"\"\"Find a string whose *first* index of sub_str is index\"\"\"",
    "sol_bodies": [
      "    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrIndex2:1",
    "sat": "def sat(big_str: str, sub_str=\"quadox\", index=75):\n    return big_str.index(sub_str) == index",
    "ans_type": "str",
    "sol_header": "def sol(sub_str=\"quadox\", index=75):",
    "sol_docstring": "    \"\"\"Find a string whose *first* index of sub_str is index\"\"\"",
    "sol_bodies": [
      "    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrIndex2:2",
    "sat": "def sat(big_str: str, sub_str=\"votextymuvethic\", index=880):\n    return big_str.index(sub_str) == index",
    "ans_type": "str",
    "sol_header": "def sol(sub_str=\"votextymuvethic\", index=880):",
    "sol_docstring": "    \"\"\"Find a string whose *first* index of sub_str is index\"\"\"",
    "sol_bodies": [
      "    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrIndex2:3",
    "sat": "def sat(big_str: str, sub_str=\"pyrumymasekalihochyvibisamaquythifedetextityvath\", index=0):\n    return big_str.index(sub_str) == index",
    "ans_type": "str",
    "sol_header": "def sol(sub_str=\"pyrumymasekalihochyvibisamaquythifedetextityvath\", index=0):",
    "sol_docstring": "    \"\"\"Find a string whose *first* index of sub_str is index\"\"\"",
    "sol_bodies": [
      "    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrIndex2:4",
    "sat": "def sat(big_str: str, sub_str=\"nofufaxunetextesitocedezyxuxexyfoquichitiracyquat\", index=185):\n    return big_str.index(sub_str) == index",
    "ans_type": "str",
    "sol_header": "def sol(sub_str=\"nofufaxunetextesitocedezyxuxexyfoquichitiracyquat\", index=185):",
    "sol_docstring": "    \"\"\"Find a string whose *first* index of sub_str is index\"\"\"",
    "sol_bodies": [
      "    i = ord('A')\n    while chr(i) in sub_str:\n        i += 1\n    return chr(i) * index + sub_str"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrIn:0",
    "sat": "def sat(s: str, a=\"hello\", b=\"yellow\", length=4):\n    return len(s) == length and s in a and s in b",
    "ans_type": "str",
    "sol_header": "def sol(a=\"hello\", b=\"yellow\", length=4):",
    "sol_docstring": "    \"\"\"Find a string of length length that is in both strings a and b\"\"\"",
    "sol_bodies": [
      "    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrIn:1",
    "sat": "def sat(s: str, a=\"vuzogaguzechicowejeguthemeralic\", b=\"kybyjifidoquifwejeguthemelihitextodeju\", length=11):\n    return len(s) == length and s in a and s in b",
    "ans_type": "str",
    "sol_header": "def sol(a=\"vuzogaguzechicowejeguthemeralic\", b=\"kybyjifidoquifwejeguthemelihitextodeju\", length=11):",
    "sol_docstring": "    \"\"\"Find a string of length length that is in both strings a and b\"\"\"",
    "sol_bodies": [
      "    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrIn:2",
    "sat": "def sat(s: str, a=\"kehorithxyfurexatextoxivuquunusethawatextebu\", b=\"pxyfurexatextoxivuquuwynicixo\", length=20):\n    return len(s) == length and s in a and s in b",
    "ans_type": "str",
    "sol_header": "def sol(a=\"kehorithxyfurexatextoxivuquunusethawatextebu\", b=\"pxyfurexatextoxivuquuwynicixo\", length=20):",
    "sol_docstring": "    \"\"\"Find a string of length length that is in both strings a and b\"\"\"",
    "sol_bodies": [
      "    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrIn:3",
    "sat": "def sat(s: str, a=\"bafywihequyjicivicharyquynikixuhinyqu\", b=\"syrapetagecvicharyquynirorazecheth\", length=12):\n    return len(s) == length and s in a and s in b",
    "ans_type": "str",
    "sol_header": "def sol(a=\"bafywihequyjicivicharyquynikixuhinyqu\", b=\"syrapetagecvicharyquynirorazecheth\", length=12):",
    "sol_docstring": "    \"\"\"Find a string of length length that is in both strings a and b\"\"\"",
    "sol_bodies": [
      "    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrIn:4",
    "sat": "def sat(s: str, a=\"diquatextaxubowafucevyhuquuthexitacavobychajexytextug\", b=\"thachevolatvyhuquuthexitacavobyjokobuchudymal\", length=20):\n    return len(s) == length and s in a and s in b",
    "ans_type": "str",
    "sol_header": "def sol(a=\"diquatextaxubowafucevyhuquuthexitacavobychajexytextug\", b=\"thachevolatvyhuquuthexitacavobyjokobuchudymal\", length=20):",
    "sol_docstring": "    \"\"\"Find a string of length length that is in both strings a and b\"\"\"",
    "sol_bodies": [
      "    for i in range(len(a) - length + 1):\n        if a[i:i + length] in b:\n            return a[i:i + length]"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrIn2:0",
    "sat": "def sat(substrings: List[str], s=\"hello\", count=15):\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "ans_type": "List[str]",
    "sol_header": "def sol(s=\"hello\", count=15):",
    "sol_docstring": "    \"\"\"Find a list of >= count distinct strings that are all contained in s\"\"\"",
    "sol_bodies": [
      "    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrIn2:1",
    "sat": "def sat(substrings: List[str], s=\"rywixekugagethathulisitextanyp\", count=451):\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "ans_type": "List[str]",
    "sol_header": "def sol(s=\"rywixekugagethathulisitextanyp\", count=451):",
    "sol_docstring": "    \"\"\"Find a list of >= count distinct strings that are all contained in s\"\"\"",
    "sol_bodies": [
      "    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrIn2:2",
    "sat": "def sat(substrings: List[str], s=\"xetyvezitajithiban\", count=165):\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "ans_type": "List[str]",
    "sol_header": "def sol(s=\"xetyvezitajithiban\", count=165):",
    "sol_docstring": "    \"\"\"Find a list of >= count distinct strings that are all contained in s\"\"\"",
    "sol_bodies": [
      "    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrIn2:3",
    "sat": "def sat(substrings: List[str], s=\"rofegakusaquybemydomimibyzodycetextunoce\", count=799):\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "ans_type": "List[str]",
    "sol_header": "def sol(s=\"rofegakusaquybemydomimibyzodycetextunoce\", count=799):",
    "sol_docstring": "    \"\"\"Find a list of >= count distinct strings that are all contained in s\"\"\"",
    "sol_bodies": [
      "    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrIn2:4",
    "sat": "def sat(substrings: List[str], s=\"thacyt\", count=21):\n    return len(substrings) == len(set(substrings)) >= count and all(sub in s for sub in substrings)",
    "ans_type": "List[str]",
    "sol_header": "def sol(s=\"thacyt\", count=21):",
    "sol_docstring": "    \"\"\"Find a list of >= count distinct strings that are all contained in s\"\"\"",
    "sol_bodies": [
      "    return [\"\"] + sorted({s[j:i] for i in range(len(s) + 1) for j in range(i)})"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrCount:0",
    "sat": "def sat(string: str, substring=\"a\", count=10, length=100):\n    return string.count(substring) == count and len(string) == length",
    "ans_type": "str",
    "sol_header": "def sol(substring=\"a\", count=10, length=100):",
    "sol_docstring": "    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"",
    "sol_bodies": [
      "    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrCount:1",
    "sat": "def sat(string: str, substring=\"ky\", count=66, length=133):\n    return string.count(substring) == count and len(string) == length",
    "ans_type": "str",
    "sol_header": "def sol(substring=\"ky\", count=66, length=133):",
    "sol_docstring": "    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"",
    "sol_bodies": [
      "    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrCount:2",
    "sat": "def sat(string: str, substring=\"jepy\", count=87, length=650):\n    return string.count(substring) == count and len(string) == length",
    "ans_type": "str",
    "sol_header": "def sol(substring=\"jepy\", count=87, length=650):",
    "sol_docstring": "    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"",
    "sol_bodies": [
      "    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrCount:3",
    "sat": "def sat(string: str, substring=\"hothyfyt\", count=3, length=417):\n    return string.count(substring) == count and len(string) == length",
    "ans_type": "str",
    "sol_header": "def sol(substring=\"hothyfyt\", count=3, length=417):",
    "sol_docstring": "    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"",
    "sol_bodies": [
      "    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrCount:4",
    "sat": "def sat(string: str, substring=\"moz\", count=70, length=210):\n    return string.count(substring) == count and len(string) == length",
    "ans_type": "str",
    "sol_header": "def sol(substring=\"moz\", count=70, length=210):",
    "sol_docstring": "    \"\"\"Find a string with a certain number of copies of a given substring and of a given length\"\"\"",
    "sol_bodies": [
      "    c = chr(1 + max(ord(c) for c in (substring or \"a\")))  # a character not in substring\n    return substring * count + (length - len(substring) * count) * '^'"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrSplit:0",
    "sat": "def sat(x: str, parts=['I', 'love', 'dumplings', '!'], length=100):\n    return len(x) == length and x.split() == parts",
    "ans_type": "str",
    "sol_header": "def sol(parts=['I', 'love', 'dumplings', '!'], length=100):",
    "sol_docstring": "    \"\"\"Find a string of a given length with a certain split\"\"\"",
    "sol_bodies": [
      "    joined = \" \".join(parts)\n    return joined + \" \" * (length - len(joined))"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrSplit:1",
    "sat": "def sat(x: str, parts=['thala', 'chaliriliq', 'chufyselikizap'], length=116):\n    return len(x) == length and x.split() == parts",
    "ans_type": "str",
    "sol_header": "def sol(parts=['thala', 'chaliriliq', 'chufyselikizap'], length=116):",
    "sol_docstring": "    \"\"\"Find a string of a given length with a certain split\"\"\"",
    "sol_bodies": [
      "    joined = \" \".join(parts)\n    return joined + \" \" * (length - len(joined))"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrSplit:2",
    "sat": "def sat(x: str, parts=['lepytextati', 'ki', 'fy'], length=69):\n    return len(x) == length and x.split() == parts",
    "ans_type": "str",
    "sol_header": "def sol(parts=['lepytextati', 'ki', 'fy'], length=69):",
    "sol_docstring": "    \"\"\"Find a string of a given length with a certain split\"\"\"",
    "sol_bodies": [
      "    joined = \" \".join(parts)\n    return joined + \" \" * (length - len(joined))"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrSplit:3",
    "sat": "def sat(x: str, parts=['quyhigechyhy'], length=38):\n    return len(x) == length and x.split() == parts",
    "ans_type": "str",
    "sol_header": "def sol(parts=['quyhigechyhy'], length=38):",
    "sol_docstring": "    \"\"\"Find a string of a given length with a certain split\"\"\"",
    "sol_bodies": [
      "    joined = \" \".join(parts)\n    return joined + \" \" * (length - len(joined))"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrSplit:4",
    "sat": "def sat(x: str, parts=['je', 'pojacyda', 'papucet', 'wesobaq'], length=40):\n    return len(x) == length and x.split() == parts",
    "ans_type": "str",
    "sol_header": "def sol(parts=['je', 'pojacyda', 'papucet', 'wesobaq'], length=40):",
    "sol_docstring": "    \"\"\"Find a string of a given length with a certain split\"\"\"",
    "sol_bodies": [
      "    joined = \" \".join(parts)\n    return joined + \" \" * (length - len(joined))"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrSplitter:0",
    "sat": "def sat(x: str, parts=['I', 'love', 'dumplings', '!', ''], string=\"I_love_dumplings_!_\"):\n    return string.split(x) == parts",
    "ans_type": "str",
    "sol_header": "def sol(parts=['I', 'love', 'dumplings', '!', ''], string=\"I_love_dumplings_!_\"):",
    "sol_docstring": "    \"\"\"Find a separator that when used to split a given string gives a certain result\"\"\"",
    "sol_bodies": [
      "    if len(parts) <= 1:\n        return string * 2\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrSplitter:1",
    "sat": "def sat(x: str, parts=['kowot', 'quimimy'], string=\"kowottextihocavikirofegyfquimimy\"):\n    return string.split(x) == parts",
    "ans_type": "str",
    "sol_header": "def sol(parts=['kowot', 'quimimy'], string=\"kowottextihocavikirofegyfquimimy\"):",
    "sol_docstring": "    \"\"\"Find a separator that when used to split a given string gives a certain result\"\"\"",
    "sol_bodies": [
      "    if len(parts) <= 1:\n        return string * 2\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrSplitter:2",
    "sat": "def sat(x: str, parts=['f', 'thixaresiquagipoquas', 'fytylu', 'jywaxaw'], string=\"fdetthixaresiquagipoquasdetfytyludetjywaxaw\"):\n    return string.split(x) == parts",
    "ans_type": "str",
    "sol_header": "def sol(parts=['f', 'thixaresiquagipoquas', 'fytylu', 'jywaxaw'], string=\"fdetthixaresiquagipoquasdetfytyludetjywaxaw\"):",
    "sol_docstring": "    \"\"\"Find a separator that when used to split a given string gives a certain result\"\"\"",
    "sol_bodies": [
      "    if len(parts) <= 1:\n        return string * 2\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrSplitter:3",
    "sat": "def sat(x: str, parts=['tibuzumurun', 'hakebixutextolonyf', 'bothuraquobara'], string=\"tibuzumurunhocyxihakebixutextolonyfhocyxibothuraquobara\"):\n    return string.split(x) == parts",
    "ans_type": "str",
    "sol_header": "def sol(parts=['tibuzumurun', 'hakebixutextolonyf', 'bothuraquobara'], string=\"tibuzumurunhocyxihakebixutextolonyfhocyxibothuraquobara\"):",
    "sol_docstring": "    \"\"\"Find a separator that when used to split a given string gives a certain result\"\"\"",
    "sol_bodies": [
      "    if len(parts) <= 1:\n        return string * 2\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrSplitter:4",
    "sat": "def sat(x: str, parts=['fitextu', 'chythawequeku', 'th'], string=\"fitextufyhachochythawequekufyhachoth\"):\n    return string.split(x) == parts",
    "ans_type": "str",
    "sol_header": "def sol(parts=['fitextu', 'chythawequeku', 'th'], string=\"fitextufyhachochythawequekufyhachoth\"):",
    "sol_docstring": "    \"\"\"Find a separator that when used to split a given string gives a certain result\"\"\"",
    "sol_bodies": [
      "    if len(parts) <= 1:\n        return string * 2\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrJoiner:0",
    "sat": "def sat(x: str, parts=['I!!', '!love', 'dumplings', '!', ''], string=\"I!!!!!love!!dumplings!!!!!\"):\n    return x.join(parts) == string",
    "ans_type": "str",
    "sol_header": "def sol(parts=['I!!', '!love', 'dumplings', '!', ''], string=\"I!!!!!love!!dumplings!!!!!\"):",
    "sol_docstring": "    \"\"\"\n    Find a separator that when used to join a given string gives a certain result.\n    This is related to the previous problem but there are some edge cases that differ.\n    \"\"\"",
    "sol_bodies": [
      "    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrJoiner:1",
    "sat": "def sat(x: str, parts=['tatext'], string=\"tatext\"):\n    return x.join(parts) == string",
    "ans_type": "str",
    "sol_header": "def sol(parts=['tatext'], string=\"tatext\"):",
    "sol_docstring": "    \"\"\"\n    Find a separator that when used to join a given string gives a certain result.\n    This is related to the previous problem but there are some edge cases that differ.\n    \"\"\"",
    "sol_bodies": [
      "    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrJoiner:2",
    "sat": "def sat(x: str, parts=[], string=\"\"):\n    return x.join(parts) == string",
    "ans_type": "str",
    "sol_header": "def sol(parts=[], string=\"\"):",
    "sol_docstring": "    \"\"\"\n    Find a separator that when used to join a given string gives a certain result.\n    This is related to the previous problem but there are some edge cases that differ.\n    \"\"\"",
    "sol_bodies": [
      "    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrJoiner:3",
    "sat": "def sat(x: str, parts=['ruquug'], string=\"ruquug\"):\n    return x.join(parts) == string",
    "ans_type": "str",
    "sol_header": "def sol(parts=['ruquug'], string=\"ruquug\"):",
    "sol_docstring": "    \"\"\"\n    Find a separator that when used to join a given string gives a certain result.\n    This is related to the previous problem but there are some edge cases that differ.\n    \"\"\"",
    "sol_bodies": [
      "    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrJoiner:4",
    "sat": "def sat(x: str, parts=['numegixuly', 'koxyfihimurukothasyl'], string=\"numegixulypyjetkoxyfihimurukothasyl\"):\n    return x.join(parts) == string",
    "ans_type": "str",
    "sol_header": "def sol(parts=['numegixuly', 'koxyfihimurukothasyl'], string=\"numegixulypyjetkoxyfihimurukothasyl\"):",
    "sol_docstring": "    \"\"\"\n    Find a separator that when used to join a given string gives a certain result.\n    This is related to the previous problem but there are some edge cases that differ.\n    \"\"\"",
    "sol_bodies": [
      "    if len(parts) <= 1:\n        return \"\"\n    length = (len(string) - len(\"\".join(parts))) // (len(parts) - 1)\n    start = len(parts[0])\n    return string[start:start + length]"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrParts:0",
    "sat": "def sat(parts: List[str], sep=\"!!\", string=\"I!!!!!love!!dumplings!!!!!\"):\n    return sep.join(parts) == string and all(sep not in p for p in parts)",
    "ans_type": "List[str]",
    "sol_header": "def sol(sep=\"!!\", string=\"I!!!!!love!!dumplings!!!!!\"):",
    "sol_docstring": "    \"\"\"Find parts that when joined give a specific string.\"\"\"",
    "sol_bodies": [
      "    return string.split(sep)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrParts:1",
    "sat": "def sat(parts: List[str], sep=\"jachasurobithu\", string=\"watalachyquujachasurobithuba\"):\n    return sep.join(parts) == string and all(sep not in p for p in parts)",
    "ans_type": "List[str]",
    "sol_header": "def sol(sep=\"jachasurobithu\", string=\"watalachyquujachasurobithuba\"):",
    "sol_docstring": "    \"\"\"Find parts that when joined give a specific string.\"\"\"",
    "sol_bodies": [
      "    return string.split(sep)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrParts:2",
    "sat": "def sat(parts: List[str], sep=\"xusoquyvamathila\", string=\"bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji\"):\n    return sep.join(parts) == string and all(sep not in p for p in parts)",
    "ans_type": "List[str]",
    "sol_header": "def sol(sep=\"xusoquyvamathila\", string=\"bolifotinuwywyjochxusoquyvamathilazyvuxusoquyvamathilanifajatextethxusoquyvamathilafocharatefymoji\"):",
    "sol_docstring": "    \"\"\"Find parts that when joined give a specific string.\"\"\"",
    "sol_bodies": [
      "    return string.split(sep)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrParts:3",
    "sat": "def sat(parts: List[str], sep=\"chixachal\", string=\"\"):\n    return sep.join(parts) == string and all(sep not in p for p in parts)",
    "ans_type": "List[str]",
    "sol_header": "def sol(sep=\"chixachal\", string=\"\"):",
    "sol_docstring": "    \"\"\"Find parts that when joined give a specific string.\"\"\"",
    "sol_bodies": [
      "    return string.split(sep)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "StrParts:4",
    "sat": "def sat(parts: List[str], sep=\"lochuv\", string=\"biflochuvzulothanodugedusilochuvlilochuvhobegikofero\"):\n    return sep.join(parts) == string and all(sep not in p for p in parts)",
    "ans_type": "List[str]",
    "sol_header": "def sol(sep=\"lochuv\", string=\"biflochuvzulothanodugedusilochuvlilochuvhobegikofero\"):",
    "sol_docstring": "    \"\"\"Find parts that when joined give a specific string.\"\"\"",
    "sol_bodies": [
      "    return string.split(sep)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "ListSetLen:0",
    "sat": "def sat(li: List[int], dups=42155):\n    return len(set(li)) == len(li) - dups",
    "ans_type": "List[int]",
    "sol_header": "def sol(dups=42155):",
    "sol_docstring": "    \"\"\"Find a list with a certain number of duplicate items\"\"\"",
    "sol_bodies": [
      "    return [1] * (dups + 1)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "ListSetLen:1",
    "sat": "def sat(li: List[int], dups=18793):\n    return len(set(li)) == len(li) - dups",
    "ans_type": "List[int]",
    "sol_header": "def sol(dups=18793):",
    "sol_docstring": "    \"\"\"Find a list with a certain number of duplicate items\"\"\"",
    "sol_bodies": [
      "    return [1] * (dups + 1)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "ListSetLen:2",
    "sat": "def sat(li: List[int], dups=70976):\n    return len(set(li)) == len(li) - dups",
    "ans_type": "List[int]",
    "sol_header": "def sol(dups=70976):",
    "sol_docstring": "    \"\"\"Find a list with a certain number of duplicate items\"\"\"",
    "sol_bodies": [
      "    return [1] * (dups + 1)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "ListSetLen:3",
    "sat": "def sat(li: List[int], dups=23476):\n    return len(set(li)) == len(li) - dups",
    "ans_type": "List[int]",
    "sol_header": "def sol(dups=23476):",
    "sol_docstring": "    \"\"\"Find a list with a certain number of duplicate items\"\"\"",
    "sol_bodies": [
      "    return [1] * (dups + 1)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "ListSetLen:4",
    "sat": "def sat(li: List[int], dups=17633):\n    return len(set(li)) == len(li) - dups",
    "ans_type": "List[int]",
    "sol_header": "def sol(dups=17633):",
    "sol_docstring": "    \"\"\"Find a list with a certain number of duplicate items\"\"\"",
    "sol_bodies": [
      "    return [1] * (dups + 1)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "ListMul:0",
    "sat": "def sat(li: List[int], target=[17, 9, -1, 17, 9, -1], n=2):\n    return li * n == target",
    "ans_type": "List[int]",
    "sol_header": "def sol(target=[17, 9, -1, 17, 9, -1], n=2):",
    "sol_docstring": "    \"\"\"Find a list that when multiplied n times gives the target list\"\"\"",
    "sol_bodies": [
      "    if n == 0:\n        return []\n    return target[:len(target) // n]"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "ListMul:1",
    "sat": "def sat(li: List[int], target=[-69358, -69358, -69358, -69358, -69358, -69358, -69358], n=7):\n    return li * n == target",
    "ans_type": "List[int]",
    "sol_header": "def sol(target=[-69358, -69358, -69358, -69358, -69358, -69358, -69358], n=7):",
    "sol_docstring": "    \"\"\"Find a list that when multiplied n times gives the target list\"\"\"",
    "sol_bodies": [
      "    if n == 0:\n        return []\n    return target[:len(target) // n]"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "ListMul:2",
    "sat": "def sat(li: List[int], target=[-51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344], n=8):\n    return li * n == target",
    "ans_type": "List[int]",
    "sol_header": "def sol(target=[-51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344, -51721, -18394, -51187, -39897, 18547, 42761, -8992, 66683, 78344], n=8):",
    "sol_docstring": "    \"\"\"Find a list that when multiplied n times gives the target list\"\"\"",
    "sol_bodies": [
      "    if n == 0:\n        return []\n    return target[:len(target) // n]"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "ListMul:3",
    "sat": "def sat(li: List[int], target=[], n=0):\n    return li * n == target",
    "ans_type": "List[int]",
    "sol_header": "def sol(target=[], n=0):",
    "sol_docstring": "    \"\"\"Find a list that when multiplied n times gives the target list\"\"\"",
    "sol_bodies": [
      "    if n == 0:\n        return []\n    return target[:len(target) // n]"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "ListMul:4",
    "sat": "def sat(li: List[int], target=[-25821, -22076, 28354, -16195, 51325, 54104, -89614, 9766, -25821, -22076, 28354, -16195, 51325, 54104, -89614, 9766, -25821, -22076, 28354, -16195, 51325, 54104, -89614, 9766, -25821, -22076, 28354, -16195, 51325, 54104, -89614, 9766, -25821, -22076, 28354, -16195, 51325, 54104, -89614, 9766, -25821, -22076, 28354, -16195, 51325, 54104, -89614, 9766, -25821, -22076, 28354, -16195, 51325, 54104, -89614, 9766, -25821, -22076, 28354, -16195, 51325, 54104, -89614, 9766], n=4):\n    return li * n == target",
    "ans_type": "List[int]",
    "sol_header": "def sol(target=[-25821, -22076, 28354, -16195, 51325, 54104, -89614, 9766, -25821, -22076, 28354, -16195, 51325, 54104, -89614, 9766, -25821, -22076, 28354, -16195, 51325, 54104, -89614, 9766, -25821, -22076, 28354, -16195, 51325, 54104, -89614, 9766, -25821, -22076, 28354, -16195, 51325, 54104, -89614, 9766, -25821, -22076, 28354, -16195, 51325, 54104, -89614, 9766, -25821, -22076, 28354, -16195, 51325, 54104, -89614, 9766, -25821, -22076, 28354, -16195, 51325, 54104, -89614, 9766], n=4):",
    "sol_docstring": "    \"\"\"Find a list that when multiplied n times gives the target list\"\"\"",
    "sol_bodies": [
      "    if n == 0:\n        return []\n    return target[:len(target) // n]"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "ListLen:0",
    "sat": "def sat(li: List[int], n=85012):\n    return len(li) == n",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=85012):",
    "sol_docstring": "    \"\"\"Find a list of a given length n\"\"\"",
    "sol_bodies": [
      "    return [1] * n"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "ListLen:1",
    "sat": "def sat(li: List[int], n=969):\n    return len(li) == n",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=969):",
    "sol_docstring": "    \"\"\"Find a list of a given length n\"\"\"",
    "sol_bodies": [
      "    return [1] * n"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "ListLen:2",
    "sat": "def sat(li: List[int], n=7051):\n    return len(li) == n",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=7051):",
    "sol_docstring": "    \"\"\"Find a list of a given length n\"\"\"",
    "sol_bodies": [
      "    return [1] * n"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "ListLen:3",
    "sat": "def sat(li: List[int], n=9):\n    return len(li) == n",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=9):",
    "sol_docstring": "    \"\"\"Find a list of a given length n\"\"\"",
    "sol_bodies": [
      "    return [1] * n"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "ListLen:4",
    "sat": "def sat(li: List[int], n=324):\n    return len(li) == n",
    "ans_type": "List[int]",
    "sol_header": "def sol(n=324):",
    "sol_docstring": "    \"\"\"Find a list of a given length n\"\"\"",
    "sol_bodies": [
      "    return [1] * n"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "ListAt:0",
    "sat": "def sat(i: int, li=[17, 31, 91, 18, 42, 1, 9], target=18):\n    return li[i] == target",
    "ans_type": "int",
    "sol_header": "def sol(li=[17, 31, 91, 18, 42, 1, 9], target=18):",
    "sol_docstring": "    \"\"\"Find the index of an item in a list. Any such index is fine.\"\"\"",
    "sol_bodies": [
      "    return li.index(target)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "ListAt:1",
    "sat": "def sat(i: int, li=[-62, -29, 73, -21, -45, -20, -74, -69, 30, -25, 16, 82, -31, 93, -20, 75, 68, 86], target=73):\n    return li[i] == target",
    "ans_type": "int",
    "sol_header": "def sol(li=[-62, -29, 73, -21, -45, -20, -74, -69, 30, -25, 16, 82, -31, 93, -20, 75, 68, 86], target=73):",
    "sol_docstring": "    \"\"\"Find the index of an item in a list. Any such index is fine.\"\"\"",
    "sol_bodies": [
      "    return li.index(target)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "ListAt:2",
    "sat": "def sat(i: int, li=[99, 51, -28, -69, -90, -15, 7, -67], target=51):\n    return li[i] == target",
    "ans_type": "int",
    "sol_header": "def sol(li=[99, 51, -28, -69, -90, -15, 7, -67], target=51):",
    "sol_docstring": "    \"\"\"Find the index of an item in a list. Any such index is fine.\"\"\"",
    "sol_bodies": [
      "    return li.index(target)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "ListAt:3",
    "sat": "def sat(i: int, li=[-68, 81, 13, -5, 81, 75, -3, -73, -89, 72], target=13):\n    return li[i] == target",
    "ans_type": "int",
    "sol_header": "def sol(li=[-68, 81, 13, -5, 81, 75, -3, -73, -89, 72], target=13):",
    "sol_docstring": "    \"\"\"Find the index of an item in a list. Any such index is fine.\"\"\"",
    "sol_bodies": [
      "    return li.index(target)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "ListAt:4",
    "sat": "def sat(i: int, li=[51, -68, -57, 8, 77, -80, -28, -24, 11, 40, 57, 60, 53], target=11):\n    return li[i] == target",
    "ans_type": "int",
    "sol_header": "def sol(li=[51, -68, -57, 8, 77, -80, -28, -24, 11, 40, 57, 60, 53], target=11):",
    "sol_docstring": "    \"\"\"Find the index of an item in a list. Any such index is fine.\"\"\"",
    "sol_bodies": [
      "    return li.index(target)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "ListNegAt:0",
    "sat": "def sat(i: int, li=[17, 31, 91, 18, 42, 1, 9], target=91):\n    return li[i] == target and i < 0",
    "ans_type": "int",
    "sol_header": "def sol(li=[17, 31, 91, 18, 42, 1, 9], target=91):",
    "sol_docstring": "    \"\"\"Find the index of an item in a list using negative indexing.\"\"\"",
    "sol_bodies": [
      "    return li.index(target) - len(li)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "ListNegAt:1",
    "sat": "def sat(i: int, li=[78, 91, -67, -5, 30, -42, 68, 32, 96, -55, -39, -46, 90], target=-39):\n    return li[i] == target and i < 0",
    "ans_type": "int",
    "sol_header": "def sol(li=[78, 91, -67, -5, 30, -42, 68, 32, 96, -55, -39, -46, 90], target=-39):",
    "sol_docstring": "    \"\"\"Find the index of an item in a list using negative indexing.\"\"\"",
    "sol_bodies": [
      "    return li.index(target) - len(li)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "ListNegAt:2",
    "sat": "def sat(i: int, li=[-60, 9, 1, -42, 31, 70, 5, 1, 42, -90, -20], target=-42):\n    return li[i] == target and i < 0",
    "ans_type": "int",
    "sol_header": "def sol(li=[-60, 9, 1, -42, 31, 70, 5, 1, 42, -90, -20], target=-42):",
    "sol_docstring": "    \"\"\"Find the index of an item in a list using negative indexing.\"\"\"",
    "sol_bodies": [
      "    return li.index(target) - len(li)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "ListNegAt:3",
    "sat": "def sat(i: int, li=[41, -52, -40, -35, 53, -98, 83, 63, -18, 74, -8, -93, -3, 22, 30], target=53):\n    return li[i] == target and i < 0",
    "ans_type": "int",
    "sol_header": "def sol(li=[41, -52, -40, -35, 53, -98, 83, 63, -18, 74, -8, -93, -3, 22, 30], target=53):",
    "sol_docstring": "    \"\"\"Find the index of an item in a list using negative indexing.\"\"\"",
    "sol_bodies": [
      "    return li.index(target) - len(li)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "ListNegAt:4",
    "sat": "def sat(i: int, li=[95, 51, 76, 63, -97, -32], target=-32):\n    return li[i] == target and i < 0",
    "ans_type": "int",
    "sol_header": "def sol(li=[95, 51, 76, 63, -97, -32], target=-32):",
    "sol_docstring": "    \"\"\"Find the index of an item in a list using negative indexing.\"\"\"",
    "sol_bodies": [
      "    return li.index(target) - len(li)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "ListSlice:0",
    "sat": "def sat(inds: List[int], li=[42, 18, 21, 103, -2, 11], target=[-2, 21, 42]):\n    i, j, k = inds\n    return li[i:j:k] == target",
    "ans_type": "List[int]",
    "sol_header": "def sol(li=[42, 18, 21, 103, -2, 11], target=[-2, 21, 42]):",
    "sol_docstring": "    \"\"\"Find three slice indices to achieve a given list slice\"\"\"",
    "sol_bodies": [
      "    from itertools import product\n    for i, j, k in product(range(-len(li) - 1, len(li) + 1), repeat=3):\n        try:\n            if li[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "ListSlice:1",
    "sat": "def sat(inds: List[int], li=[-11, 92, 42, 18, -83, 55, 13, 14, -67, -58, -41], target=[-67]):\n    i, j, k = inds\n    return li[i:j:k] == target",
    "ans_type": "List[int]",
    "sol_header": "def sol(li=[-11, 92, 42, 18, -83, 55, 13, 14, -67, -58, -41], target=[-67]):",
    "sol_docstring": "    \"\"\"Find three slice indices to achieve a given list slice\"\"\"",
    "sol_bodies": [
      "    from itertools import product\n    for i, j, k in product(range(-len(li) - 1, len(li) + 1), repeat=3):\n        try:\n            if li[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "ListSlice:2",
    "sat": "def sat(inds: List[int], li=[-53, -81, -92, 22, -67], target=[-53, -81, -92]):\n    i, j, k = inds\n    return li[i:j:k] == target",
    "ans_type": "List[int]",
    "sol_header": "def sol(li=[-53, -81, -92, 22, -67], target=[-53, -81, -92]):",
    "sol_docstring": "    \"\"\"Find three slice indices to achieve a given list slice\"\"\"",
    "sol_bodies": [
      "    from itertools import product\n    for i, j, k in product(range(-len(li) - 1, len(li) + 1), repeat=3):\n        try:\n            if li[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "ListSlice:3",
    "sat": "def sat(inds: List[int], li=[-72, 70, 50, -41, 94, -82, -74, 8, -23], target=[-82]):\n    i, j, k = inds\n    return li[i:j:k] == target",
    "ans_type": "List[int]",
    "sol_header": "def sol(li=[-72, 70, 50, -41, 94, -82, -74, 8, -23], target=[-82]):",
    "sol_docstring": "    \"\"\"Find three slice indices to achieve a given list slice\"\"\"",
    "sol_bodies": [
      "    from itertools import product\n    for i, j, k in product(range(-len(li) - 1, len(li) + 1), repeat=3):\n        try:\n            if li[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "ListSlice:4",
    "sat": "def sat(inds: List[int], li=[26, -25, -18, -53, 18, -71, -82, 20, -100, -84, -85], target=[-25]):\n    i, j, k = inds\n    return li[i:j:k] == target",
    "ans_type": "List[int]",
    "sol_header": "def sol(li=[26, -25, -18, -53, 18, -71, -82, 20, -100, -84, -85], target=[-25]):",
    "sol_docstring": "    \"\"\"Find three slice indices to achieve a given list slice\"\"\"",
    "sol_bodies": [
      "    from itertools import product\n    for i, j, k in product(range(-len(li) - 1, len(li) + 1), repeat=3):\n        try:\n            if li[i:j:k] == target:\n                return [i, j, k]\n        except (IndexError, ValueError):\n            pass"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "ListIndex:0",
    "sat": "def sat(item: int, li=[17, 2, 3, 9, 11, 11], index=4):\n    return li.index(item) == index",
    "ans_type": "int",
    "sol_header": "def sol(li=[17, 2, 3, 9, 11, 11], index=4):",
    "sol_docstring": "    \"\"\"Find the item whose first index in li is index\"\"\"",
    "sol_bodies": [
      "    return li[index]"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "ListIndex:1",
    "sat": "def sat(item: int, li=[93, -13, -56, 19], index=2):\n    return li.index(item) == index",
    "ans_type": "int",
    "sol_header": "def sol(li=[93, -13, -56, 19], index=2):",
    "sol_docstring": "    \"\"\"Find the item whose first index in li is index\"\"\"",
    "sol_bodies": [
      "    return li[index]"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "ListIndex:2",
    "sat": "def sat(item: int, li=[-79, 49, 4, -75, -66, -76, 37, -62, -35, -79, 68, 82, -11, -71, 63, -82, 22, 65], index=2):\n    return li.index(item) == index",
    "ans_type": "int",
    "sol_header": "def sol(li=[-79, 49, 4, -75, -66, -76, 37, -62, -35, -79, 68, 82, -11, -71, 63, -82, 22, 65], index=2):",
    "sol_docstring": "    \"\"\"Find the item whose first index in li is index\"\"\"",
    "sol_bodies": [
      "    return li[index]"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "ListIndex:3",
    "sat": "def sat(item: int, li=[96, -61, 50, -49, -1, -23, -35], index=3):\n    return li.index(item) == index",
    "ans_type": "int",
    "sol_header": "def sol(li=[96, -61, 50, -49, -1, -23, -35], index=3):",
    "sol_docstring": "    \"\"\"Find the item whose first index in li is index\"\"\"",
    "sol_bodies": [
      "    return li[index]"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "ListIndex:4",
    "sat": "def sat(item: int, li=[26, -90, 89], index=0):\n    return li.index(item) == index",
    "ans_type": "int",
    "sol_header": "def sol(li=[26, -90, 89], index=0):",
    "sol_docstring": "    \"\"\"Find the item whose first index in li is index\"\"\"",
    "sol_bodies": [
      "    return li[index]"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "ListIndex2:0",
    "sat": "def sat(li: List[int], i=29, index=10412):\n    return li.index(i) == index",
    "ans_type": "List[int]",
    "sol_header": "def sol(i=29, index=10412):",
    "sol_docstring": "    \"\"\"Find a list that contains i first at index index\"\"\"",
    "sol_bodies": [
      "    return [i - 1] * index + [i]"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "ListIndex2:1",
    "sat": "def sat(li: List[int], i=-99167, index=48792):\n    return li.index(i) == index",
    "ans_type": "List[int]",
    "sol_header": "def sol(i=-99167, index=48792):",
    "sol_docstring": "    \"\"\"Find a list that contains i first at index index\"\"\"",
    "sol_bodies": [
      "    return [i - 1] * index + [i]"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "ListIndex2:2",
    "sat": "def sat(li: List[int], i=-67679, index=87059):\n    return li.index(i) == index",
    "ans_type": "List[int]",
    "sol_header": "def sol(i=-67679, index=87059):",
    "sol_docstring": "    \"\"\"Find a list that contains i first at index index\"\"\"",
    "sol_bodies": [
      "    return [i - 1] * index + [i]"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "ListIndex2:3",
    "sat": "def sat(li: List[int], i=81395, index=79231):\n    return li.index(i) == index",
    "ans_type": "List[int]",
    "sol_header": "def sol(i=81395, index=79231):",
    "sol_docstring": "    \"\"\"Find a list that contains i first at index index\"\"\"",
    "sol_bodies": [
      "    return [i - 1] * index + [i]"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "ListIndex2:4",
    "sat": "def sat(li: List[int], i=63344, index=1583):\n    return li.index(i) == index",
    "ans_type": "List[int]",
    "sol_header": "def sol(i=63344, index=1583):",
    "sol_docstring": "    \"\"\"Find a list that contains i first at index index\"\"\"",
    "sol_bodies": [
      "    return [i - 1] * index + [i]"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "ListIn:0",
    "sat": "def sat(s: str, a=['cat', 'dot', 'bird'], b=['tree', 'fly', 'dot']):\n    return s in a and s in b",
    "ans_type": "str",
    "sol_header": "def sol(a=['cat', 'dot', 'bird'], b=['tree', 'fly', 'dot']):",
    "sol_docstring": "    \"\"\"Find an item that is in both lists a and b\"\"\"",
    "sol_bodies": [
      "    return next(s for s in b if s in a)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "ListIn:1",
    "sat": "def sat(s: str, a=['xetex', 'jomuboxuc', 'nyfiranuri', 'curu', 'jehykexethinun', 'bumekynuxinit', 'cymelatabegi', 'jumuvufotextasa', 'cotharasyfukakiwoc', 'fuvyvavi', 'gohavelomet', 'hibymomotohywehathi', 'jyzucakaq', 'chihyx', 'wukikogy', 'pegydozetebegafugyf', 'chywadetextekesyjup', 'xysecaw', 'ryzafusul', 'lojychurep', 'vivutolimifa', 'pysiquikywoty', 'thitexturykasoquifet', 'va', 'nagetextilac', 'tex', 'zechocha', 'susatexty', 'ch'], b=['vesaredu', 'textyjun', 'hijilenafotycoch', 'fofytextulidajekymos', 'thudothukuzaxug', 'dythezutolihibinafyj', 'hadid', 'zyly', 'mu', 'chywadetextekesyjup', 'zekyrivequi', 'pebycipohivam', 'texterekuwudut', 'c', 'sanidithuh', 'ritextuchik', 'ny', 'cym', 'cirok', 'kavuquithochazethej', 'zikechep', 'kesitabuduzu', 'duchequ', 'fuluhesowyjugehusab', 'tof', 'tu', 'textichagekochoquovo', 'bo', 'thac', 'hytextac', 'nerehufymex', 'jezyletextiquebositi', 'm', 'kathithowefyvoced', 'rityjivoxadydyzatiq', 'nuxaritutebacygevyq', 'thyjaxirumenaquuxy', 'gizydylot', 'textite', 'guchikek', 'fas', 'pabipapiro', 'fechiduchu', 'pexijis', 'gojep', 'quinatextit', 'chaqu', 'xyxyjos', 'pudibothytigiwumucex', 'josadubizy', 'jy', 'komazibomapothequev', 'licogatextuliletuxi', 'gus', 'nylyxyjibikimet', 'tafo']):\n    return s in a and s in b",
    "ans_type": "str",
    "sol_header": "def sol(a=['xetex', 'jomuboxuc', 'nyfiranuri', 'curu', 'jehykexethinun', 'bumekynuxinit', 'cymelatabegi', 'jumuvufotextasa', 'cotharasyfukakiwoc', 'fuvyvavi', 'gohavelomet', 'hibymomotohywehathi', 'jyzucakaq', 'chihyx', 'wukikogy', 'pegydozetebegafugyf', 'chywadetextekesyjup', 'xysecaw', 'ryzafusul', 'lojychurep', 'vivutolimifa', 'pysiquikywoty', 'thitexturykasoquifet', 'va', 'nagetextilac', 'tex', 'zechocha', 'susatexty', 'ch'], b=['vesaredu', 'textyjun', 'hijilenafotycoch', 'fofytextulidajekymos', 'thudothukuzaxug', 'dythezutolihibinafyj', 'hadid', 'zyly', 'mu', 'chywadetextekesyjup', 'zekyrivequi', 'pebycipohivam', 'texterekuwudut', 'c', 'sanidithuh', 'ritextuchik', 'ny', 'cym', 'cirok', 'kavuquithochazethej', 'zikechep', 'kesitabuduzu', 'duchequ', 'fuluhesowyjugehusab', 'tof', 'tu', 'textichagekochoquovo', 'bo', 'thac', 'hytextac', 'nerehufymex', 'jezyletextiquebositi', 'm', 'kathithowefyvoced', 'rityjivoxadydyzatiq', 'nuxaritutebacygevyq', 'thyjaxirumenaquuxy', 'gizydylot', 'textite', 'guchikek', 'fas', 'pabipapiro', 'fechiduchu', 'pexijis', 'gojep', 'quinatextit', 'chaqu', 'xyxyjos', 'pudibothytigiwumucex', 'josadubizy', 'jy', 'komazibomapothequev', 'licogatextuliletuxi', 'gus', 'nylyxyjibikimet', 'tafo']):",
    "sol_docstring": "    \"\"\"Find an item that is in both lists a and b\"\"\"",
    "sol_bodies": [
      "    return next(s for s in b if s in a)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "ListIn:2",
    "sat": "def sat(s: str, a=['bututimatabel', 'zezahabiry', 'mipytext', 'bujokacyrulihir', 'cyvagofaquothoseza', 'guhebalequepytex', 'tyhithuthygatextity', 'chizichuc', 'textoxodenekokechona', 'texte', 'mygafifet', 'vixathokivy', 'xe', 'moq', 'quokopy', 'cixoka', 'wiz', 'wyturasutabidipif', 'q', 'gochujuvub', 'textogow', 'rogizasog', 'fimoxynudob', 'byjythohimowyquich', 'moduxatanogococ', 'tunuchikywichykyxyge', 'namixotextes', 'nocoguthosoxonahu', 'xorydyhi', 'dadohojex', 'pi', 'wiquocaso', 'tyjegu', 'juquath', 'dythufyn', 'sehafur', 'sylupivyzequefujet', 'hotextylyquahudivov', 'wunich', 'fijyhilyc', 'rirymequunezuv', 'zizunylihadowys', 'zesuxikevaquus', 'thecisequevyth', 'cucyquefytextu', 'xy', 'quuxin', 'miherahita', 'texatextoxyta', 'tythyjuly', 'tehesyju', 'reg', 'ridilusycanejap', 'fo', 'chucatazyrejucathibi', 'textythacete', 'huhiquekychyh', 'xykuvebylyhinyc', 'zadedixoxoparyducena', 'wycathomoniva', 'textuwuwathiziq', 'textijiw', 'rigidichukuchexorute', 'majixodokalij', 'hexebitoxumuvodese', 'hybat', 'thojutextomochote', 'textaxuquyg', 'queluhatex'], b=['gume', 'zatum', 'kochaxybupy', 'gex', 'vithiby', 'lygarethaquedehabub', 'tochek', 'v', 'wis', 'remywerinyboweropot', 'nybichychafizurup', 'zokabugyc', 'ny', 'moruwicoponuricuw', 'zirijikuhabivywah', 'dus', 'toxirit', 'gilanih', 'hif', 'vuhezobinehahewi', 'quujihus', 'chej', 'g', 'pypomaquiwusisyvuma', 'to', 'c', 'chutesumalanozeb', 'chupehozukiquodisese', 'xygiwot', 'semubaquav', 'pihiwidosudetextet', 'quegatagicu', 'quutydychy', 'chuzeby', 'jefythasapag', 'bytathoti', 'thimobaquykisabepec', 'saluwax', 'thi', 'kyneroravexuquoto', 'jusudybahebuxypepahe', 'f', 'zapufefek', 'mumogawen', 'quotyhot', 'hybamukelo', 'picatextujycotodyj', 'be', 'pytextyfa', 'tile', 'dotextazuchubuk', 'choguc', 'wi', 'setepicydavumahebe', 'wyjo', 'mirukuwyfuwihoqu', 'q', 'kegytegu', 'kegoquibyguxexajebid', 'hyfech', 'humovomefoly', 'tupetox', 'gevogibax', 'vuxotext', 'miluparaj', 'bathad', 'tily', 'theranydygiryc', 'dasaxatext', 'guhebalequepytex', 'v', 'gocuxomecapylewaj']):\n    return s in a and s in b",
    "ans_type": "str",
    "sol_header": "def sol(a=['bututimatabel', 'zezahabiry', 'mipytext', 'bujokacyrulihir', 'cyvagofaquothoseza', 'guhebalequepytex', 'tyhithuthygatextity', 'chizichuc', 'textoxodenekokechona', 'texte', 'mygafifet', 'vixathokivy', 'xe', 'moq', 'quokopy', 'cixoka', 'wiz', 'wyturasutabidipif', 'q', 'gochujuvub', 'textogow', 'rogizasog', 'fimoxynudob', 'byjythohimowyquich', 'moduxatanogococ', 'tunuchikywichykyxyge', 'namixotextes', 'nocoguthosoxonahu', 'xorydyhi', 'dadohojex', 'pi', 'wiquocaso', 'tyjegu', 'juquath', 'dythufyn', 'sehafur', 'sylupivyzequefujet', 'hotextylyquahudivov', 'wunich', 'fijyhilyc', 'rirymequunezuv', 'zizunylihadowys', 'zesuxikevaquus', 'thecisequevyth', 'cucyquefytextu', 'xy', 'quuxin', 'miherahita', 'texatextoxyta', 'tythyjuly', 'tehesyju', 'reg', 'ridilusycanejap', 'fo', 'chucatazyrejucathibi', 'textythacete', 'huhiquekychyh', 'xykuvebylyhinyc', 'zadedixoxoparyducena', 'wycathomoniva', 'textuwuwathiziq', 'textijiw', 'rigidichukuchexorute', 'majixodokalij', 'hexebitoxumuvodese', 'hybat', 'thojutextomochote', 'textaxuquyg', 'queluhatex'], b=['gume', 'zatum', 'kochaxybupy', 'gex', 'vithiby', 'lygarethaquedehabub', 'tochek', 'v', 'wis', 'remywerinyboweropot', 'nybichychafizurup', 'zokabugyc', 'ny', 'moruwicoponuricuw', 'zirijikuhabivywah', 'dus', 'toxirit', 'gilanih', 'hif', 'vuhezobinehahewi', 'quujihus', 'chej', 'g', 'pypomaquiwusisyvuma', 'to', 'c', 'chutesumalanozeb', 'chupehozukiquodisese', 'xygiwot', 'semubaquav', 'pihiwidosudetextet', 'quegatagicu', 'quutydychy', 'chuzeby', 'jefythasapag', 'bytathoti', 'thimobaquykisabepec', 'saluwax', 'thi', 'kyneroravexuquoto', 'jusudybahebuxypepahe', 'f', 'zapufefek', 'mumogawen', 'quotyhot', 'hybamukelo', 'picatextujycotodyj', 'be', 'pytextyfa', 'tile', 'dotextazuchubuk', 'choguc', 'wi', 'setepicydavumahebe', 'wyjo', 'mirukuwyfuwihoqu', 'q', 'kegytegu', 'kegoquibyguxexajebid', 'hyfech', 'humovomefoly', 'tupetox', 'gevogibax', 'vuxotext', 'miluparaj', 'bathad', 'tily', 'theranydygiryc', 'dasaxatext', 'guhebalequepytex', 'v', 'gocuxomecapylewaj']):",
    "sol_docstring": "    \"\"\"Find an item that is in both lists a and b\"\"\"",
    "sol_bodies": [
      "    return next(s for s in b if s in a)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "ListIn:3",
    "sat": "def sat(s: str, a=['thachak', 'xuchyzyzazi', 'bilewejoquowylo', 'chogokim', 'kuloxozu', 'capokaf', 'didadadejunukosazi', 'zethucun', 'tygorub', 'lochydigyt', 'dyquuhycusi', 'wagupolovapy', 'chowace', 'zozawethychax', 'xohuhuqui', 'tatylisigar', 'c', 'kakopuzysycasewit', 'rekatebinidyvuchitet', 'popi', 'chepebaze', 'textut', 'fymehap', 'c', 'wodumogovolacabasot', 'tixihidafutexto', 'dycubichucyneweve', 'setofa', 'cudaxediquy', 'namof', 'qua', 'chetextof', 'cochydededaxyzuj', 'winutaj', 'nidyjutothovobydizy', 'sichequaxohojethihy', 'cubusycip', 'pynoconic', 'kyt', 'thop', 'kewotochelocyboz', 'z', 'c', 'q', 'bonyquyx', 'jothec', 'fyzozynygiperythada', 'lipadatuzisaduthyt', 'nithujyxymethot', 'vewariq', 'nejitextole', 'raxiv', 'hamim', 'qua', 'kytextehekaryp', 'jaquu', 'wozuthevith', 'f', 'jugevizyfu', 'cywo', 'w', 'surajotext', 'vilujetutitachivy', 'textequysuninutuqu', 'fevawybok', 'lythehythu', 'nykochachofitit', 'gikenadubit', 'thexyjy', 'piquyzyxichoc', 'rilaquucham', 'fa', 'mysihumotexto', 'xochogekumipoquidi', 'jimynusyte', 'textexysuzipichaw', 'mut', 'jiwyx', 'tojiwedoxevosubavy', 'dix', 'dogetexto', 'chysafyzelefocothin', 'xitext', 'machibokudyh', 'ronebupapapygyceb', 'dedytejyretavewytasi', 'jobog', 'namychyt', 'textycapudul', 'jaxybatexto', 'pamuwysafupaxowus', 'lycazivafyj', 'lelologufenofajogofi', 'thety', 'bunotextoca', 'nexaravuq', 'natu'], b=['namychyt', 'mathapachobat', 'timorohopotak']):\n    return s in a and s in b",
    "ans_type": "str",
    "sol_header": "def sol(a=['thachak', 'xuchyzyzazi', 'bilewejoquowylo', 'chogokim', 'kuloxozu', 'capokaf', 'didadadejunukosazi', 'zethucun', 'tygorub', 'lochydigyt', 'dyquuhycusi', 'wagupolovapy', 'chowace', 'zozawethychax', 'xohuhuqui', 'tatylisigar', 'c', 'kakopuzysycasewit', 'rekatebinidyvuchitet', 'popi', 'chepebaze', 'textut', 'fymehap', 'c', 'wodumogovolacabasot', 'tixihidafutexto', 'dycubichucyneweve', 'setofa', 'cudaxediquy', 'namof', 'qua', 'chetextof', 'cochydededaxyzuj', 'winutaj', 'nidyjutothovobydizy', 'sichequaxohojethihy', 'cubusycip', 'pynoconic', 'kyt', 'thop', 'kewotochelocyboz', 'z', 'c', 'q', 'bonyquyx', 'jothec', 'fyzozynygiperythada', 'lipadatuzisaduthyt', 'nithujyxymethot', 'vewariq', 'nejitextole', 'raxiv', 'hamim', 'qua', 'kytextehekaryp', 'jaquu', 'wozuthevith', 'f', 'jugevizyfu', 'cywo', 'w', 'surajotext', 'vilujetutitachivy', 'textequysuninutuqu', 'fevawybok', 'lythehythu', 'nykochachofitit', 'gikenadubit', 'thexyjy', 'piquyzyxichoc', 'rilaquucham', 'fa', 'mysihumotexto', 'xochogekumipoquidi', 'jimynusyte', 'textexysuzipichaw', 'mut', 'jiwyx', 'tojiwedoxevosubavy', 'dix', 'dogetexto', 'chysafyzelefocothin', 'xitext', 'machibokudyh', 'ronebupapapygyceb', 'dedytejyretavewytasi', 'jobog', 'namychyt', 'textycapudul', 'jaxybatexto', 'pamuwysafupaxowus', 'lycazivafyj', 'lelologufenofajogofi', 'thety', 'bunotextoca', 'nexaravuq', 'natu'], b=['namychyt', 'mathapachobat', 'timorohopotak']):",
    "sol_docstring": "    \"\"\"Find an item that is in both lists a and b\"\"\"",
    "sol_bodies": [
      "    return next(s for s in b if s in a)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "ListIn:4",
    "sat": "def sat(s: str, a=['quisolu', 'nixyquigaseq', 'fawaholafojelaxud', 'cuxoniso', 'defejaz', 'mytext', 'gochavowetheva', 'xijehychojexat', 'duthagobejudozi', 'thiquijuquorybu'], b=['cys', 'zatext', 'cifihihechujozimo', 'jycichithetyk', 'becitonamuhuligyv', 'sadak', 'hochavinapatanapiz', 'fiwidifop', 'funidosikeput', 'fewat', 'mypyhalevituvit', 'quytynuthothy', 'c', 'zydecodul', 'vahychuke', 'wy', 'mytext', 'tex', 'quevasowodique', 'hythiquunymychilyl', 'luxivyvocuwa']):\n    return s in a and s in b",
    "ans_type": "str",
    "sol_header": "def sol(a=['quisolu', 'nixyquigaseq', 'fawaholafojelaxud', 'cuxoniso', 'defejaz', 'mytext', 'gochavowetheva', 'xijehychojexat', 'duthagobejudozi', 'thiquijuquorybu'], b=['cys', 'zatext', 'cifihihechujozimo', 'jycichithetyk', 'becitonamuhuligyv', 'sadak', 'hochavinapatanapiz', 'fiwidifop', 'funidosikeput', 'fewat', 'mypyhalevituvit', 'quytynuthothy', 'c', 'zydecodul', 'vahychuke', 'wy', 'mytext', 'tex', 'quevasowodique', 'hythiquunymychilyl', 'luxivyvocuwa']):",
    "sol_docstring": "    \"\"\"Find an item that is in both lists a and b\"\"\"",
    "sol_bodies": [
      "    return next(s for s in b if s in a)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "IntNeg:0",
    "sat": "def sat(x: int, a=93252338):\n    return -x == a",
    "ans_type": "int",
    "sol_header": "def sol(a=93252338):",
    "sol_docstring": "    \"\"\"Solve a unary negation problem\"\"\"",
    "sol_bodies": [
      "    return - a"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "IntNeg:1",
    "sat": "def sat(x: int, a=-7788910835979672):\n    return -x == a",
    "ans_type": "int",
    "sol_header": "def sol(a=-7788910835979672):",
    "sol_docstring": "    \"\"\"Solve a unary negation problem\"\"\"",
    "sol_bodies": [
      "    return - a"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "IntNeg:2",
    "sat": "def sat(x: int, a=6734672221833987):\n    return -x == a",
    "ans_type": "int",
    "sol_header": "def sol(a=6734672221833987):",
    "sol_docstring": "    \"\"\"Solve a unary negation problem\"\"\"",
    "sol_bodies": [
      "    return - a"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "IntNeg:3",
    "sat": "def sat(x: int, a=-6405550227918699):\n    return -x == a",
    "ans_type": "int",
    "sol_header": "def sol(a=-6405550227918699):",
    "sol_docstring": "    \"\"\"Solve a unary negation problem\"\"\"",
    "sol_bodies": [
      "    return - a"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "IntNeg:4",
    "sat": "def sat(x: int, a=-5741705983914418):\n    return -x == a",
    "ans_type": "int",
    "sol_header": "def sol(a=-5741705983914418):",
    "sol_docstring": "    \"\"\"Solve a unary negation problem\"\"\"",
    "sol_bodies": [
      "    return - a"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "IntSum:0",
    "sat": "def sat(x: int, a=1073258, b=72352549):\n    return a + x == b",
    "ans_type": "int",
    "sol_header": "def sol(a=1073258, b=72352549):",
    "sol_docstring": "    \"\"\"Solve a sum problem\"\"\"",
    "sol_bodies": [
      "    return b - a"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "IntSum:1",
    "sat": "def sat(x: int, a=7176599374880969, b=1013347182263591):\n    return a + x == b",
    "ans_type": "int",
    "sol_header": "def sol(a=7176599374880969, b=1013347182263591):",
    "sol_docstring": "    \"\"\"Solve a sum problem\"\"\"",
    "sol_bodies": [
      "    return b - a"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "IntSum:2",
    "sat": "def sat(x: int, a=-6408240447142191, b=7741323537672506):\n    return a + x == b",
    "ans_type": "int",
    "sol_header": "def sol(a=-6408240447142191, b=7741323537672506):",
    "sol_docstring": "    \"\"\"Solve a sum problem\"\"\"",
    "sol_bodies": [
      "    return b - a"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "IntSum:3",
    "sat": "def sat(x: int, a=1918969259925371, b=3648647147996329):\n    return a + x == b",
    "ans_type": "int",
    "sol_header": "def sol(a=1918969259925371, b=3648647147996329):",
    "sol_docstring": "    \"\"\"Solve a sum problem\"\"\"",
    "sol_bodies": [
      "    return b - a"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "IntSum:4",
    "sat": "def sat(x: int, a=6476308373242647, b=-1096573562602401):\n    return a + x == b",
    "ans_type": "int",
    "sol_header": "def sol(a=6476308373242647, b=-1096573562602401):",
    "sol_docstring": "    \"\"\"Solve a sum problem\"\"\"",
    "sol_bodies": [
      "    return b - a"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "IntSub:0",
    "sat": "def sat(x: int, a=-382, b=14546310):\n    return x - a == b",
    "ans_type": "int",
    "sol_header": "def sol(a=-382, b=14546310):",
    "sol_docstring": "    \"\"\"Solve a subtraction problem\"\"\"",
    "sol_bodies": [
      "    return a + b"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "IntSub:1",
    "sat": "def sat(x: int, a=4461955033869751, b=-3951840325269410):\n    return x - a == b",
    "ans_type": "int",
    "sol_header": "def sol(a=4461955033869751, b=-3951840325269410):",
    "sol_docstring": "    \"\"\"Solve a subtraction problem\"\"\"",
    "sol_bodies": [
      "    return a + b"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "IntSub:2",
    "sat": "def sat(x: int, a=9688203125538303, b=-293093369321912):\n    return x - a == b",
    "ans_type": "int",
    "sol_header": "def sol(a=9688203125538303, b=-293093369321912):",
    "sol_docstring": "    \"\"\"Solve a subtraction problem\"\"\"",
    "sol_bodies": [
      "    return a + b"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "IntSub:3",
    "sat": "def sat(x: int, a=-8057207922876252, b=-3934955257447294):\n    return x - a == b",
    "ans_type": "int",
    "sol_header": "def sol(a=-8057207922876252, b=-3934955257447294):",
    "sol_docstring": "    \"\"\"Solve a subtraction problem\"\"\"",
    "sol_bodies": [
      "    return a + b"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "IntSub:4",
    "sat": "def sat(x: int, a=-5902383651753979, b=304676399871652):\n    return x - a == b",
    "ans_type": "int",
    "sol_header": "def sol(a=-5902383651753979, b=304676399871652):",
    "sol_docstring": "    \"\"\"Solve a subtraction problem\"\"\"",
    "sol_bodies": [
      "    return a + b"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "IntSub2:0",
    "sat": "def sat(x: int, a=8665464, b=-93206):\n    return a - x == b",
    "ans_type": "int",
    "sol_header": "def sol(a=8665464, b=-93206):",
    "sol_docstring": "    \"\"\"Solve a subtraction problem\"\"\"",
    "sol_bodies": [
      "    return a - b"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "IntSub2:1",
    "sat": "def sat(x: int, a=1954051265970332, b=1312727165482691):\n    return a - x == b",
    "ans_type": "int",
    "sol_header": "def sol(a=1954051265970332, b=1312727165482691):",
    "sol_docstring": "    \"\"\"Solve a subtraction problem\"\"\"",
    "sol_bodies": [
      "    return a - b"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "IntSub2:2",
    "sat": "def sat(x: int, a=-1159353965692778, b=4654551691407885):\n    return a - x == b",
    "ans_type": "int",
    "sol_header": "def sol(a=-1159353965692778, b=4654551691407885):",
    "sol_docstring": "    \"\"\"Solve a subtraction problem\"\"\"",
    "sol_bodies": [
      "    return a - b"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "IntSub2:3",
    "sat": "def sat(x: int, a=7793575617602525, b=-4351726326349125):\n    return a - x == b",
    "ans_type": "int",
    "sol_header": "def sol(a=7793575617602525, b=-4351726326349125):",
    "sol_docstring": "    \"\"\"Solve a subtraction problem\"\"\"",
    "sol_bodies": [
      "    return a - b"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "IntSub2:4",
    "sat": "def sat(x: int, a=-8783800228130606, b=-508993556991975):\n    return a - x == b",
    "ans_type": "int",
    "sol_header": "def sol(a=-8783800228130606, b=-508993556991975):",
    "sol_docstring": "    \"\"\"Solve a subtraction problem\"\"\"",
    "sol_bodies": [
      "    return a - b"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "IntMul:0",
    "sat": "def sat(n: int, a=14302, b=5):\n    return b * n + (a % b) == a",
    "ans_type": "int",
    "sol_header": "def sol(a=14302, b=5):",
    "sol_docstring": "    \"\"\"Solve a multiplication problem\"\"\"",
    "sol_bodies": [
      "    return a // b"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "IntMul:1",
    "sat": "def sat(n: int, a=-646156, b=-63):\n    return b * n + (a % b) == a",
    "ans_type": "int",
    "sol_header": "def sol(a=-646156, b=-63):",
    "sol_docstring": "    \"\"\"Solve a multiplication problem\"\"\"",
    "sol_bodies": [
      "    return a // b"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "IntMul:2",
    "sat": "def sat(n: int, a=159568, b=59):\n    return b * n + (a % b) == a",
    "ans_type": "int",
    "sol_header": "def sol(a=159568, b=59):",
    "sol_docstring": "    \"\"\"Solve a multiplication problem\"\"\"",
    "sol_bodies": [
      "    return a // b"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "IntMul:3",
    "sat": "def sat(n: int, a=-141336, b=72):\n    return b * n + (a % b) == a",
    "ans_type": "int",
    "sol_header": "def sol(a=-141336, b=72):",
    "sol_docstring": "    \"\"\"Solve a multiplication problem\"\"\"",
    "sol_bodies": [
      "    return a // b"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "IntMul:4",
    "sat": "def sat(n: int, a=855955, b=33):\n    return b * n + (a % b) == a",
    "ans_type": "int",
    "sol_header": "def sol(a=855955, b=33):",
    "sol_docstring": "    \"\"\"Solve a multiplication problem\"\"\"",
    "sol_bodies": [
      "    return a // b"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "IntDiv:0",
    "sat": "def sat(n: int, a=3, b=23463462):\n    return b // n == a",
    "ans_type": "int",
    "sol_header": "def sol(a=3, b=23463462):",
    "sol_docstring": "    \"\"\"Solve a division problem\"\"\"",
    "sol_bodies": [
      "    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "IntDiv:1",
    "sat": "def sat(n: int, a=-1, b=1594400229362061):\n    return b // n == a",
    "ans_type": "int",
    "sol_header": "def sol(a=-1, b=1594400229362061):",
    "sol_docstring": "    \"\"\"Solve a division problem\"\"\"",
    "sol_bodies": [
      "    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "IntDiv:2",
    "sat": "def sat(n: int, a=12, b=-9988218457242775):\n    return b // n == a",
    "ans_type": "int",
    "sol_header": "def sol(a=12, b=-9988218457242775):",
    "sol_docstring": "    \"\"\"Solve a division problem\"\"\"",
    "sol_bodies": [
      "    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "IntDiv:3",
    "sat": "def sat(n: int, a=0, b=-1230085432451862):\n    return b // n == a",
    "ans_type": "int",
    "sol_header": "def sol(a=0, b=-1230085432451862):",
    "sol_docstring": "    \"\"\"Solve a division problem\"\"\"",
    "sol_bodies": [
      "    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "IntDiv:4",
    "sat": "def sat(n: int, a=1, b=9554566410382856):\n    return b // n == a",
    "ans_type": "int",
    "sol_header": "def sol(a=1, b=9554566410382856):",
    "sol_docstring": "    \"\"\"Solve a division problem\"\"\"",
    "sol_bodies": [
      "    if a == 0:\n        return 2 * b\n    for n in [b // a, b // a - 1, b // a + 1]:\n        if b // n == a:\n            return n"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "IntDiv2:0",
    "sat": "def sat(n: int, a=345346363, b=10):\n    return n // b == a",
    "ans_type": "int",
    "sol_header": "def sol(a=345346363, b=10):",
    "sol_docstring": "    \"\"\"Find n that when divided by b is a\"\"\"",
    "sol_bodies": [
      "    return a * b"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "IntDiv2:1",
    "sat": "def sat(n: int, a=-3411193412414137, b=-9070455318026063):\n    return n // b == a",
    "ans_type": "int",
    "sol_header": "def sol(a=-3411193412414137, b=-9070455318026063):",
    "sol_docstring": "    \"\"\"Find n that when divided by b is a\"\"\"",
    "sol_bodies": [
      "    return a * b"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "IntDiv2:2",
    "sat": "def sat(n: int, a=-1950797984487873, b=6211965468307518):\n    return n // b == a",
    "ans_type": "int",
    "sol_header": "def sol(a=-1950797984487873, b=6211965468307518):",
    "sol_docstring": "    \"\"\"Find n that when divided by b is a\"\"\"",
    "sol_bodies": [
      "    return a * b"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "IntDiv2:3",
    "sat": "def sat(n: int, a=1186580710227962, b=5023840456205809):\n    return n // b == a",
    "ans_type": "int",
    "sol_header": "def sol(a=1186580710227962, b=5023840456205809):",
    "sol_docstring": "    \"\"\"Find n that when divided by b is a\"\"\"",
    "sol_bodies": [
      "    return a * b"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "IntDiv2:4",
    "sat": "def sat(n: int, a=6976962948831358, b=7353202892973126):\n    return n // b == a",
    "ans_type": "int",
    "sol_header": "def sol(a=6976962948831358, b=7353202892973126):",
    "sol_docstring": "    \"\"\"Find n that when divided by b is a\"\"\"",
    "sol_bodies": [
      "    return a * b"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "IntSquareRoot:0",
    "sat": "def sat(x: int, a=10201202001):\n    return x ** 2 == a",
    "ans_type": "int",
    "sol_header": "def sol(a=10201202001):",
    "sol_docstring": "    \"\"\"Compute an integer that when squared equals perfect-square a.\"\"\"",
    "sol_bodies": [
      "    return int(a ** 0.5)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "IntSquareRoot:1",
    "sat": "def sat(x: int, a=2617350631613713636):\n    return x ** 2 == a",
    "ans_type": "int",
    "sol_header": "def sol(a=2617350631613713636):",
    "sol_docstring": "    \"\"\"Compute an integer that when squared equals perfect-square a.\"\"\"",
    "sol_bodies": [
      "    return int(a ** 0.5)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "IntSquareRoot:2",
    "sat": "def sat(x: int, a=100703210763886864):\n    return x ** 2 == a",
    "ans_type": "int",
    "sol_header": "def sol(a=100703210763886864):",
    "sol_docstring": "    \"\"\"Compute an integer that when squared equals perfect-square a.\"\"\"",
    "sol_bodies": [
      "    return int(a ** 0.5)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "IntSquareRoot:3",
    "sat": "def sat(x: int, a=12515426721927424):\n    return x ** 2 == a",
    "ans_type": "int",
    "sol_header": "def sol(a=12515426721927424):",
    "sol_docstring": "    \"\"\"Compute an integer that when squared equals perfect-square a.\"\"\"",
    "sol_bodies": [
      "    return int(a ** 0.5)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "IntSquareRoot:4",
    "sat": "def sat(x: int, a=717898768141464900):\n    return x ** 2 == a",
    "ans_type": "int",
    "sol_header": "def sol(a=717898768141464900):",
    "sol_docstring": "    \"\"\"Compute an integer that when squared equals perfect-square a.\"\"\"",
    "sol_bodies": [
      "    return int(a ** 0.5)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "IntNegSquareRoot:0",
    "sat": "def sat(n: int, a=10000200001):\n    return a == n * n and n < 0",
    "ans_type": "int",
    "sol_header": "def sol(a=10000200001):",
    "sol_docstring": "    \"\"\"Find a negative integer that when squared equals perfect-square a.\"\"\"",
    "sol_bodies": [
      "    return -int(a ** 0.5)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "IntNegSquareRoot:1",
    "sat": "def sat(n: int, a=1153723843107852129):\n    return a == n * n and n < 0",
    "ans_type": "int",
    "sol_header": "def sol(a=1153723843107852129):",
    "sol_docstring": "    \"\"\"Find a negative integer that when squared equals perfect-square a.\"\"\"",
    "sol_bodies": [
      "    return -int(a ** 0.5)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "IntNegSquareRoot:2",
    "sat": "def sat(n: int, a=1940392439040171204):\n    return a == n * n and n < 0",
    "ans_type": "int",
    "sol_header": "def sol(a=1940392439040171204):",
    "sol_docstring": "    \"\"\"Find a negative integer that when squared equals perfect-square a.\"\"\"",
    "sol_bodies": [
      "    return -int(a ** 0.5)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "IntNegSquareRoot:3",
    "sat": "def sat(n: int, a=1256820805863398416):\n    return a == n * n and n < 0",
    "ans_type": "int",
    "sol_header": "def sol(a=1256820805863398416):",
    "sol_docstring": "    \"\"\"Find a negative integer that when squared equals perfect-square a.\"\"\"",
    "sol_bodies": [
      "    return -int(a ** 0.5)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "IntNegSquareRoot:4",
    "sat": "def sat(n: int, a=1001282815140004804):\n    return a == n * n and n < 0",
    "ans_type": "int",
    "sol_header": "def sol(a=1001282815140004804):",
    "sol_docstring": "    \"\"\"Find a negative integer that when squared equals perfect-square a.\"\"\"",
    "sol_bodies": [
      "    return -int(a ** 0.5)"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "FloatSquareRoot:0",
    "sat": "def sat(x: float, a=1020):\n    return abs(x ** 2 - a) < 10 ** -3",
    "ans_type": "float",
    "sol_header": "def sol(a=1020):",
    "sol_docstring": "    \"\"\"Find a number that when squared is close to a.\"\"\"",
    "sol_bodies": [
      "    return a ** 0.5"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "FloatSquareRoot:1",
    "sat": "def sat(x: float, a=6173281296):\n    return abs(x ** 2 - a) < 10 ** -3",
    "ans_type": "float",
    "sol_header": "def sol(a=6173281296):",
    "sol_docstring": "    \"\"\"Find a number that when squared is close to a.\"\"\"",
    "sol_bodies": [
      "    return a ** 0.5"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "FloatSquareRoot:2",
    "sat": "def sat(x: float, a=7987622700):\n    return abs(x ** 2 - a) < 10 ** -3",
    "ans_type": "float",
    "sol_header": "def sol(a=7987622700):",
    "sol_docstring": "    \"\"\"Find a number that when squared is close to a.\"\"\"",
    "sol_bodies": [
      "    return a ** 0.5"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "FloatSquareRoot:3",
    "sat": "def sat(x: float, a=2732656229):\n    return abs(x ** 2 - a) < 10 ** -3",
    "ans_type": "float",
    "sol_header": "def sol(a=2732656229):",
    "sol_docstring": "    \"\"\"Find a number that when squared is close to a.\"\"\"",
    "sol_bodies": [
      "    return a ** 0.5"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "FloatSquareRoot:4",
    "sat": "def sat(x: float, a=1873585696):\n    return abs(x ** 2 - a) < 10 ** -3",
    "ans_type": "float",
    "sol_header": "def sol(a=1873585696):",
    "sol_docstring": "    \"\"\"Find a number that when squared is close to a.\"\"\"",
    "sol_bodies": [
      "    return a ** 0.5"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "FloatNegSquareRoot:0",
    "sat": "def sat(x: float, a=1020):\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "ans_type": "float",
    "sol_header": "def sol(a=1020):",
    "sol_docstring": "    \"\"\"Find a negative number that when squared is close to a.\"\"\"",
    "sol_bodies": [
      "    return -a ** 0.5"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "FloatNegSquareRoot:1",
    "sat": "def sat(x: float, a=2681275499):\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "ans_type": "float",
    "sol_header": "def sol(a=2681275499):",
    "sol_docstring": "    \"\"\"Find a negative number that when squared is close to a.\"\"\"",
    "sol_bodies": [
      "    return -a ** 0.5"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "FloatNegSquareRoot:2",
    "sat": "def sat(x: float, a=1363713245):\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "ans_type": "float",
    "sol_header": "def sol(a=1363713245):",
    "sol_docstring": "    \"\"\"Find a negative number that when squared is close to a.\"\"\"",
    "sol_bodies": [
      "    return -a ** 0.5"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "FloatNegSquareRoot:3",
    "sat": "def sat(x: float, a=3858703402):\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "ans_type": "float",
    "sol_header": "def sol(a=3858703402):",
    "sol_docstring": "    \"\"\"Find a negative number that when squared is close to a.\"\"\"",
    "sol_bodies": [
      "    return -a ** 0.5"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "FloatNegSquareRoot:4",
    "sat": "def sat(x: float, a=3804892221):\n    return abs(x ** 2 - a) < 10 ** -3 and x < 0",
    "ans_type": "float",
    "sol_header": "def sol(a=3804892221):",
    "sol_docstring": "    \"\"\"Find a negative number that when squared is close to a.\"\"\"",
    "sol_bodies": [
      "    return -a ** 0.5"
    ],
    "module": "trivial_inverse.py",
    "notes": "",
    "weight": 0.2
  },
  {
    "name": "Tutorial1:0",
    "sat": "def sat(s: str):\n    return \"Hello \" + s == \"Hello world\"",
    "ans_type": "str",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"Find a string that when concatenated onto 'Hello ' gives 'Hello world'.\"\"\"",
    "sol_bodies": [
      "    return \"world\""
    ],
    "module": "tutorial.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "Tutorial2:0",
    "sat": "def sat(s: str):\n    return \"Hello \" + s[::-1] == \"Hello world\"",
    "ans_type": "str",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"Find a string that when reversed and concatenated onto 'Hello ' gives 'Hello world'.\"\"\"",
    "sol_bodies": [
      "    return \"world\"[::-1]"
    ],
    "module": "tutorial.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "Tutorial3:0",
    "sat": "def sat(x: List[int]):\n    return len(x) == 2 and sum(x) == 3",
    "ans_type": "List[int]",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"Find a list of two integers whose sum is 3.\"\"\"",
    "sol_bodies": [
      "    return [1, 2]"
    ],
    "module": "tutorial.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "Tutorial4:0",
    "sat": "def sat(s: List[str]):\n    return len(set(s)) == 1000 and all((x.count(\"a\") > x.count(\"b\")) and ('b' in x) for x in s)",
    "ans_type": "List[str]",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"Find a list of 1000 distinct strings which each have more 'a's than 'b's and at least one 'b'.\"\"\"",
    "sol_bodies": [
      "    return [\"a\" * (i + 2) + \"b\" for i in range(1000)]"
    ],
    "module": "tutorial.py",
    "notes": "",
    "weight": 1.0
  },
  {
    "name": "Tutorial5:0",
    "sat": "def sat(n: int):\n    return str(n * n).startswith(\"123456789\")",
    "ans_type": "int",
    "sol_header": "def sol():",
    "sol_docstring": "    \"\"\"Find an integer whose perfect square begins with 123456789 in its decimal representation.\"\"\"",
    "sol_bodies": [
      "    return int(int(\"123456789\" + \"0\" * 9) ** 0.5) + 1"
    ],
    "module": "tutorial.py",
    "notes": "",
    "weight": 1.0
  }
]